{"question": "Play songs from the artists Taylor Swift and Maroon 5, with a play time of 20 minutes and 15 minutes respectively, on Spotify.", "function": [{"name": "spotify_play", "description": "Play specific tracks from a given artist for a specific time duration.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "The artist whose songs you want to play."}, "duration": {"type": "integer", "description": "The duration for which the songs should be played, in minutes."}}, "required": ["artist", "duration"]}}], "ground_truth_func": ["spotify.play(artist=\"Taylor Swift\", duration=20)", "spotify.play(artist=\"Maroon 5\", duration=15)"], "model_generated_func": ["spotify_play(artist = 'Taylor Swift', duration = 20)", "spotify_play(artist = 'Maroon 5', duration = 15)"]}
{"question": "Calculate the induced electromagnetic force for a magnetic field of 5 Tesla, area of 2 square meters and change in time of 4 seconds, then repeat with a change in time of 10 seconds.", "function": [{"name": "calculate_em_force", "description": "Calculate the induced electromagnetic force based on Faraday's Law of Electromagnetic Induction, given the magnetic field (in Tesla), change in magnetic field area (in square meters), and the change in time (in seconds).", "parameters": {"type": "object", "properties": {"b_field": {"type": "number", "description": "The magnetic field in Tesla."}, "area": {"type": "number", "description": "The change in area of magnetic field in square meters."}, "d_time": {"type": "number", "description": "The change in time in seconds."}}, "required": ["b_field", "area", "d_time"]}}], "ground_truth_func": ["calculate_em_force(b_field=5, area=2, d_time=4)", "calculate_em_force(b_field=5, area=2, d_time=10)"], "model_generated_func": ["calculate_em_force(b_field = 5, area = 2, d_time = 4)", "calculate_em_force(b_field = 5, area = 2, d_time = 10)"]}
{"question": "Calculate the resistance of a wire with a length of 5m and cross sectional area 0.01m\u00b2 with resistivity of copper and aluminum", "function": [{"name": "calculate_resistance", "description": "Calculate the resistance of a wire using resistivity, length, and cross-sectional area.", "parameters": {"type": "object", "properties": {"length": {"type": "number", "description": "The length of the wire in meters."}, "area": {"type": "number", "description": "The cross-sectional area of the wire in square meters."}, "resistivity": {"type": "string", "description": "Resistivity of the material (Default: 'copper'). Allowed values: 'copper', 'aluminum'"}}, "required": ["length", "area"]}}], "ground_truth_func": ["calculate_resistance(length=5, area=0.01,resistivity='copper')", "calculate_resistance(length=5, area=0.01, resistivity='aluminum')"], "model_generated_func": ["calculate_resistance(length = 5, area = 0.01, resistivity = 'copper')", "calculate_resistance(length = 5, area = 0.01, resistivity = 'aluminum')"]}
{"question": "Get the protein sequence of human HbA1c, normal hemoglobin, and rat hemoglobin and their 3D models", "function": [{"name": "protein_info_get_sequence_and_3D", "description": "Retrive the sequence and 3D models of proteins.", "parameters": {"type": "object", "properties": {"protein_name": {"type": "string", "description": "The name of the protein."}}, "required": ["protein_name"], "optional": {"model_3d": {"type": "boolean", "description": "Set true to get 3D model of the protein."}}}}], "ground_truth_func": ["protein_info.get_sequence_and_3D(protein_name='human HbA1c', model_3d=True)", "protein_info.get_sequence_and_3D(protein_name='normal hemoglobin', model_3d=True)", "protein_info.get_sequence_and_3D(protein_name='rat hemoglobin', model_3d=True)"], "model_generated_func": ["protein_info_get_sequence_and_3D(protein_name = 'human HbA1c')", "protein_info_get_sequence_and_3D(protein_name = 'normal hemoglobin')", "protein_info_get_sequence_and_3D(protein_name = 'rat hemoglobin', model_3d = True)"]}
{"question": "Calculate the body mass index for a person who is 6 feet tall and weighs 80 kg, also for a person who is 5.6 feet and weighs 60 kg.", "function": [{"name": "calculate_bmi", "description": "Calculate body mass index for a person based on their weight and height.", "parameters": {"type": "object", "properties": {"height": {"type": "number", "description": "The height of the person in feet."}, "weight": {"type": "number", "description": "The weight of the person in kilograms."}}, "required": ["height", "weight"]}}], "ground_truth_func": ["calculate_bmi(height=6, weight=80)", "calculate_bmi(height=5.6, weight=60)"], "model_generated_func": ["calculate_bmi(height = 6, weight = 80)", "calculate_bmi(height = 5.6, weight = 60)"]}
{"question": "Find the list of TV shows and their ratings on Netflix for 'Friends', and Hulu for 'The Office' and 'Stranger Things' and sort by its rating", "function": [{"name": "streaming_services_shows_list_and_ratings", "description": "Get a list of shows and their ratings on specific streaming services.", "parameters": {"type": "object", "properties": {"streaming_service": {"type": "string", "description": "Name of the streaming service. E.g., Netflix, Hulu, etc."}, "show_list": {"type": "array", "items": {"type": "string"}, "description": "List of show names to search for on the platform."}, "sort_by_rating": {"type": "boolean", "description": "If set to true, returns the list sorted by ratings. Defaults to false."}}, "required": ["streaming_service", "show_list"]}}], "ground_truth_func": ["streaming_services.shows_list_and_ratings(streaming_service='Netflix', show_list=['Friends'], sort_by_rating=True)", "streaming_services.shows_list_and_ratings(streaming_service='Hulu', show_list=['The Office', 'Stranger Things'], sort_by_rating=True)"], "model_generated_func": ["streaming_services_shows_list_and_ratings(streaming_service = 'Netflix', show_list = ['Friends'], sort_by_rating = True)", "streaming_services_shows_list_and_ratings(streaming_service = 'Hulu', show_list = ['The Office', 'Stranger Things'], sort_by_rating = True)"]}
{"question": "Calculate the amount of sales tax to be added on a purchase amount of $30.45 in Chicago, Illinois, $52.33 in Sacramento, California and $11.23 in Portland, Oregon.", "function": [{"name": "calculate_sales_tax", "description": "Calculate the sales tax for a given purchase amount in a specific city and state.", "parameters": {"type": "object", "properties": {"purchase_amount": {"type": "number", "description": "The purchase amount."}, "city": {"type": "string", "description": "The city where the purchase is made."}, "state": {"type": "string", "description": "The state where the purchase is made."}}, "required": ["purchase_amount", "city", "state"]}}], "ground_truth_func": ["calculate_sales_tax(purchase_amount=30.45, city='Chicago', state='IL')", "calculate_sales_tax(purchase_amount=52.33, city='Sacramento', state='CA')", "calculate_sales_tax(purchase_amount=11.23, city='Portland', state='OR')"], "model_generated_func": ["calculate_sales_tax(purchase_amount = 30.45, city = 'Chicago', state = 'Illinois')", "calculate_sales_tax(purchase_amount = 52.33, city = 'Sacramento', state = 'California')", "calculate_sales_tax(purchase_amount = 11.23, city = 'Portland', state = 'Oregon')"]}
{"question": "Find the factorial of 5,10 and 15.", "function": [{"name": "math_factorial", "description": "Calculate the factorial of a given positive integer.", "parameters": {"type": "object", "properties": {"number": {"type": "number", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}], "ground_truth_func": ["math.factorial(number=5)", "math.factorial(number=10)", "math.factorial(number=15)"], "model_generated_func": ["math_factorial(number = 5)", "math_factorial(number = 10)", "math_factorial(number = 15)"]}
{"question": "Fetch the population of New York City, NY,  and Los Angeles, CA from US Census Database, and also get the population data for Alaska state and USA", "function": [{"name": "database_us_census_get_population", "description": "Fetch population data from US Census database.", "parameters": {"type": "object", "properties": {"area": {"type": "string", "description": "Name of the city, state, or country."}, "type": {"type": "string", "description": "Specify whether the area is city/state/country."}, "year": {"type": "integer", "description": "Year of the data", "default": "Current Year"}}, "required": ["area", "type"]}}], "ground_truth_func": ["database_us_census.get_population(area='New York City, NY', type='city')", "database_us_census.get_population(area='Los Angeles, CA', type='city')", "database_us_census.get_population(area='Alaska', type='state')", "database_us_census.get_population(area='USA', type='country')"], "model_generated_func": ["database_us_census_get_population(area = 'New York City', type = 'city')", "database_us_census_get_population(area = 'Los Angeles', type = 'city')", "database_us_census_get_population(area = 'Alaska', type = 'state')", "database_us_census_get_population(area = 'USA', type = 'country')"]}
{"question": "Find two movie theatres near San Diego with availability for Tenet at 5 pm and No Time To Die at 7:30 pm.", "function": [{"name": "find_movie_showing", "description": "Find local movie theatres and their schedule for a specific movie", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. San Diego, CA"}, "movie": {"type": "array", "items": {"type": "string", "enum": ["Tenet", "No Time To Die"]}, "description": "Preferred movie to watch."}, "time": {"type": "array", "items": {"type": "string", "description": "Show time for each movie"}}}, "required": ["location", "movie", "time"]}}], "ground_truth_func": ["find_movie_showing(location='San Diego', movie='Tenet', time='5pm')", "find_movie_showing(location='San Diego', movie='No Time To Die', time='7:30pm')"], "model_generated_func": ["find_movie_showing(location = 'San Diego, CA', movie = ['Tenet', 'No Time To Die'], time = ['5 pm', '7:30 pm'])"]}
{"question": "Compute the Pythagorean Theorem of two side lengths: 3 and 4, 5 and 12.", "function": [{"name": "math_pythagoras", "description": "Calculates the hypotenuse of a right triangle based on the lengths of the other two sides.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Length of one of the sides of a right triangle."}, "b": {"type": "number", "description": "Length of the other side of a right triangle."}}, "required": ["a", "b"]}}], "ground_truth_func": ["math.pythagoras(a=3, b=4)", "math.pythagoras(a=5, b=12)"], "model_generated_func": ["math_pythagoras(a = 3, b = 4)", "math_pythagoras(a = 5, b = 12)"]}
{"question": "Predict house price for a house of size 3000 sq ft. in location New York and 4000 sq ft. in Los Angeles using Machine Learning Model.", "function": [{"name": "ml_predict_house_price", "description": "Predict house price using Machine Learning model given the house size and location", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of the house"}, "size": {"type": "integer", "description": "Size of the house in square feet"}}, "required": ["location", "size"]}}], "ground_truth_func": ["ml.predict_house_price(location='New York', size=3000)", "ml.predict_house_price(location='Los Angeles', size=4000)"], "model_generated_func": ["ml_predict_house_price(location = 'New York', size = 3000)", "ml_predict_house_price(location = 'Los Angeles', size = 4000)"]}
{"question": "Build a decision tree classifier model with gini criterion, maximum depth of 5 and random state of 1, another with entropy criterion, maximum depth of 10 and random state of 1.", "function": [{"name": "model_DecisionTreeClassifier", "description": "Build a Decision Tree Classifier model with provided criteria", "parameters": {"type": "object", "properties": {"criterion": {"type": "string", "description": "The function to measure the quality of a split, either 'gini' for the Gini impurity or 'entropy' for the information gain."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree, specifying how deep the tree can be."}, "random_state": {"type": "integer", "description": "Controls the randomness of the estimator"}}, "required": ["criterion", "max_depth", "random_state"]}}], "ground_truth_func": ["model.DecisionTreeClassifier(criterion='gini', max_depth=5, random_state=1)", "model.DecisionTreeClassifier(criterion='entropy', max_depth=10, random_state=1)"], "model_generated_func": ["model_DecisionTreeClassifier(criterion = 'gini', max_depth = 5, random_state = 1)", "model_DecisionTreeClassifier(criterion = 'entropy', max_depth = 10, random_state = 1)"]}
{"question": "Can you give me 95% confidence interval for a sample mean with standard deviation of 10, sample size of 50 and sample mean of 25? And can you do the same but for a sample size of 150 instead?", "function": [{"name": "confidence_interval_calculate", "description": "Calculate the confidence interval for a mean.", "parameters": {"type": "object", "properties": {"sample_std_dev": {"type": "number", "description": "The standard deviation of the sample."}, "sample_size": {"type": "integer", "description": "The size of the sample."}, "sample_mean": {"type": "number", "description": "The mean of the sample."}, "confidence_level": {"type": "number", "description": "The level of confidence. Default is 0.95."}}, "required": ["sample_std_dev", "sample_size", "sample_mean"]}}], "ground_truth_func": ["confidence_interval.calculate(sample_std_dev=10, sample_size=50, sample_mean=25)", "confidence_interval.calculate(sample_std_dev=10, sample_size=150, sample_mean=25)"], "model_generated_func": ["confidence_interval_calculate(sample_std_dev = 10, sample_size = 50, sample_mean = 25, confidence_level = 0.95)", "confidence_interval_calculate(sample_std_dev = 10, sample_size = 150, sample_mean = 25, confidence_level = 0.95)"]}
{"question": "Calculate the Present Value of an investment paying $1000 per year, with an interest rate of 5%, for 10, 20 and 30 years.", "function": [{"name": "calculate_present_value", "description": "Calculate the present value of a future cash flows stream.", "parameters": {"type": "object", "properties": {"payment_per_year": {"type": "number", "description": "The payment received per year."}, "interest_rate": {"type": "number", "description": "The interest rate applied per period."}, "years": {"type": "integer", "description": "The total number of years."}}, "required": ["payment_per_year", "interest_rate", "years"]}}], "ground_truth_func": ["calculate_present_value(payment_per_year=1000, interest_rate=0.05, years=10)", "calculate_present_value(payment_per_year=1000, interest_rate=0.05, years=20)", "calculate_present_value(payment_per_year=1000, interest_rate=0.05, years=30)"], "model_generated_func": ["calculate_present_value(payment_per_year = 1000, interest_rate = 0.05, years = 10)", "calculate_present_value(payment_per_year = 1000, interest_rate = 0.05, years = 20)", "calculate_present_value(payment_per_year = 1000, interest_rate = 0.05, years = 30)"]}
{"question": "What will be the capital gains tax for a short term capital gains of $15000, long term gains of $25000 in the state of California and $20000 short term, $50000 long term in Florida?", "function": [{"name": "calculate_capital_gains_tax", "description": "Calculate the capital gains tax for a given gains type and amount", "parameters": {"type": "object", "properties": {"short_term_gain": {"type": "number", "description": "The short term capital gain amount."}, "long_term_gain": {"type": "number", "description": "The long term capital gain amount."}, "state": {"type": "string", "description": "The state where the income is generated.", "default": "federal"}}, "required": ["short_term_gain", "long_term_gain"]}}], "ground_truth_func": ["calculate_capital_gains_tax(short_term_gain=15000, long_term_gain=25000, state='CA')", "calculate_capital_gains_tax(short_term_gain=20000, long_term_gain=50000, state='FL')"], "model_generated_func": ["calculate_capital_gains_tax(short_term_gain = 15000, long_term_gain = 25000, state = 'California')", "calculate_capital_gains_tax(short_term_gain = 20000, long_term_gain = 50000, state = 'Florida')"]}
{"question": "Calculate return on investment for an initial investment of $2000 with a gain of $500. Do the same calculation for an initial investment of $5000 with a loss of $1000.", "function": [{"name": "calculate_return_on_investment", "description": "Calculate the return on investment given an initial investment and a gain or loss.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial amount of money invested."}, "gain_loss": {"type": "number", "description": "The amount gained or lost. If loss, provide as negative value."}}, "required": ["initial_investment", "gain_loss"]}}], "ground_truth_func": ["calculate_return_on_investment(initial_investment=2000, gain_loss=500)", "calculate_return_on_investment(initial_investment=5000, gain_loss=-1000)"], "model_generated_func": ["calculate_return_on_investment(initial_investment = 2000, gain_loss = 500)", "calculate_return_on_investment(initial_investment = 5000, gain_loss = -1000)"]}
{"question": "Get the latest closing prices and volumes for Apple Inc., Google LLC., and Microsoft Corporation in the New York Stock Exchange", "function": [{"name": "get_stock_data", "description": "Retrieve the most recent trading day's closing price and volume for a specified stock.", "parameters": {"type": "object", "properties": {"symbol": {"type": "string", "description": "The stock symbol of the company."}, "data_points": {"type": "array", "items": {"type": "string", "enum": ["price", "volume"]}, "description": "The type of data you want to retrieve for the stock. This can include closing price, opening price, volume, etc."}}, "required": ["symbol", "data_points"]}}], "ground_truth_func": ["get_stock_data(symbol='AAPL', data_points=['price', 'volume'])", "get_stock_data(symbol='GOOGL', data_points=['price', 'volume'])", "get_stock_data(symbol='MSFT', data_points=['price', 'volume'])"], "model_generated_func": ["get_stock_data(symbol = 'AAPL', data_points = ['price', 'volume'])", "get_stock_data(symbol = 'GOOG', data_points = ['price', 'volume'])", "get_stock_data(symbol = 'MSFT', data_points = ['price', 'volume'])"]}
{"question": "Calculate the Future Value of an investment of $1000 with an annual interest rate of 5% for 1,5 and 10 years.", "function": [{"name": "financials_calculate_future_value", "description": "Calculate the future value of an investment based on a constant interest rate.", "parameters": {"type": "object", "properties": {"present_value": {"type": "number", "description": "The present value or initial amount of the investment."}, "annual_interest_rate": {"type": "number", "description": "The annual interest rate as a decimal."}, "number_of_years": {"type": "integer", "description": "The number of years the money is invested for."}}, "required": ["present_value", "annual_interest_rate", "number_of_years"]}}], "ground_truth_func": ["financials.calculate_future_value(present_value=1000, annual_interest_rate=0.05, number_of_years=1)", "financials.calculate_future_value(present_value=1000, annual_interest_rate=0.05, number_of_years=5)", "financials.calculate_future_value(present_value=1000, annual_interest_rate=0.05, number_of_years=10)"], "model_generated_func": ["financials_calculate_future_value(present_value = 1000, annual_interest_rate = 0.05, number_of_years = 15)", "financials_calculate_future_value(present_value = 1000, annual_interest_rate = 0.05, number_of_years = 10)"]}
{"question": "Calculate the monthly mortgage payment for a loan amount of $400,000, with an annual interest rate of 4% and a loan term of 15, 20 and 30 years.", "function": [{"name": "calculate_mortgage_payment", "description": "Calculate the monthly mortgage payment for a given loan amount, interest rate, and loan term.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "number", "description": "The loan amount."}, "interest_rate": {"type": "number", "description": "The annual interest rate."}, "loan_term": {"type": "integer", "description": "The loan term in years."}}, "required": ["loan_amount", "interest_rate", "loan_term"]}}], "ground_truth_func": ["calculate_mortgage_payment(loan_amount=400000, interest_rate=0.04, loan_term=15)", "calculate_mortgage_payment(loan_amount=400000, interest_rate=0.04, loan_term=20)", "calculate_mortgage_payment(loan_amount=400000, interest_rate=0.04, loan_term=30)"], "model_generated_func": ["calculate_mortgage_payment(loan_amount = 400000, interest_rate = 0.04, loan_term = 15)", "calculate_mortgage_payment(loan_amount = 400000, interest_rate = 0.04, loan_term = 20)", "calculate_mortgage_payment(loan_amount = 400000, interest_rate = 0.04, loan_term = 30)"]}
{"question": "Can you check my loan eligibility for a home loan of amount $500,000 from HSBC with annual income $100,000 and for Wells Fargo for a amount of $700,000 with annual income of $120,000?", "function": [{"name": "loan_eligibility_check", "api_call": "loaneligibilitychecker/v1/check", "description": "Check for eligibility for a loan given income and loan amount", "parameters": {"type": "object", "properties": {"financial_institution": {"type": "string", "description": "The name of the financial institution e.g. HSBC"}, "loan_amount": {"type": "number", "description": "The loan amount that is requested"}, "annual_income": {"type": "number", "description": "Annual income of the applicant"}}, "required": ["financial_institution", "loan_amount", "annual_income"]}}], "ground_truth_func": ["loan_eligibility_check(financial_institution='HSBC', loan_amount=500000, annual_income=100000)", "loan_eligibility_check(financial_institution='Wells Fargo', loan_amount=700000, annual_income=120000)"], "model_generated_func": ["loan_eligibility_check(financial_institution = 'HSBC', loan_amount = 500000, annual_income = 100000)", "loan_eligibility_check(financial_institution = 'Wells Fargo', loan_amount = 700000, annual_income = 120000)"]}
{"question": "Show me all individuals who were convicted for money laundering from San Francisco in 2019 and ones convicted for the same in Texas in 2018", "function": [{"name": "law_crimes_search", "description": "Locate individuals based on their crime conviction and location.", "parameters": {"type": "object", "properties": {"crime": {"type": "string", "description": "Type of crime to search."}, "location": {"type": "string", "description": "City or state where the crime was committed."}, "year": {"type": "integer", "description": "The year when the crime was committed."}}, "required": ["crime", "location", "year"]}}], "ground_truth_func": ["law_crimes.search(crime=\"money laundering\", location=\"San Francisco\", year=2019)", "law_crimes.search(crime=\"money laundering\", location=\"Texas\", year=2018)"], "model_generated_func": ["law_crimes_search(crime = 'money laundering', location = 'San Francisco', year = 2019)", "law_crimes_search(crime = 'money laundering', location = 'Texas', year = 2018)"]}
{"question": "What is the status and scheduled trial date for case number XY1234 in Los Angeles County Court, and case number GH5678 in Orange County Court?", "function": [{"name": "court_info_get_case_status", "description": "Retrieves the status and trial dates for court cases from specified county courts.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The specific court case number."}, "court": {"type": "string", "description": "The county court where the case is filed."}, "details": {"type": "string", "enum": ["status", "trial_date"], "description": "Specific details required about the court case. Defaults to 'status'."}}, "required": ["case_number", "court"]}}], "ground_truth_func": ["court_info.get_case_status(case_number='XY1234', court='Los Angeles County Court', details=['status','trial_date'])", "court_info.get_case_status(case_number='GH5678', court='Orange County Court', details=['status','trial_date'])"], "model_generated_func": ["court_info_get_case_status(case_number = 'XY1234', court = 'Los Angeles County Court', details = 'trial_date')", "court_info_get_case_status(case_number = 'GH5678', court = 'Orange County Court', details = 'trial_date')"]}
{"question": "Please calculate the amount of alimony the payor spouse would have to pay to the recipient spouse in California for the next 10 years and 20 years if the payor spouse's monthly gross income is $10,000 and the recipient spouse's monthly gross income is $3,000.", "function": [{"name": "alimony_calculator_ca_calculate", "description": "Calculate the amount of alimony one spouse would have to pay to the other spouse in the state of California.", "parameters": {"type": "object", "properties": {"payor_income": {"type": "number", "description": "The monthly gross income of the payor spouse."}, "recipient_income": {"type": "number", "description": "The monthly gross income of the recipient spouse."}, "duration": {"type": "number", "description": "The duration of the alimony in years."}}, "required": ["payor_income", "recipient_income", "duration"]}}], "ground_truth_func": ["alimony_calculator.ca.calculate(payor_income=10000, recipient_income=3000, duration=10)", "alimony_calculator.ca.calculate(payor_income=10000, recipient_income=3000, duration=20)"], "model_generated_func": ["alimony_calculator_ca_calculate(payor_income = 10000, recipient_income = 3000, duration = 10)", "alimony_calculator_ca_calculate(payor_income = 10000, recipient_income = 3000, duration = 20)"]}
{"question": "Can you find me case law details of Case No 28473 and 64725, their history and details of litigants?", "function": [{"name": "law_case_get_details", "description": "Fetches detailed information on a specific case including its history and the litigants involved.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The unique number identifying the case."}, "include_history": {"type": "boolean", "description": "Flag indicating if case history should be included. Default is false."}, "include_litigants": {"type": "boolean", "description": "Flag indicating if litigant details should be included. Default is false."}}, "required": ["case_number"]}}], "ground_truth_func": ["law_case.get_details(case_number='28473', include_history=true, include_litigants=true)", "law_case.get_details(case_number='64725', include_history=true, include_litigants=true)"], "model_generated_func": ["law_case_get_details(case_number = '28473', include_history = True, include_litigants = True)", "law_case_get_details(case_number = '64725', include_history = True, include_litigants = True)"]}
{"question": "List all cases against a company named 'Dara Inc' filed in 2019, Also list cases filed in the year 2018 against the same company.", "function": [{"name": "lawsuit_lookup", "description": "Look up lawsuit cases against a company by year.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The year in which the lawsuit was filed."}}, "required": ["company_name", "year"]}}], "ground_truth_func": ["lawsuit.lookup(company_name='Dara Inc', year=2019)", "lawsuit.lookup(company_name='Dara Inc', year=2018)"], "model_generated_func": ["lawsuit_lookup(company_name = 'Dara Inc', year = 2019)", "lawsuit_lookup(company_name = 'Dara Inc', year = 2018)"]}
{"question": "Find details of lawsuits with case numbers '67813', '71249' filed in the New York District court for type 'Civil' and 'Criminal' cases.", "function": [{"name": "court_case_find", "description": "Locate details of court cases based on specific parameters like case number and case type.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and court where the lawsuit is filed."}, "case_number": {"type": "array", "items": {"type": "string"}, "description": "The unique case numbers of the lawsuits."}, "case_type": {"type": "string", "enum": ["Civil", "Criminal"], "description": "Type of the court case."}}, "required": ["location", "case_number"]}}], "ground_truth_func": ["court_case.find(location=\"New York District\", case_number=\"67813\", case_type=\"Civil\")", "court_case.find(location=\"New York District\", case_number=\"71249\", case_type=\"Criminal\")"], "model_generated_func": ["court_case_find(location = 'New York District Court', case_number = ['67813', '71249'], case_type = 'Civil')", "court_case_find(location = 'New York District Court', case_number = ['67813', '71249'], case_type = 'Criminal')"]}
{"question": "Find a nature reserve around Berkeley within 10 kilometers that has picnic tables and public restrooms, as well as one around Tokyo within 5 kilometers that has playgrounds and biking trails.", "function": [{"name": "nature_reserve_find_nearby", "description": "Locate nearby nature reserves based on specific criteria such as amenities and proximity.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to locate a nature reserve."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Picnic Tables", "Public Restrooms", "Playgrounds", "Biking Trails", "Hiking Trails", "Camping Grounds"]}, "description": "Preferred amenities in the nature reserve."}, "proximity": {"type": "integer", "description": "The radius within which to look for nature reserves in kilometers."}}, "required": ["location", "proximity", "amenities"]}}], "ground_truth_func": ["nature_reserve.find_nearby(location='Berkeley', amenities=['Picnic Tables', 'Public Restrooms'], proximity=10)", "nature_reserve.find_nearby(location='Tokyo', amenities=['Playgrounds', 'Biking Trails'], proximity=5)"], "model_generated_func": ["nature_reserve_find_nearby(location = 'Berkeley', amenities = ['Picnic Tables', 'Public Restrooms'], proximity = 10)", "nature_reserve_find_nearby(location = 'Tokyo', amenities = ['Playgrounds', 'Biking Trails'], proximity = 5)"]}
{"question": "What is the temperature right now and for the next three hours in Seattle and Los Angeles?", "function": [{"name": "get_current_and_future_temperature", "description": "Provides the current temperature and forecasts the temperature for the next few hours at a particular location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the temperature for."}, "hours": {"type": "integer", "description": "Number of hours for the temperature forecast."}}, "required": ["location", "hours"]}}], "ground_truth_func": ["get_current_and_future_temperature(location='Seattle', hours=3)", "get_current_and_future_temperature(location='Los Angeles', hours=3)"], "model_generated_func": ["get_current_and_future_temperature(location = 'Seattle', hours = 3)", "get_current_and_future_temperature(location = 'Los Angeles', hours = 3)"]}
{"question": "Find out how much waste a family of four generates in Los Angeles, assuming two children and two adults. Also, calculate waste production for a bachelor in New York.", "function": [{"name": "waste_calculation_calculate", "description": "Calculates the estimated waste generated by different population sizes in a specific location.", "parameters": {"type": "object", "properties": {"population": {"type": "object", "description": "The description of population. 'adults' is the number of adults in the household. 'children' is the number of children. 'singles' is the number of single adults living alone.", "required": ["adults", "children", "singles"]}, "location": {"type": "string", "description": "The city where the population resides."}}, "required": ["population", "location"]}}], "ground_truth_func": ["waste_calculation.calculate(population={'adults': 2, 'children': 2, 'singles': 0}, location='Los Angeles')", "waste_calculation.calculate(population={'adults': 0, 'children': 0, 'singles': 1}, location='New York')"], "model_generated_func": ["waste_calculation_calculate(population = {'adults': 2, 'children': 2, 'singles': 0}, location = 'Los Angeles')", "waste_calculation_calculate(population = {'adults': 1, 'children': 0, 'singles': 1}, location = 'New York')"]}
{"question": "Book a flight from San Francisco to Tokyo on May 3rd 2022 and another flight from Tokyo to Sydney on May 18th 2022.", "function": [{"name": "book_flight", "description": "Book a flight from a departure city to a destination city on a specific date.", "parameters": {"type": "object", "properties": {"departure_city": {"type": "string", "description": "The city from which the flight will depart."}, "destination_city": {"type": "string", "description": "The city to which the flight is going."}, "date": {"type": "string", "description": "The date of the flight."}}, "required": ["departure_city", "destination_city", "date"]}}], "ground_truth_func": ["book_flight(departure_city=\"San Francisco\", destination_city=\"Tokyo\", date=\"2022-05-03\")", "book_flight(departure_city=\"Tokyo\", destination_city=\"Sydney\", date=\"2022-05-18\")"], "model_generated_func": ["book_flight(departure_city = 'San Francisco', destination_city = 'Tokyo', date = 'May 3rd 2022')", "book_flight(departure_city = 'Tokyo', destination_city = 'Sydney', date = 'May 18th 2022')"]}
{"question": "What was the Treaty of Paris about? Also, what was the importance of Magna Carta in history?", "function": [{"name": "history_fact_fetch", "description": "Retrieve facts about historical events or documents", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The historical event or document you want to know about."}, "depth": {"type": "string", "description": "The depth of information required. Choices are 'brief' or 'detailed'."}, "year": {"type": "integer", "description": "The year of the event/document."}}, "required": ["event"]}}], "ground_truth_func": ["history_fact.fetch(event='Treaty of Paris')", "history_fact.fetch(event='Magna Carta')"], "model_generated_func": ["history_fact_fetch(event = 'Treaty of Paris', depth = 'detailed')", "history_fact_fetch(event = 'Magna Carta', depth = 'detailed')"]}
{"question": "Provide me the major events during the presidency of Abraham Lincoln and George Washington.", "function": [{"name": "us_history_events_by_presidency", "description": "Retrieve the major events during the presidency of a specified US president.", "parameters": {"type": "object", "properties": {"president_name": {"type": "string", "description": "The name of the US president."}, "start_year": {"type": "integer", "description": "The start year of their presidency (optional)."}, "end_year": {"type": "integer", "description": "The end year of their presidency (optional)."}}, "required": ["president_name"]}}], "ground_truth_func": ["us_history.events_by_presidency(president_name='Abraham Lincoln')", "us_history.events_by_presidency(president_name='George Washington')"], "model_generated_func": ["us_history_events_by_presidency(president_name = 'Abraham Lincoln')", "us_history_events_by_presidency(president_name = 'George Washington')"]}
{"question": "Find out who was the president of United States in 1980 and 2016, and the vice president in 1975 and 2011.", "function": [{"name": "get_president_and_vp", "description": "Get the President and Vice President of United States for a specified year.", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year for which president or vice president information is needed."}, "position": {"type": "string", "description": "The position: either 'president' or 'vice president'."}}, "required": ["year", "position"]}}], "ground_truth_func": ["get_president_and_vp(year=1980, position='president')", "get_president_and_vp(year=2016, position='president')", "get_president_and_vp(year=1975, position='vice president')", "get_president_and_vp(year=2011, position='vice president')"], "model_generated_func": ["get_president_and_vp(year = 1980, position = 'president')", "get_president_and_vp(year = 2016, position = 'president')", "get_president_and_vp(year = 1975, position = 'vice president')", "get_president_and_vp(year = 2011, position = 'vice president')"]}
{"question": "I want to know the rise and fall of Christianity in Egypt and Turkey from 100 A.D to 1500 A.D.", "function": [{"name": "religion_history_track", "description": "Track the historical development of a specific religion in a specific area within a specific time frame.", "parameters": {"type": "object", "properties": {"region": {"type": "string", "description": "The geographical area where the religion's history is to be tracked."}, "religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The beginning year of the time frame."}, "end_year": {"type": "integer", "description": "The ending year of the time frame."}}, "required": ["region", "religion", "start_year", "end_year"]}}], "ground_truth_func": ["religion_history.track(region=\"Egypt\", religion=\"Christianity\", start_year=100, end_year=1500)", "religion_history.track(region=\"Turkey\", religion=\"Christianity\", start_year=100, end_year=1500)"], "model_generated_func": ["religion_history_track(region = 'Egypt and Turkey', religion = 'Christianity', start_year = 100, end_year = 1500)"]}
{"question": "Fetch the details of the ancient empires Persian Empire and Mauryan Empire with their religious history and influences.", "function": [{"name": "ancient_empires_get_religion_info", "description": "Retrieve information about religious history and influences of an ancient empire.", "parameters": {"type": "object", "properties": {"empire_name": {"type": "string", "description": "The name of the ancient empire."}, "include_influences": {"type": "boolean", "default": false, "description": "Specify whether to include details about the religious influences of the empire."}}, "required": ["empire_name"]}}], "ground_truth_func": ["ancient_empires.get_religion_info(empire_name='Persian Empire', include_influences=true)", "ancient_empires.get_religion_info(empire_name='Mauryan Empire', include_influences=true)"], "model_generated_func": ["ancient_empires_get_religion_info(empire_name = 'Persian Empire', include_influences = True)", "ancient_empires_get_religion_info(empire_name = 'Mauryan Empire', include_influences = True)"]}
{"question": "Using watercolor, what combination of colors should I mix to get the color magenta and what quantity for each color? Also, I want to know how to get color navy by using acrylic paint and their respective quantities.", "function": [{"name": "paint_color_mixture", "description": "Gives a combination of primary colors to mix for creating a certain color. This function requires type of paint and color.", "parameters": {"type": "object", "properties": {"paint_type": {"type": "string", "description": "The type of paint (Watercolor, Oil, Acrylic)."}, "color": {"type": "string", "description": "The color to be produced from the mixture."}}, "required": ["paint_type", "color"]}}], "ground_truth_func": ["paint_color_mixture(paint_type='Watercolor', color='Magenta')", "paint_color_mixture(paint_type='Acrylic', color='Navy')"], "model_generated_func": ["paint_color_mixture(paint_type = 'Watercolor', color = 'magenta')", "paint_color_mixture(paint_type = 'Acrylic', color = 'navy')"]}
{"question": "What are the RGB and HEX color values for navy, purple and maroon? ", "function": [{"name": "color_converter_get_color_info", "description": "Retrieve RGB values and hexadecimal codes of a specific color.", "parameters": {"type": "object", "properties": {"color_name": {"type": "string", "description": "The name of the color."}, "conversion_type": {"type": "array", "items": {"type": "string", "enum": ["RGB", "HEX"]}, "description": "The conversion type for the color."}}, "required": ["color_name", "conversion_type"]}}], "ground_truth_func": ["color_converter.get_color_info(color_name='navy', conversion_type=['RGB', 'HEX'])", "color_converter.get_color_info(color_name='purple', conversion_type=['RGB', 'HEX'])", "color_converter.get_color_info(color_name='maroon', conversion_type=['RGB', 'HEX'])"], "model_generated_func": ["color_converter_get_color_info(color_name = 'navy', conversion_type = ['RGB', 'HEX'])", "color_converter_get_color_info(color_name = 'purple', conversion_type = ['RGB', 'HEX'])", "color_converter_get_color_info(color_name = 'maroon', conversion_type = ['RGB', 'HEX'])"]}
{"question": "What's the driving distance between New York and Washington DC, and between Los Angeles and San Francisco with optional parameter shortest route enabled?", "function": [{"name": "calc_distance", "description": "Calculate the driving distance between two locations.", "parameters": {"type": "object", "properties": {"start_loc": {"type": "string", "description": "Starting location."}, "end_loc": {"type": "string", "description": "Ending location."}, "shortest_route": {"type": "boolean", "default": "false", "description": "If true, returns the shortest driving route."}}, "required": ["start_loc", "end_loc"]}}], "ground_truth_func": ["calc_distance(start_loc=\"New York\", end_loc=\"Washington DC\", shortest_route=True)", "calc_distance(start_loc=\"Los Angeles\", end_loc=\"San Francisco\", shortest_route=True)"], "model_generated_func": ["calc_distance(start_loc = 'New York', end_loc = 'Washington DC', shortest_route = True)", "calc_distance(start_loc = 'Los Angeles', end_loc = 'San Francisco', shortest_route = True)"]}
{"question": "Find opening hours and ticket prices for adults and children for the National Museum in Washington D.C. and the Louvre Museum in Paris.", "function": [{"name": "museum_info_get_info", "description": "Retrieve specific details about museums, such as opening hours and ticket prices.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City where the museum is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["Opening hours", "Adult tickets", "Child tickets"]}, "description": "List of details to retrieve about the museum."}}, "required": ["location", "details"]}}], "ground_truth_func": ["museum_info.get_info(location='Washington D.C.', details=['Opening hours', 'Adult tickets', 'Child tickets'])", "museum_info.get_info(location='Paris', details=['Opening hours', 'Adult tickets', 'Child tickets'])"], "model_generated_func": ["museum_info_get_info(location = 'Washington D.C.', details = ['Opening hours', 'Adult tickets', 'Child tickets'])", "museum_info_get_info(location = 'Paris', details = ['Opening hours', 'Adult tickets', 'Child tickets'])"]}
{"question": "Give me the detail of the exhibition named 'Wonder of Nature' in the Louvre museum, and 'Age of Reptiles' in the British Museum. Plus their cost per visit for children and adult.", "function": [{"name": "museum_exhibition_detail", "description": "Provides details of a particular exhibition in a museum, including the cost per visit for different age groups.", "parameters": {"type": "object", "properties": {"exhibition_name": {"type": "string", "description": "The name of the exhibition."}, "museum_name": {"type": "string", "description": "The name of the museum."}, "visitor_type": {"type": "array", "items": {"type": "string", "enum": ["child", "adult"]}, "description": "Age group of the visitor."}}, "required": ["exhibition_name", "museum_name"]}}], "ground_truth_func": ["museum.exhibition_detail(exhibition_name='Wonder of Nature', museum_name='Louvre', visitor_type=['child', 'adult'])", "museum.exhibition_detail(exhibition_name='Age of Reptiles', museum_name='British Museum', visitor_type=['child', 'adult'])"], "model_generated_func": ["museum_exhibition_detail(exhibition_name = 'Wonder of Nature', museum_name = 'Louvre', visitor_type = ['child', 'adult'])", "museum_exhibition_detail(exhibition_name = 'Age of Reptiles', museum_name = 'British Museum', visitor_type = ['child', 'adult'])"]}
{"question": "Show me the closest music shop where I can purchase a Yamaha acoustic guitar and a Kawai piano in San Francisco, California, and Chicago, Illinois.", "function": [{"name": "find_music_instrument_store", "description": "Locate nearby music instrument stores that sell specific brands or instruments", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state e.g. San Francisco, CA."}, "instruments": {"type": "array", "items": {"type": "string"}, "description": "A list of specific instruments or brands you are looking for."}}, "required": ["location", "instruments"]}}], "ground_truth_func": ["find_music_instrument_store(location='San Francisco, CA', instruments=['Yamaha Acoustic Guitar', 'Kawai Piano'])", "find_music_instrument_store(location='Chicago, IL', instruments=['Yamaha Acoustic Guitar', 'Kawai Piano'])"], "model_generated_func": ["find_music_instrument_store(location = 'San Francisco, CA', instruments = ['Yamaha acoustic guitar', 'Kawai piano'])", "find_music_instrument_store(location = 'Chicago, IL', instruments = ['Yamaha acoustic guitar', 'Kawai piano'])"]}
{"question": "Get me the price and stock availability for a Yamaha P125 piano in Berlin and Madrid's music stores.", "function": [{"name": "check_instrument_availability", "description": "Get the price and availability of a specified instrument in a music store located in a specified city", "parameters": {"type": "object", "properties": {"instrument": {"type": "string", "description": "The name of the musical instrument."}, "city": {"type": "string", "description": "City where the store is located."}}, "required": ["instrument", "city"]}}], "ground_truth_func": ["check_instrument_availability(instrument='Yamaha P125', city='Berlin')", "check_instrument_availability(instrument='Yamaha P125', city='Madrid')"], "model_generated_func": ["check_instrument_availability(instrument = 'Yamaha P125 piano', city = 'Berlin')", "check_instrument_availability(instrument = 'Yamaha P125 piano', city = 'Madrid')"]}
{"question": "Can you find me any upcoming rock and jazz concerts for the next month in San Francisco, California and New York, New York?", "function": [{"name": "concert_finder", "description": "Locate upcoming concerts based on music genre in specified city and state.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state to find concerts."}, "music_genre": {"type": "string", "description": "Music genre of the concerts."}, "time_period": {"type": "integer", "description": "Number of days to search upcoming concerts.", "default": 30}}, "required": ["location", "music_genre"]}}], "ground_truth_func": ["concert_finder(location='San Francisco, California', music_genre='rock', time_period=30)", "concert_finder(location='San Francisco, California', music_genre='jazz', time_period=30)", "concert_finder(location='New York, New York', music_genre='rock', time_period=30)", "concert_finder(location='New York, New York', music_genre='jazz', time_period=30)"], "model_generated_func": ["concert_finder(location = 'San Francisco, California', music_genre = 'rock', time_period = 30)", "concert_finder(location = 'New York, New York', music_genre = 'jazz', time_period = 30)"]}
{"question": "Find me all the classical concerts near Berlin and Paris happening next Friday, and I am interested only in those with available parking.", "function": [{"name": "concert_find_nearby", "description": "Locate nearby concerts based on specific criteria like genre and availability of parking.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the user wants to find a concert."}, "date": {"type": "string", "description": "The date on which the user wants to attend a concert."}, "genre": {"type": "string", "description": "The genre of music of the concert."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Parking", "Food and Beverages", "VIP Seating", "Disability Access"]}, "description": "Amenities preferred at the concert."}}, "required": ["location", "date", "genre"]}}], "ground_truth_func": ["concert.find_nearby(location=\"Berlin\", date=\"next Friday\", genre=\"Classical\", amenities=\"Parking\")", "concert.find_nearby(location=\"Paris\", date=\"next Friday\", genre=\"Classical\", amenities=\"Parking\")"], "model_generated_func": ["concert_find_nearby(location = 'Berlin', date = '2023-04-21', genre = 'Classical', amenities = ['Parking'])", "concert_find_nearby(location = 'Paris', date = '2023-04-21', genre = 'Classical', amenities = ['Parking'])"]}
{"question": "What's the current most played Pop song and also find me the current most played Rock song in Australia.", "function": [{"name": "musicCharts_getMostPlayed", "description": "This function retrieves the most played song in a particular genre from a specified region", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "Music genre e.g., Rock, Pop, HipHop etc."}, "region": {"type": "string", "description": "Region where the song popularity is to be checked"}, "duration": {"type": "integer", "description": "Time duration in hours for which the music played count will be considered."}}, "required": ["genre", "region"]}}], "ground_truth_func": ["musicCharts.getMostPlayed(genre='Pop', region='Australia')", "musicCharts.getMostPlayed(genre='Rock', region='Australia')"], "model_generated_func": ["musicCharts_getMostPlayed(genre = 'Pop', region = 'Australia')", "musicCharts_getMostPlayed(genre = 'Rock', region = 'Australia')"]}
{"question": "Find the winning percentage of Lakers and Bulls in NBA seasons 2018 and 2020.", "function": [{"name": "calculate_winning_percentage", "description": "Calculate the winning percentage for a particular basketball team in a given season.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the basketball team."}, "season": {"type": "integer", "description": "The season (year) you want to find winning percentage for."}}, "required": ["team", "season"]}}], "ground_truth_func": ["calculate_winning_percentage(team='Lakers', season=2018)", "calculate_winning_percentage(team='Bulls', season=2018)", "calculate_winning_percentage(team='Lakers', season=2020)", "calculate_winning_percentage(team='Bulls', season=2020)"], "model_generated_func": ["calculate_winning_percentage(team = 'Lakers', season = 2018)", "calculate_winning_percentage(team = 'Bulls', season = 2020)"]}
{"question": "What is the current ranking of Barcelona and Manchester United in the UEFA Champions League and La Liga respectively?", "function": [{"name": "get_team_ranking", "description": "Retrieve the current ranking of a football team in a specific league.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the football team."}, "league": {"type": "string", "description": "The league the team is competing in. E.g. UEFA Champions League, La Liga."}}, "required": ["team", "league"]}}], "ground_truth_func": ["get_team_ranking(team=\"Barcelona\", league=\"UEFA Champions League\")", "get_team_ranking(team=\"Manchester United\", league=\"La Liga\")"], "model_generated_func": ["get_team_ranking(team = 'Barcelona', league = 'UEFA Champions League')", "get_team_ranking(team = 'Manchester United', league = 'La Liga')"]}
{"question": "In a game of Pokemon GO, what moves can a Pikachu learn? Also, check if Bulbasaur can learn a specific move named 'Solar Beam'.", "function": [{"name": "PokemonGO_get_moves", "description": "Retrieve the set of moves a Pokemon can learn. The optional parameter checks if the Pokemon can learn a specified move.", "parameters": {"type": "object", "properties": {"pokemon": {"type": "string", "description": "The name of the Pokemon."}, "move": {"type": "string", "description": "An optional parameter that checks if the Pokemon can learn this specific move."}}, "required": ["pokemon"]}}], "ground_truth_func": ["PokemonGO.get_moves(pokemon='Pikachu')", "PokemonGO.get_moves(pokemon='Bulbasaur', move='Solar Beam')"], "model_generated_func": ["PokemonGO_get_moves(pokemon = 'Pikachu')", "PokemonGO_get_moves(pokemon = 'Bulbasaur', move = 'Solar Beam')"]}
{"question": "Check if the player with id 3142 in team RocketLeague has achieved top scorer status in seasons 2017, 2018 and 2019.", "function": [{"name": "player_status_check", "description": "Check a player's status in a team for a particular season.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The team where the player plays."}, "player_id": {"type": "integer", "description": "The id of the player."}, "season": {"type": "integer", "description": "The season for which player's status need to be checked. Optional. Default is current season."}}, "required": ["team", "player_id"]}}], "ground_truth_func": ["player_status.check(team='RocketLeague', player_id=3142, season=2017)", "player_status.check(team='RocketLeague', player_id=3142, season=2018)", "player_status.check(team='RocketLeague', player_id=3142, season=2019)"], "model_generated_func": ["player_status_check(team = 'RocketLeague', player_id = 3142, season = 2017)", "player_status_check(team = 'RocketLeague', player_id = 3142, season = 2018)", "player_status_check(team = 'RocketLeague', player_id = 3142, season = 2019)"]}
{"question": "How to save game progress at stage 7 in easy mode and stage 3 in hard mode?", "function": [{"name": "game_save_progress", "description": "Save the current state of a player's game, given the stage, level and game mode.", "parameters": {"type": "object", "properties": {"stage": {"type": "integer", "description": "The current stage in the game the player has reached."}, "mode": {"type": "string", "enum": ["easy", "hard"], "description": "The game mode. Available modes are easy or hard."}, "level": {"type": "string", "default": "user", "description": "The player's level."}}, "required": ["stage", "mode"]}}], "ground_truth_func": ["game.save_progress(stage=7, mode='easy', level='user')", "game.save_progress(stage=3, mode='hard', level='user')"], "model_generated_func": ["game_save_progress(stage = 7, mode = 'easy')", "game_save_progress(stage = 3, mode = 'hard')"]}
{"question": "Search for a Chicken Noodle Soup recipe and a Vegan Salad recipe.", "function": [{"name": "recipe_search_find", "description": "Locate recipes based on the type of dish.", "parameters": {"type": "object", "properties": {"dish": {"type": "string", "description": "The name of the dish to search for."}, "diet": {"type": "string", "enum": ["Vegan", "Vegetarian", "Paleo", "Keto"], "description": "Dietary preference."}}, "required": ["dish"]}}], "ground_truth_func": ["recipe_search.find(dish=\"Chicken Noodle Soup\")", "recipe_search.find(dish=\"Salad\", diet=\"Vegan\")"], "model_generated_func": ["recipe_search_find(dish = 'Chicken Noodle Soup')", "recipe_search_find(dish = 'Vegan Salad')"]}
{"question": "Find an Italian restaurant near me in New York that provides vegetarian food options and a Japanese sushi restaurant in Los Angeles that offers delivery service.", "function": [{"name": "restaurant_finder", "description": "Search for restaurants based on location, cuisine type and other preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state, e.g. New York, NY."}, "cuisine": {"type": "string", "description": "Type of cuisine the user is interested in, e.g. Italian, Japanese etc."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["Vegetarian", "Delivery", "Vegan", "Takeout"]}, "description": "Extra features in the restaurant"}}, "required": ["location", "cuisine"]}}], "ground_truth_func": ["restaurant_finder(location='New York', cuisine='Italian', preferences='Vegetarian')", "restaurant_finder(location='Los Angeles', cuisine='Japanese', preferences='Delivery')"], "model_generated_func": ["restaurant_finder(location = 'New York, NY', cuisine = 'Italian', preferences = ['Vegetarian'])", "restaurant_finder(location = 'Los Angeles, CA', cuisine = 'Japanese', preferences = ['Delivery'])"]}
{"question": "Tell me a cooking recipe for 'Lasagne Bolognese' for serving 4 people and another one for 'Caesar Salad' for serving 2 people", "function": [{"name": "get_cooking_recipe", "description": "Retrieve the cooking recipe for a specified food item.", "parameters": {"type": "object", "properties": {"dish_name": {"type": "string", "description": "Name of the food dish for which recipe is required."}, "serving_size": {"type": "integer", "description": "Number of people for which the dish will be prepared."}}, "required": ["dish_name", "serving_size"]}}], "ground_truth_func": ["get_cooking_recipe(dish_name='Lasagne Bolognese', serving_size=4)", "get_cooking_recipe(dish_name='Caesar Salad', serving_size=2)"], "model_generated_func": ["get_cooking_recipe(dish_name = 'Lasagne Bolognese', serving_size = 4)", "get_cooking_recipe(dish_name = 'Caesar Salad', serving_size = 2)"]}
{"question": "I want to order a large pepperoni pizza and a chicken Caesar salad from Whole Foods at the downtown location and then another order of the same items from the uptown location.", "function": [{"name": "whole_foods_order", "description": "Order food from Whole Foods", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of Whole Foods."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "size": {"type": "string", "description": "Size of the order.", "enum": ["small", "medium", "large"]}}, "required": ["location", "items", "size"]}}], "ground_truth_func": ["whole_foods.order(location=\"downtown\",items=[\"large pepperoni pizza\", \"chicken Caesar salad\"], size=\"large\")", "whole_foods.order(location=\"uptown\",items=[\"large pepperoni pizza\", \"chicken Caesar salad\"], size=\"large\")"], "model_generated_func": ["whole_foods_order(location = 'downtown', items = ['pepperoni pizza', 'chicken Caesar salad'], size = 'large')", "whole_foods_order(location = 'uptown', items = ['pepperoni pizza', 'chicken Caesar salad'], size = 'large')"]}
{"question": "Find a supermarket in New York City that opens 24 hours and another one in San Diego that offers home delivery.", "function": [{"name": "grocery_store_find_by_criteria", "description": "Find grocery stores based on specific criteria such as location, hours of operation, or availability of services.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to find a grocery store."}, "criteria": {"type": "array", "items": {"type": "string", "enum": ["24 hours", "Home Delivery", "In-store Pickup"]}, "description": "Specific features or services you're looking for in a grocery store."}}, "required": ["location", "criteria"]}}], "ground_truth_func": ["grocery_store.find_by_criteria(location='New York City', criteria=['24 hours'])", "grocery_store.find_by_criteria(location='San Diego', criteria=['Home Delivery'])"], "model_generated_func": ["grocery_store_find_by_criteria(location = 'New York City', criteria = ['24 hours'])", "grocery_store_find_by_criteria(location = 'San Diego', criteria = ['Home Delivery'])"]}
{"question": "Check the hotel room availability for 'Queens Hotel' in Berlin, Germany from March 10, 2022 to March 20, 2022 and for 'Royal Hotel' in Paris, France from April 5, 2022 to April 15, 2022.", "function": [{"name": "hotel_booking_check_availability", "description": "Check room availability for a particular hotel for given dates.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "check_in_date": {"type": "string", "description": "The check-in date in YYYY-MM-DD format."}, "check_out_date": {"type": "string", "description": "The check-out date in YYYY-MM-DD format."}}, "required": ["hotel_name", "location", "check_in_date", "check_out_date"]}}], "ground_truth_func": ["hotel_booking.check_availability(hotel_name='Queens Hotel', location='Berlin, Germany', check_in_date='2022-03-10', check_out_date='2022-03-20')", "hotel_booking.check_availability(hotel_name='Royal Hotel', location='Paris, France', check_in_date='2022-04-05', check_out_date='2022-04-15')"], "model_generated_func": ["hotel_booking_check_availability(hotel_name = 'Queens Hotel', location = 'Berlin, Germany', check_in_date = '2022-03-10', check_out_date = '2022-03-20')", "hotel_booking_check_availability(hotel_name = 'Royal Hotel', location = 'Paris, France', check_in_date = '2022-04-05', check_out_date = '2022-04-15')"]}
{"question": "Book a room for 2 adults and a child at the Sheraton Hotel in New York with check-in on May 1, 2022 and check-out on May 5, 2022. Also, Book a room for 1 adult and 2 children at the Marriott in Los Angeles with check-in on June 1, 2022 and check-out on June 10, 2022.", "function": [{"name": "hotel_booking_book", "description": "Book a hotel room at the specified location for the specified number of adults and children.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city where the hotel is located."}, "check_in": {"type": "string", "description": "The check-in date in the format yyyy-mm-dd."}, "check_out": {"type": "string", "description": "The check-out date in the format yyyy-mm-dd."}, "adults": {"type": "integer", "description": "The number of adults for the booking."}, "children": {"type": "integer", "description": "The number of children for the booking."}}, "required": ["hotel_name", "location", "check_in", "check_out", "adults", "children"]}}], "ground_truth_func": ["hotel_booking.book(hotel_name='Sheraton Hotel', location='New York', check_in='2022-05-01', check_out='2022-05-05', adults=2, children=1)", "hotel_booking.book(hotel_name='Marriott', location='Los Angeles', check_in='2022-06-01', check_out='2022-06-10', adults=1, children=2)"], "model_generated_func": ["hotel_booking_book(hotel_name = 'Sheraton', location = 'New York', check_in = '2022-05-01', check_out = '2022-05-05', adults = 2, children = 1)", "hotel_booking_book(hotel_name = 'Marriott', location = 'Los Angeles', check_in = '2022-06-01', check_out = '2022-06-10', adults = 1, children = 2)"]}
{"question": "Get me the currency exchange rates of the following pairs: USD to AUD and USD to CAD?", "function": [{"name": "get_exchange_rate", "description": "Fetch the current exchange rate for the provided currency pairs.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The base currency in the pair."}, "target_currency": {"type": "string", "description": "The currency to which the base currency needs to be converted."}}, "required": ["base_currency", "target_currency"]}}], "ground_truth_func": ["get_exchange_rate(base_currency='USD', target_currency='AUD')", "get_exchange_rate(base_currency='USD', target_currency='CAD')"], "model_generated_func": ["get_exchange_rate(base_currency = 'USD', target_currency = 'AUD')", "get_exchange_rate(base_currency = 'USD', target_currency = 'CAD')"]}
{"question": "How much will it cost in dollars if I transfer 15000 Euro to dollars? and how much if I convert 200 pounds to dollars?", "function": [{"name": "get_conversion_cost", "description": "Convert a value from one currency to another including conversion charges.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to be converted."}, "from_currency": {"type": "string", "description": "The current currency of the amount."}, "to_currency": {"type": "string", "description": "The target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}], "ground_truth_func": ["get_conversion_cost(amount=15000, from_currency='EUR', to_currency='USD')", "get_conversion_cost(amount=200, from_currency='GBP', to_currency='USD')"], "model_generated_func": ["get_conversion_cost(amount = 15000, from_currency = 'EUR', to_currency = 'USD')", "get_conversion_cost(amount = 200, from_currency = 'GBP', to_currency = 'USD')"]}
{"question": "What is the product of the factorial of 5, the factorial of 7, and the factorial of 9?", "function": [{"name": "math_factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "object", "properties": {"number": {"type": "number", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}], "ground_truth_func": ["math.factorial(number=5)", "math.factorial(number=7)", "math.factorial(number=9)"], "model_generated_func": ["math_factorial(number = 5)", "math_factorial(number = 7)", "math_factorial(number = 9)"]}
{"question": "\"Can you calculate the Euclidean norm, or the length of the vector from the origin to the point (3, 4) using the math.hypot function, and then calculate the Euclidean norm from the origin to the point (6, 8) using the same function? Also, can you calculate the Euclidean norm from the origin to the point (9, 12, 15) using the math.hypot function?\"", "function": [{"name": "math_hypot", "description": "Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.", "parameters": {"type": "object", "properties": {"x": {"type": "number", "description": "The x-coordinate value."}, "y": {"type": "number", "description": "The y-coordinate value."}, "z": {"type": "number", "description": "Optional. The z-coordinate value. Default is 0."}}, "required": ["x", "y"]}}], "ground_truth_func": ["\"math.hypot(x=3, y=4)\"", "\"math.hypot(x=6, y=8)\"", "\"math.hypot(x=9, y=12, z=15)\""], "model_generated_func": ["math_hypot(x = 3, y = 4)", "math_hypot(x = 6, y = 8)", "math_hypot(x = 9, y = 12, z = 15)"]}
{"question": "\"Can you help me find the roots of two quadratic equations? The first equation is 3x^2 + 4x + 2 = 0, where 'a' is the coefficient of x^2, 'b' is the coefficient of x, and 'c' is the constant term. The second equation is 5x^2 - 7x + 3 = 0, where 'a' is the coefficient of x^2, 'b' is the coefficient of x, and 'c' is the constant term.\"", "function": [{"name": "algebra_quadratic_roots", "description": "Find the roots of a quadratic equation ax^2 + bx + c = 0.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of x^2."}, "b": {"type": "number", "description": "Coefficient of x."}, "c": {"type": "number", "description": "Constant term."}}, "required": ["a", "b", "c"]}}], "ground_truth_func": ["algebra.quadratic_roots(a=3, b=4, c=2)", "algebra.quadratic_roots(a=5, b=-7, c=3)"], "model_generated_func": ["algebra_quadratic_roots(a = 3, b = 4, c = 2)", "algebra_quadratic_roots(a = 5, b = -7, c = 3)"]}
{"question": "\"Can you help me find the roots of two quadratic equations? The first equation has coefficients of x squared, x, and the constant term as 5, 6, and 1 respectively. The second equation has coefficients of x squared, x, and the constant term as 3, 2, and 1 respectively. Can you solve these equations using the 'solve_quadratic_equation' function?\"", "function": [{"name": "solve_quadratic_equation", "api_call": "root = solve_quadratic_equation(a, b, c)", "description": "Function solves the quadratic equation and returns its roots.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of x squared"}, "b": {"type": "number", "description": "Coefficient of x"}, "c": {"type": "number", "description": "Constant term in the quadratic equation"}}, "required": ["a", "b", "c"]}}], "ground_truth_func": ["\"solve_quadratic_equation(a=5, b=6, c=1)\"", "\"solve_quadratic_equation(a=3, b=2, c=1)\""], "model_generated_func": ["solve_quadratic_equation(a = 5, b = 6, c = 1)", "solve_quadratic_equation(a = 3, b = 2, c = 1)"]}
{"question": "\"Can you help me solve the following quadratic equations? The first one has coefficients a = 2, b = 5, and c = 3 and I want to find all roots, real or complex. The second equation has coefficients a = 1, b = -3, and c = 2 and I only want to find the real roots. The third equation has coefficients a = 4, b = -7, and c = 3 and I want to find all roots, real or complex. And the last equation has coefficients a = 1, b = 2, and c = 1 and I only want to find the real roots.\"", "function": [{"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "number", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "number", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. This parameter is optional."}}, "required": ["a", "b", "c"]}}], "ground_truth_func": ["\"solve_quadratic(a=2, b=5, c=3, root_type='all')\"", "\"solve_quadratic(a=1, b=-3, c=2, root_type='real')\"", "\"solve_quadratic(a=4, b=-7, c=3, root_type='all')\"", "\"solve_quadratic(a=1, b=2, c=1, root_type='real')\""], "model_generated_func": ["solve_quadratic(a = 2, b = 5, c = 3, root_type = 'all')", "solve_quadratic(a = 1, b = -3, c = 2, root_type = 'real')", "solve_quadratic(a = 4, b = -7, c = 3, root_type = 'all')", "solve_quadratic(a = 1, b = 2, c = 1, root_type = 'real')"]}
{"question": "What is the total circumference of four circles, where the first circle has a radius of 5cm, the second circle has a radius of 10cm, the third circle has a radius of 15cm, and the fourth circle has a radius of 20cm?", "function": [{"name": "calculate_circumference", "description": "Calculates the circumference of a circle with a given radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle in the unit given."}, "unit": {"type": "string", "description": "The unit of measurement for the radius. Default is cm."}}, "required": ["radius"]}}], "ground_truth_func": ["calculate_circumference(radius=5, unit='cm')", "calculate_circumference(radius=10, unit='cm')", "calculate_circumference(radius=15, unit='cm')", "calculate_circumference(radius=20, unit='cm')"], "model_generated_func": ["calculate_circumference(radius = 5, unit = 'cm')", "calculate_circumference(radius = 10, unit = 'cm')", "calculate_circumference(radius = 15, unit = 'cm')", "calculate_circumference(radius = 20, unit = 'cm')"]}
{"question": "What is the total area of three circles, where the first circle has a radius of 5 meters, the second circle has a radius of 10 meters, and the third circle has a radius of 15 meters, all measured in meters?", "function": [{"name": "geometry_area_circle", "description": "Calculate the area of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "units": {"type": "string", "description": "The units in which the radius is measured (defaults to meters).", "default": "meters"}}, "required": ["radius"]}}], "ground_truth_func": ["geometry.area_circle(radius=5, units='meters')", "geometry.area_circle(radius=10, units='meters')", "geometry.area_circle(radius=15, units='meters')"], "model_generated_func": ["geometry_area_circle(radius = 5)", "geometry_area_circle(radius = 10)", "geometry_area_circle(radius = 15)"]}
{"question": "\"Can you calculate the area of two circles, one with a radius of 5 meters and the other with a radius of 10 meters, and then compare the two areas to determine which circle is larger and by how much?\"", "function": [{"name": "geometry_calculate_area_circle", "description": "Calculate the area of a circle given its radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "unit": {"type": "string", "description": "The measurement unit of the radius (optional parameter, default is 'units')."}}, "required": ["radius"]}}], "ground_truth_func": ["\"geometry.calculate_area_circle(radius=5, unit='meters')\"", "\"geometry.calculate_area_circle(radius=10, unit='meters')\""], "model_generated_func": ["geometry_calculate_area_circle(radius = 5, unit = 'meters')", "geometry_calculate_area_circle(radius = 10, unit = 'meters')"]}
{"question": "\"John is working on a project where he needs to calculate the area of two right-angled triangles. The first triangle has a base of 12 meters and a height of 15 meters. The second triangle has a base of 18 meters and a height of 24 meters. He wants to know the total area of these two triangles in square meters. Can you help him calculate this?\"", "function": [{"name": "calculate_area", "description": "Calculate the area of a right-angled triangle given the lengths of its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the right-angled triangle."}, "height": {"type": "number", "description": "The height of the right-angled triangle."}, "unit": {"type": "string", "description": "The unit of measure used. Defaults to cm.", "default": "cm"}}, "required": ["base", "height"]}}], "ground_truth_func": ["calculate_area(base=12, height=15, unit='m')", "calculate_area(base=18, height=24, unit='m')"], "model_generated_func": ["calculate_area(base = 12, height = 15, unit = 'm')", "calculate_area(base = 18, height = 24, unit = 'm')"]}
{"question": "\"John is a geometry teacher who is preparing a quiz for his students. He has drawn two triangles on the board. The first triangle has a base of 10 units and a height of 5 units. The second triangle has a base of 8 units and a height of 6 units. John wants to know the total area of the two triangles combined. Can you help him calculate this?\"", "function": [{"name": "calculate_triangle_area", "description": "Calculate the area of a triangle using its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle from the base."}}, "required": ["base", "height"]}}], "ground_truth_func": ["calculate_triangle_area(base=10, height=5)", "calculate_triangle_area(base=8, height=6)"], "model_generated_func": ["calculate_triangle_area(base = 10, height = 5)", "calculate_triangle_area(base = 8, height = 6)"]}
{"question": "What is the combined circumference of four circles, where the first circle has a radius of 5cm, the second circle has a radius of 10cm, the third circle has a radius of 15cm, and the fourth circle has a radius of 20cm, and I want the output in meters?", "function": [{"name": "geometry_circumference", "description": "Calculate the circumference of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "units": {"type": "string", "description": "Units for the output circumference measurement. Default is 'cm'."}}, "required": ["radius"]}}], "ground_truth_func": ["geometry.circumference(radius=5, units='m')", "geometry.circumference(radius=10, units='m')", "geometry.circumference(radius=15, units='m')", "geometry.circumference(radius=20, units='m')"], "model_generated_func": ["geometry_circumference(radius = 5, units = 'm')", "geometry_circumference(radius = 10, units = 'm')", "geometry_circumference(radius = 15, units = 'm')", "geometry_circumference(radius = 20, units = 'm')"]}
{"question": "\"Could you calculate the derivative of the polynomial function '3x^3 - 2x^2 + 5x - 7' and then evaluate this derivative at x=4? After that, could you also calculate the derivative of the resulting function and evaluate it at x=2?\"", "function": [{"name": "calculate_derivative", "description": "Calculate the derivative of a polynomial function.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The polynomial function."}, "x_value": {"type": "number", "description": "The x-value at which the derivative is calculated. Optional, if not given, the function will return a function of the derivative instead of a specific value."}}, "required": ["function"]}}], "ground_truth_func": ["calculate_derivative(function='3x^3 - 2x^2 + 5x - 7', x_value=4)", "calculate_derivative(function='9x^2 - 4x + 5', x_value=2)"], "model_generated_func": ["calculate_derivative(function = '3x^3 - 2x^2 + 5x - 7', x_value = 4)", "calculate_derivative(function = 'derivative_of_previous_function', x_value = 2)"]}
{"question": "\"Could you calculate the area under the curve for the function 'x^3' between x values of 2 and 5 using the 'trapezoid' method of numerical integration, and then do the same calculation but using the 'simpson' method? After that, could you repeat these calculations but for the function '2x^2+3x-1' between x values of -1 and 3?\"", "function": [{"name": "integrate", "description": "Calculate the area under a curve for a specified function between two x values.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to integrate, represented as a string. For example, 'x^3'"}, "start_x": {"type": "number", "description": "The starting x-value to integrate over."}, "end_x": {"type": "number", "description": "The ending x-value to integrate over."}, "method": {"type": "string", "description": "The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'."}}, "required": ["function", "start_x", "end_x"]}}], "ground_truth_func": ["integrate(function='x^3', start_x=2, end_x=5, method='trapezoid')", "integrate(function='x^3', start_x=2, end_x=5, method='simpson')", "integrate(function='2x^2+3x-1', start_x=-1, end_x=3, method='trapezoid')", "integrate(function='2x^2+3x-1', start_x=-1, end_x=3, method='simpson')"], "model_generated_func": ["integrate(function = 'x^3', start_x = 2, end_x = 5, method = 'trapezoid')", "integrate(function = 'x^3', start_x = 2, end_x = 5, method = 'simpson')", "integrate(function = '2x^2+3x-1', start_x = -1, end_x = 3, method = 'trapezoid')", "integrate(function = '2x^2+3x-1', start_x = -1, end_x = 3, method = 'simpson')"]}
{"question": "\"Can you compute the derivative of the function 3x^2 + 2x - 1 at the value 5, where the variable present in the function is 'x', and then compute the derivative of the function 4y^3 - 3y^2 + 2y - 1 at the value 3, where the variable present in the function is 'y'?\"", "function": [{"name": "calculus_derivative", "description": "Compute the derivative of a function at a specific value.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "value": {"type": "integer", "description": "The value where the derivative needs to be calculated at."}, "function_variable": {"type": "string", "description": "The variable present in the function, for instance x or y, etc."}}, "required": ["function", "value"]}}], "ground_truth_func": ["calculus.derivative(function='3x^2 + 2x - 1', value=5, function_variable='x')", "calculus.derivative(function='4y^3 - 3y^2 + 2y - 1', value=3, function_variable='y')"], "model_generated_func": ["calculus_derivative(function = '3x^2 + 2x - 1', value = 5, function_variable = 'x')", "calculus_derivative(function = '4y^3 - 3y^2 + 2y - 1', value = 3, function_variable = 'y')"]}
{"question": "What are the prime factors of the number 4567 and 7890, and can you provide these in a formatted string as well as an array?", "function": [{"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false"}}, "required": ["number", "formatted"]}}], "ground_truth_func": ["get_prime_factors(number=4567, formatted=True)", "get_prime_factors(number=4567, formatted=False)", "get_prime_factors(number=7890, formatted=True)", "get_prime_factors(number=7890, formatted=False)"], "model_generated_func": ["get_prime_factors(number = 4567, formatted = True)", "get_prime_factors(number = 7890, formatted = True)", "get_prime_factors(number = 4567, formatted = False)", "get_prime_factors(number = 7890, formatted = False)"]}
{"question": "What are the prime factors of the numbers 45, 100, and 150?", "function": [{"name": "number_analysis_prime_factors", "description": "Compute the prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to be factored."}}, "required": ["number"]}}], "ground_truth_func": ["number_analysis.prime_factors(number=45)", "number_analysis.prime_factors(number=100)", "number_analysis.prime_factors(number=150)"], "model_generated_func": ["number_analysis_prime_factors(number = 45)", "number_analysis_prime_factors(number = 100)", "number_analysis_prime_factors(number = 150)"]}
{"question": "What is the greatest common divisor (GCD) of the two pairs of numbers (45, 60) and (81, 27)?", "function": [{"name": "math_gcd", "description": "Compute the greatest common divisor of two numbers", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}], "ground_truth_func": ["math.gcd(num1=45, num2=60)", "math.gcd(num1=81, num2=27)"], "model_generated_func": ["math_gcd(num1 = 45, num2 = 60)", "math_gcd(num1 = 81, num2 = 27)"]}
{"question": "\"Can you calculate the highest common factor of the pair of numbers (45, 60) and then use that result to find the highest common factor with another pair of numbers (90, 120)? Please also find the highest common factor of the pair (36, 48) and then find the highest common factor of that result with the pair (72, 96).\"", "function": [{"name": "math_hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "object", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}], "ground_truth_func": ["\"math.hcf(number1=45, number2=60)\"", "\"math.hcf(number1=15, number2=90)\"", "\"math.hcf(number1=15, number2=120)\"", "\"math.hcf(number1=36, number2=48)\"", "\"math.hcf(number1=12, number2=72)\"", "\"math.hcf(number1=12, number2=96)\""], "model_generated_func": ["math_hcf(number1 = 45, number2 = 60)", "math_hcf(number1 = 90, number2 = 120)", "math_hcf(number1 = 36, number2 = 48)", "math_hcf(number1 = 72, number2 = 96)"]}
{"question": "\"Can you help me find the greatest common divisor of the following pairs of integers: (45, 60) and (81, 63)? Please use the number_theory.gcd function to compute this.\"", "function": [{"name": "number_theory_gcd", "description": "Compute the greatest common divisor of two given integers.", "parameters": {"type": "object", "properties": {"number1": {"type": "integer", "description": "The first integer."}, "number2": {"type": "integer", "description": "The second integer."}}, "required": ["number1", "number2"]}}], "ground_truth_func": ["\"number_theory.gcd(number1=45, number2=60)\"", "\"number_theory.gcd(number1=81, number2=63)\""], "model_generated_func": ["number_theory_gcd(number1 = 45, number2 = 60)", "number_theory_gcd(number1 = 81, number2 = 63)"]}
{"question": "What is the prime factorization of the number 4567 and the number 7890, if we want the results to be returned in a 'dictionary' format?", "function": [{"name": "prime_factorize", "description": "Calculate the prime factorization of a given integer.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number for which to calculate the prime factorization."}, "return_type": {"type": "string", "description": "Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'."}}, "required": ["number"]}}], "ground_truth_func": ["prime_factorize(number=4567, return_type='dictionary')", "prime_factorize(number=7890, return_type='dictionary')"], "model_generated_func": ["prime_factorize(number = 4567, return_type = 'dictionary')", "prime_factorize(number = 7890, return_type = 'dictionary')"]}
{"question": "\"John and Mary are playing a game where they each choose two numbers and then calculate the greatest common divisor (GCD) of their chosen numbers. John chose the numbers 36 and 48, while Mary chose the numbers 60 and 96. Can you help them find the GCD of their chosen numbers? Also, they want to know the GCD of the four numbers they chose. Can you calculate that as well?\"", "function": [{"name": "math_gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}], "ground_truth_func": ["\"math.gcd(num1=36, num2=48)\"", "\"math.gcd(num1=60, num2=96)\"", "\"math.gcd(num1=math.gcd(num1=36, num2=48)", "num2=math.gcd(num1=60, num2=96))\""], "model_generated_func": ["math_gcd(num1 = 36, num2 = 48)", "math_gcd(num1 = 60, num2 = 96)"]}
