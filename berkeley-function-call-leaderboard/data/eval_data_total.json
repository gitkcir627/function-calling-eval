{"question": "Find the area of a triangle with a base of 10 units and height of 5 units.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the factorial of 5 using math functions.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the hypotenuse of a right triangle given the lengths of the other two sides as 4 and 5.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the roots of a quadratic equation with coefficients a=1, b=-3, c=2.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Solve a quadratic equation where a=2, b=6, and c=5", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What are the roots of the quadratic equation where a=2, b=5 and c=3 ?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the circumference of a circle with a radius of 4 inches?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the area of a circle with a radius of 10?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the area of a circle with a radius of 5 units.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the area of a right-angled triangle given the lengths of its base and height as 6cm and 10cm.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the area of a triangle with base of 10 units and height of 5 units?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the circumference of a circle with radius 3", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the derivative of the function 3x^2 + 2x - 1.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the area under the curve from x = -2 to x = 3 for the function y = x^3 using simpson method.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the derivative of the function 2x^2 at x = 1.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the prime factors of 450", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the prime factors of the number 123456.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the greatest common divisor of two numbers: 40 and 50", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the highest common factor of 36 and 24.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the Greatest Common Divisor (GCD) of two numbers, say 36 and 48.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the greatest common divisor of two given numbers, for example 12 and 15.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the prime factorization of the number 60? Return them in the form of dictionary", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the greatest common divisor (GCD) of 12 and 18", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the final velocity of an object falling from a 150 meter building, assuming initial velocity is zero.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the final velocity of a vehicle after accelerating at 2 meters/second^2 for a duration of 5 seconds, starting from a speed of 10 meters/second.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the displacement of a car given the initial velocity of 10 and acceleeration of 9.8 within 5 seconds.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the final speed of an object dropped from rest after falling for 5 seconds if we neglect air resistance?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the final velocity of a vehicle that started from rest and accelerated at 4 m/s^2 for a distance of 300 meters?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the final velocity of an object, knowing that it started from rest, accelerated at a rate of 9.8 m/s^2 for a duration of 5 seconds.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the final speed of an object dropped from 100 m without air resistance.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Get directions from Sydney to Melbourne using the fastest route.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Create an itinerary for a 7 days trip to Tokyo with daily budgets not exceeding $100 and prefer exploring nature.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the shortest driving distance between New York City and Washington D.C.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the estimated travel time by car from San Francisco to Los Angeles with stops at Santa Barbara and Monterey.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the electric field at a point 3 meters away from a charge of 2 coulombs.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the magnetic field produced at the center of a circular loop carrying current of 5 Ampere with a radius of 4 meters", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the electromagnetic force between two charges of 5C and 7C placed 3 meters apart.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the magnetic field strength 10 meters away from a long wire carrying a current of 20 Amperes.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the energy (in Joules) absorbed or released during the phase change of 100g of water from liquid to steam at its boiling point.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the final temperature when 20 kg of water at 30 degree Celsius is mixed with 15 kg of water at 60 degree Celsius.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the boiling point and melting point of water under the sea level of 5000m.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the absolute pressure in pascals given atmospheric pressure of 1 atm and a gauge pressure of 2 atm.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the entropy change for a certain process given an initial temperature of 300K, a final temperature of 400K, and a heat capacity of 5J/K.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Retrieve the sequence of DNA molecule with id `DNA123`.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Identify the protein sequence of a given human gene 'BRCA1'.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find me detailed information about the structure of human cell", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What are the names of proteins found in the plasma membrane?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the cell density in a sample with an optical density of 0.6, where the experiment dilution is 5 times.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the function of ATP synthase in mitochondria?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the molecular weight of Glucose (C6H12O6).", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Analyze the DNA sequence 'AGTCGATCGAACGTACGTACG' for any potential substitution mutations based on a reference sequence 'AGTCCATCGAACGTACGTACG'.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find out how genetically similar a human and a chimp are in percentage.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Get me data on average precipitation in the Amazon rainforest for the last six months.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Identify a small green bird in forest.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find out the population and species of turtles in Mississippi river in 2020.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the carbon footprint of a gas-powered vehicle driving 1500 miles in a year?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Generate a DNA sequence with 100 bases including more G (Guanine) and C (Cytosine).", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the projected population growth in United States in the next 20 years?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the evolution rate of a bacteria population, start with 5000 bacteria, each bacteria duplicates every hour for 6 hours.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Estimate the population size of elephants of 35000 in the next 5 years given the current growth rate of 0.015.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find a nearby restaurant that serves vegan food in Los Angeles.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Get the average temperature in Austin for the next 3 days in Celsius.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Create a histogram for student scores with the following data: 85, 90, 88, 92, 86, 89, 91 and set bin range to 5.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the fastest route from San Francisco to Los Angeles with toll roads avoided.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the approximate distance between Boston, MA, and Washington, D.C. in mile?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the shortest distance between two cities, New York and Los Angeles, through the train and you can transfer.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Fetch me the list of IMAX movie releases in theaters near LA for the next week.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the area of a triangle with base 5m and height 3m.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the factorial of the number 5", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "How much time will it take for the light to reach earth from a star 4 light years away?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the distance in milesfrom the Earth to the Moon?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the area of a triangle with base 6 and height 10.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the power of 3 raised to the power 4.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Train a random forest classifier on dataset your_dataset_name with maximum depth of trees as 5, and number of estimators as 100.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the Body Mass Index for a person with a weight of 70 kg and a height of 175 cm.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Generate a random forest model with 100 trees and a depth of 5 on the provided data my_data.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Predict the price of the house in San Francisco with 3 bedrooms, 2 bathrooms and area of 1800 square feet.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Generate a random number from a normal distribution with mean 0 and standard deviation 1.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the probability of drawing a king from a deck of cards.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the probability of rolling a six on a six-sided die twice in a row?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the probability of getting exactly 5 heads in 10 fair coin tosses.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the probability of getting exactly 5 heads in 8 tosses of a fair coin.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What are the odds of pulling a heart suit from a well-shuffled standard deck of 52 cards? Format it as ratio.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Perform a two-sample t-test on my experiment data of Control [10, 15, 12, 14, 11] and Treated [18, 16, 17, 20, 22] group with alpha equals to 0.05", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Perform a hypothesis test for two independent samples with scores of Sample1: [22,33,42,12,34] and Sample2: [23,45,44,14,38] at a significance level of 0.05.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the probability of observing 60 heads if I flip a coin 100 times with probability of heads 0.5.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Perform a two-sample t-test to determine if there is a significant difference between the mean of group1 (e.g., 12.4, 15.6, 11.2, 18.9) and group2 (e.g., 10.5, 9.8, 15.2, 13.8) at the significance level 0.05.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Predict house price in San Francisco based on its area of 2500 square feet, number of rooms as 5 and year of construction is 1990.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the discounted cash flow of a bond that is giving a coupon payment of $100 annually for next 5 years with discount rate 4%.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the compound interest for an initial principal amount of $10000, with an annual interest rate of 5% and the number of times interest applied per time period is 4 and the time the money is invested for 10 years.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Predict the future value of a $5000 investment with an annual interest rate of 5% in 3 years with monthly compounding.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Predict the total expected profit of stocks XYZ in 5 years given I have invested $5000 and annual return rate is 7%.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the return on investment for a stock bought at $20, sold at $25, with a dividend of $2.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the future value of my portfolio if I invest $5000 in stock 'X' with an expected annual return of 5% for 7 years.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the Compound Annual Growth Rate (CAGR) for an initial investment of $2000, final value of $3000 in a period of 4 years.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Get current Gold price per ounce.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the NASDAQ stock price for the company Amazon at closing March.11, 2022.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "'Get stock price of Apple for the last 5 days in NASDAQ.'", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the compounded interest for an initial principal of $5000, annual interest rate of 5%, and compounding period of 10 years.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the price of Amazon stock for the last 3 days?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Retrieve stock prices of Microsoft and Google for the last 2 weeks.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the current stock price of Apple and Microsoft?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the highest grossing banks in the U.S for year 2020.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the compounded interest on an initial deposit of $5000 at an annual interest rate of 3% for 5 years, compounded quarterly.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the Future Value of a $5000 investment made today for a term of 10 years at an annual interest rate of 5%", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find out if an individual John Doe with a birthday 01-01-1980 has any prior felony convictions in California.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Give me the details of Criminal Law Amendment Act of 2013.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Who was the victim in the case docket numbered 2022/AL2562 in California?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find out the possible punishments for the crime of theft in California in detail.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Generate a customized law contract between John and Alice for rental agreement in California.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Provide me the official crime rate of violent crime in San Francisco in 2020.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Retrieve cases from 2020 about theft crimes in Los Angeles, California", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Retrieve the details of a Supreme Court case titled 'Roe v. Wade'.Include dissent information.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the details of the court case identified by docket number 123456 in Texas. Don't return full text", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find a historical law case about fraud from 2010 to 2015.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Fetch details of a law case with number 43403 in New York court for year 2018.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "How to obtain the detailed case information of the R vs Adams legal case?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Get me the top 10 landmark cases in constitutional law in China.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "How many months of experience a Lawyer John Doe has on handling Bankruptcy cases.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find all Patent lawsuit cases of Facebook in 2018.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find details about lawsuit case numbered 'LAX2019080202' in the Los Angeles court.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the latest court case between Apple and Samsung occured in USA.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the lawsuits filed against the company Google in California in the year 2020.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Get details of a lawsuit with case number '123456-ABC' filed in Los Angeles court with verdict", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Retrieve all the lawsuit details for case number XYZ123", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What will be the weather in New York in the next 72 hours including the precipitation?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the temperature in celsius and humidity level of Tokyo, Japan right now?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the current temperature and humidity in Seattle, Washington?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the humidity level in Miami, Florida in the upcoming 7 days?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Get weather information for New York, USA for the next 3 days with details.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What's the elevation and area of Yellowstone National Park?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find me the 5 tallest mountains within 50km of Denver, Colorado.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437).", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the best local nurseries in Toronto with a good variety of annual plants.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What are the top three plants suitable for a hill slope in terms of erosion prevention?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the carbon footprint of my lifestyle, assuming I drive 20 miles a day, consume 3 meat meals a week, and produce 500 lbs of trash in a year.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "What is the air quality index in London 2022/08/16?", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find the air quality index in San Diego at 12pm.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Calculate the required water daily intake for a person with weight 70 kg.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "Find air quality index in San Jose for next three days.", "function": "", "human_eval_answer": "Any chat message.", "question_type": "chatable"}
{"question": "In a game of dice, a player rolls a die 20 times. If the probability of rolling a 6 is 1/6, what is the probability that the player will roll a 6 exactly 5 times?", "function": [{"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}, "returns": {"type": "float", "description": "The current temperature in the coordinates you've asked for"}}, {"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "integer", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}], "human_eval_answer": "calc_binomial_probability(n=20, k=5, p=1/6)", "execution_result": [0.1294102919789905], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "In a machine learning model, you have two feature vectors representing the characteristics of two different objects. The first vector is [0.5, 0.7, 0.2, 0.9, 0.1] and the second vector is [0.4, 0.6, 0.3, 0.8, 0.2]. Can you calculate the cosine similarity between these two vectors using the 'calculate_cosine_similarity' function?", "function": [{"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "object", "properties": {"vectorA": {"type": "array", "items": {"type": "number"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "number"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}], "human_eval_answer": "calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.4, 0.6, 0.3, 0.8, 0.2])", "execution_result": [0.9884017323417256], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "In a physics experiment, you are given an object with a mass of 50 kilograms and a volume of 10 cubic meters. Can you use the 'calculate_density' function to determine the density of this object?", "function": [{"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "object", "properties": {"mass": {"type": "integer", "description": "The mass of the object."}, "volume": {"type": "integer", "description": "The volume of the object."}}, "required": ["mass", "volume"]}}, {"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}], "human_eval_answer": "calculate_density(mass=50, volume=10)", "execution_result": [5.0], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "In an advanced physics experiment, you are observing a unique object that has an initial velocity of 15 meters per second. The object is subjected to an acceleration of 9.8 meters per second squared for a duration of 10 seconds. Can you use the 'calculate_displacement' function to determine the displacement of this unique object during this time period?", "function": [{"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "object", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "human_eval_answer": "calculate_displacement(initial_velocity=15, acceleration=9.8, time=10)", "execution_result": [640.0], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "In a physics experiment, a particle with a charge of 5 coulombs is placed in an electric field with a potential difference of 10 volts. Can the 'calculate_electrostatic_potential_energy' function be used to determine the electrostatic potential energy of the particle in this field?", "function": [{"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge of the object."}, "voltage": {"type": "number", "description": "The voltage of the object."}}, "required": ["charge", "voltage"]}}], "human_eval_answer": "calculate_electrostatic_potential_energy(charge=5, voltage=10)", "execution_result": [50], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "In a high-speed chase scenario, a vehicle initially at rest, suddenly accelerates at a rate of 9.8 m/s\u00b2 for a duration of 12 seconds. Can we use the 'calculate_final_velocity' function to determine the final velocity of the vehicle after this period of acceleration?", "function": [{"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "object", "properties": {"vectorA": {"type": "array", "items": {"type": "number"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "number"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "calculate_final_velocity", "description": "Calculates the final velocity of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "human_eval_answer": "calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=12)", "execution_result": [117.60000000000001], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "In a financial scenario, suppose you have invested $5000 in a fixed deposit scheme that offers an annual interest rate of 5%. If you plan to keep the money in the deposit for 10 years, can you use the 'calculate_future_value' function to determine the value of your investment at the end of this period?", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "object", "properties": {"array": {"type": "array", "items": {"type": "number"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order.", "default": false}}, "required": ["array"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}], "human_eval_answer": "calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)", "execution_result": [5025.056325065662], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "In a complex scenario, you are a data analyst and you have been given a list of daily temperatures for the past month in a city. The temperatures are as follows: 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80 degrees Celsius. Can you use the 'calculate_mean' function to determine the average temperature for the past month?", "function": [{"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "object", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}], "human_eval_answer": "calculate_mean(numbers=[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])", "execution_result": [51.0], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a cryptographer, you are working on a new encryption algorithm that involves permutations of characters. You have a set of 26 characters (the English alphabet) and you want to know how many different permutations can be generated if you choose 5 characters at a time. Can you use the 'calculate_permutations' function to find out this information?", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}], "human_eval_answer": "calculate_permutations(n=26, k=5)", "execution_result": [7893600.0], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a financial analyst, you are studying the volatility of a certain stock's daily closing prices 1000,2000,3000,4000,5000,7000,9000,15000,20000,30000 over the past 10 trading days. You have recorded the closing prices and now you want to understand the dispersion of these prices. Can you use the 'calculate_standard_deviation' function to determine this using the list of recorded closing prices?", "function": [{"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}], "human_eval_answer": "calculate_standard_deviation(numbers=[1000,2000,3000,4000,5000,7000,9000,15000,20000,30000])", "execution_result": [8879.189152169245], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As an architect, you are designing a triangular park. The park's base is planned to be 500 meters and the height is 300 meters. Can you use the 'calculate_triangle_area' function to determine the total area of the park?", "function": [{"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "calculate_triangle_area", "description": "Calculates the area of a triangle given its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "integer", "description": "The base of the triangle."}, "height": {"type": "integer", "description": "The height of the triangle."}}, "required": ["base", "height"]}}], "human_eval_answer": "calculate_triangle_area(base=500, height=300)", "execution_result": [75000.0], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a financial analyst, you are tasked with converting a sum of 5000 Euros to Japanese Yen for a business transaction. Can you use the 'convert_currency' function to determine the equivalent amount in Yen? Please note that the ISO currency code for Euro is 'EUR' and for Japanese Yen is 'JPY'.", "function": [{"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to convert."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}, "returns": {"type": "number", "description": "The converted amount in the target currency."}}, {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}], "human_eval_answer": "convert_currency(amount=5000, from_currency='EUR', to_currency='JPY')", "execution_result": [802775.5], "execution_result_type": "pattern_match", "question_type": "executable_multiple_function"}
{"question": "As a physics student, you are studying the motion of a particle moving along a straight line. The position of the particle at any time 'x' is given by the function f(x) = 3t^2 + 2x + 1. You are interested in understanding the velocity of the particle at a specific time, say t = 5 seconds. Can you use the 'estimate_derivative' function to calculate this? Remember, the derivative of the position function gives the velocity.", "function": [{"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}], "human_eval_answer": "estimate_derivative(function=lambda x: 3*x**2 + 2*x + 1, x=5)", "execution_result": [32.00000264769187], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a language enthusiast, you've come across a slang term \"lit\" that you don't understand. Can you use the 'find_term_on_urban_dictionary' function to find the definition of this term? Remember, the term you're looking for is \"lit\".", "function": [{"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "object", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to convert."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}, "returns": {"type": "number", "description": "The converted amount in the target currency."}}], "human_eval_answer": "find_term_on_urban_dictionary(term=\"lit\")", "execution_result": ["When [something] is [turned up] or [popping] ..."], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As an aspiring artist, you've decided to create a large circular mural on a wall in your city. You need to calculate the area of the circle to determine how much paint you'll need. Could you use the 'geometry_area_circle' function to calculate the area? Please note, the radius of the circle is 15 feet.", "function": [{"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge of the object."}, "voltage": {"type": "number", "description": "The voltage of the object."}}, "required": ["charge", "voltage"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}], "human_eval_answer": "geometry_area_circle(radius=15)", "execution_result": [706.8583470577034], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a journalist, you are writing an article about the current COVID-19 situation in Brazil. To provide accurate information, you need the most recent data on active COVID-19 cases in Brazil. Can the 'get_active_covid_case_by_country' function assist you in obtaining this data if you specify 'Brazil' as the country?", "function": [{"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}, {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the active cases of."}}, "required": ["country"]}}], "human_eval_answer": "get_active_covid_case_by_country(country='Brazil')", "execution_result": [1306704], "execution_result_type": "pattern_match", "question_type": "executable_multiple_function"}
{"question": "As a financial analyst, you are researching the company behind the stock named 'AAPL'. Can the 'get_company_name_by_stock_name' function provide you with the company's name if you input 'AAPL' as the stock name?", "function": [{"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "object", "properties": {"matA": {"type": "array", "description": "The first matrix."}, "matB": {"type": "array", "description": "The second matrix."}}, "required": ["matA", "matB"]}}, {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}], "human_eval_answer": "get_company_name_by_stock_name(stock_name='AAPL')", "execution_result": ["Apple Inc."], "execution_result_type": "pattern_match", "question_type": "executable_multiple_function"}
{"question": "As a cybersecurity analyst, you suspect a potential breach from an IP address '192.168.1.1'. Can you use the 'get_coordinate_by_ip_address' function to find out the geographical location of this IP address by providing '192.168.1.1' as the IP address?", "function": [{"name": "get_coordinate_by_ip_address", "description": "Finds the latitude and longitude of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}], "human_eval_answer": "get_coordinate_by_ip_address(ip_address='192.168.1.1')", "execution_result": ["private range"], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a travel agent, you have a client who is interested in visiting the city of 'Paris'. Could you use the 'get_coordinates_from_city' function to determine the geographical coordinates of 'Paris' by providing 'Paris' as the city name?", "function": [{"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}, {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "object", "properties": {"city_name": {"type": "string", "description": "The name of the city."}}, "required": ["city_name"]}, "returns": {"type": "tuple", "description": "The latitude and longitude of the city."}}], "human_eval_answer": "get_coordinates_from_city(city_name='Paris')", "execution_result": [["48.8588897", "2.3200410217200766"]], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a health researcher, you are studying the impact of COVID-19 in 'Brazil'. Can you use the 'get_covid_death_by_country' function to find the most up-to-date total deaths in 'Brazil' by inputting 'Brazil' as the country name?", "function": [{"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge of the object."}, "voltage": {"type": "number", "description": "The voltage of the object."}}, "required": ["charge", "voltage"]}}, {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "object", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}], "human_eval_answer": "get_covid_death_by_country(country='Brazil')", "execution_result": [708999], "execution_result_type": "pattern_match", "question_type": "executable_multiple_function"}
{"question": "As a cartographer, you are working on a map of a city and you need to determine the exact distance between two points of interest. The points are located at coordinates (45.76, 4.85) and (48.85, 2.35). Can you use the 'get_distance' function to calculate the distance between these two points by providing these coordinates as 'pointA' and 'pointB' parameters respectively?", "function": [{"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}], "human_eval_answer": "get_distance(pointA=(45.76, 4.85), pointB=(48.85, 2.35))", "execution_result": [3.9746823772472712], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a mathematician, you are studying the Fibonacci sequence and you want to generate the first 20 numbers in this sequence. Can you use the 'get_fibonacci_sequence' function to calculate these numbers by inputting '20' as the 'n' parameter?", "function": [{"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}], "human_eval_answer": "get_fibonacci_sequence(n=20)", "execution_result": [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a product manager, you are interested in tracking the price of a specific product on Amazon. The product has an Amazon ASIN of 'B08N5WRWNW'. Can you use the 'get_price_by_amazon_ASIN' function to find the current price of this product by setting 'B08N5WRWNW' as the value for the 'ASIN' parameter?", "function": [{"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}, {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "object", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}], "human_eval_answer": "get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')", "execution_result": [{"status": "OK", "request_id": "4639d0e0-4d94-41c0-b4ed-50c02e58de23", "data": {}}], "execution_result_type": "pattern_match", "question_type": "executable_multiple_function"}
{"question": "As a mathematics teacher, you are preparing a lesson on prime factorization and you want to use the number 4567 as an example. Can you use the 'get_prime_factors' function to calculate the prime factors of 4567 by providing '4567' as the 'number' parameter value?", "function": [{"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "get_prime_factors", "description": "Calculates the prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to calculate the prime factors of."}}, "required": ["number"]}}, {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "object", "properties": {"city_name": {"type": "string", "description": "The name of the city."}}, "required": ["city_name"]}, "returns": {"type": "tuple", "description": "The latitude and longitude of the city."}}], "human_eval_answer": "get_prime_factors(number=4567)", "execution_result": [[4567]], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a product reviewer, you are writing an article about a specific product found on Amazon. You only have the Amazon ASIN, which is 'B08L8KC1J7'. Can you use the 'get_product_name_by_amazon_ASIN' function to find the name of the product by setting 'B08L8KC1J7' as the 'ASIN' parameter value?", "function": [{"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}], "human_eval_answer": "get_product_name_by_amazon_ASIN(ASIN='B08L8KC1J7')", "execution_result": ["ASUS TUF Gaming NVIDIA GeForce RTX 3070 OC Edition Graphics Card- PCIe 4.0, 8GB GDDR6, HDMI 2.1, DisplayPort 1.4a, Dual Ball Fan Bearings"], "execution_result_type": "pattern_match", "question_type": "executable_multiple_function"}
{"question": "As an online shopper, you are interested in a product on Amazon with an ASIN 'B08L5WGQGJ' and you want to know its rating. Can you use the 'get_rating_by_amazon_ASIN' function and input 'B08L5WGQGJ' as the 'ASIN' parameter to find out the product's rating?", "function": [{"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}], "human_eval_answer": "get_rating_by_amazon_ASIN(ASIN='B08L5WGQGJ')", "execution_result": "null", "execution_result_type": "pattern_match", "question_type": "executable_multiple_function"}
{"question": "As an investor, you're interested in the historical performance of the Apple Inc. stock. Would it be possible to use the 'get_stock_history' function, setting 'AAPL' as the 'stock_name' parameter, and '1mo' for the 'interval' parameter, to get the monthly stock history of Apple Inc.? Also, could you set the 'diffandsplits' parameter to 'true' to see if there were any stock splits or dividends during this period?", "function": [{"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}, {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the active cases of."}}, "required": ["country"]}}], "human_eval_answer": "get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=True)", "execution_result": [{"1682913600": {"date": "01-05-2023", "date_utc": 1682913600, "open": 169.28, "high": 179.35, "low": 164.31, "close": 177.25, "volume": 1275155500, "adjclose": 176.53}, "1685592000": {"date": "01-06-2023", "date_utc": 1685592000, "open": 177.7, "high": 194.48, "low": 176.93, "close": 193.97, "volume": 1297101100, "adjclose": 193.45}, "1688184000": {"date": "01-07-2023", "date_utc": 1688184000, "open": 193.78, "high": 198.23, "low": 186.6, "close": 196.45, "volume": 996066400, "adjclose": 195.93}, "1690862400": {"date": "01-08-2023", "date_utc": 1690862400, "open": 196.24, "high": 196.73, "low": 171.96, "close": 187.87, "volume": 1322439400, "adjclose": 187.37}, "1693540800": {"date": "01-09-2023", "date_utc": 1693540800, "open": 189.49, "high": 189.98, "low": 167.62, "close": 171.21, "volume": 1337586600, "adjclose": 170.98}, "1696132800": {"date": "01-10-2023", "date_utc": 1696132800, "open": 171.22, "high": 182.34, "low": 165.67, "close": 170.77, "volume": 1172719600, "adjclose": 170.55}, "1698811200": {"date": "01-11-2023", "date_utc": 1698811200, "open": 171, "high": 192.93, "low": 170.12, "close": 189.95, "volume": 1099586100, "adjclose": 189.7}, "1701406800": {"date": "01-12-2023", "date_utc": 1701406800, "open": 190.33, "high": 199.62, "low": 187.45, "close": 192.53, "volume": 1062774800, "adjclose": 192.53}, "1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 187.15, "high": 196.38, "low": 180.17, "close": 194.5, "volume": 929277200, "adjclose": 194.5}, "1706216401": {"date": "25-01-2024", "date_utc": 1706216401, "open": 195.22, "high": 196.27, "low": 193.12, "close": 194.17, "volume": 54460179, "adjclose": 194.17}}], "execution_result_type": "pattern_match", "question_type": "executable_multiple_function"}
{"question": "As an investment advisor, you are required to analyze the current price of Apple Inc.'s stock. Can you use the 'get_stock_price_by_stock_name' function, specifying 'AAPL' as the 'stock_name' parameter, to find the current price of Apple Inc.'s stock?", "function": [{"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}], "human_eval_answer": "get_stock_price_by_stock_name(stock_name='AAPL')", "execution_result": ["$193.49"], "execution_result_type": "pattern_match", "question_type": "executable_multiple_function"}
{"question": "As a geographer, you are working on a project that requires you to identify the time zones of various locations. Could you use the 'get_time_zone_by_coord' function and input '123.45' into the 'long' parameter and '-67.89' into the 'lat' parameter to find out the timezone of the coordinate at longitude 123.45 and latitude -67.89?", "function": [{"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "object", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}], "human_eval_answer": "get_time_zone_by_coord(long='123.45', lat='-67.89')", "execution_result": [null], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a climate researcher, you are studying the temperature variations in the Arctic region. You are particularly interested in the current temperature at the coordinates 90.00 (latitude) and 0.00 (longitude). Can you use the 'get_weather_data' function to fetch the current temperature data from the Open-Meteo API for these specific coordinates?", "function": [{"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "integer", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}, {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}, {"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}, "returns": {"type": "float", "description": "The current temperature in the coordinates you've asked for"}}], "human_eval_answer": "get_weather_data(coordinates=[90.00, 0.00])", "execution_result": [-22.0], "execution_result_type": "pattern_match", "question_type": "executable_multiple_function"}
{"question": "As a cybersecurity analyst, you are investigating a potential cyber attack that seems to originate from a specific IP address. The IP address in question is 192.168.1.1. Could you use the 'get_zipcode_by_ip_address' function to determine the zipcode of the location from where this IP address is being used?", "function": [{"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "object", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the product."}}, "required": ["zipcode"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "human_eval_answer": "get_zipcode_by_ip_address(ip_address=\"192.168.1.1\")", "execution_result": ["private range"], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a data analyst, you've been given two matrices to multiply in order to analyze a complex data set. The first matrix, matA, is [[1, 2], [3, 4]] and the second matrix, matB, is [[5, 6], [7, 8]]. Can you use the 'mat_mul' function to perform this matrix multiplication?", "function": [{"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "object", "properties": {"matA": {"type": "array", "description": "The first matrix."}, "matB": {"type": "array", "description": "The second matrix."}}, "required": ["matA", "matB"]}}, {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}], "human_eval_answer": "mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]])", "execution_result": [[[19, 22], [43, 50]]], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a mathematician, you are working on a complex combinatorics problem that requires the calculation of factorials. You need to find the factorial of the number 7. Can you use the 'math_factorial' function to calculate this?", "function": [{"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to convert."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}, "returns": {"type": "number", "description": "The converted amount in the target currency."}}, {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}], "human_eval_answer": "math_factorial(n=7)", "execution_result": [5040], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a historian, you are researching the political alliances in ancient Rome and you come across a problem that requires you to find the greatest common divisor of the number of senators in two different periods, 450 and 300. Can you use the 'math_gcd' function to solve this problem?", "function": [{"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "object", "properties": {"mass": {"type": "integer", "description": "The mass of the object."}, "volume": {"type": "integer", "description": "The volume of the object."}}, "required": ["mass", "volume"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}], "human_eval_answer": "math_gcd(a=450, b=300)", "execution_result": [150], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a music producer, you are trying to create a rhythm pattern that repeats every certain number of beats. You have two different drum patterns, one repeats every 18 beats and the other every 24 beats. You want to find out after how many beats both patterns will align again. Can you use the 'math_lcm' function with 'a' as 18 and 'b' as 24 to determine this?", "function": [{"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "human_eval_answer": "math_lcm(a=18, b=24)", "execution_result": [72.0], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a financial advisor, you are helping a client understand their potential mortgage payments. The client is considering a loan amount of $350,000 with an interest rate of 3.5% over a loan period of 30 years. Can you use the 'mortgage_calculator' function with 'loan_amount' as 350000, 'interest_rate' as 3.5, and 'loan_period' as 30 to calculate the monthly mortgage payment?", "function": [{"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}], "human_eval_answer": "mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)", "execution_result": [1571.656407330882], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a high school math teacher, you are preparing a lesson on quadratic equations. You want to demonstrate how to calculate the roots of a quadratic equation using the 'quadratic_roots' function. The equation you want to use for your demonstration is 3x^2 + 7x - 10 = 0. Can you use the 'quadratic_roots' function with 'a' as 3, 'b' as 7, and 'c' as -10 to find the roots of this equation?", "function": [{"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, {"name": "quadratic_roots", "description": "Calculates the roots of a quadratic equation.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first coefficient."}, "b": {"type": "integer", "description": "The second coefficient."}, "c": {"type": "integer", "description": "The third coefficient."}}, "required": ["a", "b", "c"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}], "human_eval_answer": "quadratic_roots(a=3, b=7, c=-10)", "execution_result": [[1.0, -3.3333333333333335]], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a data analyst, you are working on a project that requires you to analyze demographic data based on zip codes. You are currently using the 'retrieve_city_based_on_zipcode' function to find the city corresponding to a specific zip code. Can you invoke the 'retrieve_city_based_on_zipcode' function with 'zipcode' set to '90210' to determine the city of this zip code?", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "object", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the product."}}, "required": ["zipcode"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}], "human_eval_answer": "retrieve_city_based_on_zipcode(zipcode='90210')", "execution_result": ["BEVERLY HILLS"], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a cultural anthropologist, you are studying the celebration of holidays in different countries during various years. You have a list of years and countries and you are using the 'retrieve_holiday_by_year' function to find the corresponding holidays. Could you use the 'retrieve_holiday_by_year' function with the 'year' parameter set to '2010' and the 'country' parameter set to 'FR' to identify the holidays celebrated in France in 2010?", "function": [{"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "object", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "object", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}], "human_eval_answer": "retrieve_holiday_by_year(year='2010', country='FR')", "execution_result": [[{"date": "2010-01-01", "localName": "Jour de l'an", "name": "New Year's Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": 1967, "types": ["Public"]}, {"date": "2010-04-05", "localName": "Lundi de P\u00e2ques", "name": "Easter Monday", "countryCode": "FR", "fixed": false, "global": true, "counties": null, "launchYear": 1642, "types": ["Public"]}, {"date": "2010-05-01", "localName": "F\u00eate du Travail", "name": "Labour Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-05-08", "localName": "Victoire 1945", "name": "Victory in Europe Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-05-13", "localName": "Ascension", "name": "Ascension Day", "countryCode": "FR", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-05-24", "localName": "Lundi de Pentec\u00f4te", "name": "Whit Monday", "countryCode": "FR", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-07-14", "localName": "F\u00eate nationale", "name": "Bastille Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-08-15", "localName": "Assomption", "name": "Assumption Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-11-01", "localName": "Toussaint", "name": "All Saints' Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-11-11", "localName": "Armistice 1918", "name": "Armistice Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-12-25", "localName": "No\u00ebl", "name": "Christmas Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}]], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "As a data analyst, you are working on a project that requires you to organize a set of numerical data. You have access to the 'sort_array' function. Can you use this function with the 'array' parameter as '[34, 2, 56, 7, 9, 12]' and the 'reverse' parameter as 'True' to sort these numbers in descending order?", "function": [{"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "object", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, {"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "object", "properties": {"mass": {"type": "integer", "description": "The mass of the object."}, "volume": {"type": "integer", "description": "The volume of the object."}}, "required": ["mass", "volume"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}, {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "object", "properties": {"array": {"type": "array", "items": {"type": "number"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order.", "default": false}}, "required": ["array"]}}], "human_eval_answer": "sort_array(array=[34, 2, 56, 7, 9, 12], reverse=True)", "execution_result": [[56, 34, 12, 9, 7, 2]], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "Can you add two binary number '10011' and '1100'.", "function": [{"name": "add_binary_numbers", "description": "Adds two binary numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "string", "description": "The first binary number."}, "b": {"type": "string", "description": "The second binary number."}}, "required": ["a", "b"]}}, {"name": "convert_binary_to_decimal", "description": "Converts a binary number to a decimal number.", "parameters": {"type": "object", "properties": {"binary": {"type": "string", "description": "The binary number to convert."}}, "required": ["binary"]}, "returns": {"type": "integer", "description": "The decimal representation of the binary number."}}, {"name": "convert_decimal_to_hex", "description": "Converts a decimal number to a hexadecimal number.", "parameters": {"type": "object", "properties": {"decimal": {"type": "integer", "description": "The decimal number to convert."}}, "required": ["decimal"]}, "returns": {"type": "string", "description": "The hexadecimal representation of the decimal number."}}], "human_eval_answer": "add_binary_numbers(a='10011',b='1100')", "execution_result": ["11111"], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "Can you use x=[1,2,-3],y=[4,-5,6] as datapoint to fit a linear regression model and predict the value at 10.", "function": [{"name": "linear_regression", "description": "Finds the linear regression of a set of points and evaluates it at a given point.", "parameters": {"type": "object", "properties": {"x": {"type": "array", "description": "The x coordinates of the points.", "items": {"type": "number"}}, "y": {"type": "array", "description": "The y coordinates of the points.", "items": {"type": "number"}}, "point": {"type": "number", "description": "The point to calculate the linear regression at."}}, "required": ["x", "y", "point"]}}, {"name": "calculate_slope", "description": "Calculates the slope of the linear regression line from a set of points.", "parameters": {"type": "object", "properties": {"x": {"type": "array", "description": "The x coordinates of the points.", "items": {"type": "number"}}, "y": {"type": "array", "description": "The y coordinates of the points.", "items": {"type": "number"}}}, "required": ["x", "y"]}}, {"name": "calculate_intercept", "description": "Calculates the y-intercept of the linear regression line from a set of points and a given slope.", "parameters": {"type": "object", "properties": {"x": {"type": "array", "description": "The x coordinates of the points.", "items": {"type": "number"}}, "y": {"type": "array", "description": "The y coordinates of the points.", "items": {"type": "number"}}, "slope": {"type": "number", "description": "The slope of the linear regression line."}}, "required": ["x", "y", "slope"]}}, {"name": "predict_value", "description": "Predicts the value of y given the slope, intercept, and an x value.", "parameters": {"type": "object", "properties": {"slope": {"type": "number", "description": "The slope of the linear regression line."}, "intercept": {"type": "number", "description": "The y-intercept of the linear regression line."}, "x": {"type": "number", "description": "The x value to predict the y for."}}, "required": ["slope", "intercept", "x"]}}], "human_eval_answer": "linear_regression(x=[1,2,-3],y=[4,-5,6],point=10)", "execution_result": [-15.476190476190476], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "Calculate the investment value of 10000 initial investment and 1000 annual contribution for 5 years. With an interest rate of 5% and inflation rate of [1%,2%,3%,4%,4%].", "function": [{"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "number", "description": "The annual return rate in percentage."}, "inflation_rate": {"type": "array", "items": {"type": "number"}, "description": "The inflation rate for each year in percentage."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}, {"name": "compound_interest", "description": "Calculates compound interest over time.", "parameters": {"type": "object", "properties": {"principal": {"type": "integer", "description": "The principal amount."}, "rate": {"type": "number", "description": "The annual interest rate."}, "times_compounded": {"type": "integer", "description": "The number of times the interest is compounded per year."}, "years": {"type": "integer", "description": "The number of years to calculate the compound interest for."}}, "required": ["principal", "rate", "times_compounded", "years"]}}, {"name": "inflation_adjustment", "description": "Adjusts an amount for inflation.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to adjust for inflation."}, "inflation_rate": {"type": "number", "description": "The annual inflation rate."}, "years": {"type": "integer", "description": "The number of years to adjust for inflation."}}, "required": ["amount", "inflation_rate", "years"]}}], "human_eval_answer": "calculate_investment_value(initial_investment=10000, annual_contribution=1000, years=5, annual_return=0.05, inflation_rate=[0.01,0.02,0.03,0.04,0.04])", "execution_result": [16145.646273400002], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "Calculate the investment value of 1 million initial investment and 1k annual contribution for 3 years. With an interest rate of 10% and inflation rate of [1%,4%,4%].", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment with periodic contributions.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "annual_contribution": {"type": "integer", "description": "The amount contributed to the investment annually."}, "years": {"type": "integer", "description": "The number of years the investment will grow."}, "rate_of_return": {"type": "number", "description": "The annual rate of return on the investment."}}, "required": ["present_value", "annual_contribution", "years", "rate_of_return"]}, "returns": {"type": "number", "description": "The future value of the investment."}}, {"name": "adjust_for_inflation", "description": "Adjusts the investment value for inflation for each year.", "parameters": {"type": "object", "properties": {"investment_value": {"type": "number", "description": "The value of the investment to adjust."}, "inflation_rates": {"type": "array", "items": {"type": "number"}, "description": "The inflation rates for each year."}}, "required": ["investment_value", "inflation_rates"]}, "returns": {"type": "number", "description": "The adjusted value of the investment after accounting for inflation."}}, {"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "number", "description": "The annual return rate in percentage."}, "inflation_rate": {"type": "array", "items": {"type": "number"}, "description": "The inflation rate for each year in percentage."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}], "human_eval_answer": "calculate_investment_value(initial_investment=1000000, annual_contribution=1000, years=3, annual_return=0.10, inflation_rate=[0.01, 0.04, 0.04])", "execution_result": [1063843.4989999998], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "What is the nutrition need for a female 80 years old 170cm of weight 59kg? She has an activity level of 4 and goal of reducing weight.", "function": [{"name": "calculate_basal_metabolic_rate", "description": "Calculates the Basal Metabolic Rate (BMR) of a person.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "The weight of the person in kilograms."}, "height": {"type": "number", "description": "The height of the person in centimeters."}, "age": {"type": "number", "description": "The age of the person in years."}, "gender": {"type": "string", "description": "The gender of the person. Possible options [male, female, other]."}}, "required": ["weight", "height", "age", "gender"]}}, {"name": "calculate_daily_energy_expenditure", "description": "Calculates the daily energy expenditure based on BMR and activity level.", "parameters": {"type": "object", "properties": {"basal_metabolic_rate": {"type": "number", "description": "The BMR of the person."}, "activity_level": {"type": "number", "description": "The activity level of the person. Possible options [1,2,3,4,5]."}}, "required": ["basal_metabolic_rate", "activity_level"]}}, {"name": "calculate_nutritional_needs", "description": "Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "The weight of the person in kilograms."}, "height": {"type": "number", "description": "The height of the person in centimeters."}, "age": {"type": "number", "description": "The age of the person in years."}, "gender": {"type": "string", "description": "The gender of the person. Possible options [male, female, other]."}, "activity_level": {"type": "number", "description": "The activity level of the person. Possible options [1,2,3,4,5]."}, "goal": {"type": "string", "description": "The goal of the person. Possible options [lose, gain, maintain]."}}, "required": ["weight", "height", "age", "gender", "activity_level", "goal"]}}], "human_eval_answer": "calculate_nutritional_needs(weight=59,height=170,age=80,gender='female',activity_level=4,goal='lose')", "execution_result": [{"calories": 1524.15985, "proteins_g": 114.31198875, "fats_g": 42.33777361111111, "carbohydrates_g": 171.46798312500002}], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "Book a deluxe room of 1000 dollar from Aug.11,2024, to Aug.15,2024, with customer id 123.", "function": [{"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "object", "properties": {"room_type": {"type": "object", "description": "The room type to book."}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY."}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, {"name": "calculate_total_price", "description": "Calculates the total price of the room booking.", "parameters": {"type": "object", "properties": {"room_price": {"type": "number", "description": "The price per night of the room."}, "nights": {"type": "integer", "description": "The number of nights for the booking."}, "discount": {"type": "number", "description": "The discount amount (if any).", "default": 0}}, "required": ["room_price", "nights"]}}, {"name": "confirm_booking", "description": "Confirms the room booking and sends a confirmation to the customer.", "parameters": {"type": "object", "properties": {"customer_id": {"type": "string", "description": "The customer ID."}, "room_number": {"type": "string", "description": "The room number assigned to the booking."}, "total_price": {"type": "number", "description": "The total price for the booking."}}, "required": ["customer_id", "room_number", "total_price"]}}], "human_eval_answer": "book_room(room_type={'type':'deluxe','price':1000},check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')", "execution_result": [{"customer_id": "123", "room_number": {"type": "deluxe", "price": 1000}, "check_in_date": "08-11-2024", "check_out_date": "08-15-2024", "total_price": 4000}], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "Order me 101 dumplings of 0.1 dollars, 20 rice bowl of 10 dollars", "function": [{"name": "order_food", "description": "Orders food for a customer. Return the total price.", "parameters": {"type": "object", "properties": {"item": {"type": "array", "items": {"type": "string"}, "description": "the name of the product."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "the number of the product purchased."}, "price": {"type": "array", "items": {"type": "number"}, "description": "the price of the product."}}, "required": ["item", "quantity", "price"]}}, {"name": "calculate_total", "description": "Calculates the total price of an order given the quantities and prices.", "parameters": {"type": "object", "properties": {"quantities": {"type": "array", "items": {"type": "integer"}, "description": "The quantities of each product."}, "prices": {"type": "array", "items": {"type": "number"}, "description": "The price of each product."}}, "required": ["quantities", "prices"]}}, {"name": "apply_discount", "description": "Applies a discount to the total price.", "parameters": {"type": "object", "properties": {"total": {"type": "number", "description": "The original total price."}, "discount": {"type": "number", "description": "The discount percentage to apply."}}, "required": ["total", "discount"]}}], "human_eval_answer": "order_food(item=['dumplings','rice bowl'], quantity=[101,20], price=[0.1,10])", "execution_result": [210.1], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "What's the director of Pulp Fiction.", "function": [{"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, {"name": "calculate_interest_rate", "description": "Calculates the interest rate for a given principal, rate, and time.", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The initial amount of money."}, "rate": {"type": "number", "description": "The interest rate per period."}, "time": {"type": "number", "description": "The time the money is invested or borrowed for."}}, "required": ["principal", "rate", "time"]}}, {"name": "convert_temperature", "description": "Converts temperature from Celsius to Fahrenheit or vice versa.", "parameters": {"type": "object", "properties": {"temperature": {"type": "number", "description": "The temperature to convert."}, "unit_from": {"type": "string", "description": "The current unit of the temperature (Celsius or Fahrenheit)."}, "unit_to": {"type": "string", "description": "The unit to convert the temperature to (Celsius or Fahrenheit)."}}, "required": ["temperature", "unit_from", "unit_to"]}}, {"name": "generate_random_number", "description": "Generates a random number within a specified range.", "parameters": {"type": "object", "properties": {"min": {"type": "integer", "description": "The minimum value of the range."}, "max": {"type": "integer", "description": "The maximum value of the range."}}, "required": ["min", "max"]}}], "human_eval_answer": "get_movie_director(movie_name='Pulp Fiction')", "execution_result": ["Quentin Tarantino"], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "What's the age limit rating of Avatar.", "function": [{"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, {"name": "get_movie_genre", "description": "Retrieves the genre of a movie from the OMDB API.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The name of the movie to retrieve the genre for."}}, "required": ["movie_name"]}}, {"name": "get_director_by_movie_name", "description": "Gets the director of a movie.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The movie to find the director of."}}, "required": ["movie_name"]}}], "human_eval_answer": "get_movie_rating(movie_name='Avatar')", "execution_result": ["PG-13"], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "What is the are of polygon formed by vertices [[1,2],[3,4],[1,4],[3,7]]", "function": [{"name": "convert_coordinates", "description": "Converts a list of tuples into a list of lists.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "tuple", "items": {"type": "number"}, "minItems": 2, "maxItems": 2, "description": "A single coordinate represented by a tuple (x, y)."}, "description": "The coordinates to be converted, where each coordinate is a tuple (x, y)."}}, "required": ["coordinates"]}}, {"name": "polygon_area", "description": "Calculate the area of a polygon given its vertices using the shoelace formula.", "parameters": {"type": "object", "properties": {"vertices": {"type": "array", "items": {"type": "array", "items": {"type": "number"}, "minItems": 2, "maxItems": 2, "description": "A single vertex represented by a 2 element list [x, y]."}, "description": "The vertices of the polygon, where each vertex is a 2 element list [x, y]."}}, "required": ["vertices"]}}, {"name": "validate_polygon", "description": "Checks if the given vertices form a valid polygon.", "parameters": {"type": "object", "properties": {"vertices": {"type": "array", "items": {"type": "array", "items": {"type": "number"}, "minItems": 2, "maxItems": 2, "description": "A single vertex represented by a 2 element list [x, y]."}, "description": "The vertices of the polygon, where each vertex is a 2 element list [x, y]."}}, "required": ["vertices"]}}], "human_eval_answer": "polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])", "execution_result": [0.0], "execution_result_type": "exact_match", "question_type": "executable_multiple_function"}
{"question": "\"Consider a game of chance where you have a 30% probability of winning each round. You decide to play this game 10 times in a row. What is the probability of you winning exactly 3 times? Now, imagine you played the game 15 times instead, what is the probability of winning exactly 5 times? Lastly, if you played the game 20 times, what is the probability of winning exactly 7 times?\"", "function": {"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "integer", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}, "human_eval_answer": "[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]", "execution_result": [0.2668279319999999, 0.20613038097752082, 0.1642619852172363], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "\"Consider a machine learning model that uses vector representation for its data. You have two vectors representing two different data points. The first vector, vectorA, has the values [0.5, 0.7, 0.2, 0.9, 0.1] and the second vector, vectorB, has the values [0.3, 0.6, 0.2, 0.8, 0.1]. What is the cosine similarity between these two vectors? Now consider another pair of vectors. The third vector, vectorC, has the values [0.2, 0.4, 0.6, 0.8, 1.0] and the fourth vector, vectorD, has the values [1.0, 0.8, 0.6, 0.4, 0.2]. What is the cosine similarity between vectorC and vectorD? Lastly, consider a fifth vector, vectorE, with values [0.1, 0.2, 0.3, 0.4, 0.5] and a sixth vector, vectorF, with values [0.5, 0.4, 0.3, 0.2, 0.1]. What is the cosine similarity between vectorE and vectorF?\"", "function": {"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "object", "properties": {"vectorA": {"type": "array", "items": {"type": "number"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "number"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, "human_eval_answer": "[\"calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.3, 0.6, 0.2, 0.8, 0.1])\", \"calculate_cosine_similarity(vectorA=[0.2, 0.4, 0.6, 0.8, 1.0], vectorB=[1.0, 0.8, 0.6, 0.4, 0.2])\", \"calculate_cosine_similarity(vectorA=[0.1, 0.2, 0.3, 0.4, 0.5], vectorB=[0.5, 0.4, 0.3, 0.2, 0.1])\"]", "execution_result": [0.9921843702464798, 0.6363636363636364, 0.6363636363636364], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "\"Imagine you are a scientist conducting an experiment. You have four different objects with varying masses and volumes. The first object, a metal cube, has a mass of 500 grams and a volume of 100 cubic centimeters. The second object, a plastic sphere, has a mass of 200 grams and a volume of 50 cubic centimeters. The third object, a wooden block, has a mass of 300 grams and a volume of 75 cubic centimeters. The fourth object, a glass cylinder, has a mass of 400 grams and a volume of 80 cubic centimeters. Can you calculate the density of each of these objects using the 'calculate_density' function?\"", "function": {"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "object", "properties": {"mass": {"type": "integer", "description": "The mass of the object."}, "volume": {"type": "integer", "description": "The volume of the object."}}, "required": ["mass", "volume"]}}, "human_eval_answer": "[\"calculate_density(mass=500, volume=100)\", \"calculate_density(mass=200, volume=50)\", \"calculate_density(mass=300, volume=75)\", \"calculate_density(mass=400, volume=80)\"]", "execution_result": [5.0, 4.0, 4.0, 5.0], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Imagine you are a physicist studying the motion of different objects. You have three different objects that you've launched with a catapult. The first object, a stone, was launched with an initial velocity of 20 m/s and an acceleration of -9.8 m/s^2. The second object, a rubber ball, was launched with an initial velocity of 30 m/s and an acceleration of -9.8 m/s^2. The third object, a metal ball, was launched with an initial velocity of 25 m/s and an acceleration of -9.8 m/s^2. Each of these objects were in motion for 5 seconds. Can you calculate the displacement of each of these objects using the 'calculate_displacement' function?", "function": {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "[calculate_displacement(initial_velocity=20, acceleration=-9.8, time=5), calculate_displacement(initial_velocity=30, acceleration=-9.8, time=5), calculate_displacement(initial_velocity=25, acceleration=-9.8, time=5)]", "execution_result": [-22.500000000000014, 27.499999999999986, 2.499999999999986], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Imagine you are a physicist studying the electrostatic interactions between different charged objects. You have three different objects with varying charges and voltages. The first object, a proton, has a charge of 1.6 x 10^-19 Coulombs and is subjected to a voltage of 500 Volts. The second object, an electron, has a charge of -1.6 x 10^-19 Coulombs and is subjected to a voltage of 1000 Volts. The third object, a neutron, has a charge of 0 Coulombs and is subjected to a voltage of 2000 Volts. Can you calculate the electrostatic potential energy of each of these objects using the 'calculate_electrostatic_potential_energy' function?", "function": {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge of the object."}, "voltage": {"type": "number", "description": "The voltage of the object."}}, "required": ["charge", "voltage"]}}, "human_eval_answer": "[calculate_electrostatic_potential_energy(charge=1.6e-19, voltage=500), calculate_electrostatic_potential_energy(charge=-1.6e-19, voltage=1000), calculate_electrostatic_potential_energy(charge=0, voltage=2000)]", "execution_result": [7.999999999999999e-17, -1.5999999999999999e-16, 0], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Imagine you are a physicist studying the motion of different objects. You have three different objects with varying initial velocities, accelerations, and times of motion. The first object, a car, has an initial velocity of 5 m/s, accelerates at a rate of 2 m/s^2, and has been moving for 10 seconds. The second object, a bicycle, has an initial velocity of 2 m/s, accelerates at a rate of 1 m/s^2, and has been moving for 15 seconds. The third object, a skateboard, has an initial velocity of 1 m/s, accelerates at a rate of 0.5 m/s^2, and has been moving for 20 seconds. Can you calculate the final velocity of each of these objects using the 'calculate_final_velocity' function?", "function": {"name": "calculate_final_velocity", "description": "Calculates the final velocity of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "[calculate_final_velocity(initial_velocity=5, acceleration=2, time=10), calculate_final_velocity(initial_velocity=2, acceleration=1, time=15), calculate_final_velocity(initial_velocity=1, acceleration=0.5, time=20)]", "execution_result": [25, 17, 11.0], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Imagine you are an investor who is considering several different investment options. You have three different investments with varying present values, interest rates, and periods. The first investment, a bond, has a present value of $5000, an interest rate of 5%, and will be held for 10 years. The second investment, a mutual fund, has a present value of $2000, an interest rate of 7%, and will be held for 15 years. The third investment, a stock, has a present value of $1000, an interest rate of 10%, and will be held for 20 years. Can you calculate the future value of each of these investments using the 'calculate_future_value' function?", "function": {"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, "human_eval_answer": "[calculate_future_value(present_value=5000, interest_rate=5, periods=10), calculate_future_value(present_value=2000, interest_rate=7, periods=15), calculate_future_value(present_value=1000, interest_rate=10, periods=20)]", "execution_result": [8144.47313388721, 5518.063081430672, 6727.499949325611], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Determine the average score of a basketball player who scored 35, 40, 45, 50, and 55 points in his last five games, the average temperature recorded over a week with temperatures of 72, 75, 78, 80, 82, and 85 degrees Fahrenheit, and the average price of a dozen eggs over a month with prices of $1.50, $1.55, $1.60, $1.65, and $1.70?", "function": {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "human_eval_answer": "[calculate_mean(numbers=[35, 40, 45, 50, 55]), calculate_mean(numbers=[72, 75, 78, 80, 82, 85]), calculate_mean(numbers=[1.50, 1.55, 1.60, 1.65, 1.70])]", "execution_result": [45.0, 78.66666666666667, 1.6], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Determine the number of ways you can arrange 5 books from a collection of 20 on a shelf, the number of different lineups you can create from a basketball team of 12 players if only 5 can be on the court at a time, and the number of different ways you can choose 3 main courses from a menu of 10 at a restaurant?", "function": {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, "human_eval_answer": "[calculate_permutations(n=20, k=5), calculate_permutations(n=12, k=5), calculate_permutations(n=10, k=3)]", "execution_result": [1860480.0, 95040.0, 720.0], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Determine the standard deviation of the following sets of numbers: the ages of a group of people which are 23, 34, 45, 56, 67, 78, 89, the prices of a set of items in a store which are $10, $20, $30, $40, $50, $60, and the scores of a basketball team in a season which are 90, 80, 70, 60, 50, 40?", "function": {"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "human_eval_answer": "[calculate_standard_deviation(numbers=[23, 34, 45, 56, 67, 78, 89]), calculate_standard_deviation(numbers=[10, 20, 30, 40, 50, 60]), calculate_standard_deviation(numbers=[90, 80, 70, 60, 50, 40])]", "execution_result": [22.0, 17.07825127659933, 17.07825127659933], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'calculate_triangle_area' function to find the area of the following triangles: a triangle with a base of 15 meters and a height of 20 meters, a triangle with a base of 25 feet and a height of 30 feet, and a triangle with a base of 35 inches and a height of 40 inches?", "function": {"name": "calculate_triangle_area", "description": "Calculates the area of a triangle given its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "integer", "description": "The base of the triangle."}, "height": {"type": "integer", "description": "The height of the triangle."}}, "required": ["base", "height"]}}, "human_eval_answer": "[calculate_triangle_area(base=15, height=20), calculate_triangle_area(base=25, height=30), calculate_triangle_area(base=35, height=40)]", "execution_result": [150.0, 375.0, 700.0], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'convert_currency' function to find out how much 5000 Japanese Yen (JPY) would be in US Dollars (USD),in Euros (EUR), and in Australian Dollars (AUD), and how much 100 Canadian Dollars (CAD) would be in Swiss Francs (CHF)?", "function": {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to convert."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}, "returns": {"type": "number", "description": "The converted amount in the target currency."}}, "human_eval_answer": "[convert_currency(amount=5000, from_currency='JPY', to_currency='USD'), convert_currency(amount=300, from_currency='GBP', to_currency='EUR'), convert_currency(amount=2000, from_currency='INR', to_currency='AUD'), convert_currency(amount=100, from_currency='CAD', to_currency='CHF')]", "execution_result": [33.915, 350.73, 36.519999999999996, 63.980000000000004], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'estimate_derivative' function to calculate the derivative of the function f(x) = 3x^2 + 2x - 1 at the point x = 4, the function g(x) = 5x^3 - 3x^2 + 2x + 1 at the point x = -2, the function h(x) = 2x^4 - 3x^3 + 2x^2 - x + 1 at the point x = 0, and the function i(x) = x^5 - 2x^4 + 3x^3 - 2x^2 + x - 1 at the point x = 1?", "function": {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, "human_eval_answer": "[estimate_derivative(function=lambda x: 3*x**2 + 2*x - 1, x=4), estimate_derivative(function=lambda x: 5*x**3 - 3*x**2 + 2*x + 1, x=-2), estimate_derivative(function=lambda x: 2*x**4 - 3*x**3 + 2*x**2 - x + 1, x=0), estimate_derivative(function=lambda x: x**5 - 2*x**4 + 3*x**3 - 2*x**2 + x - 1, x=1)]", "execution_result": [26.000037678386434, 74.00004164992424, -1.000000082740371, 3.000000248221113], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'find_term_on_urban_dictionary' function to find the definition of the term 'Lit', then use the same function to find the definition of 'Savage',and 'YOLO'?", "function": {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "object", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, "human_eval_answer": "[find_term_on_urban_dictionary(term='Lit'), find_term_on_urban_dictionary(term='Savage'), find_term_on_urban_dictionary(term='FOMO'), find_term_on_urban_dictionary(term='YOLO')]", "execution_result": ["Contrary to popular modern belief, Lit is a term used to describe mildly intoxicated. It was often used by blues and [jazz musicians] in the 40s, 50s and 60s to describe the \"[sweet spot]\" in which someone was drunk enough to be relaxed and play better, without being wasted and suffering from motor skill [impairment].", "Adj: [Merciless], [brutally honest]; Usually reffering to somebody who has [no regard] for how another person feels and doesn't hold back.", "A disorder that [Norman] \"Nick\" suffers from. He cannot miss out on anything or it will just [continuously] eat at him forever. He will try to go to any extent to [ensure] that he does not miss out on anything because he doesn't want to be the one person who wasn't there.", "An overused acronym for \"[You only live once].\" There is an [exception] for those who believe in [reincarnation] or are cats."], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you calculate the area of a circle with a radius of 5 units using the 'geometry_area_circle' function, then use the same function to calculate the area of another circle with a radius of 10 units, and finally use it to calculate the area of two more circles with radii of 15 units and 20 units respectively?", "function": {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, "human_eval_answer": "[geometry_area_circle(radius=5), geometry_area_circle(radius=10), geometry_area_circle(radius=15), geometry_area_circle(radius=20)]", "execution_result": [78.53981633974483, 314.1592653589793, 706.8583470577034, 1256.6370614359173], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'get_active_covid_case_by_country' function to find the most recent number of active COVID cases in France, then use the same function to find the active cases in Italy, and finally use it to find the active cases in both the United States and China respectively?", "function": {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the active cases of."}}, "required": ["country"]}}, "human_eval_answer": "[get_active_covid_case_by_country(country='France'), get_active_covid_case_by_country(country='Italy'), get_active_covid_case_by_country(country='United States'), get_active_covid_case_by_country(country='China')]", "execution_result": [0, 193385, {"get": "statistics", "parameters": {"country": "United States"}, "errors": [], "results": 0, "response": []}, 118977], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "Find the company name for the stock named 'AAPL', then use the same function to find the company name for 'GOOGL', and finally use it to find the company names for 'AMZN' and 'MSFT' respectively?", "function": {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, "human_eval_answer": "[get_company_name_by_stock_name(stock_name='AAPL'), get_company_name_by_stock_name(stock_name='GOOGL'), get_company_name_by_stock_name(stock_name='AMZN'), get_company_name_by_stock_name(stock_name='MSFT')]", "execution_result": ["Apple Inc.", "Alphabet Inc.", "Amazon.com, Inc.", "Microsoft Corporation"], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "Find the latitude and longitude for the IP address '192.168.1.1', then use the same function to find the coordinates for '172.16.254.1', and finally use it to find the coordinates for '10.0.0.1' and '192.0.2.1' respectively?", "function": {"name": "get_coordinate_by_ip_address", "description": "Finds the latitude and longitude of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "human_eval_answer": "[get_coordinate_by_ip_address(ip_address='192.168.1.1'), get_coordinate_by_ip_address(ip_address='172.16.254.1'), get_coordinate_by_ip_address(ip_address='10.0.0.1'), get_coordinate_by_ip_address(ip_address='192.0.2.1')]", "execution_result": ["private range", "private range", "private range", "reserved range"], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Find the latitude and longitude for the city 'New York', then use the same function to find the coordinates for 'Los Angeles', and finally use it to find the coordinates for 'Chicago' and 'Houston' respectively?", "function": {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "object", "properties": {"city_name": {"type": "string", "description": "The name of the city."}}, "required": ["city_name"]}, "returns": {"type": "tuple", "description": "The latitude and longitude of the city."}}, "human_eval_answer": "[get_coordinates_from_city(city_name='New York'), get_coordinates_from_city(city_name='Los Angeles'), get_coordinates_from_city(city_name='Chicago'), get_coordinates_from_city(city_name='Houston')]", "execution_result": [["40.7127281", "-74.0060152"], ["34.0536909", "-118.242766"], ["41.8755616", "-87.6244212"]], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Find the total deaths from COVID in 'Brazil', then use the same function to find the total deaths in 'India', and finally use it to find the total deaths in 'Russia' and 'South Africa' respectively?", "function": {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}, "human_eval_answer": "[get_covid_death_by_country(country='Brazil'), get_covid_death_by_country(country='India'), get_covid_death_by_country(country='Russia'), get_covid_death_by_country(country='South Africa')]", "execution_result": [708999, 533442, 401834, {"get": "statistics", "parameters": {"country": "South Africa"}, "errors": [], "results": 0, "response": []}], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'get_distance' function to calculate the distance between pointA, which is a tuple representing the coordinates (3, 4), and pointB, which is another tuple representing the coordinates (7, 9)? Then, can you use the same function to calculate the distance between pointA, represented by the coordinates (1, 2), and pointB, represented by the coordinates (5, 6)? Finally, can you use it to calculate the distance between pointA, represented by the coordinates (0, 0), and pointB, represented by the coordinates (8, 15), and then between pointA, represented by the coordinates (10, 12), and pointB, represented by the coordinates (20, 25)?", "function": {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, "human_eval_answer": "[get_distance(pointA=(3, 4), pointB=(7, 9)), get_distance(pointA=(1, 2), pointB=(5, 6)), get_distance(pointA=(0, 0), pointB=(8, 15)), get_distance(pointA=(10, 12), pointB=(20, 25))]", "execution_result": [6.4031242374328485, 5.656854249492381, 17.0, 16.401219466856727], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'get_fibonacci_sequence' function to calculate the first 10 numbers of the Fibonacci sequence? Then, can you use the same function to calculate the first 20 numbers of the Fibonacci sequence? Finally, can you use it to calculate the first 5 numbers of the Fibonacci sequence.", "function": {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, "human_eval_answer": "[get_fibonacci_sequence(n=10), get_fibonacci_sequence(n=20), get_fibonacci_sequence(n=5), get_fibonacci_sequence(n=15)]", "execution_result": [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], [0, 1, 1, 2, 3], [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'get_price_by_amazon_ASIN' function to find the price of the product with Amazon ASIN 'B08N5WRWNW'? Then, can you use the same function to find the price of the product with Amazon ASIN 'B07FZ8S74R'? After that, can you use it to find the price of the product with Amazon ASIN 'B07B4L1PQ8', and then the product with Amazon ASIN 'B07RF1XD36'?", "function": {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "human_eval_answer": "[get_price_by_amazon_ASIN(ASIN='B08N5WRWNW'), get_price_by_amazon_ASIN(ASIN='B07FZ8S74R'), get_price_by_amazon_ASIN(ASIN='B07B4L1PQ8'), get_price_by_amazon_ASIN(ASIN='B07RF1XD36')]", "execution_result": [{"status": "OK", "request_id": "98387fe3-9100-4048-a0c4-3aec1b30b672", "data": {}}, null, null, "$333.00"], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'get_prime_factors' function to calculate the prime factors of the number 456? After that, can you use the same function to calculate the prime factors of the number 789? Then, can you use it to calculate the prime factors of the number 321, and finally, can you use it to calculate the prime factors of the number 654?", "function": {"name": "get_prime_factors", "description": "Calculates the prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to calculate the prime factors of."}}, "required": ["number"]}}, "human_eval_answer": "[get_prime_factors(number=456), get_prime_factors(number=789), get_prime_factors(number=321), get_prime_factors(number=654)]", "execution_result": [[2, 2, 2, 3, 19], [3, 263], [3, 107], [2, 3, 109]], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'get_product_name_by_amazon_ASIN' function to find the product name for the Amazon ASIN 'B08L5VG843'? After that, can you use the same function to find the product name for the Amazon ASIN 'B07XJ8C8F5'? Then, can you use it to find the product name for the Amazon ASIN 'B07FZ8S74R', and finally, can you use it to find the product name for the Amazon ASIN 'B07HJHKL9S'?", "function": {"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "human_eval_answer": "[get_product_name_by_amazon_ASIN(ASIN='B08L5VG843'), get_product_name_by_amazon_ASIN(ASIN='B07XJ8C8F5'), get_product_name_by_amazon_ASIN(ASIN='B07FZ8S74R'), get_product_name_by_amazon_ASIN(ASIN='B07HJHKL9S')]", "execution_result": [{"status": "OK", "request_id": "82a192dd-2496-4c93-9008-bcefed7a904d", "data": {}}, "Echo Dot (4th Gen, 2020 release) | Smart speaker with Alexa | Charcoal", "Echo Dot (3rd Gen, 2018 release) - Smart speaker with Alexa - Charcoal", {"status": "OK", "request_id": "82a192dd-2496-4c93-9008-bcefed7a904d", "data": {}}], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "Can you find the rating of the product with Amazon ASIN 'B07HJHKL9S' using the 'get_rating_by_amazon_ASIN' function? After that, can you use the same function to find the rating for the product with Amazon ASIN 'B07FZ8S74R'? Then, can you use it to find the rating for the product with Amazon ASIN 'B08L5VG843', and finally, can you use it to find the rating for the product with Amazon ASIN 'B07XJ8C8F5'?", "function": {"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "human_eval_answer": "[get_rating_by_amazon_ASIN(ASIN='B07HJHKL9S'), get_rating_by_amazon_ASIN(ASIN='B07FZ8S74R'), get_rating_by_amazon_ASIN(ASIN='B08L5VG843'), get_rating_by_amazon_ASIN(ASIN='B07XJ8C8F5')]", "execution_result": [{"status": "OK", "request_id": "82a192dd-2496-4c93-9008-bcefed7a904d", "data": {}}, "4.7", {"status": "OK", "request_id": "82a192dd-2496-4c93-9008-bcefed7a904d", "data": {}}, "4.7"], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'get_stock_history' function to find the price history of the stock named 'Apple Inc.' for an interval of '1d'? After that, can you use the same function to find the price history for the stock named 'Microsoft Corp.' for an interval of '1wk' with the 'diffandsplits' parameter set to true? Then, can you use it to find the price history for the stock named 'Amazon.com Inc.' for an interval of '1mo', and finally, can you use it to find the price history for the stock named 'Tesla Inc.' for an interval of '3mo' with the 'diffandsplits' parameter set to false?", "function": {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name like AAPL, MSFT.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}, "human_eval_answer": "[get_stock_history(stock_name='AAPL', interval='1d'), get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits=True), get_stock_history(stock_name='AMZN', interval='1mo'), get_stock_history(stock_name='TSLA', interval='3mo', diffandsplits=False)]", "execution_result": [{"1704983400": {"date": "11-01-2024", "date_utc": 1704983400, "open": 186.54, "high": 187.05, "low": 183.62, "close": 185.59, "volume": 49128400, "adjclose": 185.59}, "1705069800": {"date": "12-01-2024", "date_utc": 1705069800, "open": 186.06, "high": 186.74, "low": 185.19, "close": 185.92, "volume": 40444700, "adjclose": 185.92}, "1705415400": {"date": "16-01-2024", "date_utc": 1705415400, "open": 182.16, "high": 184.26, "low": 180.93, "close": 183.63, "volume": 65603000, "adjclose": 183.63}, "1705501800": {"date": "17-01-2024", "date_utc": 1705501800, "open": 181.27, "high": 182.93, "low": 180.3, "close": 182.68, "volume": 47317400, "adjclose": 182.68}, "1705588200": {"date": "18-01-2024", "date_utc": 1705588200, "open": 186.09, "high": 189.14, "low": 185.83, "close": 188.63, "volume": 78005800, "adjclose": 188.63}, "1705674600": {"date": "19-01-2024", "date_utc": 1705674600, "open": 189.33, "high": 191.95, "low": 188.82, "close": 191.56, "volume": 68741000, "adjclose": 191.56}, "1705933800": {"date": "22-01-2024", "date_utc": 1705933800, "open": 192.3, "high": 195.33, "low": 192.26, "close": 193.89, "volume": 60133900, "adjclose": 193.89}, "1706020200": {"date": "23-01-2024", "date_utc": 1706020200, "open": 195.02, "high": 195.75, "low": 193.83, "close": 195.18, "volume": 42355600, "adjclose": 195.18}, "1706106600": {"date": "24-01-2024", "date_utc": 1706106600, "open": 195.42, "high": 196.38, "low": 194.34, "close": 194.5, "volume": 53631300, "adjclose": 194.5}, "1706216401": {"date": "25-01-2024", "date_utc": 1706216401, "open": 195.22, "high": 196.27, "low": 193.12, "close": 194.17, "volume": 54460179, "adjclose": 194.17}}, {"1701061200": {"date": "27-11-2023", "date_utc": 1701061200, "open": 376.78, "high": 384.3, "low": 371.31, "close": 374.51, "volume": 135170500, "adjclose": 374.51}, "1701666000": {"date": "04-12-2023", "date_utc": 1701666000, "open": 369.1, "high": 374.46, "low": 362.9, "close": 374.23, "volume": 119574100, "adjclose": 374.23}, "1702270800": {"date": "11-12-2023", "date_utc": 1702270800, "open": 368.48, "high": 377.64, "low": 364.13, "close": 370.73, "volume": 205258300, "adjclose": 370.73}, "1702875600": {"date": "18-12-2023", "date_utc": 1702875600, "open": 369.45, "high": 376.03, "low": 368.68, "close": 374.58, "volume": 103522400, "adjclose": 374.58}, "1703480400": {"date": "25-12-2023", "date_utc": 1703480400, "open": 375, "high": 377.16, "low": 372.81, "close": 376.04, "volume": 60628500, "adjclose": 376.04}, "1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 373.86, "high": 375.9, "low": 366.5, "close": 367.75, "volume": 90230600, "adjclose": 367.75}, "1704690000": {"date": "08-01-2024", "date_utc": 1704690000, "open": 369.3, "high": 390.68, "low": 369.01, "close": 388.47, "volume": 118974700, "adjclose": 388.47}, "1705294800": {"date": "15-01-2024", "date_utc": 1705294800, "open": 393.66, "high": 398.67, "low": 384.81, "close": 398.67, "volume": 102100500, "adjclose": 398.67}, "1705899600": {"date": "22-01-2024", "date_utc": 1705899600, "open": 400.02, "high": 405.63, "low": 393.59, "close": 402.56, "volume": 72409800, "adjclose": 402.56}, "1706216401": {"date": "25-01-2024", "date_utc": 1706216401, "open": 404.32, "high": 407.01, "low": 402.53, "close": 404.87, "volume": 20529365, "adjclose": 404.87}}, {"1682913600": {"date": "01-05-2023", "date_utc": 1682913600, "open": 104.95, "high": 122.92, "low": 101.15, "close": 120.58, "volume": 1432891600, "adjclose": 120.58}, "1685592000": {"date": "01-06-2023", "date_utc": 1685592000, "open": 120.69, "high": 131.49, "low": 119.93, "close": 130.36, "volume": 1242648800, "adjclose": 130.36}, "1688184000": {"date": "01-07-2023", "date_utc": 1688184000, "open": 130.82, "high": 136.65, "low": 125.92, "close": 133.68, "volume": 1058754800, "adjclose": 133.68}, "1690862400": {"date": "01-08-2023", "date_utc": 1690862400, "open": 133.55, "high": 143.63, "low": 126.41, "close": 138.01, "volume": 1210426200, "adjclose": 138.01}, "1693540800": {"date": "01-09-2023", "date_utc": 1693540800, "open": 139.46, "high": 145.86, "low": 123.04, "close": 127.12, "volume": 1120271900, "adjclose": 127.12}, "1696132800": {"date": "01-10-2023", "date_utc": 1696132800, "open": 127.28, "high": 134.48, "low": 118.35, "close": 133.09, "volume": 1224564700, "adjclose": 133.09}, "1698811200": {"date": "01-11-2023", "date_utc": 1698811200, "open": 133.96, "high": 149.26, "low": 133.71, "close": 146.09, "volume": 1025986900, "adjclose": 146.09}, "1701406800": {"date": "01-12-2023", "date_utc": 1701406800, "open": 146, "high": 155.63, "low": 142.81, "close": 151.94, "volume": 931128600, "adjclose": 151.94}, "1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 151.54, "high": 158.51, "low": 144.05, "close": 156.87, "volume": 717816300, "adjclose": 156.87}, "1706216401": {"date": "25-01-2024", "date_utc": 1706216401, "open": 156.95, "high": 158.51, "low": 154.55, "close": 157.75, "volume": 43261452, "adjclose": 157.75}}, {"1641013200": {"date": "01-01-2022", "date_utc": 1641013200, "open": 382.58, "high": 402.67, "low": 233.33, "close": 359.2, "volume": 5036406000, "adjclose": 359.2}, "1648785600": {"date": "01-04-2022", "date_utc": 1648785600, "open": 360.38, "high": 384.29, "low": 206.86, "close": 224.47, "volume": 5480409300, "adjclose": 224.47}, "1656648000": {"date": "01-07-2022", "date_utc": 1656648000, "open": 227, "high": 314.67, "low": 216.17, "close": 265.25, "volume": 4739418200, "adjclose": 265.25}, "1664596800": {"date": "01-10-2022", "date_utc": 1664596800, "open": 254.5, "high": 257.5, "low": 108.24, "close": 123.18, "volume": 6564786100, "adjclose": 123.18}, "1672549200": {"date": "01-01-2023", "date_utc": 1672549200, "open": 118.47, "high": 217.65, "low": 101.81, "close": 207.46, "volume": 10833964400, "adjclose": 207.46}, "1680321600": {"date": "01-04-2023", "date_utc": 1680321600, "open": 199.91, "high": 276.99, "low": 152.37, "close": 261.77, "volume": 8627649000, "adjclose": 261.77}, "1688184000": {"date": "01-07-2023", "date_utc": 1688184000, "open": 276.49, "high": 299.29, "low": 212.36, "close": 250.22, "volume": 7332976000, "adjclose": 250.22}, "1696132800": {"date": "01-10-2023", "date_utc": 1696132800, "open": 244.81, "high": 268.94, "low": 194.07, "close": 248.48, "volume": 7535966900, "adjclose": 248.48}, "1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 250.08, "high": 251.25, "low": 206.27, "close": 207.83, "volume": 1696697400, "adjclose": 207.83}, "1706216400": {"date": "25-01-2024", "date_utc": 1706216400, "open": 189.7, "high": 192.8, "low": 180.06, "close": 182.63, "volume": 196130607, "adjclose": 182.63}}], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "Find the price of the stock named 'GOOG'? After that, can you use the same function to find the price for the stock named 'META'? Then, can you use it to find the price for the stock named 'NFLX', and finally, can you use it to find the price for the stock named 'Alibaba Group Holding Ltd.' BABA?", "function": {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, "human_eval_answer": "[get_stock_price_by_stock_name(stock_name='GOOG'),  get_stock_price_by_stock_name(stock_name='NFLX'), get_stock_price_by_stock_name(stock_name='BABA')]", "execution_result": ["$153.77", "$392.77", "$94.8388"], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "Determine the timezone of a location with longitude '77.1025' and latitude '28.7041'? After that, can you use the same function to find the timezone for the location with longitude '-73.935242' and latitude '40.730610'? Then, can you use it to find the timezone for the location with longitude '151.2093' and latitude '33.8688', and finally, can you use it to find the timezone for the location with longitude '139.6917' and latitude '35.6895'?", "function": {"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "object", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, "human_eval_answer": "[get_time_zone_by_coord(long='77.1025', lat='28.7041'), get_time_zone_by_coord(long='-73.935242', lat='40.730610'), get_time_zone_by_coord(long='151.2093', lat='33.8688'), get_time_zone_by_coord(long='139.6917', lat='35.6895')]", "execution_result": ["Etc/GMT-2", "Antarctica/Syowa", null, null], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you fetch the weather data using the 'get_weather_data' function for the coordinates '34.0522' and '-118.2437' which represent Los Angeles? After that, can you use the same function to fetch the weather data for the coordinates '51.5074' and '-0.1278' which represent London? Then, can you use it to fetch the weather data for the coordinates '-33.9249' and '18.4241' which represent Cape Town, and finally, can you use it to fetch the weather data for the coordinates '48.8566' and '2.3522' which represent Paris?", "function": {"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}, "returns": {"type": "float", "description": "The current temperature in the coordinates you've asked for"}}, "human_eval_answer": "[get_weather_data(coordinates=[34.0522, -118.2437]), get_weather_data(coordinates=[51.5074, -0.1278]), get_weather_data(coordinates=[-33.9249, 18.4241]), get_weather_data(coordinates=[48.8566, 2.3522])]", "execution_result": [17.0, 10.9, 19.5, 11.4], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'get_zipcode_by_ip_address' function to find the zipcode of the IP address '192.168.1.1'? After that, can you use the same function to find the zipcode of the IP address '172.16.254.1'? Then, can you use it to find the zipcode of the IP address '10.0.0.1', and finally, can you use it to find the zipcode of the IP address '203.0.113.0'?", "function": {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "human_eval_answer": "[get_zipcode_by_ip_address(ip_address='192.168.1.1'), get_zipcode_by_ip_address(ip_address='172.16.254.1'), get_zipcode_by_ip_address(ip_address='10.0.0.1'), get_zipcode_by_ip_address(ip_address='203.0.113.0')]", "execution_result": ["private range", "private range", "private range", "000000"], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'mat_mul' function to multiply the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]] with the matrix [[10, 11, 12], [13, 14, 15], [16, 17, 18]]? After that, can you use the same function to multiply the matrix [[19, 20], [21, 22]] with the matrix [[23, 24], [25, 26]]? Then, can you use it to multiply the matrix [[27, 28, 29, 30], [31, 32, 33, 34]] with the matrix [[35, 36, 37, 38], [39, 40, 41, 42]], and finally, can you use it to multiply the matrix [[43, 44], [45, 46]] with the matrix [[47, 48], [49, 50]]?", "function": {"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "object", "properties": {"matA": {"type": "array", "description": "The first matrix."}, "matB": {"type": "array", "description": "The second matrix."}}, "required": ["matA", "matB"]}}, "human_eval_answer": "[mat_mul(matA=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], matB=[[10, 11, 12], [13, 14, 15], [16, 17, 18]]), mat_mul(matA=[[19, 20], [21, 22]], matB=[[23, 24], [25, 26]]), mat_mul(matA=[[27, 28, 29, 30], [31, 32, 33, 34]], matB=[[35, 36, 37, 38], [39, 40, 41, 42]]), mat_mul(matA=[[43, 44], [45, 46]], matB=[[47, 48], [49, 50]])]", "execution_result": [[[84, 90, 96], [201, 216, 231], [318, 342, 366]], [[937, 976], [1033, 1076]], [[2037, 2092, 2147, 2202], [2333, 2396, 2459, 2522]], [[4177, 4264], [4369, 4460]]], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you calculate the factorial of 5 using the 'math_factorial' function? After that, can you also find the factorial of 7 using the same function? Then, can you use it to calculate the factorial of 10, and finally, can you use it to find the factorial of 12?", "function": {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}, "human_eval_answer": "[math_factorial(n=5), math_factorial(n=7), math_factorial(n=10), math_factorial(n=12)]", "execution_result": [120, 5040, 3628800, 479001600], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Determine the greatest common divisor of 45 and 60? After that, can you also use the same function to find the greatest common divisor of 81 and 27? Then, can you apply it to calculate the greatest common divisor of 144 and 96, and finally, can you use it to find the greatest common divisor of 100 and 80?", "function": {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "human_eval_answer": "[math_gcd(a=45, b=60), math_gcd(a=81, b=27), math_gcd(a=144, b=96), math_gcd(a=100, b=80)]", "execution_result": [15, 27, 48, 20], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Find the least common multiple of 35 and 45? After that, can you also use the same function to determine the least common multiple of 72 and 108? Then, can you apply it to calculate the least common multiple of 120 and 180, and finally, can you use it to find the least common multiple of 200 and 300?", "function": {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "human_eval_answer": "[math_lcm(a=35, b=45), math_lcm(a=72, b=108), math_lcm(a=120, b=180), math_lcm(a=200, b=300)]", "execution_result": [315.0, 216.0, 360.0, 600.0], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Determine the monthly mortgage payment for a loan amount of $350,000 with an interest rate of 3.5% over a loan period of 30 years? After that, can you also use the same function to calculate the monthly mortgage payment for a loan amount of $500,000 with an interest rate of 4% over a loan period of 20 years? Then, can you apply it to calculate the monthly mortgage payment for a loan amount of $750,000 with an interest rate of 2.5% over a loan period of 15 years, and finally, can you use it to find the monthly mortgage payment for a loan amount of $1,000,000 with an interest rate of 3% over a loan period of 10 years?", "function": {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, "human_eval_answer": "[mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30), mortgage_calculator(loan_amount=500000, interest_rate=0.04, loan_period=20), mortgage_calculator(loan_amount=750000, interest_rate=0.025, loan_period=15), mortgage_calculator(loan_amount=1000000, interest_rate=0.03, loan_period=10)]", "execution_result": [977.3494992030246, 2091.71249961032, 4174.527452049148, 8345.943749506196], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Find the roots of a quadratic equation with coefficients 3, 7, and 2? After that, can you also use the same function to calculate the roots for a quadratic equation with coefficients 5, 12, and 4? Then, can you apply it to find the roots of a quadratic equation with coefficients 8, 16, and 6, and finally, can you use it to find the roots of a quadratic equation with coefficients 10, 20, and 8?", "function": {"name": "quadratic_roots", "description": "Calculates the roots of a quadratic equation.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first coefficient."}, "b": {"type": "integer", "description": "The second coefficient."}, "c": {"type": "integer", "description": "The third coefficient."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "[quadratic_roots(a=3, b=7, c=2), quadratic_roots(a=5, b=12, c=4), quadratic_roots(a=8, b=16, c=6), quadratic_roots(a=10, b=20, c=8)]", "execution_result": [[-0.3333333333333333, -2.0], [-0.4, -2.0], [-0.5, -1.5], [-0.552786404500042, -1.4472135954999579]], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Find the city for the zipcode '90210'? After that, can you also use the same function to find the city for the zipcode '10001'? Then, can you apply it to find the city for the zipcode '60601', and finally, can you use it to find the city for the zipcode '94102'?", "function": {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "object", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the product."}}, "required": ["zipcode"]}}, "human_eval_answer": "[retrieve_city_based_on_zipcode(zipcode='90210'), retrieve_city_based_on_zipcode(zipcode='10001'), retrieve_city_based_on_zipcode(zipcode='60601'), retrieve_city_based_on_zipcode(zipcode='94102')]", "execution_result": ["BEVERLY HILLS", "NEW YORK", "CHICAGO", "SAN FRANCISCO"], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'retrieve_holiday_by_year' function to find the holidays for the year '2018' in the United States (US)? After that, can you also use the same function to find the holidays for the year '2020' in Germany (DE)? Then, can you apply it to find the holidays for the year '2019' in Spain (ES), and finally, can you use it to find the holidays for the year '2021' in the United Kingdom (GB)?", "function": {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "object", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, "human_eval_answer": "[retrieve_holiday_by_year(year='2018', country='US'), retrieve_holiday_by_year(year='2020', country='DE'), retrieve_holiday_by_year(year='2019', country='ES'), retrieve_holiday_by_year(year='2021', country='GB')]", "execution_result": [[{"date": "2018-01-01", "localName": "New Year's Day", "name": "New Year's Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2018-01-15", "localName": "Martin Luther King, Jr. Day", "name": "Martin Luther King, Jr. Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2018-02-19", "localName": "Presidents Day", "name": "Washington's Birthday", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2018-03-30", "localName": "Good Friday", "name": "Good Friday", "countryCode": "US", "fixed": false, "global": false, "counties": ["US-CT", "US-DE", "US-HI", "US-IN", "US-KY", "US-LA", "US-NC", "US-ND", "US-NJ", "US-TN"], "launchYear": null, "types": ["Public"]}, {"date": "2018-03-30", "localName": "Good Friday", "name": "Good Friday", "countryCode": "US", "fixed": false, "global": false, "counties": ["US-TX"], "launchYear": null, "types": ["Optional"]}, {"date": "2018-05-28", "localName": "Memorial Day", "name": "Memorial Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2018-07-04", "localName": "Independence Day", "name": "Independence Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2018-09-03", "localName": "Labor Day", "name": "Labour Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2018-10-08", "localName": "Columbus Day", "name": "Columbus Day", "countryCode": "US", "fixed": false, "global": false, "counties": ["US-AL", "US-AZ", "US-CO", "US-CT", "US-GA", "US-ID", "US-IL", "US-IN", "US-IA", "US-KS", "US-KY", "US-LA", "US-ME", "US-MD", "US-MA", "US-MS", "US-MO", "US-MT", "US-NE", "US-NH", "US-NJ", "US-NM", "US-NY", "US-NC", "US-OH", "US-OK", "US-PA", "US-RI", "US-SC", "US-TN", "US-UT", "US-VA", "US-WV"], "launchYear": null, "types": ["Public"]}, {"date": "2018-11-12", "localName": "Veterans Day", "name": "Veterans Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2018-11-22", "localName": "Thanksgiving Day", "name": "Thanksgiving Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": 1863, "types": ["Public"]}, {"date": "2018-12-25", "localName": "Christmas Day", "name": "Christmas Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}], [{"date": "2020-01-01", "localName": "Neujahr", "name": "New Year's Day", "countryCode": "DE", "fixed": true, "global": true, "counties": null, "launchYear": 1967, "types": ["Public"]}, {"date": "2020-01-06", "localName": "Heilige Drei K\u00f6nige", "name": "Epiphany", "countryCode": "DE", "fixed": true, "global": false, "counties": ["DE-BW", "DE-BY", "DE-ST"], "launchYear": 1967, "types": ["Public"]}, {"date": "2020-03-08", "localName": "Internationaler Frauentag", "name": "International Women's Day", "countryCode": "DE", "fixed": true, "global": false, "counties": ["DE-BE"], "launchYear": 2019, "types": ["Public"]}, {"date": "2020-04-10", "localName": "Karfreitag", "name": "Good Friday", "countryCode": "DE", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-04-12", "localName": "Ostersonntag", "name": "Easter Sunday", "countryCode": "DE", "fixed": false, "global": false, "counties": ["DE-BB", "DE-HE"], "launchYear": null, "types": ["Public"]}, {"date": "2020-04-13", "localName": "Ostermontag", "name": "Easter Monday", "countryCode": "DE", "fixed": false, "global": true, "counties": null, "launchYear": 1642, "types": ["Public"]}, {"date": "2020-05-01", "localName": "Tag der Arbeit", "name": "Labour Day", "countryCode": "DE", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-05-08", "localName": "Tag der Befreiung", "name": "Liberation Day", "countryCode": "DE", "fixed": false, "global": false, "counties": ["DE-BE"], "launchYear": null, "types": ["Public"]}, {"date": "2020-05-21", "localName": "Christi Himmelfahrt", "name": "Ascension Day", "countryCode": "DE", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-05-31", "localName": "Pfingstsonntag", "name": "Pentecost", "countryCode": "DE", "fixed": false, "global": false, "counties": ["DE-BB", "DE-HE"], "launchYear": null, "types": ["Public"]}, {"date": "2020-06-01", "localName": "Pfingstmontag", "name": "Whit Monday", "countryCode": "DE", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-06-11", "localName": "Fronleichnam", "name": "Corpus Christi", "countryCode": "DE", "fixed": false, "global": false, "counties": ["DE-BW", "DE-BY", "DE-HE", "DE-NW", "DE-RP", "DE-SL"], "launchYear": null, "types": ["Public"]}, {"date": "2020-08-15", "localName": "Mari\u00e4 Himmelfahrt", "name": "Assumption Day", "countryCode": "DE", "fixed": true, "global": false, "counties": ["DE-SL"], "launchYear": null, "types": ["Public"]}, {"date": "2020-09-20", "localName": "Weltkindertag", "name": "World Children's Day", "countryCode": "DE", "fixed": true, "global": false, "counties": ["DE-TH"], "launchYear": 2019, "types": ["Public"]}, {"date": "2020-10-03", "localName": "Tag der Deutschen Einheit", "name": "German Unity Day", "countryCode": "DE", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-10-31", "localName": "Reformationstag", "name": "Reformation Day", "countryCode": "DE", "fixed": true, "global": false, "counties": ["DE-BB", "DE-MV", "DE-SN", "DE-ST", "DE-TH", "DE-HB", "DE-HH", "DE-NI", "DE-SH"], "launchYear": null, "types": ["Public"]}, {"date": "2020-11-01", "localName": "Allerheiligen", "name": "All Saints' Day", "countryCode": "DE", "fixed": true, "global": false, "counties": ["DE-BW", "DE-BY", "DE-NW", "DE-RP", "DE-SL"], "launchYear": null, "types": ["Public"]}, {"date": "2020-11-18", "localName": "Bu\u00df- und Bettag", "name": "Repentance and Prayer Day", "countryCode": "DE", "fixed": false, "global": false, "counties": ["DE-SN"], "launchYear": null, "types": ["Public"]}, {"date": "2020-12-25", "localName": "Erster Weihnachtstag", "name": "Christmas Day", "countryCode": "DE", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-12-26", "localName": "Zweiter Weihnachtstag", "name": "St. Stephen's Day", "countryCode": "DE", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}], [{"date": "2019-01-01", "localName": "A\u00f1o Nuevo", "name": "New Year's Day", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": 1967, "types": ["Public"]}, {"date": "2019-01-06", "localName": "D\u00eda de Reyes / Epifan\u00eda del Se\u00f1or", "name": "Epiphany", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2019-02-28", "localName": "D\u00eda de Andaluc\u00eda", "name": "Day of Andaluc\u00eda", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-AN"], "launchYear": null, "types": ["Public"]}, {"date": "2019-03-01", "localName": "Dia de les Illes Balears", "name": "Day of the Balearic Islands", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-IB"], "launchYear": null, "types": ["Public"]}, {"date": "2019-03-19", "localName": "San Jos\u00e9", "name": "St. Joseph's Day", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-GA", "ES-PV", "ES-VC"], "launchYear": null, "types": ["Public"]}, {"date": "2019-04-18", "localName": "Jueves Santo", "name": "Maundy Thursday", "countryCode": "ES", "fixed": false, "global": false, "counties": ["ES-AN", "ES-AR", "ES-CL", "ES-CM", "ES-CN", "ES-EX", "ES-GA", "ES-IB", "ES-RI", "ES-MD", "ES-MC", "ES-NC", "ES-AS", "ES-PV", "ES-CB"], "launchYear": null, "types": ["Public"]}, {"date": "2019-04-19", "localName": "Viernes Santo", "name": "Good Friday", "countryCode": "ES", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2019-04-22", "localName": "Lunes de Pascua", "name": "Easter Monday", "countryCode": "ES", "fixed": false, "global": false, "counties": ["ES-CT", "ES-IB", "ES-RI", "ES-NC", "ES-PV", "ES-VC"], "launchYear": 1642, "types": ["Public"]}, {"date": "2019-04-23", "localName": "D\u00eda de Castilla y Le\u00f3n", "name": "Castile and Le\u00f3n Day", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CL"], "launchYear": null, "types": ["Public"]}, {"date": "2019-04-23", "localName": "San Jorge (D\u00eda de Arag\u00f3n)", "name": "Day of Arag\u00f3n", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-AR"], "launchYear": null, "types": ["Public"]}, {"date": "2019-05-01", "localName": "Fiesta del trabajo", "name": "Labour Day", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2019-05-02", "localName": "Fiesta de la Comunidad de Madrid", "name": "Day of Madrid", "countryCode": "ES", "fixed": false, "global": false, "counties": ["ES-MD"], "launchYear": null, "types": ["Public"]}, {"date": "2019-05-17", "localName": "D\u00eda das Letras Galegas", "name": "Galician Literature Day", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-GA"], "launchYear": null, "types": ["Public"]}, {"date": "2019-05-30", "localName": "D\u00eda de Canarias", "name": "Day of the Canary Islands", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CN"], "launchYear": null, "types": ["Public"]}, {"date": "2019-05-31", "localName": "D\u00eda de la Regi\u00f3n Castilla-La Mancha", "name": "Day of Castilla-La Mancha", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CM"], "launchYear": null, "types": ["Public"]}, {"date": "2019-06-09", "localName": "D\u00eda de La Rioja", "name": "Day of La Rioja", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-RI"], "launchYear": null, "types": ["Public"]}, {"date": "2019-06-09", "localName": "D\u00eda de la Regi\u00f3n de Murcia", "name": "Day of Murcia", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-MC"], "launchYear": null, "types": ["Public"]}, {"date": "2019-06-20", "localName": "Corpus Christi", "name": "Corpus Christi", "countryCode": "ES", "fixed": false, "global": false, "counties": ["ES-CM"], "launchYear": null, "types": ["Public"]}, {"date": "2019-06-24", "localName": "Sant Joan", "name": "St. John's Day", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CT", "ES-VC"], "launchYear": null, "types": ["Public"]}, {"date": "2019-07-25", "localName": "Santiago Ap\u00f3stol", "name": "Santiago Ap\u00f3stol", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-GA", "ES-PV"], "launchYear": null, "types": ["Public"]}, {"date": "2019-07-28", "localName": "D\u00eda de las Instituciones de Cantabria", "name": "Day of the Cantabrian Institutions", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CB"], "launchYear": null, "types": ["Public"]}, {"date": "2019-08-15", "localName": "Asunci\u00f3n", "name": "Assumption", "countryCode": "ES", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2019-09-08", "localName": "D\u00eda de Asturias", "name": "Day of Asturias", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-AS"], "launchYear": null, "types": ["Public"]}, {"date": "2019-09-08", "localName": "D\u00eda de Extremadura", "name": "Day of Extremadura", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-EX"], "launchYear": null, "types": ["Public"]}, {"date": "2019-09-11", "localName": "Diada Nacional de Catalunya", "name": "National Day of Catalonia", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CT"], "launchYear": null, "types": ["Public"]}, {"date": "2019-09-15", "localName": "La Bien Aparecida", "name": "Regional Holiday", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CB"], "launchYear": null, "types": ["Public"]}, {"date": "2019-10-09", "localName": "Dia de la Comunitat Valenciana", "name": "Day of the Valencian Community", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-VC"], "launchYear": null, "types": ["Public"]}, {"date": "2019-10-12", "localName": "Fiesta Nacional de Espa\u00f1a", "name": "Fiesta Nacional de Espa\u00f1a", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2019-11-01", "localName": "D\u00eda de todos los Santos", "name": "All Saints Day", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2019-12-06", "localName": "D\u00eda de la Constituci\u00f3n", "name": "Constitution Day", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2019-12-08", "localName": "Inmaculada Concepci\u00f3n", "name": "Immaculate Conception", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2019-12-25", "localName": "Navidad", "name": "Christmas Day", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2019-12-26", "localName": "Sant Esteve", "name": "St. Stephen's Day", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CT"], "launchYear": null, "types": ["Public"]}], [{"date": "2021-01-01", "localName": "New Year's Day", "name": "New Year's Day", "countryCode": "GB", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2021-01-04", "localName": "New Year's Day", "name": "New Year's Day", "countryCode": "GB", "fixed": false, "global": false, "counties": ["GB-SCT"], "launchYear": null, "types": ["Public"]}, {"date": "2021-03-17", "localName": "Saint Patrick's Day", "name": "Saint Patrick's Day", "countryCode": "GB", "fixed": true, "global": false, "counties": ["GB-NIR"], "launchYear": null, "types": ["Public"]}, {"date": "2021-04-02", "localName": "Good Friday", "name": "Good Friday", "countryCode": "GB", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2021-04-05", "localName": "Easter Monday", "name": "Easter Monday", "countryCode": "GB", "fixed": false, "global": false, "counties": ["GB-ENG", "GB-WLS", "GB-NIR"], "launchYear": null, "types": ["Public"]}, {"date": "2021-05-03", "localName": "Early May Bank Holiday", "name": "Early May Bank Holiday", "countryCode": "GB", "fixed": false, "global": true, "counties": null, "launchYear": 1978, "types": ["Public"]}, {"date": "2021-05-31", "localName": "Spring Bank Holiday", "name": "Spring Bank Holiday", "countryCode": "GB", "fixed": false, "global": true, "counties": null, "launchYear": 1971, "types": ["Public"]}, {"date": "2021-07-12", "localName": "Battle of the Boyne", "name": "Battle of the Boyne", "countryCode": "GB", "fixed": true, "global": false, "counties": ["GB-NIR"], "launchYear": null, "types": ["Public"]}, {"date": "2021-08-02", "localName": "Summer Bank Holiday", "name": "Summer Bank Holiday", "countryCode": "GB", "fixed": false, "global": false, "counties": ["GB-SCT"], "launchYear": 1971, "types": ["Public"]}, {"date": "2021-08-30", "localName": "Summer Bank Holiday", "name": "Summer Bank Holiday", "countryCode": "GB", "fixed": false, "global": false, "counties": ["GB-ENG", "GB-WLS", "GB-NIR"], "launchYear": 1971, "types": ["Public"]}, {"date": "2021-11-30", "localName": "Saint Andrew's Day", "name": "Saint Andrew's Day", "countryCode": "GB", "fixed": true, "global": false, "counties": ["GB-SCT"], "launchYear": null, "types": ["Public"]}, {"date": "2021-12-27", "localName": "Christmas Day", "name": "Christmas Day", "countryCode": "GB", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2021-12-28", "localName": "Boxing Day", "name": "St. Stephen's Day", "countryCode": "GB", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}]], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Sort the array [5, 2, 9, 1, 7] in ascending order? After that, can you use the same function to sort the array [3, 8, 6, 4] in descending order by setting the 'reverse' parameter to true? Then, can you apply it to sort the array [10, 20, 30, 40, 50] in ascending order, and finally, can you use it to sort the array [100, 200, 300, 400, 500] in descending order by setting the 'reverse' parameter to true?", "function": {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "object", "properties": {"array": {"type": "array", "items": {"type": "number"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order.", "default": false}}, "required": ["array"]}}, "human_eval_answer": "[sort_array(array=[5, 2, 9, 1, 7]), sort_array(array=[3, 8, 6, 4], reverse=True), sort_array(array=[10, 20, 30, 40, 50]), sort_array(array=[100, 200, 300, 400, 500], reverse=True)]", "execution_result": [[1, 2, 5, 7, 9], [8, 6, 4, 3], [10, 20, 30, 40, 50], [500, 400, 300, 200, 100]], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Add '0011' and '1100', then add '1010' and '0101', after that add '1111' and '0000', and finally add '0001' and '1110'.", "function": {"name": "add_binary_numbers", "description": "Adds two binary numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "string", "description": "The first binary number."}, "b": {"type": "string", "description": "The second binary number."}}, "required": ["a", "b"]}}, "human_eval_answer": "[add_binary_numbers(a='0011', b='1100'), add_binary_numbers(a='1010', b='0101'), add_binary_numbers(a='1111', b='0000'), add_binary_numbers(a='0001', b='1110')]", "execution_result": ["1111", "1111", "1111", "1111"], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use linear regression to find the value at point=10 for x=[1,2,3],y=[4,5,6], at point=15 for x=[2,4,6],y=[8,10,12], at point=20 for x=[3,6,9],y=[12,15,18], and at point=25 for x=[4,8,12],y=[16,20,24]?", "function": {"name": "linear_regression", "description": "Finds the linear regression of a set of points and evaluates it at a given point.", "parameters": {"type": "object", "properties": {"x": {"type": "array", "description": "The x coordinates of the points.", "items": {"type": "number"}}, "y": {"type": "array", "description": "The y coordinates of the points.", "items": {"type": "number"}}, "point": {"type": "number", "description": "The point to calculate the linear regression at."}}, "required": ["x", "y", "point"]}}, "human_eval_answer": "[linear_regression(x=[1,2,3],y=[4,5,6],point=10), linear_regression(x=[2,4,6],y=[8,10,12],point=15), linear_regression(x=[3,6,9],y=[12,15,18],point=20), linear_regression(x=[4,8,12],y=[16,20,24],point=25)]", "execution_result": [13.0, 21.0, 29.0, 37.0], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you find the maximum number of points that are in the same line out of all [[1,1],[2,2],[3,4],[5,5]]? Then, can you find the maximum number for these points [[1,2],[3,2],[5,2],[4,2]]? After that, can you determine it for these points [[0,0],[1,1],[0,1],[1,0]]? And finally, can you find the maximum number of points on the same line for these points [[1,1],[3,2],[5,3],[7,4]]?", "function": {"name": "maxPoints", "description": "Finds the maximum number of points on a line.", "parameters": {"type": "object", "properties": {"points": {"type": "array", "items": {"type": "array", "items": {"type": "integer"}, "minItems": 2, "maxItems": 2, "description": "A point represented by a 2 element list [x, y]."}, "description": "The list of points. Points are 2 element lists."}}, "required": ["points"]}}, "human_eval_answer": "[maxPoints(points=[[1,1],[2,2],[3,4],[5,5]]), maxPoints(points=[[1,2],[3,2],[5,2],[4,2]]), maxPoints(points=[[0,0],[1,1],[0,1],[1,0]]), maxPoints(points=[[1,1],[3,2],[5,3],[7,4]])]", "execution_result": [3, 4, 2, 4], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you calculate the investment value of 1 million initial investment and 1k annual contribution for 3 years, with an interest rate of 10% and an inflation rate of [1%,4%,4%] using the 'calculate_investment_value' function? After that, can you use the same function to calculate the investment value of 500k initial investment and 500 annual contribution for 5 years, with an interest rate of 7% and an inflation rate of [2%,3%,2%,3%,2%]? Then, can you use it to calculate the investment value of 250k initial investment and 2k annual contribution for 7 years, with an interest rate of 5% and an inflation rate of [1%,2%,1%,2%,1%,2%,1%], and finally, can you use it to calculate the investment value of 800k initial investment and 1.5k annual contribution for 10 years, with an interest rate of 8% and an inflation rate of [1%,2%,1%,2%,1%,2%,1%,2%,1%,2%]?", "function": {"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "number", "description": "The annual return rate in percentage."}, "inflation_rate": {"type": "array", "items": {"type": "number"}, "description": "The inflation rate for each year in percentage."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}, "human_eval_answer": "[calculate_investment_value(initial_investment=1000000, annual_contribution=1000, years=3, annual_return=0.1, inflation_rate=[0.01, 0.04, 0.04]), calculate_investment_value(initial_investment=500000, annual_contribution=500, years=5, annual_return=0.07, inflation_rate=[0.02, 0.03, 0.02, 0.03, 0.02]), calculate_investment_value(initial_investment=250000, annual_contribution=2000, years=7, annual_return=0.05, inflation_rate=[0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01]), calculate_investment_value(initial_investment=800000, annual_contribution=1500, years=10, annual_return=0.08, inflation_rate=[0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01, 0.02])]", "execution_result": ["1063843.4989999998", "598739.082", "324217.653", "1162911.256"], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you calculate the nutritional needs for a male aged 25, weighing 75kg, and 180cm tall with an activity level of 3 and the goal of gaining weight? After that, can you do the same for a female aged 30, weighing 65kg, and 165cm tall with an activity level of 2 and the goal of maintaining weight? Then, can you calculate it for a male aged 40, weighing 85kg, and 175cm tall with an activity level of 5 and the goal of losing weight? Finally, can you calculate the nutritional needs for a female aged 55, weighing 70kg, and 160cm tall with an activity level of 1 and the goal of losing weight?", "function": {"name": "calculate_nutritional_needs", "description": "Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "The weight of the person in kilograms."}, "height": {"type": "number", "description": "The height of the person in centimeters."}, "age": {"type": "number", "description": "The age of the person in years."}, "gender": {"type": "string", "description": "The gender of the person. Possible options [male, female, other]."}, "activity_level": {"type": "number", "description": "The activity level of the person. Possible options [1,2,3,4,5]."}, "goal": {"type": "string", "description": "The goal of the person. Possible options [lose, gain, maintain]."}}, "required": ["weight", "height", "age", "gender", "activity_level", "goal"]}}, "human_eval_answer": "[calculate_nutritional_needs(weight=75, height=180, age=25, gender='male', activity_level=3, goal='gain'), calculate_nutritional_needs(weight=65, height=165, age=30, gender='female', activity_level=2, goal='maintain'), calculate_nutritional_needs(weight=85, height=175, age=40, gender='male', activity_level=5, goal='lose'), calculate_nutritional_needs(weight=70, height=160, age=55, gender='female', activity_level=1, goal='lose')]", "execution_result": [{"calories": 3313.2996, "proteins_g": 248.49746999999996, "fats_g": 92.03609999999999, "carbohydrates_g": 372.746205}, {"calories": 1966.1372499999995, "proteins_g": 147.46029374999995, "fats_g": 54.614923611111095, "carbohydrates_g": 221.19044062499995}, {"calories": 2995.7188000000006, "proteins_g": 224.67891000000003, "fats_g": 83.21441111111113, "carbohydrates_g": 337.0183650000001}, {"calories": 1122.8956, "proteins_g": 84.21717, "fats_g": 31.191544444444446, "carbohydrates_g": 126.32575500000002}], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "Can you use the 'order_food' function to order me 10 burgers of 5 dollars each? Then, can you use the same function to order me 7 ice creams of 2 dollars each? After that, can you use it to order me 3 pizzas of 8 dollars each, and finally, can you use it to order me 12 donuts of 1 dollar each?", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "object", "properties": {"item": {"type": "array", "items": {"type": "string"}}, "quantity": {"type": "array", "items": {"type": "number", "description": "the number of the product purchased."}}, "price": {"type": "array", "items": {"type": "number", "description": "the number of the product purchased."}}}, "required": ["item", "quantity", "price"]}}, "human_eval_answer": "[order_food(item=['burger'], quantity=[10], price=[5]), order_food(item=['ice cream'], quantity=[7, price=[2]), order_food(item=['pizza'], quantity=[3], price=[8]), order_food(item=['donut'], quantity=[12], price=[1])]", "execution_result": [50, 14, 24, 12], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "A group of friends decided to order various items for their dinner. The first order consists of 101 dumplings at a price of 0.1 dollars each. The second order is for 20 rice bowls at 10 dollars each. The third order includes 50 spring rolls at 0.5 dollars each, and the fourth order is for 10 noodle soups at 3 dollars each. Can you calculate the total price for each order using the 'order_food' function?", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "object", "properties": {"item": {"type": "array", "items": {"type": "string"}}, "quantity": {"type": "array", "items": {"type": "number", "description": "the number of the product purchased."}}, "price": {"type": "array", "items": {"type": "number", "description": "the number of the product purchased."}}}, "required": ["item", "quantity", "price"]}}, "human_eval_answer": "[order_food(item='dumplings', quantity=101, price=0.1), order_food(item='rice bowl', quantity=20, price=10), order_food(item='spring rolls', quantity=50, price=0.5), order_food(item='noodle soup', quantity=10, price=3)]", "execution_result": [10.1, 200, 25, 30], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "What's the director of Pulp Fiction? After that, could you find out who directed the movie Reservoir Dogs? Then, can you tell me who directed the movie Kill Bill: Volume 1? Finally, could you look up the director of the movie Django Unchained?", "function": {"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "human_eval_answer": "[get_movie_director(movie_name='Pulp Fiction'), get_movie_director(movie_name='Reservoir Dogs'), get_movie_director(movie_name='Kill Bill'), get_movie_director(movie_name='Django Unchained')]", "execution_result": ["Quentin Tarantino", "Quentin Tarantino", "Quentin Tarantino", "Quentin Tarantino"], "execution_result_type": "pattern_match", "question_type": "executable_parallel_function"}
{"question": "What's the age limit rating of Pulp Fiction, and then use the same function to find the age limit rating for The Godfather, Schindler's List, and The Dark Knight respectively?", "function": {"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "human_eval_answer": "[get_movie_rating(movie_name='Pulp Fiction'), get_movie_rating(movie_name='The Godfather'), get_movie_rating(movie_name='Schindler's List'), get_movie_rating(movie_name='The Dark Knight')]", "execution_result": ["R", "R", "R", "PG-13"], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "What is the area of a polygon formed by vertices [[1,2],[3,4],[1,4],[3,7]]? After that, can you calculate the area of a polygon formed by vertices [[5,5],[6,7],[7,5]]? Then, can you find the area for a polygon formed by vertices [[2,1],[4,2],[3,4],[1,3]]? Finally, can you determine the area for a polygon formed by vertices [[-1,0],[2,3],[0,4],[-2,2]]?", "function": {"name": "polygon_area", "description": "Calculate the area of a polygon given its vertices using the shoelace formula.", "parameters": {"type": "object", "properties": {"vertices": {"type": "array", "items": {"type": "array", "items": {"type": "number"}, "minItems": 2, "maxItems": 2, "description": "A single vertex represented by a 2 element list [x, y]."}, "description": "The vertices of the polygon, where each vertex is a 2 element list [x, y]."}}, "required": ["vertices"]}}, "human_eval_answer": "[polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]]), polygon_area(vertices=[[5,5],[6,7],[7,5]]), polygon_area(vertices=[[2,1],[4,2],[3,4],[1,3]]), polygon_area(vertices=[[-1,0],[2,3],[0,4],[-2,2]])]", "execution_result": [0.0, 2.0, 5.0, 7.5], "execution_result_type": "exact_match", "question_type": "executable_parallel_function"}
{"question": "What is the current temperature at coordinates [45.4215, -75.6972] according to the Open-Meteo API and what is the probability of getting 5 successes in 10 trials with a success probability of 0.5 using the binomial probability calculation?", "function": [{"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}, "returns": {"type": "float", "description": "The current temperature in the coordinates you've asked for"}}, {"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "integer", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}], "human_eval_answer": "[get_weather_data(coordinates=[45.4215, -75.6972]), calc_binomial_probability(n=10, k=5, p=0.5)]", "execution_result": [-0.2, 0.24609375], "execution_result_type": "[\"pattern_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the cosine similarity between the vector [1, 2, 3] and the vector [4, 5, 6], and what is the stock price for the stock named 'AAPL'?", "function": [{"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "object", "properties": {"vectorA": {"type": "array", "items": {"type": "number"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "number"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}], "human_eval_answer": "[calculate_cosine_similarity(vectorA=[1, 2, 3], vectorB=[4, 5, 6]), get_stock_price_by_stock_name(stock_name='AAPL')]", "execution_result": [0.9746318461970762, "$193.98"], "execution_result_type": "[\"exact_match\", \"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the density of an object with a mass of 50 kg and volume of 10 m^3, and what would be the future value of an investment with a present value of $5000, an interest rate of 5%, and 10 periods, also can you tell me the current stock price of the company with the stock name 'Apple Inc.', and the rating of a product on Amazon with the ASIN 'B08N5WRWNW'?", "function": [{"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "object", "properties": {"mass": {"type": "integer", "description": "The mass of the object."}, "volume": {"type": "integer", "description": "The volume of the object."}}, "required": ["mass", "volume"]}}, {"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}], "human_eval_answer": "[calculate_density(mass=50, volume=10), calculate_future_value(present_value=5000, interest_rate=0.05, periods=10), get_stock_price_by_stock_name(stock_name='AAPL'), get_rating_by_amazon_ASIN(ASIN='B08N5WRWNW')]", "execution_result": [5.0, 5025.056325065662, "$193.98", {"status": "OK", "request_id": "f6adc94b-db9c-4c47-b688-e9d1d7bcc4e1", "data": {}}], "execution_result_type": "[\"exact_match\", \"exact_match\", \"pattern_match\", \"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "\"In the year 2020, I was living in Spain and I want to know the holidays of that year. Also, I remember an experiment I did that year where I launched an object with an initial velocity of 10 m/s, the object had an acceleration of 2 m/s^2, and it was moving for 5 seconds. Can you tell me the holidays of Spain in 2020 and also calculate the displacement of the object in my experiment?\"", "function": [{"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "object", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "human_eval_answer": "[\"retrieve_holiday_by_year(year='2020', country='ES')\", \"calculate_displacement(initial_velocity=10, acceleration=2, time=5)\"]", "execution_result": [[{"date": "2020-01-01", "localName": "A\u00f1o Nuevo", "name": "New Year's Day", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": 1967, "types": ["Public"]}, {"date": "2020-01-06", "localName": "D\u00eda de Reyes / Epifan\u00eda del Se\u00f1or", "name": "Epiphany", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-02-28", "localName": "D\u00eda de Andaluc\u00eda", "name": "Day of Andaluc\u00eda", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-AN"], "launchYear": null, "types": ["Public"]}, {"date": "2020-03-01", "localName": "Dia de les Illes Balears", "name": "Day of the Balearic Islands", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-IB"], "launchYear": null, "types": ["Public"]}, {"date": "2020-03-19", "localName": "San Jos\u00e9", "name": "St. Joseph's Day", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CM", "ES-GA", "ES-PV", "ES-VC"], "launchYear": null, "types": ["Public"]}, {"date": "2020-04-09", "localName": "Jueves Santo", "name": "Maundy Thursday", "countryCode": "ES", "fixed": false, "global": false, "counties": ["ES-AN", "ES-AR", "ES-CL", "ES-CM", "ES-CN", "ES-EX", "ES-GA", "ES-IB", "ES-RI", "ES-MD", "ES-MC", "ES-NC", "ES-AS", "ES-PV", "ES-CB"], "launchYear": null, "types": ["Public"]}, {"date": "2020-04-10", "localName": "Viernes Santo", "name": "Good Friday", "countryCode": "ES", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-04-13", "localName": "Lunes de Pascua", "name": "Easter Monday", "countryCode": "ES", "fixed": false, "global": false, "counties": ["ES-CT", "ES-IB", "ES-RI", "ES-NC", "ES-PV", "ES-VC"], "launchYear": 1642, "types": ["Public"]}, {"date": "2020-04-23", "localName": "D\u00eda de Castilla y Le\u00f3n", "name": "Castile and Le\u00f3n Day", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CL"], "launchYear": null, "types": ["Public"]}, {"date": "2020-04-23", "localName": "San Jorge (D\u00eda de Arag\u00f3n)", "name": "Day of Arag\u00f3n", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-AR"], "launchYear": null, "types": ["Public"]}, {"date": "2020-05-01", "localName": "Fiesta del trabajo", "name": "Labour Day", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-05-02", "localName": "Fiesta de la Comunidad de Madrid", "name": "Day of Madrid", "countryCode": "ES", "fixed": false, "global": false, "counties": ["ES-MD"], "launchYear": null, "types": ["Public"]}, {"date": "2020-05-17", "localName": "D\u00eda das Letras Galegas", "name": "Galician Literature Day", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-GA"], "launchYear": null, "types": ["Public"]}, {"date": "2020-05-30", "localName": "D\u00eda de Canarias", "name": "Day of the Canary Islands", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CN"], "launchYear": null, "types": ["Public"]}, {"date": "2020-05-31", "localName": "D\u00eda de la Regi\u00f3n Castilla-La Mancha", "name": "Day of Castilla-La Mancha", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CM"], "launchYear": null, "types": ["Public"]}, {"date": "2020-06-09", "localName": "D\u00eda de La Rioja", "name": "Day of La Rioja", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-RI"], "launchYear": null, "types": ["Public"]}, {"date": "2020-06-09", "localName": "D\u00eda de la Regi\u00f3n de Murcia", "name": "Day of Murcia", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-MC"], "launchYear": null, "types": ["Public"]}, {"date": "2020-06-11", "localName": "Corpus Christi", "name": "Corpus Christi", "countryCode": "ES", "fixed": false, "global": false, "counties": ["ES-CM"], "launchYear": null, "types": ["Public"]}, {"date": "2020-06-24", "localName": "Sant Joan", "name": "St. John's Day", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CT", "ES-VC"], "launchYear": null, "types": ["Public"]}, {"date": "2020-07-25", "localName": "Santiago Ap\u00f3stol", "name": "Santiago Ap\u00f3stol", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-GA", "ES-PV"], "launchYear": null, "types": ["Public"]}, {"date": "2020-07-28", "localName": "D\u00eda de las Instituciones de Cantabria", "name": "Day of the Cantabrian Institutions", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CB"], "launchYear": null, "types": ["Public"]}, {"date": "2020-08-15", "localName": "Asunci\u00f3n", "name": "Assumption", "countryCode": "ES", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-09-08", "localName": "D\u00eda de Asturias", "name": "Day of Asturias", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-AS"], "launchYear": null, "types": ["Public"]}, {"date": "2020-09-08", "localName": "D\u00eda de Extremadura", "name": "Day of Extremadura", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-EX"], "launchYear": null, "types": ["Public"]}, {"date": "2020-09-11", "localName": "Diada Nacional de Catalunya", "name": "National Day of Catalonia", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CT"], "launchYear": null, "types": ["Public"]}, {"date": "2020-09-15", "localName": "La Bien Aparecida", "name": "Regional Holiday", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CB"], "launchYear": null, "types": ["Public"]}, {"date": "2020-10-09", "localName": "Dia de la Comunitat Valenciana", "name": "Day of the Valencian Community", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-VC"], "launchYear": null, "types": ["Public"]}, {"date": "2020-10-12", "localName": "Fiesta Nacional de Espa\u00f1a", "name": "Fiesta Nacional de Espa\u00f1a", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-11-01", "localName": "D\u00eda de todos los Santos", "name": "All Saints Day", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-12-06", "localName": "D\u00eda de la Constituci\u00f3n", "name": "Constitution Day", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-12-08", "localName": "Inmaculada Concepci\u00f3n", "name": "Immaculate Conception", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-12-25", "localName": "Navidad", "name": "Christmas Day", "countryCode": "ES", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2020-12-26", "localName": "Sant Esteve", "name": "St. Stephen's Day", "countryCode": "ES", "fixed": true, "global": false, "counties": ["ES-CT"], "launchYear": null, "types": ["Public"]}], 75.0], "execution_result_type": "[\"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the electrostatic potential energy of an object with a charge of 5 Coulombs and a voltage of 10 volts, and what is the zipcode of the location of an IP address 192.168.1.1?", "function": [{"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge of the object."}, "voltage": {"type": "number", "description": "The voltage of the object."}}, "required": ["charge", "voltage"]}}], "human_eval_answer": "[calculate_electrostatic_potential_energy(charge=5, voltage=10),get_zipcode_by_ip_address(ip_address='192.168.1.1')]", "execution_result": [50, "private range"], "execution_result_type": "[\"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "You are a data scientist working on a project that involves analyzing the movement of an object and comparing it with another object's movement. You have the initial velocity, acceleration, and time of movement for both objects. For the first object, the initial velocity is 10 m/s, acceleration is 2 m/s^2, and it has been moving for 5 seconds. For the second object, the initial velocity is 15 m/s, acceleration is 1.5 m/s^2, and it has been moving for 7 seconds. \n\nYou also have a loan of $200,000 with an interest rate of 5% and a loan period of 30 years. \n\nCan you calculate the final velocity of both objects, compare their movements by calculating the cosine similarity of their velocity vectors, and also calculate your monthly mortgage payment?", "function": [{"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "object", "properties": {"vectorA": {"type": "array", "items": {"type": "number"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "number"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "calculate_final_velocity", "description": "Calculates the final velocity of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "human_eval_answer": "[calculate_final_velocity(initial_velocity=10, acceleration=2, time=5), calculate_final_velocity(initial_velocity=15, acceleration=1.5, time=7), calculate_cosine_similarity(vectorA=[10, 2, 5], vectorB=[15, 1.5, 7]), mortgage_calculator(loan_amount=200000, interest_rate=0.05, loan_period=30)]", "execution_result": [20, 25.5, 0.9958910989621141, 1073.6432460242795], "execution_result_type": "[\"exact_match\", \"exact_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "You have an investment with a present value of $5000, an interest rate of 5%, and you plan to hold it for 10 periods. You want to know the future value of this investment. After finding out the future value, you decide to invest the future value amount in a new scheme where you will get returns according to the Fibonacci sequence. You want to know the 15th number in the Fibonacci sequence. After getting the 15th Fibonacci number, you have an array of numbers [45, 23, 67, 89, 12, 34, 56, 78] and you want to sort this array in reverse order. Can you calculate the future value of your investment, find out the 15th number in the Fibonacci sequence, and sort the given array in reverse order?", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "object", "properties": {"array": {"type": "array", "items": {"type": "number"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order.", "default": false}}, "required": ["array"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}], "human_eval_answer": "[calculate_future_value(present_value=5000, interest_rate=0.05, periods=10), get_fibonacci_sequence(n=15), sort_array(array=[45, 23, 67, 89, 12, 34, 56, 78], reverse=True)]", "execution_result": [5025.056325065662, [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], [89, 78, 67, 56, 45, 34, 23, 12]], "execution_result_type": "[\"exact_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the mean of the following numbers: 5, 10, 15, 20, and 25, and can you also tell me the timezone of the coordinate with longitude '120.97388' and latitude '14.6042'?", "function": [{"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "object", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}], "human_eval_answer": "[calculate_mean(numbers=[5, 10, 15, 20, 25]), get_time_zone_by_coord(long='120.97388', lat='14.6042')]", "execution_result": [15.0, null], "execution_result_type": "[\"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "You have an investment with a present value of $5000, an interest rate of 5%, and you plan to keep it for 10 periods. You want to know the future value of this investment. Meanwhile, you are also interested in a stock named 'AAPL' and you want to know the company name of this stock. Additionally, you are curious about the number of permutations possible if you choose 3 elements from a set of 7 elements. Can you calculate the future value of your investment, find the company name of the stock, and calculate the number of permutations?", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}], "human_eval_answer": "[calculate_future_value(present_value=5000, interest_rate=0.05, periods=10), get_company_name_by_stock_name(stock_name='AAPL'), calculate_permutations(n=7, k=3)]", "execution_result": [5025.056325065662, "Apple Inc.", 210.0], "execution_result_type": "[\"exact_match\", \"pattern_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the standard deviation of the first 10 numbers in the Fibonacci sequence?", "function": [{"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}], "human_eval_answer": "[get_fibonacci_sequence(n=10), calculate_standard_deviation(numbers=get_fibonacci_sequence(n=10))]", "execution_result": [[[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10.467091286503619]], "execution_result_type": "[\"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the name of the company whose stock name is 'AAPL' and what is the least common multiple of the numbers 12 and 18? Also, can you calculate the area of a triangle with a base of 10 units and a height of 15 units?", "function": [{"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "calculate_triangle_area", "description": "Calculates the area of a triangle given its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "integer", "description": "The base of the triangle."}, "height": {"type": "integer", "description": "The height of the triangle."}}, "required": ["base", "height"]}}], "human_eval_answer": "[get_company_name_by_stock_name(stock_name='AAPL'), math_lcm(a=12, b=18), calculate_triangle_area(base=10, height=15)]", "execution_result": ["Apple Inc.", 36.0, 75.0], "execution_result_type": "[\"pattern_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the converted amount in Euros of the total value of 500 shares of Apple stock assuming the stock worth 500 dollar, given that the stock history interval is 1 month and diffandsplits is false, and the base currency is USD?", "function": [{"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to convert."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}, "returns": {"type": "number", "description": "The converted amount in the target currency."}}, {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}], "human_eval_answer": "[get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=False), convert_currency(amount=500*500, from_currency='USD', to_currency='EUR')]", "execution_result": [{"1682913600": {"date": "01-05-2023", "date_utc": 1682913600, "open": 169.28, "high": 179.35, "low": 164.31, "close": 177.25, "volume": 1275155500, "adjclose": 176.53}, "1685592000": {"date": "01-06-2023", "date_utc": 1685592000, "open": 177.7, "high": 194.48, "low": 176.93, "close": 193.97, "volume": 1297101100, "adjclose": 193.45}, "1688184000": {"date": "01-07-2023", "date_utc": 1688184000, "open": 193.78, "high": 198.23, "low": 186.6, "close": 196.45, "volume": 996066400, "adjclose": 195.93}, "1690862400": {"date": "01-08-2023", "date_utc": 1690862400, "open": 196.24, "high": 196.73, "low": 171.96, "close": 187.87, "volume": 1322439400, "adjclose": 187.37}, "1693540800": {"date": "01-09-2023", "date_utc": 1693540800, "open": 189.49, "high": 189.98, "low": 167.62, "close": 171.21, "volume": 1337586600, "adjclose": 170.98}, "1696132800": {"date": "01-10-2023", "date_utc": 1696132800, "open": 171.22, "high": 182.34, "low": 165.67, "close": 170.77, "volume": 1172719600, "adjclose": 170.55}, "1698811200": {"date": "01-11-2023", "date_utc": 1698811200, "open": 171, "high": 192.93, "low": 170.12, "close": 189.95, "volume": 1099586100, "adjclose": 189.7}, "1701406800": {"date": "01-12-2023", "date_utc": 1701406800, "open": 190.33, "high": 199.62, "low": 187.45, "close": 192.53, "volume": 1062774800, "adjclose": 192.53}, "1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 187.15, "high": 196.38, "low": 180.17, "close": 194.5, "volume": 929277200, "adjclose": 194.5}, "1706216401": {"date": "25-01-2024", "date_utc": 1706216401, "open": 195.22, "high": 196.27, "low": 193.12, "close": 194.17, "volume": 54460179, "adjclose": 194.17}}, 229625.0], "execution_result_type": "[\"pattern_match\", \"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "\"Can you first calculate the greatest common divisor of the numbers 36 and 48 using the 'math_gcd' function and then estimate the derivative of the function f(x) = x^2 at the point x = 5 using the 'estimate_derivative' function?\"", "function": [{"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}], "human_eval_answer": "[\"math_gcd(a=36, b=48)\", \"estimate_derivative(function=lambda x:x**2, x=5)\"]", "execution_result": [12, 10.00000082740371], "execution_result_type": "[\"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the definition of the term \"Bitcoin\" on Urban Dictionary and if I have 1000 CNY, how much would it be in USD and EUR using the ExchangeRate-API? Also, if the point A is at coordinates (3,5) and point B is at coordinates (7,9), what is the distance between these two points?", "function": [{"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "object", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to convert."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}, "returns": {"type": "number", "description": "The converted amount in the target currency."}}], "human_eval_answer": "[find_term_on_urban_dictionary(term='Bitcoin'), convert_currency(amount=1000, from_currency='CNY', to_currency='USD'), convert_currency(amount=1000, from_currency='CNY', to_currency='EUR'), get_distance(pointA=(3,5), pointB=(7,9))]", "execution_result": [["Bitcoin is virtual currency created in 2008 by an anonymous person or persons known as [Satoshi Nakamoto] and is [slated] to replace the Dollar as the global reserve currency due to its decentralized nature, and limited supply.\n\nNo bank can freeze your Bitcoin. No government can seize your Bitcoin. No thief can steal your Bitcoin. You control your private keys, and no one can take your Bitcoin away from you.\n\nBillionaires like Elon Musk have invested in Bitcoin as a store of value that will preserve their wealth. The motto in Bitcoin is [HODL], invest, and \"[hold on for dear life]\". Never sell, ever.\n\nThere will never be more than 21 million Bitcoins circulating in the world, by design. The Federal Reserve (neither federal, nor a reserve) prints money endlessly, then loans it out for interest making them and all of their [big banker] friends rich in the process. Bitcoin slowly decreases in supply until all 21 million bitcoins have been [minted].\n\nBitcoin sticks it to the man.\n\nBitcoin is the Internet of money.\n\nBitcoin is Gold 2.0.\n\nBitcoin started at $0 per Bitcoin in 2008. Bitcoin hit an all time high on November 8, 2021 when one Bitcoin was worth $67,[567].\n\nBitcoin value is estimated (by some) to reach $1 million dollars per Bitcoin, one day.\n\nBitcoin has created a new generation of millionaires and billionaires.\n\nBitcoin is like the invention of the wheel, or the Internet.\n\nBitcoin can make you rich, or not.\n\nAcquire at least 1 Bitcoin, and your great great grandkids will thank you.", 139.7, 128.3, 5.656854249492381]], "execution_result_type": "[\"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "A scientist is conducting an experiment where he is using a spherical object with a charge of 5 coulombs and a voltage of 10 volts. He wants to calculate the electrostatic potential energy of the object. In another part of his experiment, he is studying the properties of a circle and needs to calculate the area of a circle with a radius of 7 units. Can you help him calculate the electrostatic potential energy of the object and the area of the circle?", "function": [{"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge of the object."}, "voltage": {"type": "number", "description": "The voltage of the object."}}, "required": ["charge", "voltage"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}], "human_eval_answer": "[calculate_electrostatic_potential_energy(charge=5, voltage=10), geometry_area_circle(radius=7)]", "execution_result": [50, 153.93804002589985], "execution_result_type": "[\"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What are the most up-to-date total deaths and active cases of COVID-19 in both Italy and Spain?", "function": [{"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}, {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the active cases of."}}, "required": ["country"]}}], "human_eval_answer": "[get_covid_death_by_country(country='Italy'), get_covid_death_by_country(country='Spain'), get_active_covid_case_by_country(country='Italy'), get_active_covid_case_by_country(country='Spain')]", "execution_result": [195752, 121760, 193385, 30634], "execution_result_type": "[\"pattern_match\", \"pattern_match\", \"pattern_match\", \"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the greatest common divisor of 1200, and 21406,and the stock price of the company whose stock name is 'AAPL'?", "function": [{"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "object", "properties": {"matA": {"type": "array", "description": "The first matrix."}, "matB": {"type": "array", "description": "The second matrix."}}, "required": ["matA", "matB"]}}, {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}], "human_eval_answer": "[math_gcd(a=1200, b=21406),get_stock_price_by_stock_name(stock_name='AAPL')]", "execution_result": [[2, "$194.00"]], "execution_result_type": "[\"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What are the latitude and longitude coordinates of the IP address \"192.168.1.1\" and how many total deaths have occurred in the country \"Italy\" due to COVID?", "function": [{"name": "get_coordinate_by_ip_address", "description": "Finds the latitude and longitude of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}], "human_eval_answer": "[get_coordinate_by_ip_address(ip_address='192.168.1.1'), get_covid_death_by_country(country='Italy')]", "execution_result": ["private range", 195752], "execution_result_type": "[\"exact_match\", \"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the mean of [1,3,4,6,8], and what are the latitude and longitude coordinates of the city Cupertino where Apple Inc. is headquartered?", "function": [{"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}, {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "object", "properties": {"city_name": {"type": "string", "description": "The name of the city."}}, "required": ["city_name"]}, "returns": {"type": "tuple", "description": "The latitude and longitude of the city."}}], "human_eval_answer": "[calculate_mean([1,3,4,6,8]), get_coordinates_from_city(city_name='Cupertino')]", "execution_result": [4.4, ["37.3228934", "-122.0322895"]], "execution_result_type": "[\"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the name of the product with Amazon ASIN 'B08N5WRWNW' and its price, and can you also tell me the electrostatic potential energy of an object with a charge of 5 coulombs and a voltage of 10 volts, along with the holidays in the United States for the year 2022, and finally, the most up-to-date total deaths in Italy due to COVID?", "function": [{"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge of the object."}, "voltage": {"type": "number", "description": "The voltage of the object."}}, "required": ["charge", "voltage"]}}, {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "object", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}], "human_eval_answer": "[get_product_name_by_amazon_ASIN(ASIN='B08N5WRWNW'), calculate_electrostatic_potential_energy(charge=5, voltage=10), retrieve_holiday_by_year(year='2022', country='US'), get_covid_death_by_country(country='Italy')]", "execution_result": [{"status": "OK", "request_id": "eb0a4245-02f8-4f38-861d-29b0ae15b6b4", "data": {}}, 50, [{"date": "2021-12-31", "localName": "New Year's Day", "name": "New Year's Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2022-01-17", "localName": "Martin Luther King, Jr. Day", "name": "Martin Luther King, Jr. Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2022-02-21", "localName": "Presidents Day", "name": "Washington's Birthday", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2022-04-15", "localName": "Good Friday", "name": "Good Friday", "countryCode": "US", "fixed": false, "global": false, "counties": ["US-CT", "US-DE", "US-HI", "US-IN", "US-KY", "US-LA", "US-NC", "US-ND", "US-NJ", "US-TN"], "launchYear": null, "types": ["Public"]}, {"date": "2022-04-15", "localName": "Good Friday", "name": "Good Friday", "countryCode": "US", "fixed": false, "global": false, "counties": ["US-TX"], "launchYear": null, "types": ["Optional"]}, {"date": "2022-05-30", "localName": "Memorial Day", "name": "Memorial Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2022-06-20", "localName": "Juneteenth", "name": "Juneteenth", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": 2021, "types": ["Public"]}, {"date": "2022-07-04", "localName": "Independence Day", "name": "Independence Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2022-09-05", "localName": "Labor Day", "name": "Labour Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2022-10-10", "localName": "Columbus Day", "name": "Columbus Day", "countryCode": "US", "fixed": false, "global": false, "counties": ["US-AL", "US-AZ", "US-CO", "US-CT", "US-GA", "US-ID", "US-IL", "US-IN", "US-IA", "US-KS", "US-KY", "US-LA", "US-ME", "US-MD", "US-MA", "US-MS", "US-MO", "US-MT", "US-NE", "US-NH", "US-NJ", "US-NM", "US-NY", "US-NC", "US-OH", "US-OK", "US-PA", "US-RI", "US-SC", "US-TN", "US-UT", "US-VA", "US-WV"], "launchYear": null, "types": ["Public"]}, {"date": "2022-11-11", "localName": "Veterans Day", "name": "Veterans Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2022-11-24", "localName": "Thanksgiving Day", "name": "Thanksgiving Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": 1863, "types": ["Public"]}, {"date": "2022-12-26", "localName": "Christmas Day", "name": "Christmas Day", "countryCode": "US", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}], 195752], "execution_result_type": "[\"pattern_match\", \"exact_match\", \"exact_match\", \"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "\"John is a math enthusiast and loves to play with numbers. One day, he decided to challenge himself with a complex task. He chose the first 10 numbers from the Fibonacci sequence and picked the 5th and 8th number from the sequence. He calculated the greatest common divisor (GCD) of these two numbers. Then, he imagined two points in a 2D space, point A at (3, 4) and point B at (8, 10). He calculated the distance between these two points. Can you help John in calculating the GCD of the 5th and 8th Fibonacci numbers and the distance between the two points in the 2D space?\"", "function": [{"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}], "human_eval_answer": "[get_fibonacci_sequence(n=10), math_gcd(a=5, b=8), get_distance(pointA=(3, 4), pointB=(8, 10))]", "execution_result": [[[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 1, 7.810249675906654]], "execution_result_type": "[\"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What are the first 10 numbers in the Fibonacci sequence and what is the current stock price for the company named 'Microsoft'?", "function": [{"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}], "human_eval_answer": "[get_fibonacci_sequence(n=10), get_stock_price_by_stock_name(stock_name='MSFT')]", "execution_result": [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], "$403.1206"], "execution_result_type": "[\"exact_match\", \"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the current total number of COVID-19 deaths in Brazil, and what is the price of the product with Amazon ASIN 'B08N5WRWNW', and can you also find the definition of the term 'Savage' on Urban Dictionary?", "function": [{"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}, {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "object", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}], "human_eval_answer": "[get_covid_death_by_country(country='Brazil'), get_price_by_amazon_ASIN(ASIN='B08N5WRWNW'), find_term_on_urban_dictionary(term='Savage')]", "execution_result": [708999, {"status": "OK", "request_id": "852d243d-7ba6-4e75-a906-4212c1f8c3dd", "data": {}}, "Adj: [Merciless], [brutally honest]; Usually reffering to somebody who has [no regard] for how another person feels and doesn't hold back."], "execution_result_type": "[\"pattern_match\", \"pattern_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the standard deviation of [23,436,1231,123], and what would be the monthly mortgage payment for a loan amount of $350,000 with an interest rate of 3.5% over a period of 30 years, and also, could you tell me the latitude and longitude of the city named 'San Francisco'?", "function": [{"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "get_prime_factors", "description": "Calculates the prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to calculate the prime factors of."}}, "required": ["number"]}}, {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "object", "properties": {"city_name": {"type": "string", "description": "The name of the city."}}, "required": ["city_name"]}, "returns": {"type": "tuple", "description": "The latitude and longitude of the city."}}], "human_eval_answer": "[calculate_standard_deviation(numbers=[23,436,1231,123]), mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30), get_coordinates_from_city(city_name='San Francisco')]", "execution_result": [474.17632532634946, 1571.656407330882, ["37.7790262", "-122.419906"]], "execution_result_type": "[\"exact_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "I have a product on Amazon with ASIN 'B08JG8DQ7C' and I want to know its name. Also, I have a set of 10 elements and I want to know how many permutations can be made by choosing 4 elements at a time. Additionally, I have two numbers 36 and 48 and I want to know their greatest common divisor. Lastly, I am planning to take a loan of $200,000 with an interest rate of 5% for a period of 30 years, can you tell me what would be my monthly mortgage payment?", "function": [{"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}], "human_eval_answer": "[\"get_product_name_by_amazon_ASIN(ASIN='B08JG8DQ7C')\", \"calculate_permutations(n=10, k=4)\", \"math_gcd(a=36, b=48)\", \"mortgage_calculator(loan_amount=200000, interest_rate=0.05, loan_period=30)\"]", "execution_result": [{"status": "OK", "request_id": "57eab8bf-a5d9-4212-9249-05ab64f16b41", "data": {}}, 5040.0, 12, 1073.6432460242795], "execution_result_type": "[\"pattern_match\", \"exact_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the rating of the product with Amazon ASIN 'B08N5WRWNW' and how does it compare to the product with ASIN 'B07XJ8C8F5'?what is the distance between these two products? Lastly, if the popularity of these products is represented by a circle where the radius is the number of reviews they have, and let's say the first product has 50 reviews and the second product has 75 reviews, what is the area of the circle representing each product's popularity?", "function": [{"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}], "human_eval_answer": "[get_rating_by_amazon_ASIN(ASIN='B08N5WRWNW'), get_rating_by_amazon_ASIN(ASIN='B07XJ8C8F5'), geometry_area_circle(radius=50), geometry_area_circle(radius=75)]", "execution_result": [{"status": "OK", "request_id": "f4843774-9b93-4eb9-93ad-bfaa3c9a2ea8", "data": {}}, "4.7", 7853.981633974483, 17671.458676442588], "execution_result_type": "[\"pattern_match\", \"pattern_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the derivative of the function f(x) = x^2 at x = 5, and what is the area of a circle with a radius of 10? Also, could you provide the stock history of Apple with a 1 month interval and without including diffandsplits? Lastly, could you tell me the most up to date active COVID cases in the United States?", "function": [{"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}, {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the active cases of."}}, "required": ["country"]}}], "human_eval_answer": "[estimate_derivative(function= lambda x:x**2, x=5), geometry_area_circle(radius=10), get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=False), get_active_covid_case_by_country(country='United States')]", "execution_result": [10.00000082740371, 314.1592653589793, {"1682913600": {"date": "01-05-2023", "date_utc": 1682913600, "open": 169.28, "high": 179.35, "low": 164.31, "close": 177.25, "volume": 1275155500, "adjclose": 176.53}, "1685592000": {"date": "01-06-2023", "date_utc": 1685592000, "open": 177.7, "high": 194.48, "low": 176.93, "close": 193.97, "volume": 1297101100, "adjclose": 193.45}, "1688184000": {"date": "01-07-2023", "date_utc": 1688184000, "open": 193.78, "high": 198.23, "low": 186.6, "close": 196.45, "volume": 996066400, "adjclose": 195.93}, "1690862400": {"date": "01-08-2023", "date_utc": 1690862400, "open": 196.24, "high": 196.73, "low": 171.96, "close": 187.87, "volume": 1322439400, "adjclose": 187.37}, "1693540800": {"date": "01-09-2023", "date_utc": 1693540800, "open": 189.49, "high": 189.98, "low": 167.62, "close": 171.21, "volume": 1337586600, "adjclose": 170.98}, "1696132800": {"date": "01-10-2023", "date_utc": 1696132800, "open": 171.22, "high": 182.34, "low": 165.67, "close": 170.77, "volume": 1172719600, "adjclose": 170.55}, "1698811200": {"date": "01-11-2023", "date_utc": 1698811200, "open": 171, "high": 192.93, "low": 170.12, "close": 189.95, "volume": 1099586100, "adjclose": 189.7}, "1701406800": {"date": "01-12-2023", "date_utc": 1701406800, "open": 190.33, "high": 199.62, "low": 187.45, "close": 192.53, "volume": 1062774800, "adjclose": 192.53}, "1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 187.15, "high": 196.38, "low": 180.17, "close": 194.5, "volume": 929277200, "adjclose": 194.5}, "1706216401": {"date": "25-01-2024", "date_utc": 1706216401, "open": 195.22, "high": 196.27, "low": 193.12, "close": 194.17, "volume": 54460179, "adjclose": 194.17}}, {"get": "statistics", "parameters": {"country": "United States"}, "errors": [], "results": 0, "response": []}], "execution_result_type": "[\"exact_match\", \"exact_match\", \"pattern_match\", \"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What would be the monthly mortgage payment if you take a loan of $350,000 with an interest rate of 3.5% for a period of 30 years, and how does this compare to the current stock price of Apple Inc? Also, can you calculate the standard deviation of the following list of numbers: 45, 67, 34, 89, 23, 56, 78, 90, 32, 67?", "function": [{"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, {"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}], "human_eval_answer": "[\"mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)\", \"get_stock_price_by_stock_name(stock_name='AAPL')\", \"calculate_standard_deviation(numbers=[45, 67, 34, 89, 23, 56, 78, 90, 32, 67])\"]", "execution_result": [1571.656407330882, "$193.93", 22.796710288986873], "execution_result_type": "[\"exact_match\", \"pattern_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the timezone of a coordinate with longitude '120.97388' and latitude '23.973875', the area of a circle with a radius of 15, and the current stock price of a company with the stock name 'Apple Inc.'?", "function": [{"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "object", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}], "human_eval_answer": "[get_time_zone_by_coord(long='120.97388', lat='23.973875'), geometry_area_circle(radius=15), get_stock_price_by_stock_name(stock_name='AAPL')]", "execution_result": [null, 706.8583470577034, "$193.93"], "execution_result_type": "[\"exact_match\", \"exact_match\", \"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the probability of getting 5 successes in 10 trials with a success probability of 0.5, and can you also provide the most up-to-date total deaths in Italy due to COVID, and the current temperature at the coordinates 40.7128\u00b0 N, 74.0060\u00b0 W?", "function": [{"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "integer", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}, {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}, {"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}, "returns": {"type": "float", "description": "The current temperature in the coordinates you've asked for"}}], "human_eval_answer": "[calc_binomial_probability(n=10, k=5, p=0.5), get_covid_death_by_country(country='Italy'), get_weather_data(coordinates=[40.7128, -74.0060])]", "execution_result": [0.24609375, 195752, 10.2], "execution_result_type": "[\"exact_match\", \"pattern_match\", \"pattern_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "A package was sent from a location with zipcode 08540. The package was sent with an initial velocity of 20 m/s and an acceleration of 2 m/s^2 for a time period of 10 seconds. What is the displacement of the package and what city was the package sent from?", "function": [{"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "object", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the product."}}, "required": ["zipcode"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "human_eval_answer": "[get_zipcode_by_ip_address(ip_address='192.168.1.1'), retrieve_city_based_on_zipcode(zipcode='08540'), calculate_displacement(initial_velocity=20, acceleration=2, time=10)]", "execution_result": ["private range", "PRINCETON", 300.0], "execution_result_type": "[\"exact_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "You have two matrices, matA = [[1, 2], [3, 4]] and matB = [[5, 6], [7, 8]]. First, use the 'mat_mul' function to multiply these two matrices. Then, use [1,2,3,4] and 'calculate_mean' function to find the mean of these numbers. What is the mean value?", "function": [{"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "object", "properties": {"matA": {"type": "array", "description": "The first matrix."}, "matB": {"type": "array", "description": "The second matrix."}}, "required": ["matA", "matB"]}}, {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}], "human_eval_answer": "[mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]]), calculate_mean(numbers=[1,2,3,4])]", "execution_result": [[[19, 22], [43, 50]], 2.5], "execution_result_type": "[\"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "If I have 1000 USD and I want to convert it to EUR using the ExchangeRate-API, how much will I get? And then, if I want to know the factorial of original amount, what will it be?", "function": [{"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to convert."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}, "returns": {"type": "number", "description": "The converted amount in the target currency."}}, {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}], "human_eval_answer": "[\"convert_currency(amount=1000, from_currency='USD', to_currency='EUR')\", \"math_factorial(n=1000)\"]", "execution_result": [918.5, 402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000], "execution_result_type": "[\"pattern_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "A scientist is studying a new material and needs your help. He has a sample of the material with a mass of 300 grams and a volume of 50 cubic centimeters. He wants to know the density of this material. After calculating the density, he also wants to know the Fibonacci sequence up to the number 5. Finally, he is curious about the greatest common divisor between the mass of the sample and the volume. Can you help him with these calculations?", "function": [{"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "object", "properties": {"mass": {"type": "integer", "description": "The mass of the object."}, "volume": {"type": "integer", "description": "The volume of the object."}}, "required": ["mass", "volume"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}], "human_eval_answer": "[calculate_density(mass=300, volume=50), get_fibonacci_sequence(n=5), math_gcd(a=300, b=50)]", "execution_result": [6.0, [0, 1, 1, 2, 3], 50], "execution_result_type": "[\"exact_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "You are planning to take a loan of $350,000 with an interest rate of 3.5% for a period of 30 years. You want to know your monthly mortgage payment. Also, you have two numbers, 15 and 25, and you want to know their least common multiple. Additionally, you are curious about the factorial of 7. Lastly, you have a function f(x) = 3x^2 + 2x - 1 and you want to estimate the derivative of this function at x = 5. Can you calculate all these values?", "function": [{"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}], "human_eval_answer": "[mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30), math_lcm(a=15, b=25), math_factorial(n=7), estimate_derivative(function= lambda x : 3*x**2 + 2*x - 1, x=5)]", "execution_result": [1571.656407330882, 75.0, 5040, 32.00000264769187], "execution_result_type": "[\"exact_match\", \"exact_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "The path of the rocket can be modeled by a quadratic equation with coefficients a=2, b=-3, and c=5. Can you  find the roots of the quadratic equation, and estimate the derivative of the function at x=4?", "function": [{"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, {"name": "quadratic_roots", "description": "Calculates the roots of a quadratic equation.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first coefficient."}, "b": {"type": "integer", "description": "The second coefficient."}, "c": {"type": "integer", "description": "The third coefficient."}}, "required": ["a", "b", "c"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}], "human_eval_answer": "[quadratic_roots(a=2, b=-3, c=5), estimate_derivative(function= lambda x: 2*x**2 - 3 * x + 5 , x=4)]", "execution_result": [["(0.7500000000000001+1.3919410907075054j)", "(0.7499999999999999-1.3919410907075054j)"], 13.000018839193217], "execution_result_type": "[\"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "You have an investment with a present value of $5000, an interest rate of 5%, and you plan to keep it for 10 periods. You want to know the future value of this investment. After knowing the future value, you decide to buy a product from Amazon with the ASIN 'B08K3PZP2H'. Could you tell me the price of this product? Also, you are curious about the city of the zipcode '10001'. Can you find out which city it is? Lastly, you have a function f(x) = 3x^2 + 2x - 1 and you want to estimate the derivative of this function at the point x = 2. Can you calculate it?", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "object", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the product."}}, "required": ["zipcode"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}], "human_eval_answer": "[calculate_future_value(present_value=5000, interest_rate=0.05, periods=10), get_price_by_amazon_ASIN(ASIN='B08K3PZP2H'), retrieve_city_based_on_zipcode(zipcode='10001'), estimate_derivative(function=lambda x: 3*x**2 + 2*x - 1, x=2)]", "execution_result": [5025.056325065662, {"status": "OK", "request_id": "55f2d264-ee62-46f4-9b7b-c74ae83bdf75", "data": {}}, "NEW YORK", 14.000001158365194], "execution_result_type": "[\"exact_match\", \"pattern_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the timezone of a location with longitude \"12.4924\" and latitude \"41.8902\", and what are the holidays in the year \"2022\" for the country \"UK\"?", "function": [{"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "object", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "object", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}], "human_eval_answer": "[get_time_zone_by_coord(long=\"12.4924\", lat=\"41.8902\"), retrieve_holiday_by_year(year=\"2022\", country='UK')]", "execution_result": ["Africa/Addis_Ababa", {"type": "https://tools.ietf.org/html/rfc9110#section-15.5.5", "title": "Not Found", "status": 404, "traceId": "00-b147e36160c7c6a5a6c0522820b76ceb-088d8ab32b8a7b29-00"}], "execution_result_type": "[\"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "Can you first find the definition of the term \"Hello World\" on Urban Dictionary, then get the stock history of Apple Inc. (AAPL) for the last 1 month with diffandsplits set to true, and then calculate the density of an object with a mass of 10 kg and a volume of 2 cubic meters, and finally sort the following array of numbers [5, 2, 9, 1, 7, 4, 6, 3, 8] in reverse order?", "function": [{"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "object", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, {"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "object", "properties": {"mass": {"type": "integer", "description": "The mass of the object."}, "volume": {"type": "integer", "description": "The volume of the object."}}, "required": ["mass", "volume"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}, {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "object", "properties": {"array": {"type": "array", "items": {"type": "number"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order.", "default": false}}, "required": ["array"]}}], "human_eval_answer": "[find_term_on_urban_dictionary(term='Hello World'), get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits='True'), calculate_density(mass=10, volume=2), sort_array(array=[5, 2, 9, 1, 7, 4, 6, 3, 8], reverse=True)]", "execution_result": ["A common [program] written to demostrate the [syntax] of a [programming language].", {"1682913600": {"date": "01-05-2023", "date_utc": 1682913600, "open": 169.28, "high": 179.35, "low": 164.31, "close": 177.25, "volume": 1275155500, "adjclose": 176.53}, "1685592000": {"date": "01-06-2023", "date_utc": 1685592000, "open": 177.7, "high": 194.48, "low": 176.93, "close": 193.97, "volume": 1297101100, "adjclose": 193.45}, "1688184000": {"date": "01-07-2023", "date_utc": 1688184000, "open": 193.78, "high": 198.23, "low": 186.6, "close": 196.45, "volume": 996066400, "adjclose": 195.93}, "1690862400": {"date": "01-08-2023", "date_utc": 1690862400, "open": 196.24, "high": 196.73, "low": 171.96, "close": 187.87, "volume": 1322439400, "adjclose": 187.37}, "1693540800": {"date": "01-09-2023", "date_utc": 1693540800, "open": 189.49, "high": 189.98, "low": 167.62, "close": 171.21, "volume": 1337586600, "adjclose": 170.98}, "1696132800": {"date": "01-10-2023", "date_utc": 1696132800, "open": 171.22, "high": 182.34, "low": 165.67, "close": 170.77, "volume": 1172719600, "adjclose": 170.55}, "1698811200": {"date": "01-11-2023", "date_utc": 1698811200, "open": 171, "high": 192.93, "low": 170.12, "close": 189.95, "volume": 1099586100, "adjclose": 189.7}, "1701406800": {"date": "01-12-2023", "date_utc": 1701406800, "open": 190.33, "high": 199.62, "low": 187.45, "close": 192.53, "volume": 1062774800, "adjclose": 192.53}, "1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 187.15, "high": 196.38, "low": 180.17, "close": 194.5, "volume": 929277200, "adjclose": 194.5}, "1706216401": {"date": "25-01-2024", "date_utc": 1706216401, "open": 195.22, "high": 196.27, "low": 193.12, "close": 194.17, "volume": 54460179, "adjclose": 194.17}}, 5.0, [9, 8, 7, 6, 5, 4, 3, 2, 1]], "execution_result_type": "[\"exact_match\", \"pattern_match\", \"exact_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "What is the current temperature at the coordinates (45.4215, -75.6972) and what is the probability of getting 3 successes in 5 trials with a success probability of 0.5?", "function": [{"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}, "returns": {"type": "float", "description": "The current temperature in the coordinates you've asked for"}}, {"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "integer", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}], "human_eval_answer": "[get_weather_data(coordinates=[45.4215, -75.6972]), calc_binomial_probability(n=5, k=3, p=0.5)]", "execution_result": [-0.2, 0.3125], "execution_result_type": "[\"pattern_match\", \"exact_match\"]", "question_type": "executable_parallel_multiple_function"}
{"question": "In a game of dice, a player rolls a die 20 times. If the probability of rolling a 6 is 0.6, what is the probability that the player will roll a 6 exactly 5 times?", "function": {"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "integer", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}, "human_eval_answer": "calc_binomial_probability(n=20, k=5, p=0.6)", "execution_result": [0.0012944935222876579], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a basketball game, a player attempts 30 free throws. If the probability of making a free throw is 0.5, what is the probability that the player will make exactly 15 free throws?", "function": {"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "integer", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}, "human_eval_answer": "calc_binomial_probability(n=30, k=15, p=0.5)", "execution_result": [0.14446444809436798], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a machine learning model, you have two feature vectors representing the characteristics of two different objects. The first vector is [0.5, 0.7, 0.2, 0.9, 0.1] and the second vector is [0.4, 0.6, 0.3, 0.8, 0.2]. Can you calculate the cosine similarity between these two vectors using the 'calculate_cosine_similarity' function?", "function": {"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "object", "properties": {"vectorA": {"type": "array", "items": {"type": "number"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "number"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, "human_eval_answer": "calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.4, 0.6, 0.3, 0.8, 0.2])", "execution_result": [0.9884017323417256], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a complex data analysis task, you are given two numerical arrays representing the attributes of two distinct entities. The first array is [0.3, 0.8, 0.1, 0.6, 0.2] and the second array is [0.5, 0.7, 0.4, 0.9, 0.3]. Is it possible to utilize the 'calculate_cosine_similarity' function to compute the cosine similarity between these two arrays?", "function": {"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "object", "properties": {"vectorA": {"type": "array", "items": {"type": "number"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "number"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, "human_eval_answer": "calculate_cosine_similarity(vectorA=[0.3, 0.8, 0.1, 0.6, 0.2], vectorB=[0.5, 0.7, 0.4, 0.9, 0.3])", "execution_result": [0.9424212936563149], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a physics experiment, you are given an object with a mass of 50 kilograms and a volume of 10 cubic meters. Can you use the 'calculate_density' function to determine the density of this object?", "function": {"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "object", "properties": {"mass": {"type": "integer", "description": "The mass of the object."}, "volume": {"type": "integer", "description": "The volume of the object."}}, "required": ["mass", "volume"]}}, "human_eval_answer": "calculate_density(mass=50, volume=10)", "execution_result": [5.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a complex scientific study, you are presented with a peculiar object that weighs 120 kilograms and occupies a space of 30 cubic meters. Is it possible to employ the 'calculate_density' function to ascertain the density of this peculiar object?", "function": {"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "object", "properties": {"mass": {"type": "integer", "description": "The mass of the object."}, "volume": {"type": "integer", "description": "The volume of the object."}}, "required": ["mass", "volume"]}}, "human_eval_answer": "calculate_density(mass=120, volume=30)", "execution_result": [4.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In an advanced physics experiment, you are observing a unique object that has an initial velocity of 15 meters per second. The object is subjected to an acceleration of 9.8 meters per second squared for a duration of 10 seconds. Can you use the 'calculate_displacement' function to determine the displacement of this unique object during this time period?", "function": {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "calculate_displacement(initial_velocity=15, acceleration=9.8, time=10)", "execution_result": [640.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a high-speed car chase, a vehicle is initially moving at a speed of 25 meters per second. Suddenly, the driver steps on the gas pedal, causing the vehicle to accelerate at a rate of 15 meters per second squared. This acceleration lasts for a total of 8 seconds. Can the 'calculate_displacement' function be used to figure out how much the vehicle's position changed during this acceleration period?", "function": {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "calculate_displacement(initial_velocity=25, acceleration=15, time=8)", "execution_result": [680.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a physics experiment, a particle with a charge of 5 coulombs is placed in an electric field with a potential difference of 10 volts. Can the 'calculate_electrostatic_potential_energy' function be used to determine the electrostatic potential energy of the particle in this field?", "function": {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge of the object."}, "voltage": {"type": "number", "description": "The voltage of the object."}}, "required": ["charge", "voltage"]}}, "human_eval_answer": "calculate_electrostatic_potential_energy(charge=5, voltage=10)", "execution_result": [50], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a complex physics simulation, a micro-particle possessing a charge of 7.8 coulombs is situated within an electromagnetic field exhibiting a potential difference of 15.2 volts. Is it possible to utilize the 'calculate_electrostatic_potential_energy' function to ascertain the electrostatic potential energy of the micro-particle in this particular field?", "function": {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge of the object."}, "voltage": {"type": "number", "description": "The voltage of the object."}}, "required": ["charge", "voltage"]}}, "human_eval_answer": "calculate_electrostatic_potential_energy(charge=7.8, voltage=15.2)", "execution_result": [118.55999999999999], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a high-speed chase scenario, a vehicle initially at rest, suddenly accelerates at a rate of 9.8 m/s\u00b2 for a duration of 12 seconds. Can we use the 'calculate_final_velocity' function to determine the final velocity of the vehicle after this period of acceleration?", "function": {"name": "calculate_final_velocity", "description": "Calculates the final velocity of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=12)", "execution_result": [117.60000000000001], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a physics experiment, a ball is dropped from a height with an initial velocity of 0 m/s. If the acceleration due to gravity is considered as 9.8 m/s\u00b2 and the ball is in free fall for 7 seconds, can the 'calculate_final_velocity' function be used to ascertain the final velocity of the ball at the end of this time period?", "function": {"name": "calculate_final_velocity", "description": "Calculates the final velocity of an object.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=7)", "execution_result": [68.60000000000001], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a financial scenario, suppose you have invested $5000 in a fixed deposit scheme that offers an annual interest rate of 5%. If you plan to keep the money in the deposit for 10 years, can you use the 'calculate_future_value' function to determine the value of your investment at the end of this period?", "function": {"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, "human_eval_answer": "calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)", "execution_result": [5025.056325065662], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a hypothetical situation, you've decided to put $8000 into a savings account that offers a 4% annual interest rate. You intend to leave the money untouched for 15 years. Can the 'calculate_future_value' function be used to ascertain what your investment will be worth at the end of this time frame?", "function": {"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "object", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "interest_rate": {"type": "integer", "description": "The interest rate of the investment."}, "periods": {"type": "integer", "description": "The number of periods."}}, "required": ["present_value", "interest_rate", "periods"]}}, "human_eval_answer": "calculate_future_value(present_value=8000, interest_rate=0.04, periods=15)", "execution_result": [8048.1346332397925], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "In a complex scenario, you are a data analyst and you have been given a list of daily temperatures for the past month in a city. The temperatures are as follows: 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80 degrees Celsius. Can you use the 'calculate_mean' function to determine the average temperature for the past month?", "function": {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "human_eval_answer": "calculate_mean(numbers=[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])", "execution_result": [51.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a sports statistician, you have been tasked with analyzing the performance of a basketball player over the course of a season. You have been given the player's points scored in each game, which are as follows: 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160. Can you use the 'calculate_mean' function to determine the player's average points per game for the season?", "function": {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "human_eval_answer": "calculate_mean(numbers=[15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])", "execution_result": [87.5], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a cryptographer, you are working on a new encryption algorithm that involves permutations of characters. You have a set of 26 characters (the English alphabet) and you want to know how many different permutations can be generated if you choose 5 characters at a time. Can you use the 'calculate_permutations' function to find out this information?", "function": {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, "human_eval_answer": "calculate_permutations(n=26, k=5)", "execution_result": [7893600.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a biologist, you are studying the genetic diversity of a certain species of plants. You have identified 30 unique genes and you are interested in understanding the different combinations that can be formed by selecting 7 genes at a time. Can you use the 'calculate_permutations' function to determine this?", "function": {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, "human_eval_answer": "calculate_permutations(n=30, k=7)", "execution_result": [10260432000.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a financial analyst, you are studying the volatility of a certain stock's daily closing prices 1000,2000,3000,4000,5000,7000,9000,15000,20000,30000 over the past 10 trading days. You have recorded the closing prices and now you want to understand the dispersion of these prices. Can you use the 'calculate_standard_deviation' function to determine this using the list of recorded closing prices?", "function": {"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "human_eval_answer": "calculate_standard_deviation(numbers=[1000,2000,3000,4000,5000,7000,9000,15000,20000,30000])", "execution_result": [8879.189152169245], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a sports statistician, you are analyzing the performance of a basketball player in terms of points scored per game over the past 12 games. You have gathered the data [30,20,25,12,59,23,64,21,67,12,23,43]and now you want to understand the variability in the player's scoring. Can you use the 'calculate_standard_deviation' function to determine this using the list of points scored per game?", "function": {"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "human_eval_answer": "calculate_standard_deviation(numbers=[30,20,25,12,59,23,64,21,67,12,23,43])", "execution_result": [19.061851081851067], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As an architect, you are designing a triangular park. The park's base is planned to be 500 meters and the height is 300 meters. Can you use the 'calculate_triangle_area' function to determine the total area of the park?", "function": {"name": "calculate_triangle_area", "description": "Calculates the area of a triangle given its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "integer", "description": "The base of the triangle."}, "height": {"type": "integer", "description": "The height of the triangle."}}, "required": ["base", "height"]}}, "human_eval_answer": "calculate_triangle_area(base=500, height=300)", "execution_result": [75000.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a civil engineer, you are tasked with designing a triangular dam. The proposed dimensions for the dam include a base of 700 meters and a height of 450 meters. Can you utilize the 'calculate_triangle_area' function to ascertain the total area of the dam's face?", "function": {"name": "calculate_triangle_area", "description": "Calculates the area of a triangle given its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "integer", "description": "The base of the triangle."}, "height": {"type": "integer", "description": "The height of the triangle."}}, "required": ["base", "height"]}}, "human_eval_answer": "calculate_triangle_area(base=700, height=450)", "execution_result": [157500.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a financial analyst, you are tasked with converting a sum of 5000 Euros to Japanese Yen for a business transaction. Can you use the 'convert_currency' function to determine the equivalent amount in Yen? Please note that the ISO currency code for Euro is 'EUR' and for Japanese Yen is 'JPY'.", "function": {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to convert."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}, "returns": {"type": "number", "description": "The converted amount in the target currency."}}, "human_eval_answer": "convert_currency(amount=5000, from_currency='EUR', to_currency='JPY')", "execution_result": [802775.5], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a travel agent, you are planning a trip for a client who is traveling from the United States to the United Kingdom. The client has a budget of 3000 US Dollars and wants to know how much this would be in British Pounds. Can you use the 'convert_currency' function to calculate this? Remember, the ISO currency code for US Dollar is 'USD' and for British Pound is 'GBP'.", "function": {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to convert."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}, "returns": {"type": "number", "description": "The converted amount in the target currency."}}, "human_eval_answer": "convert_currency(amount=3000, from_currency='USD', to_currency='GBP')", "execution_result": [2356.7999999999997], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a physics student, you are studying the motion of a particle moving along a straight line. The position of the particle at any time 'x' is given by the function f(x) = 3t^2 + 2x + 1. You are interested in understanding the velocity of the particle at a specific time, say t = 5 seconds. Can you use the 'estimate_derivative' function to calculate this? Remember, the derivative of the position function gives the velocity.", "function": {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, "human_eval_answer": "estimate_derivative(function=lambda x: 3*x**2 + 2*x + 1, x=5)", "execution_result": [32.00000264769187], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a financial analyst, you are studying the growth of a company's revenue over time. The revenue of the company at any time 'x' is given by the function f(x) = 4x^3 + 3x^2 + 2x + 1. You are interested in understanding the rate of change of the company's revenue at a specific time, say t = 7 years. Can you use the 'estimate_derivative' function to calculate this? Remember, the derivative of the revenue function gives the rate of change.", "function": {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, "human_eval_answer": "estimate_derivative(function=lambda x: 4*x**3 + 3*x**2 + 2*x + 1, x=7)", "execution_result": [632.0010470517445], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a language enthusiast, you've come across a slang term \"lit\" that you don't understand. Can you use the 'find_term_on_urban_dictionary' function to find the definition of this term? Remember, the term you're looking for is \"lit\".", "function": {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "object", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, "human_eval_answer": "find_term_on_urban_dictionary(term=\"lit\")", "execution_result": ["When [something] is [turned up] or [popping] ..."], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a music lover, you've stumbled upon a hip-hop song with the term \"flex\" repeatedly used in the lyrics. You're curious about its meaning in this context. Could you utilize the 'find_term_on_urban_dictionary' function to decipher what \"flex\" signifies in this genre? Please note, the term you need to search for is \"flex\".", "function": {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "object", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, "human_eval_answer": "find_term_on_urban_dictionary(term=\"flex\")", "execution_result": ["[jai]"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As an aspiring artist, you've decided to create a large circular mural on a wall in your city. You need to calculate the area of the circle to determine how much paint you'll need. Could you use the 'geometry_area_circle' function to calculate the area? Please note, the radius of the circle is 15 feet.", "function": {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, "human_eval_answer": "geometry_area_circle(radius=15)", "execution_result": [706.8583470577034], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a landscape architect, you're designing a circular garden for a client. To plan the amount of sod you'll need, you need to calculate the area of the garden. The garden has a radius of 20 feet. Would the 'geometry_area_circle' function be useful in this scenario to calculate the area?", "function": {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, "human_eval_answer": "geometry_area_circle(radius=20)", "execution_result": [1256.6370614359173], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a journalist, you are writing an article about the current COVID-19 situation in Brazil. To provide accurate information, you need the most recent data on active COVID-19 cases in Brazil. Can the 'get_active_covid_case_by_country' function assist you in obtaining this data if you specify 'Brazil' as the country?", "function": {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the active cases of."}}, "required": ["country"]}}, "human_eval_answer": "get_active_covid_case_by_country(country='Brazil')", "execution_result": [1306704], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a health analyst, you are tasked to monitor the ongoing COVID-19 situation in Spain. To ensure the accuracy of your report, you need the latest data on active COVID-19 cases in Spain. Can the 'get_active_covid_case_by_country' function provide you with this information if you input 'Spain' as the country?", "function": {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the active cases of."}}, "required": ["country"]}}, "human_eval_answer": "get_active_covid_case_by_country(country='Spain')", "execution_result": [30634], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a financial analyst, you are researching the company behind the stock named 'AAPL'. Can the 'get_company_name_by_stock_name' function provide you with the company's name if you input 'AAPL' as the stock name?", "function": {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, "human_eval_answer": "get_company_name_by_stock_name(stock_name='AAPL')", "execution_result": ["Apple Inc."], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As an investor, you are interested in the company that owns the 'GOOGL' stock. Can you use the 'get_company_name_by_stock_name' function to find out the company's name by providing 'GOOGL' as the stock name?", "function": {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, "human_eval_answer": "get_company_name_by_stock_name(stock_name='GOOGL')", "execution_result": ["Alphabet Inc."], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a cybersecurity analyst, you suspect a potential breach from an IP address '192.168.1.1'. Can you use the 'get_coordinate_by_ip_address' function to find out the geographical location of this IP address by providing '192.168.1.1' as the IP address?", "function": {"name": "get_coordinate_by_ip_address", "description": "Finds the latitude and longitude of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "human_eval_answer": "get_coordinate_by_ip_address(ip_address='192.168.1.1')", "execution_result": ["private range"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a network administrator, you've noticed some suspicious activity from the IP address '172.16.254.1'. Could you employ the 'get_coordinate_by_ip_address' function to ascertain the geographical coordinates of this particular IP address by supplying '172.16.254.1' as the IP address?", "function": {"name": "get_coordinate_by_ip_address", "description": "Finds the latitude and longitude of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "human_eval_answer": "get_coordinate_by_ip_address(ip_address='172.16.254.1')", "execution_result": ["private range"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a travel agent, you have a client who is interested in visiting the city of 'Paris'. Could you use the 'get_coordinates_from_city' function to determine the geographical coordinates of 'Paris' by providing 'Paris' as the city name?", "function": {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "object", "properties": {"city_name": {"type": "string", "description": "The name of the city."}}, "required": ["city_name"]}, "returns": {"type": "tuple", "description": "The latitude and longitude of the city."}}, "human_eval_answer": "get_coordinates_from_city(city_name='Paris')", "execution_result": [["48.8588897", "2.3200410217200766"]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a wildlife researcher, you are planning to study the migration patterns of a certain bird species in 'Cairo'. Can you use the 'get_coordinates_from_city' function to find the exact latitude and longitude of 'Cairo' by inputting 'Cairo' as the city name?", "function": {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "object", "properties": {"city_name": {"type": "string", "description": "The name of the city."}}, "required": ["city_name"]}, "returns": {"type": "tuple", "description": "The latitude and longitude of the city."}}, "human_eval_answer": "get_coordinates_from_city(city_name='Cairo')", "execution_result": ["Failed to fetch data with status code: 401"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a health researcher, you are studying the impact of COVID-19 in 'Brazil'. Can you use the 'get_covid_death_by_country' function to find the most up-to-date total deaths in 'Brazil' by inputting 'Brazil' as the country name?", "function": {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}, "human_eval_answer": "get_covid_death_by_country(country='Brazil')", "execution_result": [708999], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As an epidemiologist, you are currently investigating the mortality rate of COVID-19 in 'India'. Could you employ the 'get_covid_death_by_country' function to obtain the most recent total death count in 'India' by specifying 'India' as the country parameter?", "function": {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of."}}, "required": ["country"]}}, "human_eval_answer": "get_covid_death_by_country(country='India')", "execution_result": [533441], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a cartographer, you are working on a map of a city and you need to determine the exact distance between two points of interest. The points are located at coordinates (45.76, 4.85) and (48.85, 2.35). Can you use the 'get_distance' function to calculate the distance between these two points by providing these coordinates as 'pointA' and 'pointB' parameters respectively?", "function": {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, "human_eval_answer": "get_distance(pointA=(45.76, 4.85), pointB=(48.85, 2.35))", "execution_result": [3.9746823772472712], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a wildlife researcher, you are tracking the movement of a particular animal in a forest. You have marked two locations where the animal was spotted, the coordinates are (32.71, -117.16) for the first location and (34.05, -118.25) for the second location. Can you use the 'get_distance' function to find out the distance between these two spots by inputting these coordinates as 'pointA' and 'pointB' parameters respectively?", "function": {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "tuple", "description": "The first point."}, "pointB": {"type": "tuple", "description": "The second point."}}, "required": ["pointA", "pointB"]}}, "human_eval_answer": "get_distance(pointA=(32.71, -117.16), pointB=(34.05, -118.25))", "execution_result": [1.7273389939441528], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a mathematician, you are studying the Fibonacci sequence and you want to generate the first 20 numbers in this sequence. Can you use the 'get_fibonacci_sequence' function to calculate these numbers by inputting '20' as the 'n' parameter?", "function": {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, "human_eval_answer": "get_fibonacci_sequence(n=20)", "execution_result": [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a computer science student, you are tasked with a project that involves the Fibonacci sequence. Your professor wants you to generate the first 50 numbers of this sequence. Can you utilize the 'get_fibonacci_sequence' function to accomplish this task by setting '50' as the value for the 'n' parameter?", "function": {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, "human_eval_answer": "get_fibonacci_sequence(n=50)", "execution_result": [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a product manager, you are interested in tracking the price of a specific product on Amazon. The product has an Amazon ASIN of 'B08N5WRWNW'. Can you use the 'get_price_by_amazon_ASIN' function to find the current price of this product by setting 'B08N5WRWNW' as the value for the 'ASIN' parameter?", "function": {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "human_eval_answer": "get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')", "execution_result": [{"status": "OK", "request_id": "4639d0e0-4d94-41c0-b4ed-50c02e58de23", "data": {}}], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As an inventory manager, you need to monitor the price of a product listed on Amazon with an ASIN of 'B07HJXVHSS'. Would it be possible to obtain the current price of this product using the 'get_price_by_amazon_ASIN' function and providing 'B07HJXVHSS' as the 'ASIN' parameter value?", "function": {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "human_eval_answer": "get_price_by_amazon_ASIN(ASIN='B07HJXVHSS')", "execution_result": ["$1,398.00"], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a mathematics teacher, you are preparing a lesson on prime factorization and you want to use the number 4567 as an example. Can you use the 'get_prime_factors' function to calculate the prime factors of 4567 by providing '4567' as the 'number' parameter value?", "function": {"name": "get_prime_factors", "description": "Calculates the prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to calculate the prime factors of."}}, "required": ["number"]}}, "human_eval_answer": "get_prime_factors(number=4567)", "execution_result": [[4567]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a cryptographer, you are working on a new encryption algorithm that involves prime factorization. You need to test your algorithm with the number 7891. Can you use the 'get_prime_factors' function to determine the prime factors of 7891 by setting '7891' as the 'number' parameter value?", "function": {"name": "get_prime_factors", "description": "Calculates the prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to calculate the prime factors of."}}, "required": ["number"]}}, "human_eval_answer": "get_prime_factors(number=7891)", "execution_result": [[13, 607]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a product reviewer, you are writing an article about a specific product found on Amazon. You only have the Amazon ASIN, which is 'B08L8KC1J7'. Can you use the 'get_product_name_by_amazon_ASIN' function to find the name of the product by setting 'B08L8KC1J7' as the 'ASIN' parameter value?", "function": {"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "human_eval_answer": "get_product_name_by_amazon_ASIN(ASIN='B08L8KC1J7')", "execution_result": ["ASUS TUF Gaming NVIDIA GeForce RTX 3070 OC Edition Graphics Card- PCIe 4.0, 8GB GDDR6, HDMI 2.1, DisplayPort 1.4a, Dual Ball Fan Bearings"], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As an online shopper, you stumbled upon an Amazon product with an ASIN 'B07FZ8S74R' and you are curious about its name. Can you utilize the 'get_product_name_by_amazon_ASIN' function and input 'B07FZ8S74R' as the 'ASIN' parameter to discover the product's name?", "function": {"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "human_eval_answer": "get_product_name_by_amazon_ASIN(ASIN='B07FZ8S74R')", "execution_result": ["Echo Dot (3rd Gen, 2018 release) - Smart speaker with Alexa - Charcoal"], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As an online shopper, you are interested in a product on Amazon with an ASIN 'B08BHXG144' and you want to know its rating. Can you use the 'get_rating_by_amazon_ASIN' function and input 'B08L5WGQGJ' as the 'ASIN' parameter to find out the product's rating?", "function": {"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "human_eval_answer": "get_rating_by_amazon_ASIN(ASIN='B08BHXG144')", "execution_result": "null", "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a consumer, you've come across an Amazon product with an ASIN 'B07FZ8S74R' and you're curious about its rating. Would it be possible to utilize the 'get_rating_by_amazon_ASIN' function, inputting 'B07FZ8S74R' into the 'ASIN' parameter, to discover the rating of this product?", "function": {"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "object", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "human_eval_answer": "get_rating_by_amazon_ASIN(ASIN='B07FZ8S74R')", "execution_result": ["4.7"], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As an investor, you're interested in the historical performance of the Apple Inc. stock. Would it be possible to use the 'get_stock_history' function, setting 'AAPL' as the 'stock_name' parameter, and '1mo' for the 'interval' parameter, to get the monthly stock history of Apple Inc.? Also, could you set the 'diffandsplits' parameter to 'true' to see if there were any stock splits or dividends during this period?", "function": {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}, "human_eval_answer": "get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=True)", "execution_result": [{"1682913600": {"date": "01-05-2023", "date_utc": 1682913600, "open": 169.28, "high": 179.35, "low": 164.31, "close": 177.25, "volume": 1275155500, "adjclose": 176.53}, "1685592000": {"date": "01-06-2023", "date_utc": 1685592000, "open": 177.7, "high": 194.48, "low": 176.93, "close": 193.97, "volume": 1297101100, "adjclose": 193.45}, "1688184000": {"date": "01-07-2023", "date_utc": 1688184000, "open": 193.78, "high": 198.23, "low": 186.6, "close": 196.45, "volume": 996066400, "adjclose": 195.93}, "1690862400": {"date": "01-08-2023", "date_utc": 1690862400, "open": 196.24, "high": 196.73, "low": 171.96, "close": 187.87, "volume": 1322439400, "adjclose": 187.37}, "1693540800": {"date": "01-09-2023", "date_utc": 1693540800, "open": 189.49, "high": 189.98, "low": 167.62, "close": 171.21, "volume": 1337586600, "adjclose": 170.98}, "1696132800": {"date": "01-10-2023", "date_utc": 1696132800, "open": 171.22, "high": 182.34, "low": 165.67, "close": 170.77, "volume": 1172719600, "adjclose": 170.55}, "1698811200": {"date": "01-11-2023", "date_utc": 1698811200, "open": 171, "high": 192.93, "low": 170.12, "close": 189.95, "volume": 1099586100, "adjclose": 189.7}, "1701406800": {"date": "01-12-2023", "date_utc": 1701406800, "open": 190.33, "high": 199.62, "low": 187.45, "close": 192.53, "volume": 1062774800, "adjclose": 192.53}, "1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 187.15, "high": 196.38, "low": 180.17, "close": 194.5, "volume": 929277200, "adjclose": 194.5}, "1706216401": {"date": "25-01-2024", "date_utc": 1706216401, "open": 195.22, "high": 196.27, "low": 193.12, "close": 194.17, "volume": 54460179, "adjclose": 194.17}}], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a financial analyst, you are tasked with examining the historical data of Microsoft Corporation's stock. Could you utilize the 'get_stock_history' function, inputting 'MSFT' as the 'stock_name' parameter, and '1wk' as the 'interval' parameter, to retrieve the weekly stock history of Microsoft Corporation? Additionally, could you adjust the 'diffandsplits' parameter to 'false' to exclude any stock splits or dividends during this period?", "function": {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "boolean", "description": "The diffandsplits of the stock history. Allows one of following : true|false"}}, "required": ["stock_name", "interval"]}}, "human_eval_answer": "get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits=False)", "execution_result": [{"1701061200": {"date": "27-11-2023", "date_utc": 1701061200, "open": 376.78, "high": 384.3, "low": 371.31, "close": 374.51, "volume": 135170500, "adjclose": 374.51}, "1701666000": {"date": "04-12-2023", "date_utc": 1701666000, "open": 369.1, "high": 374.46, "low": 362.9, "close": 374.23, "volume": 119574100, "adjclose": 374.23}, "1702270800": {"date": "11-12-2023", "date_utc": 1702270800, "open": 368.48, "high": 377.64, "low": 364.13, "close": 370.73, "volume": 205258300, "adjclose": 370.73}, "1702875600": {"date": "18-12-2023", "date_utc": 1702875600, "open": 369.45, "high": 376.03, "low": 368.68, "close": 374.58, "volume": 103522400, "adjclose": 374.58}, "1703480400": {"date": "25-12-2023", "date_utc": 1703480400, "open": 375, "high": 377.16, "low": 372.81, "close": 376.04, "volume": 60628500, "adjclose": 376.04}, "1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 373.86, "high": 375.9, "low": 366.5, "close": 367.75, "volume": 90230600, "adjclose": 367.75}, "1704690000": {"date": "08-01-2024", "date_utc": 1704690000, "open": 369.3, "high": 390.68, "low": 369.01, "close": 388.47, "volume": 118974700, "adjclose": 388.47}, "1705294800": {"date": "15-01-2024", "date_utc": 1705294800, "open": 393.66, "high": 398.67, "low": 384.81, "close": 398.67, "volume": 102100500, "adjclose": 398.67}, "1705899600": {"date": "22-01-2024", "date_utc": 1705899600, "open": 400.02, "high": 405.63, "low": 393.59, "close": 402.56, "volume": 72409800, "adjclose": 402.56}, "1706216401": {"date": "25-01-2024", "date_utc": 1706216401, "open": 404.32, "high": 407.01, "low": 402.53, "close": 404.87, "volume": 20529365, "adjclose": 404.87}}], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As an investment advisor, you are required to analyze the current price of Apple Inc.'s stock. Can you use the 'get_stock_price_by_stock_name' function, specifying 'AAPL' as the 'stock_name' parameter, to find the current price of Apple Inc.'s stock?", "function": {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, "human_eval_answer": "get_stock_price_by_stock_name(stock_name='AAPL')", "execution_result": ["$193.49"], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a financial analyst, you are tasked with monitoring the stock market performance of Microsoft Corporation. Could you utilize the 'get_stock_price_by_stock_name' function and input 'MSFT' into the 'stock_name' parameter to determine the current stock price of Microsoft Corporation?", "function": {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product."}}, "required": ["stock_name"]}}, "human_eval_answer": "get_stock_price_by_stock_name(stock_name='MSFT')", "execution_result": ["$403.34"], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a geographer, you are working on a project that requires you to identify the time zones of various locations. Could you use the 'get_time_zone_by_coord' function and input '123.45' into the 'long' parameter and '-67.89' into the 'lat' parameter to find out the timezone of the coordinate at longitude 123.45 and latitude -67.89?", "function": {"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "object", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, "human_eval_answer": "get_time_zone_by_coord(long='123.45', lat='-67.89')", "execution_result": [null], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a meteorologist, you are tracking a storm system and need to report the local time where the storm is currently located. Can you use the 'get_time_zone_by_coord' function, inputting '80.75' for the 'long' parameter and '35.22' for the 'lat' parameter, to determine the timezone of the storm's current position at longitude 80.75 and latitude 35.22?", "function": {"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "object", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, "human_eval_answer": "get_time_zone_by_coord(long='80.75', lat='35.22')", "execution_result": ["Etc/GMT-2"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a climate researcher, you are studying the temperature variations in the Arctic region. You are particularly interested in the current temperature at the coordinates 90.00 (latitude) and 0.00 (longitude). Can you use the 'get_weather_data' function to fetch the current temperature data from the Open-Meteo API for these specific coordinates?", "function": {"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}, "returns": {"type": "float", "description": "The current temperature in the coordinates you've asked for"}}, "human_eval_answer": "get_weather_data(coordinates=[90.00, 0.00])", "execution_result": [-22.0], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As an environmental scientist, you are investigating the impact of climate change in the Sahara Desert. You need to know the current temperature at the coordinates 25.00 (latitude) and 13.00 (longitude). Would it be possible to utilize the 'get_weather_data' function to retrieve the present temperature data from the Open-Meteo API for these exact coordinates?", "function": {"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}, "returns": {"type": "float", "description": "The current temperature in the coordinates you've asked for"}}, "human_eval_answer": "get_weather_data(coordinates=[25.00, 13.00])", "execution_result": [11.3], "execution_result_type": "pattern_match", "question_type": "executable_simple"}
{"question": "As a cybersecurity analyst, you are investigating a potential cyber attack that seems to originate from a specific IP address. The IP address in question is 192.168.1.1. Could you use the 'get_zipcode_by_ip_address' function to determine the zipcode of the location from where this IP address is being used?", "function": {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "human_eval_answer": "get_zipcode_by_ip_address(ip_address=\"192.168.1.1\")", "execution_result": ["private range"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As an IT specialist, you've been asked to track the location of a suspicious activity on your company's network. The activity seems to be coming from an IP address 172.16.254.1. Can you utilize the 'get_zipcode_by_ip_address' function to identify the zipcode of the location where this IP address is being utilized?", "function": {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "object", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "human_eval_answer": "get_zipcode_by_ip_address(ip_address='172.16.254.1')", "execution_result": ["private range"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a data analyst, you've been given two matrices to multiply in order to analyze a complex data set. The first matrix, matA, is [[1, 2], [3, 4]] and the second matrix, matB, is [[5, 6], [7, 8]]. Can you use the 'mat_mul' function to perform this matrix multiplication?", "function": {"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "object", "properties": {"matA": {"type": "array", "description": "The first matrix."}, "matB": {"type": "array", "description": "The second matrix."}}, "required": ["matA", "matB"]}}, "human_eval_answer": "mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]])", "execution_result": [[[19, 22], [43, 50]]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a physicist, you're working on a quantum mechanics problem that requires the multiplication of two matrices. The first matrix, matA, is [[2, 3], [4, 5]] and the second matrix, matB, is [[6, 7], [8, 9]]. Could you utilize the 'mat_mul' function to carry out this matrix multiplication operation?", "function": {"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "object", "properties": {"matA": {"type": "array", "description": "The first matrix."}, "matB": {"type": "array", "description": "The second matrix."}}, "required": ["matA", "matB"]}}, "human_eval_answer": "mat_mul(matA=[[2, 3], [4, 5]], matB=[[6, 7], [8, 9]])", "execution_result": [[[36, 41], [64, 73]]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a mathematician, you are working on a complex combinatorics problem that requires the calculation of factorials. You need to find the factorial of the number 7. Can you use the 'math_factorial' function to calculate this?", "function": {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}, "human_eval_answer": "math_factorial(n=7)", "execution_result": [5040], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a physics student, you are studying quantum mechanics and come across a problem that requires you to calculate the factorial of 12. Can you use the 'math_factorial' function to solve this problem?", "function": {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "object", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}, "human_eval_answer": "math_factorial(n=12)", "execution_result": [479001600], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a historian, you are researching the political alliances in ancient Rome and you come across a problem that requires you to find the greatest common divisor of the number of senators in two different periods, 450 and 300. Can you use the 'math_gcd' function to solve this problem?", "function": {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "human_eval_answer": "math_gcd(a=450, b=300)", "execution_result": [150], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As an architect, you are designing a grid-based city layout and you need to find the greatest common divisor of the number of blocks in the length and width of the city, which are 360 and 240 respectively. Can you use the 'math_gcd' function to determine this?", "function": {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "human_eval_answer": "math_gcd(a=360, b=240)", "execution_result": [120], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a music producer, you are trying to create a rhythm pattern that repeats every certain number of beats. You have two different drum patterns, one repeats every 18 beats and the other every 24 beats. You want to find out after how many beats both patterns will align again. Can you use the 'math_lcm' function with 'a' as 18 and 'b' as 24 to determine this?", "function": {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "human_eval_answer": "math_lcm(a=18, b=24)", "execution_result": [72.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a city planner, you are designing a traffic light system at a busy intersection. One light changes every 35 seconds and the other every 45 seconds. You need to calculate when both lights will change at the same time to ensure smooth traffic flow. Can you use the 'math_lcm' function with 'a' as 35 and 'b' as 45 to find out this information?", "function": {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "human_eval_answer": "math_lcm(a=35, b=45)", "execution_result": [315.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a financial advisor, you are helping a client understand their potential mortgage payments. The client is considering a loan amount of $350,000 with an interest rate of 3.5% over a loan period of 30 years. Can you use the 'mortgage_calculator' function with 'loan_amount' as 350000, 'interest_rate' as 3.5, and 'loan_period' as 30 to calculate the monthly mortgage payment?", "function": {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, "human_eval_answer": "mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)", "execution_result": [1571.656407330882], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a real estate agent, you are assisting a couple in understanding their potential monthly mortgage payments. They are looking at a property valued at $500,000 and are considering a loan with an interest rate of 4.5% for a period of 25 years. Can you use the 'mortgage_calculator' function with 'loan_amount' as 500000, 'interest_rate' as 4.5, and 'loan_period' as 25 to determine what their monthly mortgage payment would be?", "function": {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, "human_eval_answer": "mortgage_calculator(loan_amount=500000, interest_rate=0.045, loan_period=25)", "execution_result": [2779.1623898099774], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a high school math teacher, you are preparing a lesson on quadratic equations. You want to demonstrate how to calculate the roots of a quadratic equation using the 'quadratic_roots' function. The equation you want to use for your demonstration is 3x^2 + 7x - 10 = 0. Can you use the 'quadratic_roots' function with 'a' as 3, 'b' as 7, and 'c' as -10 to find the roots of this equation?", "function": {"name": "quadratic_roots", "description": "Calculates the roots of a quadratic equation.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first coefficient."}, "b": {"type": "integer", "description": "The second coefficient."}, "c": {"type": "integer", "description": "The third coefficient."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "quadratic_roots(a=3, b=7, c=-10)", "execution_result": [[1.0, -3.3333333333333335]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a software engineer, you are developing a program that solves quadratic equations. You are currently testing the 'quadratic_roots' function and want to use it to find the roots of the equation 5x^2 - 8x + 2 = 0. Can you invoke the 'quadratic_roots' function with 'a' set to 5, 'b' set to -8, and 'c' set to 2 to determine the roots of this equation?", "function": {"name": "quadratic_roots", "description": "Calculates the roots of a quadratic equation.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "The first coefficient."}, "b": {"type": "integer", "description": "The second coefficient."}, "c": {"type": "integer", "description": "The third coefficient."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "quadratic_roots(a=5, b=-8, c=2)", "execution_result": [[1.2898979485566355, 0.31010205144336445]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a data analyst, you are working on a project that requires you to analyze demographic data based on zip codes. You are currently using the 'retrieve_city_based_on_zipcode' function to find the city corresponding to a specific zip code. Can you invoke the 'retrieve_city_based_on_zipcode' function with 'zipcode' set to '90210' to determine the city of this zip code?", "function": {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "object", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the product."}}, "required": ["zipcode"]}}, "human_eval_answer": "retrieve_city_based_on_zipcode(zipcode='90210')", "execution_result": ["BEVERLY HILLS"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a geographical researcher, you are studying the distribution of population across different cities. You have a list of zip codes and you are using the 'retrieve_city_based_on_zipcode' function to find the corresponding city. Could you use the 'retrieve_city_based_on_zipcode' function with the 'zipcode' parameter set to '10001' to identify the city associated with this zip code?", "function": {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "object", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the product."}}, "required": ["zipcode"]}}, "human_eval_answer": "retrieve_city_based_on_zipcode(zipcode='10001')", "execution_result": ["NEW YORK"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a cultural anthropologist, you are studying the celebration of holidays in different countries during various years. You have a list of years and countries and you are using the 'retrieve_holiday_by_year' function to find the corresponding holidays. Could you use the 'retrieve_holiday_by_year' function with the 'year' parameter set to '2010' and the 'country' parameter set to 'FR' to identify the holidays celebrated in France in 2010?", "function": {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "object", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, "human_eval_answer": "retrieve_holiday_by_year(year='2010', country='FR')", "execution_result": [[{"date": "2010-01-01", "localName": "Jour de l'an", "name": "New Year's Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": 1967, "types": ["Public"]}, {"date": "2010-04-05", "localName": "Lundi de P\u00e2ques", "name": "Easter Monday", "countryCode": "FR", "fixed": false, "global": true, "counties": null, "launchYear": 1642, "types": ["Public"]}, {"date": "2010-05-01", "localName": "F\u00eate du Travail", "name": "Labour Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-05-08", "localName": "Victoire 1945", "name": "Victory in Europe Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-05-13", "localName": "Ascension", "name": "Ascension Day", "countryCode": "FR", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-05-24", "localName": "Lundi de Pentec\u00f4te", "name": "Whit Monday", "countryCode": "FR", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-07-14", "localName": "F\u00eate nationale", "name": "Bastille Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-08-15", "localName": "Assomption", "name": "Assumption Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-11-01", "localName": "Toussaint", "name": "All Saints' Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-11-11", "localName": "Armistice 1918", "name": "Armistice Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2010-12-25", "localName": "No\u00ebl", "name": "Christmas Day", "countryCode": "FR", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a historian, you are researching the cultural practices of different European countries in the year 2005. You are particularly interested in the holidays celebrated in these countries during this year. You have access to the 'retrieve_holiday_by_year' function. Can you use this function with the 'year' parameter as '2005' and the 'country' parameter as 'DE' to find out the holidays celebrated in Germany in 2005?", "function": {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "object", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, "human_eval_answer": "retrieve_holiday_by_year(year='2005', country='DE')", "execution_result": [[{"date": "2005-01-01", "localName": "Neujahr", "name": "New Year's Day", "countryCode": "DE", "fixed": true, "global": true, "counties": null, "launchYear": 1967, "types": ["Public"]}, {"date": "2005-01-06", "localName": "Heilige Drei K\u00f6nige", "name": "Epiphany", "countryCode": "DE", "fixed": true, "global": false, "counties": ["DE-BW", "DE-BY", "DE-ST"], "launchYear": 1967, "types": ["Public"]}, {"date": "2005-03-25", "localName": "Karfreitag", "name": "Good Friday", "countryCode": "DE", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2005-03-27", "localName": "Ostersonntag", "name": "Easter Sunday", "countryCode": "DE", "fixed": false, "global": false, "counties": ["DE-BB", "DE-HE"], "launchYear": null, "types": ["Public"]}, {"date": "2005-03-28", "localName": "Ostermontag", "name": "Easter Monday", "countryCode": "DE", "fixed": false, "global": true, "counties": null, "launchYear": 1642, "types": ["Public"]}, {"date": "2005-05-01", "localName": "Tag der Arbeit", "name": "Labour Day", "countryCode": "DE", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2005-05-05", "localName": "Christi Himmelfahrt", "name": "Ascension Day", "countryCode": "DE", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2005-05-15", "localName": "Pfingstsonntag", "name": "Pentecost", "countryCode": "DE", "fixed": false, "global": false, "counties": ["DE-BB", "DE-HE"], "launchYear": null, "types": ["Public"]}, {"date": "2005-05-16", "localName": "Pfingstmontag", "name": "Whit Monday", "countryCode": "DE", "fixed": false, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2005-05-26", "localName": "Fronleichnam", "name": "Corpus Christi", "countryCode": "DE", "fixed": false, "global": false, "counties": ["DE-BW", "DE-BY", "DE-HE", "DE-NW", "DE-RP", "DE-SL"], "launchYear": null, "types": ["Public"]}, {"date": "2005-08-15", "localName": "Mari\u00e4 Himmelfahrt", "name": "Assumption Day", "countryCode": "DE", "fixed": true, "global": false, "counties": ["DE-SL"], "launchYear": null, "types": ["Public"]}, {"date": "2005-10-03", "localName": "Tag der Deutschen Einheit", "name": "German Unity Day", "countryCode": "DE", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2005-10-31", "localName": "Reformationstag", "name": "Reformation Day", "countryCode": "DE", "fixed": true, "global": false, "counties": ["DE-BB", "DE-MV", "DE-SN", "DE-ST", "DE-TH"], "launchYear": null, "types": ["Public"]}, {"date": "2005-11-01", "localName": "Allerheiligen", "name": "All Saints' Day", "countryCode": "DE", "fixed": true, "global": false, "counties": ["DE-BW", "DE-BY", "DE-NW", "DE-RP", "DE-SL"], "launchYear": null, "types": ["Public"]}, {"date": "2005-11-16", "localName": "Bu\u00df- und Bettag", "name": "Repentance and Prayer Day", "countryCode": "DE", "fixed": false, "global": false, "counties": ["DE-SN"], "launchYear": null, "types": ["Public"]}, {"date": "2005-12-25", "localName": "Erster Weihnachtstag", "name": "Christmas Day", "countryCode": "DE", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}, {"date": "2005-12-26", "localName": "Zweiter Weihnachtstag", "name": "St. Stephen's Day", "countryCode": "DE", "fixed": true, "global": true, "counties": null, "launchYear": null, "types": ["Public"]}]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a data analyst, you are working on a project that requires you to organize a set of numerical data. You have access to the 'sort_array' function. Can you use this function with the 'array' parameter as '[34, 2, 56, 7, 9, 12]' and the 'reverse' parameter as 'True' to sort these numbers in descending order?", "function": {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "object", "properties": {"array": {"type": "array", "items": {"type": "number"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order.", "default": false}}, "required": ["array"]}}, "human_eval_answer": "sort_array(array=[34, 2, 56, 7, 9, 12], reverse=True)", "execution_result": [[56, 34, 12, 9, 7, 2]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "As a data analyst, you are working on a project that requires you to organize a set of numerical data. You have access to the 'sort_array' function. Can you use this function with the 'array' parameter as '[1, 2, 2, 7, 7, 10]'  sort these numbers in ascending order?", "function": {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "object", "properties": {"array": {"type": "array", "items": {"type": "number"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order.", "default": false}}, "required": ["array"]}}, "human_eval_answer": "sort_array(array=[1, 2, 2, 7, 7, 10], reverse=False)", "execution_result": [[1, 2, 2, 7, 7, 10]], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Add '0011' and '1100'.", "function": {"name": "add_binary_numbers", "description": "Adds two binary numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "string", "description": "The first binary number."}, "b": {"type": "string", "description": "The second binary number."}}, "required": ["a", "b"]}}, "human_eval_answer": "add_binary_numbers(a='0011',b='1100')", "execution_result": ["1111"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Can you add two binary number '10011' and '1100'.", "function": {"name": "add_binary_numbers", "description": "Adds two binary numbers.", "parameters": {"type": "object", "properties": {"a": {"type": "string", "description": "The first binary number."}, "b": {"type": "string", "description": "The second binary number."}}, "required": ["a", "b"]}}, "human_eval_answer": "add_binary_numbers(a='10011',b='1100')", "execution_result": ["11111"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Can you use x=[1,2,3],y=[4,5,6] as datapoint to use linear regression to find the value at point=10", "function": {"name": "linear_regression", "description": "Finds the linear regression of a set of points and evaluates it at a given point.", "parameters": {"type": "object", "properties": {"x": {"type": "array", "description": "The x coordinates of the points.", "items": {"type": "number"}}, "y": {"type": "array", "description": "The y coordinates of the points.", "items": {"type": "number"}}, "point": {"type": "number", "description": "The point to calculate the linear regression at."}}, "required": ["x", "y", "point"]}}, "human_eval_answer": "linear_regression(x=[1,2,3],y=[4,5,6],point=10)", "execution_result": [13.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Can you use x=[1,2,-3],y=[4,-5,6] as datapoint to fit a linear regression model and predict the value at 10.", "function": {"name": "linear_regression", "description": "Finds the linear regression of a set of points and evaluates it at a given point.", "parameters": {"type": "object", "properties": {"x": {"type": "array", "description": "The x coordinates of the points.", "items": {"type": "number"}}, "y": {"type": "array", "description": "The y coordinates of the points.", "items": {"type": "number"}}, "point": {"type": "number", "description": "The point to calculate the linear regression at."}}, "required": ["x", "y", "point"]}}, "human_eval_answer": "linear_regression(x=[1,2,-3],y=[4,-5,6],point=10)", "execution_result": [-15.476190476190476], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Can you find the maximum number of point that are in the same line out of all [[1,1],[2,2],[3,4],[5,5]].", "function": {"name": "maxPoints", "description": "Finds the maximum number of points on a line.", "parameters": {"type": "object", "properties": {"points": {"type": "array", "items": {"type": "array", "items": {"type": "integer"}, "minItems": 2, "maxItems": 2, "description": "A point represented by a 2 element list [x, y]."}, "description": "The list of points. Points are 2 element lists."}}, "required": ["points"]}}, "human_eval_answer": "maxPoints(points=[[1,1],[2,2],[3,4],[5,5]])", "execution_result": [3], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Can you find the maximum number of point that are in the same line out of all [[1,1],[2,3],[4,6],[5,5]].", "function": {"name": "maxPoints", "description": "Finds the maximum number of points on a line.", "parameters": {"type": "object", "properties": {"points": {"type": "array", "items": {"type": "array", "items": {"type": "integer"}, "minItems": 2, "maxItems": 2, "description": "A point represented by a 2 element list [x, y]."}, "description": "The list of points. Points are 2 element lists."}}, "required": ["points"]}}, "human_eval_answer": "maxPoints(points=[[1,1],[2,3],[4,6],[5,5]])", "execution_result": [2], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Calculate the investment value of 10000 initial investment and 1000 annual contribution for 5 years. With an interest rate of 5% and inflation rate of [1%,2%,3%,4%,4%].", "function": {"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "number", "description": "The annual return rate in percentage."}, "inflation_rate": {"type": "array", "items": {"type": "number"}, "description": "The inflation rate for each year in percentage."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}, "human_eval_answer": "calculate_investment_value(initial_investment=10000,annual_contribution=1000,years=5,annual_return=0.05,inflation_rate=[0.01,0.02,0.03,0.04,0.04])", "execution_result": [16145.646273400002], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Calculate the investment value of 1 million initial investment and 1k annual contribution for 3 years. With an interest rate of 10% and inflation rate of [1%,4%,4%].", "function": {"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "number", "description": "The annual return rate in percentage."}, "inflation_rate": {"type": "array", "items": {"type": "number"}, "description": "The inflation rate for each year in percentage."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}, "human_eval_answer": "calculate_investment_value(initial_investment=1000000,annual_contribution=1000,years=3,annual_return=0.05,inflation_rate=[0.01,0.04,0.04])", "execution_result": [1063843.4989999998], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "What is the nutrition need for a male 30 years old 170cm of weight 100kg? He has a activity level of 1 and goal of reducing weight.", "function": {"name": "calculate_nutritional_needs", "description": "Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "The weight of the person in kilograms."}, "height": {"type": "number", "description": "The height of the person in centimeters."}, "age": {"type": "number", "description": "The age of the person in years."}, "gender": {"type": "string", "description": "The gender of the person. Possible options [male, female, other]."}, "activity_level": {"type": "number", "description": "The activity level of the person. Possible options [1,2,3,4,5]."}, "goal": {"type": "string", "description": "The goal of the person. Possible options [lose, gain, maintain]."}}, "required": ["weight", "height", "age", "gender", "activity_level", "goal"]}}, "human_eval_answer": "calculate_nutritional_needs(weight=100,height=170,age=30,gender='male',activity_level=1,goal='loss')", "execution_result": [{"calories": 1988.2984000000001, "proteins_g": 149.12238, "fats_g": 55.23051111111111, "carbohydrates_g": 223.68357000000003}], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "What is the nutrition need for a female 80 years old 170cm of weight 59kg? He has a activity level of 4 and goal of reducing weight.", "function": {"name": "calculate_nutritional_needs", "description": "Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "The weight of the person in kilograms."}, "height": {"type": "number", "description": "The height of the person in centimeters."}, "age": {"type": "number", "description": "The age of the person in years."}, "gender": {"type": "string", "description": "The gender of the person. Possible options [male, female, other]."}, "activity_level": {"type": "number", "description": "The activity level of the person. Possible options [1,2,3,4,5]."}, "goal": {"type": "string", "description": "The goal of the person. Possible options [lose, gain, maintain]."}}, "required": ["weight", "height", "age", "gender", "activity_level", "goal"]}}, "human_eval_answer": "calculate_nutritional_needs(weight=59,height=170,age=80,gender='female',activity_level=4,goal='loss')", "execution_result": [{"calories": 1524.15985, "proteins_g": 114.31198875, "fats_g": 42.33777361111111, "carbohydrates_g": 171.46798312500002}], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Book a deluxe room of 1000 dollar from Aug.11,2024, to Aug.15,2024, with customer id 123.", "function": {"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "object", "properties": {"room_type": {"type": "object", "description": "The room type to book."}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY. "}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, "human_eval_answer": "book_room(room_type={'type':'deluxe','price':1000},check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')", "execution_result": [{"customer_id": "123", "room_number": {"type": "deluxe", "price": 1000}, "check_in_date": "08-11-2024", "check_out_date": "08-15-2024", "total_price": 1000}], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Book a king room of 10000 dollar from Dec.11,2023, to Aug.15,2024, with customer id 123.", "function": {"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "object", "properties": {"room_type": {"type": "object", "description": "The room type to book."}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY. "}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, "human_eval_answer": "book_room(room_type={'type':'king','price':10000},check_in_date='12-11-2023',check_out_date='08-15-2024',customer_id='123')", "execution_result": [{"customer_id": "123", "room_number": {"type": "king", "price": 10000}, "check_in_date": "12-11-2023", "check_out_date": "08-15-2024", "total_price": 1000}], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Order me 10 burgers of 5 dollars, 7 ice creams of 2 dolloars", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "object", "properties": {"item": {"type": "object", "items": {"type": "string", "description": "the name of the product."}}}, "quantity": {"type": "object", "items": {"type": "object", "items": {"type": "number", "description": "the number of the product purchased."}}, "price": {"type": "object", "items": {"type": "object", "items": {"type": "number", "description": "the number of the product purchased."}}}}, "required": ["item", "quantity", "price"]}}, "human_eval_answer": "order_food(item=['burger','ice cream'], quantity=[10,7], price=[5,2])", "execution_result": [64], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "Order me 101 dumplings of 0.1 dollars, 20 rice bowl of 10 dolloars", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "object", "properties": {"item": {"type": "object", "items": {"type": "string", "description": "the name of the product."}}}, "quantity": {"type": "object", "items": {"type": "object", "items": {"type": "number", "description": "the number of the product purchased."}}, "price": {"type": "object", "items": {"type": "object", "items": {"type": "number", "description": "the number of the product purchased."}}}}, "required": ["item", "quantity", "price"]}}, "human_eval_answer": "order_food(item=['dumplings','rice bowl'], quantity=[101,20], price=[0.1,10])", "execution_result": [210.1], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "What's the director of Avatar.", "function": {"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "human_eval_answer": "get_movie_director(movie_name='Avatar')", "execution_result": ["James Cameron"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "What's the director of Pulp Fiction.", "function": {"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "human_eval_answer": "get_movie_director(movie_name='Pulp Fiction')", "execution_result": ["Quentin Tarantino"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "What's the age limit rating of Avatar.", "function": {"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "human_eval_answer": "get_movie_rating(movie_name='Avatar')", "execution_result": ["PG-13"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "What's the age limit rating of Pulp Fiction.", "function": {"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "human_eval_answer": "get_movie_rating(movie_name='Pulp Fiction')", "execution_result": ["R"], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "What is the are of polygon formed by vertices [[1,2],[3,4],[1,3]]", "function": {"name": "polygon_area", "description": "Calculate the area of a polygon given its vertices using the shoelace formula.", "parameters": {"type": "object", "properties": {"vertices": {"type": "array", "items": {"type": "array", "items": {"type": "number"}, "minItems": 2, "maxItems": 2, "description": "A single vertex represented by a 2 element list [x, y]."}, "description": "The vertices of the polygon, where each vertex is a 2 element list [x, y]."}}, "required": ["vertices"]}}, "human_eval_answer": "polygon_area(vertices=[[1,2],[3,4],[1,3]])", "execution_result": [1.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "What is the are of polygon formed by vertices [[1,2],[3,4],[1,4],[3,7]]", "function": {"name": "polygon_area", "description": "Calculate the area of a polygon given its vertices using the shoelace formula.", "parameters": {"type": "object", "properties": {"vertices": {"type": "array", "items": {"type": "array", "items": {"type": "number"}, "minItems": 2, "maxItems": 2, "description": "A single vertex represented by a 2 element list [x, y]."}, "description": "The vertices of the polygon, where each vertex is a 2 element list [x, y]."}}, "required": ["vertices"]}}, "human_eval_answer": "polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])", "execution_result": [0.0], "execution_result_type": "exact_match", "question_type": "executable_simple"}
{"question": "How can I initialize the GIS geometry presentation in a user interface, providing a specific result set controller `mapController` and a composite UI element `mapArea` to display the GIS data?", "function": {"name": "GeometryPresentation.createPresentation", "description": "Initializes the GIS geometry presentation within the provided UI composite, using the given result set controller.", "parameters": {"type": "object", "properties": {"controller": {"type": "any", "description": "The IResultSetController instance responsible for controlling the result set."}, "parent": {"type": "any", "description": "The Composite UI element where the GIS presentation will be displayed."}}, "required": ["controller", "parent"]}}, "human_eval_answer": "GeometryPresentation.createPresentation(controller=mapController, parent=mapArea)", "question_type": "java"}
{"question": "How can I generate SQL completion proposals for a table named 'Customers' in a database, considering that I prefer using short names and the additional parameters include a limit of '50' and a schema filter set to 'public'?", "function": {"name": "SQLCompletionAnalyzer.makeProposalsFromObject", "description": "Generates SQL completion proposals based on the given database object, name preference, and additional parameters.", "parameters": {"type": "object", "properties": {"object": {"type": "any", "description": "The database object for which to generate proposals."}, "useShortName": {"type": "boolean", "description": "Indicates whether to use short names for the proposals."}, "params": {"type": "HashMap", "description": "A map of additional parameters to customize the proposals."}}, "required": ["object", "useShortName", "params"]}}, "human_eval_answer": "SQLCompletionAnalyzer.makeProposalsFromObject(object=Customers, useShortName=true, params={'limit': 50, 'schemaFilter': 'public'})", "question_type": "java"}
{"question": "How can I generate the full SQL creation script with a header for a Firebird database view named 'EmployeeView', using a progress monitor `dbMonitor` and the original source 'SELECT * FROM Employee WHERE status = 'active''?", "function": {"name": "FireBirdUtils.getViewSourceWithHeader", "description": "Generates the SQL script to create or alter a Firebird database view, including the view definition header, based on the server version and the provided source.", "parameters": {"type": "object", "properties": {"monitor": {"type": "any", "description": "The DBRProgressMonitor to monitor the progress of the operation."}, "view": {"type": "any", "description": "The GenericTableBase object representing the view."}, "source": {"type": "String", "description": "The SQL source code of the view."}}, "required": ["monitor", "view", "source"]}}, "human_eval_answer": "FireBirdUtils.getViewSourceWithHeader(monitor=dbMonitor, view=EmployeeView, source='SELECT * FROM Employee WHERE status = \\'active\\'')", "question_type": "java"}
{"question": "How can I resolve a tablespace reference named 'USERSPACE1' in a DB2 database using a data source object `db2DataSource` and a progress monitor `dbMonitor`?", "function": {"name": "DB2Tablespace.resolveTablespaceReference", "description": "Resolves a tablespace reference, which can be a name or a direct reference, to a DB2Tablespace object using the provided data source.", "parameters": {"type": "object", "properties": {"monitor": {"type": "any", "description": "The progress monitor to track the operation progress."}, "dataSource": {"type": "any", "description": "The DB2DataSource object used to access the database."}, "reference": {"type": "any", "description": "The tablespace reference, which can be a name (String) or a direct DB2Tablespace reference."}}, "required": ["monitor", "dataSource", "reference"]}}, "human_eval_answer": "DB2Tablespace.resolveTablespaceReference(monitor=dbMonitor, dataSource=db2DataSource, reference='USERSPACE1')", "question_type": "java"}
{"question": "How can I prepare a JDBC statement for a DB2 view named 'EmployeeView' within the schema 'HR' using an active JDBC session object `jdbcSession`?", "function": {"name": "DB2ViewBaseDepCache.prepareObjectsStatement", "description": "Prepares a JDBC statement for querying metadata of a specific DB2 view in a given schema.", "parameters": {"type": "object", "properties": {"session": {"type": "any", "description": "The JDBCSession object representing the active database session."}, "db2ViewBase": {"type": "any", "description": "The DB2ViewBase object representing the DB2 view for which the statement is being prepared."}}, "required": ["session", "db2ViewBase"]}}, "human_eval_answer": "DB2ViewBaseDepCache.prepareObjectsStatement(session=jdbcSession, db2ViewBase=EmployeeView)", "question_type": "java"}
{"question": "How can I initialize a plain text presentation for a result set controller named 'dataController' within a parent composite UI element 'compositeParent', ensuring that the text area is read-only and supports multi-line input, horizontal and vertical scrolling?", "function": {"name": "PlainTextPresentation.createPresentation", "description": "Initializes the plain text presentation for a result set controller within a given parent composite UI element, setting up a styled text area with appropriate properties and listeners.", "parameters": {"type": "object", "properties": {"controller": {"type": "any", "description": "The IResultSetController instance responsible for managing the result set."}, "parent": {"type": "any", "description": "The Composite UI element that will contain the plain text presentation."}}, "required": ["controller", "parent"]}}, "human_eval_answer": "PlainTextPresentation.createPresentation(controller=dataController, parent=compositeParent)", "question_type": "java"}
{"question": "How can I update the data in a spreadsheet view within a database application, ensuring that metadata is refreshed, existing data is appended, and the current state is preserved?", "function": {"name": "SpreadsheetPresentation.refreshData", "description": "Refreshes the data in the spreadsheet view, with options to refresh metadata, append data, and keep the current state.", "parameters": {"type": "object", "properties": {"refreshMetadata": {"type": "boolean", "description": "Indicates whether to refresh the metadata."}, "append": {"type": "boolean", "description": "Indicates whether to append the data to the existing data."}, "keepState": {"type": "boolean", "description": "Indicates whether to preserve the current state of the spreadsheet."}}, "required": ["refreshMetadata", "append", "keepState"]}}, "human_eval_answer": "SpreadsheetPresentation.refreshData(refreshMetadata=true, append=true, keepState=true)", "question_type": "java"}
{"question": "How do I copy an NIO resource to a new path '/backup/data.txt' on the filesystem, ensuring that the copy operation overwrites any existing file at the destination, and track the progress using a progress monitor `progressTracker`?", "function": {"name": "EFSNIOResource.copy", "description": "Copies the NIO resource to the specified destination path on the filesystem, with an option to force overwrite and a monitor to track progress.", "parameters": {"type": "object", "properties": {"destination": {"type": "any", "description": "The destination path where the resource should be copied to."}, "force": {"type": "boolean", "description": "If true, the copy operation will overwrite existing files at the destination."}, "monitor": {"type": "any", "description": "A progress monitor to track the copy operation progress."}}, "required": ["destination", "force", "monitor"]}}, "human_eval_answer": "EFSNIOResource.copy(destination=new Path('/backup/data.txt'), force=true, monitor=progressTracker)", "question_type": "java"}
{"question": "How can I update the contents of a file in the non-blocking file system with an input stream `fileStream`, ensuring that the operation is forced and history is not kept, while monitoring the progress with `progressMonitor`?", "function": {"name": "EFSNIOFile.setContents", "description": "Sets the contents of a file with data from the provided InputStream, with options to force the operation and to keep or discard the file history.", "parameters": {"type": "object", "properties": {"source": {"type": "any", "description": "The InputStream from which file contents are read."}, "force": {"type": "boolean", "description": "If true, the operation is forced, otherwise it's a normal set content operation."}, "keepHistory": {"type": "boolean", "description": "If true, keeps the file history, otherwise discards it."}, "monitor": {"type": "any", "description": "The IProgressMonitor to report progress of the operation."}}, "required": ["source", "force", "keepHistory", "monitor"]}}, "human_eval_answer": "EFSNIOFile.setContents(source=fileStream, force=true, keepHistory=false, monitor=progressMonitor)", "question_type": "java"}
{"question": "How can I serialize a `MultiPoint` object with 5 points into a ByteBuffer using XYZM mode 'XYZ' for spatial data storage in a HANA database?", "function": {"name": "writeMultiPoint", "description": "Serializes a MultiPoint geometry into a ByteBuffer with a specified XYZM mode, which includes writing the header and the number of points.", "parameters": {"type": "object", "properties": {"multiPoint": {"type": "any", "description": "The MultiPoint object to serialize."}, "xyzmMode": {"type": "any", "description": "The XYZM mode to use for serialization, which determines the dimensionality of the points."}, "buffer": {"type": "any", "description": "The ByteBuffer where the serialized MultiPoint will be written."}}, "required": ["multiPoint", "xyzmMode", "buffer"]}}, "human_eval_answer": "HANAWKBWriter.writeMultiPoint(multiPoint = new MultiPoint(new Point[]{new Point(1, 2), new Point(3, 4), new Point(5, 6), new Point(7, 8), new Point(9, 10)}), xyzmMode = XyzmMode.XYZ, buffer = ByteBuffer.allocate(1024))", "question_type": "java"}
{"question": "How can I update the launcher information in the JNI Bridge with the launcher path '/usr/local/bin/dbeaver' and the launcher name 'DBeaverLauncher'?", "function": {"name": "JNIBridge.setLauncherInfo", "description": "Sets the launcher information in the JNI Bridge, which includes the path and name of the launcher.", "parameters": {"type": "object", "properties": {"launcher": {"type": "String", "description": "The full path to the launcher."}, "name": {"type": "String", "description": "The name of the launcher."}}, "required": ["launcher", "name"]}}, "human_eval_answer": "JNIBridge.setLauncherInfo(launcher='/usr/local/bin/dbeaver', name='DBeaverLauncher')", "question_type": "java"}
{"question": "What is the value of the 'EnableExtensions' property in the Windows registry under the HKEY_LOCAL_MACHINE root when checking the system policies for the DBeaver application?", "function": {"name": "BasePolicyDataProvider.getRegistryPolicyValue", "description": "Retrieves the value of a specified property from the DBeaver registry policy node if it exists, specifically for Windows systems.", "parameters": {"type": "object", "properties": {"root": {"type": "any", "description": "The root key in the Windows registry (e.g., HKEY_LOCAL_MACHINE)."}, "property": {"type": "String", "description": "The name of the property to retrieve the value for from the registry."}}, "required": ["root", "property"]}}, "human_eval_answer": "BasePolicyDataProvider.getRegistryPolicyValue(root=WinReg.HKEY_LOCAL_MACHINE, property=\"EnableExtensions\")", "question_type": "java"}
{"question": "How do I change the current schema to 'AnalyticsDB' in the Exasol execution context while monitoring the progress with a monitor object named 'progressMonitor'?", "function": {"name": "ExasolExecutionContext.setCurrentSchema", "description": "Sets the current schema for the Exasol execution context to the specified schema name, and monitors the progress of this operation.", "parameters": {"type": "object", "properties": {"monitor": {"type": "any", "description": "The progress monitor to track the execution of setting the current schema."}, "schemaName": {"type": "String", "description": "The name of the schema to set as the current schema."}}, "required": ["monitor", "schemaName"]}}, "human_eval_answer": "ExasolExecutionContext.setCurrentSchema(monitor=progressMonitor, schemaName='AnalyticsDB')", "question_type": "java"}
{"question": "How do I prepare a JDBC statement to retrieve the privilege names and grantor names for system privileges of a specific Altibase grantee named 'JohnDoe' in a JDBC session?", "function": {"name": "AltibaseGrantee.prepareObjectsStatement", "description": "Prepares a JDBC statement for querying system privileges and their grantors for a given Altibase grantee.", "parameters": {"type": "object", "properties": {"session": {"type": "any", "description": "The JDBC session in which to prepare the statement."}, "owner": {"type": "any", "description": "The Altibase grantee whose system privileges and grantors are to be queried."}}, "required": ["session", "owner"]}}, "human_eval_answer": "AltibaseGrantee.prepareObjectsStatement(session=JDBC_session, owner=JohnDoe)", "question_type": "java"}
{"question": "In the SmartRefreshLayout library, how can I trigger the finish event for a 'FunGame' header with a `gameLayout` object, indicating that the refresh was successful?", "function": {"name": "FunGameBase.onFinish", "description": "Handles the finish event of the FunGame refresh header, updating the last finish status and handling manual operations if necessary.", "parameters": {"type": "object", "properties": {"layout": {"type": "any", "description": "The RefreshLayout instance associated with the FunGame refresh header."}, "success": {"type": "boolean", "description": "Indicates whether the refresh operation was successful."}}, "required": ["layout", "success"]}}, "human_eval_answer": "FunGameBase.onFinish(layout=gameLayout, success=true)", "question_type": "java"}
{"question": "How do I decode a 9-patch image from an input stream `imageInputStream` and write the decoded PNG image to an output stream `imageOutputStream`?", "function": {"name": "Res9patchStreamDecoder.decode", "description": "Decodes a 9-patch image from the given input stream and writes the decoded PNG image to the specified output stream. Returns true if the operation is successful, otherwise false.", "parameters": {"type": "object", "properties": {"in": {"type": "any", "description": "The input stream containing the 9-patch image data."}, "out": {"type": "any", "description": "The output stream where the decoded PNG image will be written."}}, "required": ["in", "out"]}}, "human_eval_answer": "Res9patchStreamDecoder.decode(in=imageInputStream, out=imageOutputStream)", "question_type": "java"}
{"question": "How can I create an `InvokePolymorphicNode` for a given instruction data `instructionData` that represents a range invocation in a Java decompiler?", "function": {"name": "InsnDecoder.invokePolymorphic", "description": "Creates an InvokePolymorphicNode based on the given instruction data and whether the invocation is a range or not.", "parameters": {"type": "object", "properties": {"insn": {"type": "any", "description": "The instruction data from which to create the InvokePolymorphicNode."}, "isRange": {"type": "boolean", "description": "Indicates whether the invocation is a range invocation."}}, "required": ["insn", "isRange"]}}, "human_eval_answer": "InsnDecoder.invokePolymorphic(insn=instructionData, isRange=true)", "question_type": "java"}
{"question": "How can I attach generic type information to a constructor invocation instruction `newConstructorInsn` within a method `initMethod` in a Java decompiler analysis tool?", "function": {"name": "GenericTypesVisitor.attachGenericTypesInfo", "description": "Attaches generic type information to a constructor invocation instruction if the instruction's result argument has generic types and the class being instantiated has generic type parameters.", "parameters": {"type": "object", "properties": {"mth": {"type": "any", "description": "The MethodNode that contains the constructor invocation instruction."}, "insn": {"type": "any", "description": "The ConstructorInsn instance representing the constructor invocation to which generic types info should be attached."}}, "required": ["mth", "insn"]}}, "human_eval_answer": "GenericTypesVisitor.attachGenericTypesInfo(mth=initMethod, insn=newConstructorInsn)", "question_type": "java"}
{"question": "How can I obtain the third page of role counts with a page size of 20 when using the SysRoleController's method for querying role counts in a system management application?", "function": {"name": "SysRoleController.queryPageRoleCount", "description": "This method queries for a paginated list of role counts, where each role's count represents the number of users associated with that role.", "parameters": {"type": "object", "properties": {"pageNo": {"type": "int", "description": "The number of the page to retrieve (optional, defaults to 1)."}, "pageSize": {"type": "int", "description": "The number of records per page (optional, defaults to 10)."}}, "required": ["pageNo", "pageSize"]}}, "human_eval_answer": "SysRoleController.queryPageRoleCount(pageNo=3, pageSize=20)", "question_type": "java"}
{"question": "How can I display the personal information page for a user in a web application, if I have a model object `webModel` and an HTTP request `userRequest` with the parameter 'username' set to 'john_doe'?", "function": {"name": "PersonController.personal", "description": "This method retrieves personal information for a logged-in user and adds it to the model before returning the view name for the personal information page.", "parameters": {"type": "object", "properties": {"model": {"type": "any", "description": "The Model object to which user information attributes are added."}, "request": {"type": "any", "description": "The HttpServletRequest object containing the request parameters."}}, "required": ["model", "request"]}}, "human_eval_answer": "PersonController.personal(model=webModel, request=userRequest)", "question_type": "java"}
{"question": "How can I update the HBase mapping configuration for a specific file named 'user-mapping.yml' with a new configuration object `newMappingConfig` that does not change the outer adapter key?", "function": {"name": "HbaseAdapter.updateConfig", "description": "Updates the HBase mapping configuration for a given file name with the provided mapping configuration, ensuring the outer adapter key remains unchanged.", "parameters": {"type": "object", "properties": {"fileName": {"type": "String", "description": "The name of the file for which the mapping configuration is to be updated."}, "config": {"type": "any", "description": "The new mapping configuration object to be used for the update."}}, "required": ["fileName", "config"]}}, "human_eval_answer": "HbaseAdapter.updateConfig(fileName='user-mapping.yml', config=newMappingConfig)", "question_type": "java"}
{"question": "How can I handle an exception event `ioExceptionEvent` that occurred in the channel context `nettyChannelContext` during a network communication session, and ensure the channel is closed after logging the error with the message 'something goes wrong with channel'?", "function": {"name": "SessionHandler.exceptionCaught", "description": "Handles an exception event by logging the error and closing the channel associated with the provided ChannelHandlerContext.", "parameters": {"type": "object", "properties": {"ctx": {"type": "any", "description": "The ChannelHandlerContext associated with the channel where the exception occurred."}, "e": {"type": "any", "description": "The ExceptionEvent that contains the exception details."}}, "required": ["ctx", "e"]}}, "human_eval_answer": "SessionHandler.exceptionCaught(ctx=nettyChannelContext, e=ioExceptionEvent)", "question_type": "java"}
{"question": "How can I update the new status to 2 for a list of product IDs [101, 202, 303] in the product management system?", "function": {"name": "PmsProductServiceImpl.updateNewStatus", "description": "Updates the new status for a list of product IDs in the product management system.", "parameters": {"type": "object", "properties": {"ids": {"type": "ArrayList", "description": "A list of product IDs to update the new status for."}, "newStatus": {"type": "int", "description": "The new status to be set for the given product IDs."}}, "required": ["ids", "newStatus"]}}, "human_eval_answer": "PmsProductServiceImpl.updateNewStatus(ids=ArrayList<Long>(Arrays.asList(101L, 202L, 303L)), newStatus=2)", "question_type": "java"}
{"question": "How can I obtain a list of new home products that contain 'LED TV' in their product name, have a recommendation status of 1, and want to retrieve the third page of results with 20 items per page?", "function": {"name": "SmsHomeNewProductServiceImpl.list", "description": "Retrieves a list of SmsHomeNewProduct entities based on the provided product name, recommendation status, and pagination settings.", "parameters": {"type": "object", "properties": {"productName": {"type": "String", "description": "The name of the product to filter by, using a 'like' search pattern."}, "recommendStatus": {"type": "int", "description": "The recommendation status to filter by."}, "pageSize": {"type": "int", "description": "The number of items to return per page."}, "pageNum": {"type": "int", "description": "The page number to retrieve."}}, "required": ["productName", "recommendStatus", "pageSize", "pageNum"]}}, "human_eval_answer": "SmsHomeNewProductServiceImpl.list(productName='LED TV', recommendStatus=1, pageSize=20, pageNum=3)", "question_type": "java"}
{"question": "How can I change the visibility of product categories with IDs 101, 102, and 103 to hidden in the e-commerce platform's admin panel?", "function": {"name": "PmsProductCategoryController.updateShowStatus", "description": "Updates the show status of a list of product categories to either visible or hidden.", "parameters": {"type": "object", "properties": {"ids": {"type": "ArrayList", "description": "A list of product category IDs to update."}, "showStatus": {"type": "int", "description": "The new show status for the product categories (e.g., 0 for hidden, 1 for visible)."}}, "required": ["ids", "showStatus"]}}, "human_eval_answer": "PmsProductCategoryController.updateShowStatus(ids=[101, 102, 103], showStatus=0)", "question_type": "java"}
{"question": "How can I update the sort order of a recommended subject with ID `42` to a new sort value `5` using the controller responsible for SMS home recommendations?", "function": {"name": "SmsHomeRecommendSubjectController.updateSort", "description": "Updates the sort order of a recommended subject by its ID and returns a common result indicating success or failure.", "parameters": {"type": "object", "properties": {"id": {"type": "long", "description": "The unique identifier of the recommended subject to update."}, "sort": {"type": "int", "description": "The new sort order value for the recommended subject."}}, "required": ["id", "sort"]}}, "human_eval_answer": "SmsHomeRecommendSubjectController.updateSort(id=42, sort=5)", "question_type": "java"}
{"question": "How do I create a callable statement for executing a stored procedure `CALL totalSales(?)` with a result set that is scroll insensitive, read only, and has a close cursors at commit holdability, using a proxy connection object `proxyConn`?", "function": {"name": "ProxyConnection.prepareCall", "description": "Creates a CallableStatement object for calling database stored procedures, with the specified result set type, concurrency type, and holdability.", "parameters": {"type": "object", "properties": {"sql": {"type": "String", "description": "The SQL statement to execute."}, "resultSetType": {"type": "int", "description": "A result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE."}, "concurrency": {"type": "int", "description": "A concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE."}, "holdability": {"type": "int", "description": "A holdability type; one of ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT."}}, "required": ["sql", "resultSetType", "concurrency", "holdability"]}}, "human_eval_answer": "ProxyConnection.prepareCall(sql='CALL totalSales(?)', resultSetType=ResultSet.TYPE_SCROLL_INSENSITIVE, concurrency=ResultSet.CONCUR_READ_ONLY, holdability=ResultSet.CLOSE_CURSORS_AT_COMMIT)", "question_type": "java"}
{"question": "What are the indices of the two numbers in the array [2, 7, 11, 15] that add up to the target sum of 9?", "function": {"name": "TwoSum.twoSum", "description": "Finds two numbers in the given array that add up to the target sum and returns their indices.", "parameters": {"type": "object", "properties": {"nums": {"type": "Array", "description": "An array of integers to search for the two numbers."}, "target": {"type": "int", "description": "The target sum to find within the array."}}, "required": ["nums", "target"]}}, "human_eval_answer": "TwoSum.twoSum(nums=[2, 7, 11, 15], target=9)", "question_type": "java"}
{"question": "How can I create a scheduled executor service that periodically updates Elasticsearch credentials from a file named 'es_credentials.properties' every 30 seconds, using the basic credentials provided in the variable `basicAuthCredentials`?", "function": {"name": "configStorage.dynamicCredentialsScheduledExecutorService", "description": "Creates a ScheduledExecutorService that periodically loads Elasticsearch credentials from a specified file at a given interval, using provided basic credentials.", "parameters": {"type": "object", "properties": {"credentialsFile": {"type": "String", "description": "The path to the credentials file."}, "credentialsRefreshInterval": {"type": "int", "description": "The interval in seconds at which the credentials file should be reloaded."}, "basicCredentials": {"type": "any", "description": "The BasicCredentials object containing the current credentials."}}, "required": ["credentialsFile", "credentialsRefreshInterval", "basicCredentials"]}}, "human_eval_answer": "configStorage.dynamicCredentialsScheduledExecutorService(credentialsFile='es_credentials.properties', credentialsRefreshInterval=30, basicCredentials=basicAuthCredentials)", "question_type": "java"}
{"question": "How can I test that the 'zipkin.collector.activemq.concurrency' property with a value of '10' is correctly applied to the ActiveMQCollector.Builder's concurrency setting when configuring a Zipkin server?", "function": {"name": "propertyTransferredToCollectorBuilder", "description": "Tests that a given property is transferred correctly to the ActiveMQCollector.Builder during the setup of a Zipkin server.", "parameters": {"type": "object", "properties": {"property": {"type": "String", "description": "The property name to be tested."}, "value": {"type": "any", "description": "The value of the property to be applied."}, "builderExtractor": {"type": "any", "description": "A function that extracts the value from the builder for comparison."}}, "required": ["property", "value", "builderExtractor"]}}, "human_eval_answer": "ZipkinActiveMQCollectorPropertiesOverrideTest.propertyTransferredToCollectorBuilder(property=\"zipkin.collector.activemq.concurrency\", value=10, builderExtractor=ActiveMQCollector.Builder::getConcurrency)", "question_type": "java"}
{"question": "How can I asynchronously store the value '42' with the key 'answer' in a Redisson cache, only if the key does not already exist, and obtain a CompletableFuture that will complete with an Optional containing the previous value?", "function": {"name": "RedissonAsyncCache.putIfAbsent", "description": "Asynchronously puts the given value associated with the specified key into the cache if it is not already present, and returns a CompletableFuture that will complete with an Optional of the previous value.", "parameters": {"type": "object", "properties": {"key": {"type": "any", "description": "The key with which the specified value is to be associated."}, "value": {"type": "any", "description": "The value to be associated with the specified key."}}, "required": ["key", "value"]}}, "human_eval_answer": "RedissonAsyncCache.putIfAbsent(key='answer', value=42)", "question_type": "java"}
{"question": "How can I obtain a reactive queue with the name 'taskQueue' using a custom serialization codec `jsonCodec` in a reactive programming model with Redisson?", "function": {"name": "RedissonRx.getQueue", "description": "Retrieves a reactive queue instance with the specified name and codec.", "parameters": {"type": "object", "properties": {"name": {"type": "String", "description": "The name of the queue."}, "codec": {"type": "any", "description": "The codec used for serialization and deserialization of objects in the queue."}}, "required": ["name", "codec"]}}, "human_eval_answer": "RedissonRx.getQueue(name='taskQueue', codec=jsonCodec)", "question_type": "java"}
{"question": "How can I asynchronously attempt to acquire a permit from a Redisson expirable semaphore with a wait time of 5 seconds, a lease time of 2 minutes, and using the TimeUnit of SECONDS?", "function": {"name": "RedissonPermitExpirableSemaphore.tryAcquireAsync", "description": "Attempts to acquire a permit from the semaphore asynchronously, with the ability to specify the wait time, lease time, and time unit. Returns a future that will be completed with the permit ID if acquired.", "parameters": {"type": "object", "properties": {"waitTime": {"type": "long", "description": "The maximum time to wait for a permit to become available."}, "leaseTime": {"type": "long", "description": "The time to lease the permit once acquired."}, "unit": {"type": "any", "description": "The time unit for both waitTime and leaseTime."}}, "required": ["waitTime", "leaseTime", "unit"]}}, "human_eval_answer": "RedissonPermitExpirableSemaphore.tryAcquireAsync(waitTime=5, leaseTime=120, unit=SECONDS)", "question_type": "java"}
{"question": "How can I asynchronously store the value 'John Doe' with the key 'employee:1234' in a Redisson map cache and ensure it's processed correctly?", "function": {"name": "RedissonMapCache.putOperationAsync", "description": "Asynchronously stores a key-value pair in the Redisson map cache.", "parameters": {"type": "object", "properties": {"key": {"type": "any", "description": "The key under which the value is to be stored in the map cache."}, "value": {"type": "any", "description": "The value associated with the key to be stored in the map cache."}}, "required": ["key", "value"]}}, "human_eval_answer": "RedissonMapCache.putOperationAsync(key='employee:1234', value='John Doe')", "question_type": "java"}
{"question": "How can I schedule a cleanup task to run after 5 minutes using a timer in a service manager, considering the task is represented by the `cleanupTask` TimerTask object?", "function": {"name": "ServiceManager.newTimeout", "description": "Schedules a new timeout to execute a TimerTask after a specified delay. If the service manager is shutting down, it returns a dummy timeout instead.", "parameters": {"type": "object", "properties": {"task": {"type": "any", "description": "The TimerTask to schedule."}, "delay": {"type": "long", "description": "The delay before the task is executed."}, "unit": {"type": "any", "description": "The time unit of the delay."}}, "required": ["task", "delay", "unit"]}}, "human_eval_answer": "ServiceManager.newTimeout(task=cleanupTask, delay=5, unit=TimeUnit.MINUTES)", "question_type": "java"}
{"question": "How can I perform a bitwise AND operation on Redis keys 'user:online:today' and 'user:online:yesterday' and store the result in the key 'user:online:both' using Redisson?", "function": {"name": "RedissonConnection.bitOp", "description": "Performs a bitwise operation between the given keys and stores the result in the destination key. The NOT operation is not supported for multiple source keys.", "parameters": {"type": "object", "properties": {"op": {"type": "any", "description": "The BitOperation enum value representing the bitwise operation to perform."}, "destination": {"type": "Array", "description": "The destination key where the result will be stored."}, "keys": {"type": "Array", "description": "The source keys on which the bitwise operation will be performed."}}, "required": ["op", "destination", "keys"]}}, "human_eval_answer": "RedissonConnection.bitOp(op=BitOperation.AND, destination='user:online:both'.getBytes(), keys='user:online:today'.getBytes(), 'user:online:yesterday'.getBytes())", "question_type": "java"}
{"question": "How can I decode a list of alternating key-value objects into a list of map entries for state processing, given the list `['userID', 42, 'username', 'johndoe', 'isActive', true]` and a state object `processingState`?", "function": {"name": "ObjectMapEntryReplayDecoder.decode", "description": "Decodes a list of objects representing alternating keys and values into a list of map entries.", "parameters": {"type": "object", "properties": {"parts": {"type": "ArrayList", "description": "A list of objects representing alternating keys and values."}, "state": {"type": "any", "description": "The state object used during the decoding process."}}, "required": ["parts", "state"]}}, "human_eval_answer": "ObjectMapEntryReplayDecoder.decode(parts=['userID', 42, 'username', 'johndoe', 'isActive', true], state=processingState)", "question_type": "java"}
{"question": "How can I process a markup text `buildOutput` for a specific build context `jenkinsBuild` to apply console annotations in a Jenkins environment?", "function": {"name": "ConsoleAnnotator.annotate", "description": "Processes the given MarkupText for the specified context using a chain of ConsoleAnnotators, updating or removing annotators as necessary.", "parameters": {"type": "object", "properties": {"context": {"type": "any", "description": "The context in which the MarkupText is being annotated."}, "text": {"type": "any", "description": "The MarkupText to be annotated."}}, "required": ["context", "text"]}}, "human_eval_answer": "ConsoleAnnotator.annotate(context=jenkinsBuild, text=buildOutput)", "question_type": "java"}
{"question": "How can I create a stubbed source map for a nested document structure in Elasticsearch, if I have a filtered source map `docFields` that only includes fields 'name' and 'address'?", "function": {"name": "NestedValueFetcher.createSourceMapStub", "description": "Creates a stubbed source map for a nested document structure by iterating through the nested path parts and constructing a nested map hierarchy.", "parameters": {"type": "object", "properties": {"filteredSource": {"type": "HashMap", "description": "A map containing the filtered source fields for which the nested stub map should be created."}}, "required": ["filteredSource"]}}, "human_eval_answer": "NestedValueFetcher.createSourceMapStub(filteredSource=docFields)", "question_type": "java"}
{"question": "How can I append the node ID to the StringBuilder `logBuilder` from a LogEvent `logEvent` in Elasticsearch, assuming the node ID is available?", "function": {"name": "NodeIdConverter.format", "description": "Appends the node ID to the provided StringBuilder if the node ID is available from the NodeAndClusterIdStateListener.", "parameters": {"type": "object", "properties": {"event": {"type": "any", "description": "The LogEvent that contains the logging information."}, "toAppendTo": {"type": "any", "description": "The StringBuilder to which the node ID will be appended."}}, "required": ["event", "toAppendTo"]}}, "human_eval_answer": "NodeIdConverter.format(event=logEvent, toAppendTo=logBuilder)", "question_type": "java"}
{"question": "How can I notify the routing nodes observer that a previously unassigned shard `shardA` is now in the initializing state `shardB` in an Elasticsearch cluster?", "function": {"name": "RoutingNodesChangedObserver.shardInitialized", "description": "Notifies the observer that an unassigned shard has changed to an initializing state.", "parameters": {"type": "object", "properties": {"unassignedShard": {"type": "any", "description": "The shard that was previously unassigned."}, "initializedShard": {"type": "any", "description": "The shard that is now in the initializing state."}}, "required": ["unassignedShard", "initializedShard"]}}, "human_eval_answer": "RoutingNodesChangedObserver.shardInitialized(unassignedShard=shardA, initializedShard=shardB)", "question_type": "java"}
{"question": "How can I configure an `ObjectParser` instance named `searchHitParser` to parse the inner hits fields for a search result in an Elasticsearch application?", "function": {"name": "SearchHit.declareInnerHitsParseFields", "description": "Configures an ObjectParser to parse the inner hits fields of a search result.", "parameters": {"type": "object", "properties": {"parser": {"type": "any", "description": "The ObjectParser instance to configure."}}, "required": ["parser"]}}, "human_eval_answer": "SearchHit.declareInnerHitsParseFields(parser=searchHitParser)", "question_type": "java"}
{"question": "How can I create a term query for a field type `usernameField` that searches for the value 'JohnDoe' in a case-insensitive manner within an Elasticsearch test case?", "function": {"name": "TermQueryBuilderTests.termQuery", "description": "Constructs a term query based on the provided field type, value, and case sensitivity setting.", "parameters": {"type": "object", "properties": {"mapper": {"type": "any", "description": "The MappedFieldType instance for the field to be queried."}, "value": {"type": "any", "description": "The value to query for."}, "caseInsensitive": {"type": "boolean", "description": "Whether the term query should be case insensitive."}}, "required": ["mapper", "value", "caseInsensitive"]}}, "human_eval_answer": "TermQueryBuilderTests.termQuery(mapper=usernameField, value='JohnDoe', caseInsensitive=true)", "question_type": "java"}
{"question": "How do I create a spy instance for an Elasticsearch test framework, given the mock creation settings `mockSettings`, a mock handler `mockHandler`, and an object `testObject` to be spied upon?", "function": {"name": "SecureMockMaker.createSpy", "description": "Creates a spy instance for a given object using the provided mock creation settings and handler. This is used within the Elasticsearch test framework.", "parameters": {"type": "object", "properties": {"settings": {"type": "any", "description": "The settings for creating the mock."}, "handler": {"type": "any", "description": "The handler to be used for the mock."}, "object": {"type": "any", "description": "The actual object to create a spy for."}}, "required": ["settings", "handler", "object"]}}, "human_eval_answer": "SecureMockMaker.createSpy(settings=mockSettings, handler=mockHandler, object=testObject)", "question_type": "java"}
{"question": "How can I initialize the DES cipher in Java for encryption with 'DESede' algorithm, 'CBC' mode, and 'PKCS5Padding' padding scheme?", "function": {"name": "DesAPITest.init", "description": "Initializes the DES cipher with the specified algorithm, mode, and padding scheme.", "parameters": {"type": "object", "properties": {"crypt": {"type": "String", "description": "The encryption algorithm to use, such as 'DES' or 'DESede'."}, "mode": {"type": "String", "description": "The cipher mode to use, such as 'CBC' or 'ECB'."}, "padding": {"type": "String", "description": "The padding scheme to use, such as 'PKCS5Padding' or 'NoPadding'."}}, "required": ["crypt", "mode", "padding"]}}, "human_eval_answer": "DesAPITest.init(crypt='DESede', mode='CBC', padding='PKCS5Padding')", "question_type": "java"}
{"question": "How can I validate that the environment variable map `envVariables` for a process builder contains exactly 5 entries?", "function": {"name": "Basic.checkSizes", "description": "Checks if the sizes of various views of the environment map match the expected size and if the map's empty status is consistent with the expected size.", "parameters": {"type": "object", "properties": {"environ": {"type": "HashMap", "description": "The environment variable map to check."}, "size": {"type": "int", "description": "The expected size of the environment variable map."}}, "required": ["environ", "size"]}}, "human_eval_answer": "Basic.checkSizes(environ=envVariables, size=5)", "question_type": "java"}
{"question": "How can I validate that the caller-sensitive method has correctly injected an invoker class for the `CSM` instance `csmInstance` and that the expected class is `MyExpectedClass` in a unit test?", "function": {"name": "MethodInvokeTest.checkInjectedInvoker", "description": "Checks if the injected invoker class in the CSM instance is hidden, belongs to the same module as the expected class, and appears before the expected class on the stack.", "parameters": {"type": "object", "properties": {"csm": {"type": "any", "description": "The CSM instance to check for the injected invoker."}, "expected": {"type": "any", "description": "The expected class to compare against the injected invoker."}}, "required": ["csm", "expected"]}}, "human_eval_answer": "MethodInvokeTest.checkInjectedInvoker(csm=csmInstance, expected=MyExpectedClass.class)", "question_type": "java"}
{"question": "How can I output a formatted Java constant declaration for a large Base64 encoded string representing a certificate, with the constant name 'CERTIFICATE' and the value being a 1024-character long Base64 string starting with 'MIIFdTCCBF2gAwIBAgISESG...'?", "function": {"name": "LargeHandshakeTest.format", "description": "Outputs a formatted Java constant declaration for a given name and value, splitting the value into multiple lines if it exceeds 60 characters.", "parameters": {"type": "object", "properties": {"name": {"type": "String", "description": "The name of the Java constant."}, "value": {"type": "String", "description": "The value of the Java constant, which will be split into multiple lines if it's too long."}}, "required": ["name", "value"]}}, "human_eval_answer": "LargeHandshakeTest.format(name='CERTIFICATE', value='MIIFdTCCBF2gAwIBAgISESG...')", "question_type": "java"}
{"question": "How can I instantiate a dummy server with SSL encryption for testing purposes, using the IP address `192.168.1.10` and port `8080`, and a pre-configured SSL context named `testSSLContext`?", "function": {"name": "CookieHeaderTest.create", "description": "Creates a DummyServer instance with SSL support using the provided socket address and SSL context.", "parameters": {"type": "object", "properties": {"sa": {"type": "any", "description": "The socket address to bind the server to."}, "sslContext": {"type": "any", "description": "The SSL context to be used for creating the server socket."}}, "required": ["sa", "sslContext"]}}, "human_eval_answer": "CookieHeaderTest.create(sa = new InetSocketAddress(\"192.168.1.10\", 8080), sslContext = testSSLContext)", "question_type": "java"}
{"question": "How do I send HTTP response headers with a status code of 404 and a content length of 1500 bytes for a non-HEAD request in an HTTP/2 test exchange?", "function": {"name": "Http2TestExchangeImpl.sendResponseHeaders", "description": "Sends HTTP response headers with a given status code and response length. It handles special cases for certain status codes and request types.", "parameters": {"type": "object", "properties": {"rCode": {"type": "int", "description": "The HTTP status code for the response."}, "responseLength": {"type": "long", "description": "The length of the response content in bytes. A value of 0 means no content, and a negative value means the content length is unknown."}}, "required": ["rCode", "responseLength"]}}, "human_eval_answer": "Http2TestExchangeImpl.sendResponseHeaders(rCode=404, responseLength=1500)", "question_type": "java"}
{"question": "How can I simulate the deletion of documents matching a query in an Elasticsearch test environment, using a `DeleteByQueryRequest` object named `deleteQueryRequest` and an `ActionListener` named `testListener` that listens for `BulkByScrollResponse`?", "function": {"name": "TransformIndexerStateTests.doDeleteByQuery", "description": "Simulates the deletion of documents by a query in a test environment by invoking the response listener with a mock `BulkByScrollResponse`.", "parameters": {"type": "object", "properties": {"deleteByQueryRequest": {"type": "any", "description": "The request object containing the query for deleting documents."}, "responseListener": {"type": "any", "description": "The listener that handles the response of the delete by query operation."}}, "required": ["deleteByQueryRequest", "responseListener"]}}, "human_eval_answer": "TransformIndexerStateTests.doDeleteByQuery(deleteByQueryRequest=deleteQueryRequest, responseListener=testListener)", "question_type": "java"}
{"question": "How can I execute the master operation to gather the usage statistics of the Cross-Cluster Replication (CCR) feature in Elasticsearch, including the number of follower indices and auto-follow patterns, using a given `usageRequest` and a `clusterState`, and handle the results using an `actionListener`?", "function": {"name": "CCRUsageTransportAction.masterOperation", "description": "This function gathers usage statistics of the CCR feature in Elasticsearch and sends the results to the provided ActionListener.", "parameters": {"type": "object", "properties": {"task": {"type": "any", "description": "The task associated with the request."}, "request": {"type": "any", "description": "The XPackUsageRequest object containing the request details."}, "state": {"type": "any", "description": "The current cluster state."}, "listener": {"type": "any", "description": "The ActionListener that handles the response containing the usage statistics."}}, "required": ["task", "request", "state", "listener"]}}, "human_eval_answer": "CCRUsageTransportAction.masterOperation(task=usageTask, request=usageRequest, state=clusterState, listener=actionListener)", "question_type": "java"}
{"question": "In a Java XML processing context, how can I obtain a list of all child elements of type `Element` from a `Node` representing a SAML assertion?", "function": {"name": "SamlObjectSignerTests.getChildren", "description": "Retrieves all child nodes of a specified type from a given node.", "parameters": {"type": "object", "properties": {"node": {"type": "any", "description": "The parent Node from which to retrieve child nodes."}, "type": {"type": "any", "description": "The Class object representing the type of child nodes to retrieve."}}, "required": ["node", "type"]}}, "human_eval_answer": "SamlObjectSignerTests.getChildren(node=SAMLAssertionNode, type=Element.class)", "question_type": "java"}
{"question": "How can I create a predicate that determines if a `Join` object represents a full master node with a state older than the local node's accepted term of 42 and accepted version of 7?", "function": {"name": "VotingOnlyNodePlugin.fullMasterWithOlderState", "description": "Generates a predicate that checks if a Join object represents a full master node with a state that is older than the provided local accepted term and version.", "parameters": {"type": "object", "properties": {"localAcceptedTerm": {"type": "long", "description": "The local node's accepted term."}, "localAcceptedVersion": {"type": "long", "description": "The local node's accepted version."}}, "required": ["localAcceptedTerm", "localAcceptedVersion"]}}, "human_eval_answer": "VotingOnlyNodePlugin.fullMasterWithOlderState(localAcceptedTerm=42, localAcceptedVersion=7)", "question_type": "java"}
{"question": "How can I initiate a shard operation on a searchable snapshot for a specific request `snapshotRequest`, shard routing `shardRouteInfo`, and task `snapshotTask`, and handle the result asynchronously using the listener `operationListener`?", "function": {"name": "AbstractTransportSearchableSnapshotsAction.shardOperation", "description": "Executes a shard-level operation on a searchable snapshot, ensuring the license is valid and the directory is correctly unwrapped before performing the operation.", "parameters": {"type": "object", "properties": {"request": {"type": "any", "description": "The request to perform the shard operation."}, "shardRouting": {"type": "any", "description": "The ShardRouting information for the shard on which to perform the operation."}, "task": {"type": "any", "description": "The task associated with the shard operation."}, "listener": {"type": "any", "description": "The ActionListener that will handle the ShardOperationResult asynchronously."}}, "required": ["request", "shardRouting", "task", "listener"]}}, "human_eval_answer": "AbstractTransportSearchableSnapshotsAction.shardOperation(request=snapshotRequest, shardRouting=shardRouteInfo, task=snapshotTask, listener=operationListener)", "question_type": "java"}
{"question": "How can I create a new searchable snapshot directory for a shard with ID 5 in the 'daily-snapshots' repository, using the index settings for the 'logs' index, given that the shard path is '/data/nodes/0/indices/logs/5', the current time in nanoseconds is provided by a supplier 'currentTimeNanos', and the necessary services like 'repositoriesService', 'cacheService', 'threadPool', 'blobStoreCacheService', and 'sharedBlobCacheService' are already initialized?", "function": {"name": "SearchableSnapshotDirectory.create", "description": "Creates a new instance of a searchable snapshot directory for a shard in a repository with the provided settings and services.", "parameters": {"type": "object", "properties": {"repositories": {"type": "any", "description": "The service that provides access to the repositories."}, "cache": {"type": "any", "description": "The cache service."}, "indexSettings": {"type": "any", "description": "The settings for the index that the shard belongs to."}, "shardPath": {"type": "any", "description": "The path to the shard data."}, "currentTimeNanosSupplier": {"type": "any", "description": "A supplier that provides the current time in nanoseconds."}, "threadPool": {"type": "any", "description": "The thread pool for executing tasks."}, "blobStoreCacheService": {"type": "any", "description": "The service for caching blobs."}, "sharedBlobCacheService": {"type": "any", "description": "The service for caching blobs shared across multiple shards."}}, "required": ["repositories", "cache", "indexSettings", "shardPath", "currentTimeNanosSupplier", "threadPool", "blobStoreCacheService", "sharedBlobCacheService"]}}, "human_eval_answer": "SearchableSnapshotDirectory.create(repositories=repositoriesService, cache=cacheService, indexSettings=indexSettingsForLogs, shardPath=new ShardPath(false, Paths.get('/data/nodes/0/indices/logs'), Paths.get('/data/nodes/0/indices/logs/5'), new ShardId(new Index('logs', '_na_'), 5)), currentTimeNanosSupplier=currentTimeNanos, threadPool=threadPool, blobStoreCacheService=blobStoreCacheService, sharedBlobCacheService=sharedBlobCacheService)", "question_type": "java"}
{"question": "How do I parse the HTTP response body from an entity `httpResponseEntity` using a specific parser function `responseParser` that handles the content, with a parser configuration `defaultParserConfig` in an Elasticsearch multi-cluster search test?", "function": {"name": "CCSDuelIT.parseEntity", "description": "Parses an HttpEntity using the provided entity parser function and parser configuration, and returns the parsed response of type Resp.", "parameters": {"type": "object", "properties": {"entity": {"type": "any", "description": "The HttpEntity to parse."}, "entityParser": {"type": "any", "description": "The function that will parse the XContentParser into the desired response type."}, "parserConfig": {"type": "any", "description": "The configuration for the XContentParser."}}, "required": ["entity", "entityParser", "parserConfig"]}}, "human_eval_answer": "CCSDuelIT.parseEntity(entity=httpResponseEntity, entityParser=responseParser, parserConfig=defaultParserConfig)", "question_type": "java"}
{"question": "How can I determine the boolean value of a configuration setting 'enableLogging' which is currently set to 'yes', and if the setting is not specified, default to 'false'?", "function": {"name": "Booleans.parseBooleanLenient", "description": "Parses a string to a boolean value leniently, allowing various string representations to be interpreted as 'false', and defaults to 'true' for other cases, unless a default value is provided.", "parameters": {"type": "object", "properties": {"value": {"type": "String", "description": "The string value to parse into a boolean."}, "defaultValue": {"type": "boolean", "description": "The default boolean value to return if the string value is null."}}, "required": ["value", "defaultValue"]}}, "human_eval_answer": "Booleans.parseBooleanLenient(value='yes', defaultValue=false)", "question_type": "java"}
{"question": "How can I serialize a map of data `userProfile` with keys 'name', 'age', and 'email' into an XContentBuilder object, ensuring there are no self-references and including start and end object headers in the output?", "function": {"name": "XContentBuilder.map", "description": "Serializes a map into the XContentBuilder, with options to ensure there are no self-references within the map and to include start and end object headers in the output.", "parameters": {"type": "object", "properties": {"values": {"type": "HashMap", "description": "The map of values to serialize into the XContentBuilder."}, "ensureNoSelfReferences": {"type": "boolean", "description": "A flag to ensure the map does not contain references to itself, which could cause a stackoverflow error."}, "writeStartAndEndHeaders": {"type": "boolean", "description": "A flag to indicate whether to write the start and end object headers."}}, "required": ["values", "ensureNoSelfReferences", "writeStartAndEndHeaders"]}}, "human_eval_answer": "XContentBuilder.map(values=userProfile, ensureNoSelfReferences=true, writeStartAndEndHeaders=true)", "question_type": "java"}
{"question": "How can I truncate the translog for a shard located at the path '/var/data/elasticsearch/nodes/0/indices/1shard', using the terminal interface for output and the index directory at '/var/data/elasticsearch/nodes/0/indices/1shard/index'?", "function": {"name": "TruncateTranslogAction.execute", "description": "Truncates the translog for a given shard path by creating a new empty checkpoint and translog file, and removes the existing translog files.", "parameters": {"type": "object", "properties": {"terminal": {"type": "any", "description": "The Terminal interface used for standard I/O interactions."}, "shardPath": {"type": "any", "description": "The ShardPath object representing the path to the shard whose translog needs to be truncated."}, "indexDirectory": {"type": "any", "description": "The Directory object representing the path to the index directory of the shard."}}, "required": ["terminal", "shardPath", "indexDirectory"]}}, "human_eval_answer": "TruncateTranslogAction.execute(terminal=terminalInterface, shardPath=new ShardPath(Paths.get('/var/data/elasticsearch/nodes/0/indices/1shard')), indexDirectory=FSDirectory.open(Paths.get('/var/data/elasticsearch/nodes/0/indices/1shard/index')))", "question_type": "java"}
{"question": "In Elasticsearch, how can I build a nested query for a search context `mainSearchContext` and update the inner hits context `hitsContext` for a nested path 'user.address', ensuring that unmapped paths are not ignored?", "function": {"name": "NestedQueryBuilder.doBuild", "description": "Builds the nested query based on the provided search context and updates the inner hits context accordingly. It throws an IOException if the nested path is not mapped and ignoreUnmapped is false.", "parameters": {"type": "object", "properties": {"parentSearchContext": {"type": "any", "description": "The search context of the parent query."}, "innerHitsContext": {"type": "any", "description": "The context for inner hits that will be updated by the nested query builder."}}, "required": ["parentSearchContext", "innerHitsContext"]}}, "human_eval_answer": "NestedQueryBuilder.doBuild(parentSearchContext=mainSearchContext, innerHitsContext=hitsContext)", "question_type": "java"}
{"question": "How can I create an exponential decay scoring function for an Elasticsearch query, targeting the 'timestamp' field, with an origin point of 'now', a scale of '10d', an offset of '2d', and a decay factor of 0.5?", "function": {"name": "ScoreFunctionBuilders.exponentialDecayFunction", "description": "Creates an ExponentialDecayFunctionBuilder which is used to score documents with a function that decays exponentially from a certain origin.", "parameters": {"type": "object", "properties": {"fieldName": {"type": "String", "description": "The name of the field on which to apply the function."}, "origin": {"type": "any", "description": "The point of origin from which decay starts."}, "scale": {"type": "any", "description": "Defines how quickly the function decays."}, "offset": {"type": "any", "description": "The offset from the origin before decay starts."}, "decay": {"type": "double", "description": "The decay factor, must be between 0 and 1."}}, "required": ["fieldName", "origin", "scale", "decay"]}}, "human_eval_answer": "ScoreFunctionBuilders.exponentialDecayFunction(fieldName='timestamp', origin='now', scale='10d', offset='2d', decay=0.5)", "question_type": "java"}
{"question": "How can I create a range query for a field named 'temperature' that fetches records with values from 20.5 to 30.0 degrees, including the lower bound but excluding the upper bound, using the query type 'FLOAT'?", "function": {"name": "dvRangeQuery", "description": "Creates a range query for binary doc values using the specified field, query type, range, and inclusion flags.", "parameters": {"type": "object", "properties": {"field": {"type": "String", "description": "The field to query."}, "queryType": {"type": "any", "description": "The type of query to perform, such as 'FLOAT' for floating-point ranges."}, "from": {"type": "any", "description": "The lower bound of the range."}, "to": {"type": "any", "description": "The upper bound of the range."}, "includeFrom": {"type": "boolean", "description": "Whether to include the 'from' value in the range."}, "includeTo": {"type": "boolean", "description": "Whether to include the 'to' value in the range."}}, "required": ["field", "queryType", "from", "to", "includeFrom", "includeTo"]}}, "human_eval_answer": "dvRangeQuery(field='temperature', queryType=BinaryDocValuesRangeQuery.QueryType.FLOAT, from=20.5, to=30.0, includeFrom=true, includeTo=false)", "question_type": "java"}
{"question": "How can I create a query to find documents in an Elasticsearch index where the 'age' field values are within the range of 30 to 40, inclusive of 30 but exclusive of 40?", "function": {"name": "withinQuery", "description": "Creates a query for a range field where the values are within the specified range, with options to include or exclude the lower and upper bounds.", "parameters": {"type": "object", "properties": {"field": {"type": "String", "description": "The name of the field to query."}, "from": {"type": "any", "description": "The lower bound of the range query."}, "to": {"type": "any", "description": "The upper bound of the range query."}, "includeFrom": {"type": "boolean", "description": "Whether to include the 'from' value in the range."}, "includeTo": {"type": "boolean", "description": "Whether to include the 'to' value in the range."}}, "required": ["field", "from", "to", "includeFrom", "includeTo"]}}, "human_eval_answer": "withinQuery(field='age', from=30L, to=40L, includeFrom=true, includeTo=false)", "question_type": "java"}
{"question": "How can I create a new field type for a date script in Elasticsearch, with the field name 'timestamp', using a specific date field script factory `dateFactory`, a script `dateScript`, metadata containing the key 'format' with value 'epoch_millis', and handling script errors with the policy 'FAIL'?", "function": {"name": "DateScriptFieldType.createFieldType", "description": "Creates a new field type for a date script with the provided parameters.", "parameters": {"type": "object", "properties": {"name": {"type": "String", "description": "The name of the field."}, "factory": {"type": "any", "description": "The factory to create the date field script."}, "script": {"type": "any", "description": "The script to define the date field behavior."}, "meta": {"type": "HashMap", "description": "The metadata for the field type."}, "onScriptError": {"type": "any", "description": "The policy on how to handle script errors."}}, "required": ["name", "factory", "script", "meta", "onScriptError"]}}, "human_eval_answer": "DateScriptFieldType.createFieldType(name='timestamp', factory=dateFactory, script=dateScript, meta={'format': 'epoch_millis'}, onScriptError=OnScriptError.FAIL)", "question_type": "java"}
{"question": "How can I generate the XContent for a RootObjectMapper that includes default settings for dynamic date formats, dynamic templates, date detection, and numeric detection, while skipping runtime fields?", "function": {"name": "RootObjectMapper.doXContent", "description": "Serializes the RootObjectMapper settings to XContent, with options to include default values and to skip runtime fields.", "parameters": {"type": "object", "properties": {"builder": {"type": "any", "description": "The XContentBuilder to which the content should be written."}, "params": {"type": "any", "description": "Parameters controlling the serialization, including whether to include defaults and whether to skip runtime fields."}}, "required": ["builder", "params"]}}, "human_eval_answer": "RootObjectMapper.doXContent(builder=xContentBuilderInstance, params=new ToXContent.Params(\"include_defaults\", true, \"TOXCONTENT_SKIP_RUNTIME\", true))", "question_type": "java"}
{"question": "How can I create a child runtime field for a composite field named 'compositeField1' in Elasticsearch, using the parser context 'mappingParserContext', with the parent script factory 'compositeScriptFactory' and handling script errors with 'onScriptError.IGNORE'?", "function": {"name": "CompositeRuntimeField.createChildRuntimeField", "description": "Attempts to create a child runtime field for a composite field, but since composite fields cannot have children, it throws an IllegalArgumentException.", "parameters": {"type": "object", "properties": {"parserContext": {"type": "any", "description": "The context used for parsing the mapping."}, "parent": {"type": "String", "description": "The name of the parent field."}, "parentScriptFactory": {"type": "any", "description": "A factory function to create a script for the parent composite field."}, "onScriptError": {"type": "any", "description": "The strategy for handling script errors."}}, "required": ["parserContext", "parent", "parentScriptFactory", "onScriptError"]}}, "human_eval_answer": "CompositeRuntimeField.createChildRuntimeField(parserContext=mappingParserContext, parent='compositeField1', parentScriptFactory=compositeScriptFactory, onScriptError=OnScriptError.IGNORE)", "question_type": "java"}
{"question": "How do I generate a DMG setup script for an application named 'PhotoEditor' located at '/Applications/PhotoEditor.app', with a custom background image and ensuring the script reflects the correct volume URL and installation directory when creating a macOS package using jpackage?", "function": {"name": "MacDmgBundler.prepareDMGSetupScript", "description": "Prepares a DMG setup script for a macOS application package, including the volume URL, background image file, and installation directory.", "parameters": {"type": "object", "properties": {"appLocation": {"type": "any", "description": "The file system path to the application location."}, "params": {"type": "HashMap", "description": "A map of parameters that may include the application name, images root, background image folder, and other packaging parameters."}}, "required": ["appLocation", "params"]}}, "human_eval_answer": "MacDmgBundler.prepareDMGSetupScript(appLocation=Path.of('/Applications/PhotoEditor.app'), params=new HashMap<String, Object>(){{ put(\"APP_NAME\", \"PhotoEditor\"); put(\"IMAGES_ROOT\", \"/path/to/images\"); put(\"BACKGROUND_IMAGE_FOLDER\", \"background\"); put(\"BACKGROUND_IMAGE\", \"custom-bg.png\"); }})", "question_type": "java"}
{"question": "How do I ensure that the application image directory exists and has a valid name when preparing parameters for creating a macOS installer package, given that the application image path is '/Applications/MyApp.app' and the application name is 'MyApp'?", "function": {"name": "MacBaseInstallerBundler.validateAppImageAndBundeler", "description": "Validates the application image and bundler parameters to ensure that the application image directory exists, has a valid name, and checks if it's signed when required.", "parameters": {"type": "object", "properties": {"params": {"type": "HashMap", "description": "A map containing the parameters for the application image and bundler validation."}}}, "required": ["params"]}, "human_eval_answer": "MacBaseInstallerBundler.validateAppImageAndBundeler(params = new HashMap<String, Object>() {{ put(\"PREDEFINED_APP_IMAGE\", Paths.get(\"/Applications/MyApp.app\")); put(\"APP_NAME\", \"MyApp\"); }})", "question_type": "java"}
{"question": "How can I ensure that the signs of the BigDecimal elements in the array `durations` are aligned from index 2 to index 5, considering that the elements represent different units of time in a duration object?", "function": {"name": "DurationImpl.alignSigns", "description": "Aligns the signs of BigDecimal elements in a subarray to be consistent with each other, potentially borrowing from adjacent elements to adjust values and maintain the overall magnitude.", "parameters": {"type": "object", "properties": {"buf": {"type": "Array", "description": "The array of BigDecimal elements representing different units of time whose signs need to be aligned.", "items": {"type": "any"}}, "start": {"type": "int", "description": "The starting index of the subarray to align signs."}, "end": {"type": "int", "description": "The ending index of the subarray to align signs."}}, "required": ["buf", "start", "end"]}}, "human_eval_answer": "DurationImpl.alignSigns(buf=durations, start=2, end=5)", "question_type": "java"}
{"question": "How do I signal the end of an XML element with the qualified name `{namespaceURI='http://www.example.com', localPart='item', prefix='ex'}` and augmentation information `augmentations` in an XML processing application that uses namespaces?", "function": {"name": "XMLNamespaceBinder.endElement", "description": "Signals the end of an XML element, handling namespace-related processing if namespaces are enabled, or delegating to the document handler otherwise.", "parameters": {"type": "object", "properties": {"element": {"type": "any", "description": "The qualified name of the element that is ending."}, "augs": {"type": "any", "description": "Augmentation information associated with the element."}}, "required": ["element", "augs"]}}, "human_eval_answer": "XMLNamespaceBinder.endElement(element = new QName('http://www.example.com', 'item', 'ex'), augs = augmentations)", "question_type": "java"}
{"question": "How can I switch the execution from coroutine with ID 5 to coroutine with ID 10, passing an argument 'resultData' to the target coroutine, ensuring that coroutine 10 is available, in a Java XML processing context?", "function": {"name": "CoroutineManager.co_exit_to", "description": "This function switches the execution from one coroutine to another within the CoroutineManager, passing an argument object to the target coroutine. It also checks if the target coroutine is available and throws an exception if not.", "parameters": {"type": "object", "properties": {"arg_object": {"type": "any", "description": "The argument object to pass to the target coroutine."}, "thisCoroutine": {"type": "int", "description": "The ID of the currently active coroutine."}, "toCoroutine": {"type": "int", "description": "The ID of the coroutine to switch to."}}, "required": ["arg_object", "thisCoroutine", "toCoroutine"]}}, "human_eval_answer": "CoroutineManager.co_exit_to(arg_object=resultData, thisCoroutine=5, toCoroutine=10)", "question_type": "java"}
{"question": "How can I append a substring of characters from a character array `textBuffer` starting at index 5 with a length of 10 characters to a text stream while handling XML serialization?", "function": {"name": "ToTextStream.characters", "description": "Writes a range of characters from a character array to the text stream. It handles temporary and final output states differently, normalizing characters if necessary and tracing the event if a tracer is set.", "parameters": {"type": "object", "properties": {"ch": {"type": "Array", "description": "The character array from which a range of characters will be written."}, "start": {"type": "int", "description": "The start index in the character array from which to begin writing characters."}, "length": {"type": "int", "description": "The number of characters to write from the character array."}}, "required": ["ch", "start", "length"]}}, "human_eval_answer": "ToTextStream.characters(ch=textBuffer, start=5, length=10)", "question_type": "java"}
{"question": "How can I retrieve the encoding information for UTF-8 in a Java application, allowing the use of Java encoding names?", "function": {"name": "Encodings.getEncodingInfo", "description": "Retrieves the encoding information for a given encoding name, optionally allowing Java encoding names if the standard IANA name is not found.", "parameters": {"type": "object", "properties": {"encoding": {"type": "String", "description": "The IANA or Java encoding name."}, "allowJavaNames": {"type": "boolean", "description": "Flag to determine if Java encoding names are allowed."}}, "required": ["encoding", "allowJavaNames"]}}, "human_eval_answer": "Encodings.getEncodingInfo(encoding='UTF-8', allowJavaNames=true)", "question_type": "java"}
{"question": "How do I handle surrogate pairs in XML serialization, specifically for a high surrogate value of 55357 and a low surrogate value of 56832, when the content is not within a CDATA section?", "function": {"name": "BaseMarkupSerializer.surrogates", "description": "Processes surrogate pairs in XML content, ensuring they are valid XML characters and serializes them appropriately, handling cases both inside and outside of CDATA sections.", "parameters": {"type": "object", "properties": {"high": {"type": "int", "description": "The high surrogate value of the surrogate pair."}, "low": {"type": "int", "description": "The low surrogate value of the surrogate pair."}, "inContent": {"type": "boolean", "description": "A flag indicating whether the surrogate pair is within XML content."}}, "required": ["high", "low", "inContent"]}}, "human_eval_answer": "BaseMarkupSerializer.surrogates(high=55357, low=56832, inContent=false)", "question_type": "java"}
{"question": "How can I determine if the system property 'enableXmlSecurityFeature' is set to enable the security feature 'XML_SECURITY' in a Java XML processing environment?", "function": {"name": "JdkXmlFeatures.getSystemProperty", "description": "Checks if the specified system property is set and applies its boolean value to the given XML feature. Throws NumberFormatException if the property value is invalid.", "parameters": {"type": "object", "properties": {"feature": {"type": "any", "description": "The XML feature to check the system property for."}, "sysPropertyName": {"type": "String", "description": "The name of the system property to be checked."}}, "required": ["feature", "sysPropertyName"]}}, "human_eval_answer": "JdkXmlFeatures.getSystemProperty(feature=XML_SECURITY, sysPropertyName='enableXmlSecurityFeature')", "question_type": "java"}
{"question": "How can I execute the step method to update the graphics of an intro animation with a width of 800 pixels and a height of 600 pixels?", "function": {"name": "Intro.step", "description": "Updates the graphics of an intro animation based on the specified width and height.", "parameters": {"type": "object", "properties": {"w": {"type": "int", "description": "The width of the area to update."}, "h": {"type": "int", "description": "The height of the area to update."}}, "required": ["w", "h"]}}, "human_eval_answer": "Intro.step(w=800, h=600)", "question_type": "java"}
{"question": "How can I validate that the user-provided password 'P@ssw0rd!' matches the encrypted password 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' stored in the system for authentication?", "function": {"name": "JndiLoginModule.verifyPassword", "description": "Compares an encrypted password with a plaintext password to verify if they match after encryption.", "parameters": {"type": "object", "properties": {"encryptedPassword": {"type": "String", "description": "The encrypted password to be compared against."}, "password": {"type": "String", "description": "The plaintext password provided by the user."}}, "required": ["encryptedPassword", "password"]}}, "human_eval_answer": "JndiLoginModule.verifyPassword(encryptedPassword='e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', password='P@ssw0rd!')", "question_type": "java"}
{"question": "How can I configure an option parser to require the 'output-format' option unless either the 'quiet' or 'verbose' options are provided in a command-line application?", "function": {"name": "OptionSpecBuilder.requiredUnless", "description": "Configures the option parser to require the current option unless one of the specified dependent options is present.", "parameters": {"type": "object", "properties": {"dependent": {"type": "String", "description": "The primary dependent option name."}, "otherDependents": {"type": "Array", "description": "Other dependent option names that can make the current option non-required.", "items": {"type": "String"}}}, "required": ["dependent"]}}, "human_eval_answer": "OptionSpecBuilder.requiredUnless(dependent='quiet', otherDependents=new String[]{'verbose'})", "question_type": "java"}
{"question": "How can I obtain an InputSource for the entity with a system identifier 'http://astro.com/stylesheets/toptemplate' when parsing an XML document using a SAX filter factory?", "function": {"name": "SAXFilterFactoryImpl.resolveEntity", "description": "Resolves an entity using its public identifier and system identifier. If the system identifier matches a specific known value, it returns a new InputSource with the system ID converted to a URL; otherwise, it returns null to use the default behavior.", "parameters": {"type": "object", "properties": {"publicid": {"type": "String", "description": "The public identifier of the entity to resolve."}, "sysId": {"type": "String", "description": "The system identifier of the entity to resolve."}}, "required": ["publicid", "sysId"]}}, "human_eval_answer": "SAXFilterFactoryImpl.resolveEntity(publicid='PUBLIC_ID', sysId='http://astro.com/stylesheets/toptemplate')", "question_type": "java"}
{"question": "What is the compiled pattern for a failure message in a graph constraint system when checking for forbidden nodes in the 'failOn' category for rule number 42?", "function": {"name": "RegexConstraint.initIRPattern", "description": "Initializes and compiles a regex Pattern based on the category of the constraint and the index of the rule.", "parameters": {"type": "object", "properties": {"category": {"type": "String", "description": "The category of the constraint, which determines the pattern to be compiled."}, "ruleIdx": {"type": "int", "description": "The index of the rule for which the pattern is being compiled."}}, "required": ["category", "ruleIdx"]}}, "human_eval_answer": "RegexConstraint.initIRPattern(category='failOn', ruleIdx=42)", "question_type": "java"}
{"question": "How can I perform a garbage collection test using the data from the 'humongous-test-case.json', execute a custom garbage collector, verify the object references using the `referenceChecker` function, and analyze the garbage collector log named 'gc-analysis.log' to ensure it contains 'GC pause' but does not contain 'OutOfMemoryError'?", "function": {"name": "TestObjectGraphAfterGC.doTesting", "description": "Executes a test that allocates an object graph based on the provided test case data, runs garbage collection, checks the object graph references, and verifies specific entries in the garbage collector log.", "parameters": {"type": "object", "properties": {"testcaseData": {"type": "String", "description": "The data for the test case to allocate the object graph."}, "doGC": {"type": "any", "description": "A Runnable that triggers garbage collection."}, "checker": {"type": "any", "description": "A Consumer that checks the object references after garbage collection."}, "gcLogName": {"type": "String", "description": "The name of the garbage collector log file."}, "shouldContain": {"type": "ArrayList", "description": "A list of strings that should be present in the garbage collector log."}, "shouldNotContain": {"type": "ArrayList", "description": "A list of strings that should not be present in the garbage collector log."}}, "required": ["testcaseData", "doGC", "checker", "gcLogName", "shouldContain", "shouldNotContain"]}}, "human_eval_answer": "TestObjectGraphAfterGC.doTesting(testcaseData='humongous-test-case.json', doGC=customGarbageCollector, checker=referenceChecker, gcLogName='gc-analysis.log', shouldContain=['GC pause'], shouldNotContain=['OutOfMemoryError'])", "question_type": "java"}
{"question": "How can I execute the `runIt` method to perform a test that includes creating an object of the tested class, invoking a method with a breakpoint, and logging the output to a `System.out` stream, using the arguments array `testArgs`?", "function": {"name": "clear001a.runIt", "description": "Executes a series of operations including creating an object of a tested class, invoking a method with a breakpoint, and logging the results to the provided PrintStream.", "parameters": {"type": "object", "properties": {"args": {"type": "Array", "description": "An array of strings representing the arguments for the test."}, "out": {"type": "any", "description": "The PrintStream to which the log messages will be written."}}, "required": ["args", "out"]}}, "human_eval_answer": "clear001a.runIt(args=testArgs, out=System.out)", "question_type": "java"}
{"question": "How can I execute a performance test in Java with 500 iterations, outputting the results to a `System.out` stream, and using command-line arguments that specify a wait time of 2 minutes?", "function": {"name": "thrcputime002.runIt", "description": "Executes a performance test by running a specific thread for a given number of iterations and logs the output to the provided PrintStream. It also handles synchronization and status checks before, during, and after the thread execution.", "parameters": {"type": "object", "properties": {"argv": {"type": "Array", "description": "An array of command-line arguments to configure the test, including wait time and number of iterations.", "items": {"type": "String"}}, "out": {"type": "any", "description": "The PrintStream to which the test output will be written."}}, "required": ["argv", "out"]}}, "human_eval_answer": "thrcputime002.runIt(argv=new String[]{\"-waitTime\", \"2\", \"-iterations\", \"500\"}, out=System.out)", "question_type": "java"}
{"question": "How can I validate that the private, package-private, and public inner fields of a `RedefClass` instance `myRedefClass` all have the value 100, and log a complaint if they do not?", "function": {"name": "checkInnerFields", "description": "Checks if the inner fields of the given RedefClass instance have the expected value. If not, it sets the test status to failed and logs a complaint.", "parameters": {"type": "object", "properties": {"redefCls": {"type": "any", "description": "The instance of RedefClass to be checked."}, "expValue": {"type": "int", "description": "The expected value for the inner fields."}}, "required": ["redefCls", "expValue"]}}, "human_eval_answer": "redefclass028.checkInnerFields(redefCls=myRedefClass, expValue=100)", "question_type": "java"}
{"question": "How can I execute the `runIt` method to test if a class has been correctly instrumented, using the command-line arguments `['/path/to/classes', '60']` and a `PrintStream` object `logStream`, assuming the original class value is `12345L` and the new expected value after instrumentation is `54321L`?", "function": {"name": "classfloadhk005.runIt", "description": "Executes the test to check if a class has been correctly instrumented by loading the class and invoking a method to verify the expected value change.", "parameters": {"type": "object", "properties": {"argv": {"type": "Array", "description": "An array of command-line arguments to configure the test."}, "out": {"type": "any", "description": "The PrintStream object used for logging output during the test."}}, "required": ["argv", "out"]}}, "human_eval_answer": "classfloadhk005.runIt(argv=['/path/to/classes', '60'], out=logStream)", "question_type": "java"}
{"question": "In a Java debugging test environment, how can I execute the `runThis` method with a specific set of command-line arguments, such as `['-v', '--no-strict']`, and direct the output to a `PrintStream` object named `debugOutput`?", "function": {"name": "argumenttypes001.runThis", "description": "Executes the test logic with the provided command-line arguments and directs the output to the specified PrintStream.", "parameters": {"type": "object", "properties": {"argv": {"type": "Array", "description": "An array of command-line arguments to pass to the test logic."}, "out": {"type": "any", "description": "The PrintStream object where the test output will be directed."}}, "required": ["argv", "out"]}}, "human_eval_answer": "argumenttypes001.runThis(argv=['-v', '--no-strict'], out=debugOutput)", "question_type": "java"}
{"question": "How do I create a VMDeathRequest with a suspend policy of EVENT_THREAD and a property 'testProperty' set to 'deathEvent001' in a Java debugging session?", "function": {"name": "suspendpolicy017.settingVMDeathRequest", "description": "Creates a VMDeathRequest with the specified suspend policy and property. Throws a JDITestRuntimeException if the request cannot be set.", "parameters": {"type": "object", "properties": {"suspendPolicy": {"type": "int", "description": "The suspend policy to be used for the VMDeathRequest."}, "property": {"type": "String", "description": "The property to be associated with the VMDeathRequest."}}, "required": ["suspendPolicy", "property"]}}, "human_eval_answer": "suspendpolicy017.settingVMDeathRequest(suspendPolicy=EVENT_THREAD, property='deathEvent001')", "question_type": "java"}
{"question": "How can I create a MethodEntryRequest for a specific thread `mainThread`, class `com.example.MainClass`, with a suspend policy of `EventRequest.SUSPEND_ALL`, and a custom property `testProperty` in a JDI test environment?", "function": {"name": "filter_s002.setting22MethodEntryRequest", "description": "Sets up a MethodEntryRequest with specified thread filter, class filter, suspend policy, and custom property. Throws JDITestRuntimeException on failure.", "parameters": {"type": "object", "properties": {"thread": {"type": "any", "description": "The ThreadReference to which the request will be applied."}, "testedClass": {"type": "String", "description": "The name of the class to filter for method entries."}, "suspendPolicy": {"type": "int", "description": "The suspend policy to be used for this request."}, "property": {"type": "String", "description": "A custom property to associate with this request."}}, "required": ["thread", "testedClass", "suspendPolicy", "property"]}}, "human_eval_answer": "filter_s002.setting22MethodEntryRequest(thread=mainThread, testedClass='com.example.MainClass', suspendPolicy=EventRequest.SUSPEND_ALL, property='testProperty')", "question_type": "java"}
{"question": "How can I execute the test runner `runThis` with arguments to set the wait time to 2 minutes and output the logs to a specific print stream `testLogStream`, considering the debuggee name is 'TestDebuggee'?", "function": {"name": "runThis", "description": "Executes the test runner with provided arguments and a print stream for logging. It handles the debuggee binding, output redirection, and test execution flow.", "parameters": {"type": "object", "properties": {"argv": {"type": "Array", "description": "An array of strings representing the command-line arguments.", "items": {"type": "String"}}, "out": {"type": "any", "description": "The PrintStream to output the logs to."}}, "required": ["argv", "out"]}}, "human_eval_answer": "runThis(argv=new String[]{\"-waitTime\", \"2\", \"-debuggeeName\", \"TestDebuggee\"}, out=testLogStream)", "question_type": "java"}
{"question": "How can I execute the test that checks for source paths in a debug environment, using the arguments array `['-v', '-p']` and directing the output to a `System.out` stream?", "function": {"name": "sourcepaths002.runIt", "description": "Executes a test that interacts with a debuggee environment to check for source paths of certain reference types, handling various scenarios and logging the output.", "parameters": {"type": "object", "properties": {"args": {"type": "Array", "description": "An array of command-line arguments to configure the test behavior."}, "out": {"type": "any", "description": "The PrintStream to which the test output will be directed."}}, "required": ["args", "out"]}}, "human_eval_answer": "sourcepaths002.runIt(args=['-v', '-p'], out=System.out)", "question_type": "java"}
{"question": "How can I execute the 'runIt' method to process command-line arguments for a debug session, and log the output to a specific PrintStream, using the arguments array ['suspend', 'log'] and a PrintStream variable named 'debugLog'?", "function": {"name": "invokemethod007.runIt", "description": "Processes command-line arguments for a debug session and logs the output to the provided PrintStream.", "parameters": {"type": "object", "properties": {"args": {"type": "Array", "description": "An array of command-line arguments to process."}, "out": {"type": "any", "description": "The PrintStream to which the output will be logged."}}, "required": ["args", "out"]}}, "human_eval_answer": "invokemethod007.runIt(args=['suspend', 'log'], out=debugLog)", "question_type": "java"}
{"question": "How can I locate the absolute path to the class file for 'com.example.MyClass' if the class path includes the directories '/usr/local/classes' and '/home/user/java/libs'?", "function": {"name": "ClassFileFinder.findClassFile", "description": "Finds the class file for a given class name within the specified class path and returns the path to the class file.", "parameters": {"type": "object", "properties": {"name": {"type": "String", "description": "The fully qualified name of the class to find."}, "classPath": {"type": "String", "description": "The class path where to search for the class file, with paths separated by the system path separator."}}, "required": ["name", "classPath"]}}, "human_eval_answer": "ClassFileFinder.findClassFile(name='com.example.MyClass', classPath='/usr/local/classes:/home/user/java/libs')", "question_type": "java"}
{"question": "How do I execute the jar agent with the options 'trace log' for instrumentation purposes in a Java application, assuming the instrumentation object is named `appInstrumentation`?", "function": {"name": "AbstractJarAgent.runJarAgent", "description": "Runs the jar agent with the specified options and attaches it to the provided Instrumentation instance. It initializes common parameters, performs test-specific initialization, and starts a special thread for test-specific actions.", "parameters": {"type": "object", "properties": {"options": {"type": "String", "description": "The options for the jar agent, separated by spaces."}, "inst": {"type": "any", "description": "The Instrumentation instance to which the agent will be attached."}}, "required": ["options", "inst"]}}, "human_eval_answer": "AbstractJarAgent.runJarAgent(options='trace log', inst=appInstrumentation)", "question_type": "java"}
{"question": "Can I determine if the symbol 'getVersion' is readable in the native function interface library associated with the current object?", "function": {"name": "NFILibrary.isMemberReadable", "description": "Checks if the specified symbol is readable in the native function interface library associated with the current object.", "parameters": {"type": "object", "properties": {"symbol": {"type": "String", "description": "The symbol to check for readability."}, "recursive": {"type": "any", "description": "The InteropLibrary instance used for recursive checks (automatically provided by the runtime)."}}, "required": ["symbol"]}}, "human_eval_answer": "NFILibrary.isMemberReadable(symbol='getVersion')", "question_type": "java"}
{"question": "How can I execute a generic operation on an inlined object with the argument 'HelloWorld' using a specialized node, considering that the operation is bound to a specific node library?", "function": {"name": "ExportNodeTest.doGeneric", "description": "Executes a generic operation on the given receiver object with the provided argument, using a specialized inlinable node and bound to a node library.", "parameters": {"type": "object", "properties": {"receiver": {"type": "any", "description": "The receiver object on which the operation is performed."}, "argument": {"type": "String", "description": "The argument to pass to the node's execute method."}, "node": {"type": "any", "description": "The specialized inlinable node used for execution."}, "library": {"type": "any", "description": "The node library to which this operation is bound."}}, "required": ["receiver", "argument", "node", "library"]}}, "human_eval_answer": "ExportNodeTest.doGeneric(receiver=ExportInlinedObject1Instance, argument='HelloWorld', node=InlinableNodeInstance, library=NodeLibraryInstance)", "question_type": "java"}
{"question": "How can I generate a CodeTree for a call conversion in a Truffle DSL processor, using a non-static method named 'convertValue', which requires a frame parameter named 'frameVar' and a return value represented by 'returnValueCode'?", "function": {"name": "InstrumentableProcessor.createCallConverter", "description": "Generates a CodeTree that represents a call to a converter method, handling both static and instance methods, and accommodating for different numbers of parameters.", "parameters": {"type": "object", "properties": {"converterMethod": {"type": "any", "description": "The ExecutableElement representing the converter method."}, "frameParameterName": {"type": "String", "description": "The name of the frame parameter to be used in the call."}, "returnName": {"type": "any", "description": "The CodeTree representing the name of the return value."}}, "required": ["converterMethod", "frameParameterName", "returnName"]}}, "human_eval_answer": "InstrumentableProcessor.createCallConverter(converterMethod=convertValue, frameParameterName='frameVar', returnName=returnValueCode)", "question_type": "java"}
{"question": "How can I generate introspection information for a class `NodeClass` representing a node in a Truffle DSL processor, and specify that the introspection is not inlined?", "function": {"name": "FlatNodeGenFactory.generateIntrospectionInfo", "description": "Generates introspection information for a given class representing a node in the Truffle DSL processor.", "parameters": {"type": "object", "properties": {"clazz": {"type": "any", "description": "The class element representing the node for which introspection information is to be generated."}, "inlined": {"type": "boolean", "description": "Indicates whether the introspection is inlined."}}, "required": ["clazz", "inlined"]}}, "human_eval_answer": "FlatNodeGenFactory.generateIntrospectionInfo(clazz=NodeClass, inlined=false)", "question_type": "java"}
{"question": "What is the probability of a loop condition being true if it has been evaluated as true 150 times and false 50 times?", "function": {"name": "LoopConditionProfile.calculateProbability", "description": "Calculates the probability of a loop condition being true based on the counts of true and false evaluations.", "parameters": {"type": "object", "properties": {"trueCountLocal": {"type": "long", "description": "The count of times the loop condition has been evaluated to true."}, "falseCountLocal": {"type": "int", "description": "The count of times the loop condition has been evaluated to false."}}, "required": ["trueCountLocal", "falseCountLocal"]}}, "human_eval_answer": "LoopConditionProfile.calculateProbability(trueCountLocal=150, falseCountLocal=50)", "question_type": "java"}
{"question": "How can I create a delegate library instance for a custom library type `MyCustomLibrary` using a factory object `myFactory` and an existing delegate instance `existingDelegate` that is not adoptable?", "function": {"name": "LibraryExport.createDelegate", "description": "Creates a delegate library instance using the provided factory and delegate. If the delegate is not adoptable, it forces adoption to ensure proper parent pointer implementation.", "parameters": {"type": "object", "properties": {"factory": {"type": "any", "description": "The factory used to create a new delegate instance of the library."}, "delegate": {"type": "any", "description": "The existing delegate instance of the library."}}, "required": ["factory", "delegate"]}}, "human_eval_answer": "LibraryExport.createDelegate(factory=myFactory, delegate=existingDelegate)", "question_type": "java"}
{"question": "How can I validate user input in a form field with the ID 'userInputField' after the user has finished typing?", "function": {"name": "validateUserInput", "description": "This function is called after a user has finished typing in a form field, to validate the input provided.", "parameters": {"inputField": {"type": "HTMLElement", "description": "The form field whose input needs to be validated."}, "isComplete": {"type": "Boolean", "description": "Indicates if the user has finished typing in the input field."}, "required": ["inputField", "isComplete"]}}, "human_eval_answer": "validateUserInput(inputField=document.getElementById('userInputField'), isComplete=true)", "question_type": "javascript"}
{"question": "How can I extract all data entries with the attribute 'data-active' set to true from a list element stored in a variable named 'listElement'?", "function": {"name": "getActiveDataEntries", "description": "This function extracts data entries from a list element based on a specified attribute and its value. It checks for the presence of the 'data-active' attribute and whether it is set to true.", "parameters": {"listElement": {"type": "HTMLElement", "description": "The list element from which to extract active data entries."}, "attribute": {"type": "string", "description": "The data attribute used to filter entries. Optional parameter with a default value of 'data-active'.", "default": "data-active"}, "value": {"type": "Boolean", "description": "The value of the attribute to match. Optional parameter with a default value of true.", "default": true}}, "required": ["listElement"]}, "human_eval_answer": "getActiveDataEntries(listElement=listElement, attribute='data-active', value=true)", "question_type": "javascript"}
{"question": "How can I extract the last transaction ID that has a status of 'completed' or 'failed' from a database log located at '/var/log/db.log', using 'utf-8' encoding, and process the information with a processing function?", "function": {"name": "extractLastTransactionId", "description": "This function scans a database log file for lines indicating transaction completion or failure, extracting the last transaction ID that matches the criteria. It uses a processing function to further handle the extracted transaction ID.", "parameters": {"filepath": {"type": "string", "description": "The path to the database log file to be examined."}, "status": {"type": "array", "items": {"type": "string"}, "description": "An array of statuses to search for within the log file, indicating the end of a transaction."}, "encoding": {"type": "string", "description": "The encoding of the log file."}, "processFunction": {"type": "Function", "description": "A function that processes the extracted transaction ID."}, "required": ["filepath", "status", "encoding", "processFunction"]}}, "human_eval_answer": "extractLastTransactionId(filepath='/var/log/db.log', status=['completed', 'failed'], encoding='utf-8', processFunction=processTransactionId)", "question_type": "javascript"}
{"question": "How can I send a 'submit' action to a React form with the ID 'loginForm' at a coordinate that is 30% from the top and 60% from the left?", "function": {"name": "submitAtCoordinate", "description": "This function sends a submit action to a React form element at a specific position determined by coordinates relative to its bounding box.", "parameters": {"action": {"type": "string", "description": "The type of action to send."}, "formId": {"type": "string", "description": "The ID of the React form element to which to send the action."}, "coordinates": {"type": "array", "items": {"type": "string"}, "description": "An array of two numbers representing the x and y coordinates relative to the element's bounding box, in percentages."}, "required": ["action", "formId", "coordinates"]}}, "human_eval_answer": "submitAtCoordinate(action='submit', formId='loginForm', coordinates=[0.6, 0.3])", "question_type": "javascript"}
{"question": "How can I verify if an email address 'example@domain.com' conforms to the standard email format, optionally allowing for custom domain validation?", "function": {"name": "emailFormatValidator", "description": "This function validates if a given email address adheres to the standard email format and can optionally check against specific domain criteria.", "parameters": {"email": {"type": "string", "description": "The email address to validate against the standard email format."}, "domain": {"type": "string", "description": "An optional parameter for domain-specific validation. Default is an empty string, which means no custom domain validation."}, "required": ["email"]}}, "human_eval_answer": "emailFormatValidator(email='example@domain.com', domain='domain.com')", "question_type": "javascript"}
{"question": "What is the best practice for managing state in a complex React application, considering the need for shared state across multiple components and the performance implications of state changes?", "function": {"name": "manageReactState", "description": "This function encapsulates the logic for state management in a React application, offering solutions for shared state handling and performance optimization.", "parameters": {"type": "object", "properties": {"store": {"type": "object", "properties": {"initialState": {"type": "object", "description": "The initial state object of the React application."}, "reducers": {"type": "object", "description": "A collection of reducer functions to handle state changes."}, "middlewares": {"type": "array", "items": {"type": "string"}, "description": "An array of middleware functions for intercepting and potentially altering actions or state changes."}, "enhancers": {"type": "array", "items": {"type": "string"}, "description": "An array of store enhancers for extending store capabilities."}}, "description": "Configuration object for the application's central store."}, "context": {"type": "any", "description": "The React context object for providing and consuming the store in the component tree."}, "hooks": {"type": "object", "description": "Custom hooks for accessing and updating the state within React components."}}, "required": ["store", "context", "hooks"]}}, "human_eval_answer": "manageReactState(store={'initialState': initialStateObject, 'reducers': reducersMap, 'middlewares': [loggerMiddleware], 'enhancers': [applyMiddleware(...)]}, context=React.createContext(), hooks={'useStateSelector': useStateSelectorHook, 'useDispatchAction': useDispatchActionHook})", "question_type": "javascript"}
{"question": "How can I create a mapping that assigns each of the first 4 elements from a given array to the category 'transition' for use in CSS transitions?", "function": {"name": "mapTransitions", "description": "This function creates a mapping where each key is an element from a given array (up to a specified limit of elements) and each value is set to a predefined category. This is useful for defining categories for CSS transitions.", "parameters": {"category": {"type": "string", "description": "The category to be assigned to each element in the mapping."}, "limit": {"type": "Number", "description": "The number of elements from the array to include in the mapping."}, "required": ["category", "limit"]}}, "human_eval_answer": "mapTransitions(category='transition', limit=4)", "question_type": "javascript"}
{"question": "When analyzing JSON data structures, how can I extract all key-value pairs that follow a specific key within a data analysis context object named 'dataAnalysisContext' that initially has a key of 'userId'?", "function": {"name": "getNextKeyValues", "description": "This function extracts all key-value pairs in a JSON object that follow a specified key until it encounters a new nested object or array. It is intended for use within a specific data analysis context that keeps track of the current position within the JSON structure.", "parameters": {"ctx": {"type": "any", "description": "The data analysis context object which contains the current position and functions to navigate through the JSON structure."}, "currentKey": {"type": "string", "description": "The current key from which to start extracting the following key-value pairs."}, "required": ["ctx", "currentKey"]}}, "human_eval_answer": "getNextKeyValues(ctx=dataAnalysisContext, currentKey='userId')", "question_type": "javascript"}
{"question": "How can I determine if an email form element referred to as 'emailForm' includes an input with the name attribute 'emailAddress'?", "function": {"name": "doesEmailInputExist", "description": "This function verifies whether a given email form contains an input with a specific 'name' attribute value.", "parameters": {"formElem": {"type": "any", "description": "The email form element to inspect."}, "inputName": {"type": "string", "description": "The value of the 'name' attribute to look for in the input."}, "required": ["formElem", "inputName"]}}, "human_eval_answer": "doesEmailInputExist(formElem=emailForm, inputName='emailAddress')", "question_type": "javascript"}
{"question": "How can I analyze a JSON payload to verify if it contains a specific key for API response validation, and trigger the corresponding processing logic?", "function": {"name": "validateApiResponse", "description": "This function analyzes a JSON payload to determine if it contains a specific key, indicating successful API response, and triggers the corresponding processing logic for that key.", "parameters": {"jsonPayload": {"type": "object", "description": "The JSON object representing the API response to be validated."}, "keyToCheck": {"type": "string", "description": "The specific key to look for in the JSON payload."}, "processingCallback": {"type": "function", "description": "The callback function to be executed if the key is present in the JSON payload."}, "required": ["jsonPayload", "keyToCheck", "processingCallback"]}}, "human_eval_answer": "validateApiResponse(jsonPayload=responseData, keyToCheck='expectedKey', processingCallback=processKeyFunction)", "question_type": "javascript"}
{"question": "How can I obtain a collection of records from the 'employeeRecords' database where the 'department' field is 'Sales' using a custom query function?", "function": {"name": "fetchSalesDepartmentRecords", "description": "This function asynchronously fetches a collection of records from a specified database where the 'department' field matches a given criterion, using a custom query function.", "parameters": {"databaseName": {"type": "string", "description": "The name of the database from which to retrieve the records."}, "queryFunction": {"type": "any", "description": "A function used to query the database. It should take a record as input and return a boolean indicating whether the record should be included in the results based on the 'department' field."}, "required": ["databaseName", "queryFunction"]}}, "human_eval_answer": "fetchSalesDepartmentRecords(databaseName='employeeRecords', queryFunction=function(record) { return record.department === 'Sales'; })", "question_type": "javascript"}
{"question": "How can I sort a list of items alphabetically, but place items with a status of 'urgent' at the top, assuming the list is an array of objects with 'name' and 'status' properties?", "function": {"name": "prioritizeAndSort", "description": "This function sorts an array of objects based on their 'name' property, while prioritizing items based on a specified status.", "parameters": {"items": {"type": "array", "items": {"type": "string"}, "description": "The array of objects to be sorted."}, "priorityStatus": {"type": "string", "description": "The status value that should be given priority in the sorting."}, "ascending": {"type": "Boolean", "description": "A flag indicating whether the sorting should be in ascending (true) or descending (false) order, excluding priority items."}, "required": ["items", "priorityStatus", "ascending"]}}, "human_eval_answer": "prioritizeAndSort(items=myItemList, priorityStatus='urgent', ascending=true)", "question_type": "javascript"}
{"question": "How can I implement a 'dataFetch' operation with an API endpoint URL of 'https://api.example.com/data', expecting the response to be a JSON object containing '{\"key\": \"value\"}', given a request configuration object '{\"method\": \"GET\"}'?", "function": {"name": "performDataFetch", "description": "This function fetches data from a specified API endpoint using the provided request configuration, checks the response against an expected JSON object, and handles any potential errors. It supports various request methods like GET or POST.", "parameters": {"apiEndpoint": {"type": "string", "description": "The URL of the API endpoint from which the data will be fetched."}, "requestConfig": {"type": "object", "properties": {"method": {"type": "string", "description": "The HTTP method to be used for the request."}, "headers": {"type": "object", "description": "Any headers to be included in the request."}, "body": {"type": "string", "description": "The request payload, if needed for methods like POST."}}, "description": "The configuration object for the API request."}, "expectedResponse": {"type": "object", "description": "The JSON object expected to be returned by the API call."}, "handleErrors": {"type": "Boolean", "description": "If true, the function will handle errors gracefully and provide appropriate feedback."}}, "required": ["apiEndpoint", "requestConfig", "expectedResponse"]}, "human_eval_answer": "performDataFetch(apiEndpoint='https://api.example.com/data', requestConfig={'method': 'GET'}, expectedResponse={'key': 'value'}, handleErrors=true)", "question_type": "javascript"}
{"question": "How can I generate a dynamic chart with user-provided data and apply a scaling factor of 3 for the axis values, linking it to a given dashboard?", "function": {"name": "DynamicChartGenerator", "description": "This function creates a dynamic chart based on user input, applies a scaling factor to the axis values, and integrates the chart into a specified dashboard for display.", "parameters": {"userData": {"type": "array", "items": {"type": "string"}, "description": "The data provided by the user to plot on the chart."}, "scalingFactor": {"type": "Number", "description": "A scaling factor applied to the chart's axis values. Optional parameter."}, "dashboard": {"type": "any", "description": "The dashboard where the chart will be displayed."}, "options": {"type": "Object", "description": "Additional configuration options for the chart."}, "required": ["userData", "dashboard"]}}, "human_eval_answer": "DynamicChartGenerator(userData=userDataArray, scalingFactor=3, dashboard=dashboardElement, options=chartOptions)", "question_type": "javascript"}
{"question": "How can I generate a data accessor for a chart component named 'BarChart', with a module name 'chartModule', in a data visualization library, to fetch and update its 'DataPoints' and 'Labels' through a configuration object named 'config'?", "function": {"name": "chartDataAccessorFactory", "description": "This function generates a data accessor for a specific chart component within a data visualization library. It provides the capability to fetch and update specific properties such as 'DataPoints' and 'Labels' of the chart through a configuration object.", "parameters": {"chart": {"type": "object", "properties": {"nm": {"type": "string", "description": "The name of the chart component."}, "mn": {"type": "string", "description": "The module name of the chart component."}}, "required": ["nm", "mn"]}, "library": {"type": "any", "description": "The instance of the data visualization library where the chart component is defined."}, "configObject": {"type": "string", "description": "The name of the configuration object used to fetch and update the chart's properties."}, "required": ["chart", "library", "configObject"]}}, "human_eval_answer": "chartDataAccessorFactory(chart={'nm': 'BarChart', 'mn': 'chartModule'}, library=visualizationLibrary, configObject='config')", "question_type": "javascript"}
{"question": "How can I generate a new ChartSeries with initial settings including axis labels, data points, and a default color scheme, and then integrate it into a specific chart layout?", "function": {"name": "ChartSeriesGenerator", "description": "This function creates a new ChartSeries with customizable settings for axis labels, data points, and color schemes, and attaches it to a given chart layout.", "parameters": {"labels": {"type": "array", "items": {"type": "string"}, "description": "The labels for the chart's axis."}, "data": {"type": "array", "items": {"type": "string"}, "description": "The data points for the series."}, "color": {"type": "string", "description": "The default color for the series. Optional parameter."}, "chartLayout": {"type": "Object", "description": "The layout object of the chart where the series will be added."}, "required": ["labels", "data", "chartLayout"]}}, "human_eval_answer": "ChartSeriesGenerator(labels=axisLabelsArray, data=dataPointsArray, color='defaultColor', chartLayout=chartLayoutObject)", "question_type": "javascript"}
{"question": "How do I compute the updated coordinates for a set of vertices (10, 15) and (20, 25) after rotating them around a pivot point (12, 17) by 30 degrees?", "function": {"name": "rotateVertices", "description": "This function computes the updated coordinates of a set of vertices after rotating them around a pivot point by a given angle.", "parameters": {"vertices": {"type": "array", "items": {"type": "string"}, "description": "An array of vertices to rotate, where each vertex is in the format [x, y]."}, "pivot": {"type": "array", "items": {"type": "string"}, "description": "The pivot point around which the vertices are to be rotated, in the format [x, y]."}, "angle": {"type": "Number", "description": "The rotation angle in degrees."}, "required": ["vertices", "pivot", "angle"]}}, "human_eval_answer": "rotateVertices(vertices=[[10, 15], [20, 25]], pivot=[12, 17], angle=30)", "question_type": "javascript"}
{"question": "How can I generate a notification handler for an application that filters messages based on priority level 3, linked to a messaging service, and categorized under notification type 2?", "function": {"name": "generateNotificationHandler", "description": "This function generates a notification handler for an application, which can filter incoming messages by priority level. It can also be linked to a specific messaging service and categorized under a certain notification type.", "parameters": {"app": {"type": "any", "description": "The application for which to generate the notification handler."}, "priorityLevel": {"type": "Number", "description": "The priority level to filter messages. A certain level (e.g., 3) may determine the filtering criteria."}, "messagingService": {"type": "any", "description": "The messaging service associated with the notification handler."}, "notificationType": {"type": "Number", "description": "The notification type category for the handler."}, "required": ["app", "priorityLevel", "messagingService", "notificationType"]}}, "human_eval_answer": "generateNotificationHandler(app=application, priorityLevel=3, messagingService=messagingSvc, notificationType=2)", "question_type": "javascript"}
{"question": "What is the final velocity for an object in free fall after t seconds, given the gravity g and initial velocity v0?", "function": {"name": "calculateFinalVelocity", "description": "This function calculates the final velocity of an object in free fall after a certain time, taking into account the acceleration due to gravity and the initial velocity.", "parameters": {"time": {"type": "Number", "description": "The time in seconds for which the object has been in free fall."}, "gravity": {"type": "Number", "description": "The acceleration due to gravity, typically in m/s^2."}, "initialVelocity": {"type": "Number", "description": "The initial velocity of the object in m/s at the start of the free fall."}, "required": ["time", "gravity", "initialVelocity"]}}, "human_eval_answer": "calculateFinalVelocity(time=5, gravity=9.81, initialVelocity=0)", "question_type": "javascript"}
{"question": "How can I configure a ShaderMaterial for a Three.js scene with specific properties 'materialProps', using textures 'textureList', and within the 3D object 'meshObject'?", "function": {"name": "configureShaderMaterial", "description": "This function configures a ShaderMaterial for a Three.js scene, applying custom shaders, textures, and properties based on the provided data, texture list, and 3D object.", "parameters": {"property": {"type": "Object", "description": "The properties specific to the ShaderMaterial being configured."}, "textures": {"type": "array", "items": {"type": "string"}, "description": "A list of textures to be used in the ShaderMaterial."}, "object3D": {"type": "Object3D", "description": "The 3D object within which the ShaderMaterial is being applied."}, "required": ["properties", "textures", "object3D"]}}, "human_eval_answer": "configureShaderMaterial(property=materialProps, textures=textureList, object3D=meshObject)", "question_type": "javascript"}
{"question": "How do I add a 'click' event listener to a button element that triggers a function named 'handleButtonClick' and stops the event from propagating?", "function": {"name": "buttonAddClickHandler", "description": "This function attaches a click event listener to a specified button element with options to control event flow and behavior.", "parameters": {"element": {"type": "HTMLElement", "description": "The button element to which the event listener will be added."}, "callback": {"type": "Function", "description": "The function to be called when the button is clicked."}, "options": {"type": "Object", "description": "An options object to specify characteristics about the event listener, such as stopping propagation. Optional parameter."}, "required": ["element", "callback"]}}, "human_eval_answer": "buttonAddClickHandler(element=myButton, callback=handleButtonClick, options={stopPropagation: true})", "question_type": "javascript"}
{"question": "How can I locate a product in a list of products where the 'productId' is equal to 123?", "function": {"name": "findProductById", "description": "This function iterates over a list of product objects to find a product with a matching 'productId'.", "parameters": {"products": {"type": "array", "items": {"type": "string"}, "description": "The list of product objects to search within."}, "id": {"type": "Number", "description": "The product ID to look for in the product objects list."}, "required": ["products", "id"]}}, "human_eval_answer": "findProductById(products=[{'name': 'Product A', 'productId': 122}, {'name': 'Product B', 'productId': 123}, {'name': 'Product C', 'productId': 124}], id=123)", "question_type": "javascript"}
{"question": "How can I reset a state property called 'userSession' to 'null' in a React component?", "function": {"name": "resetStateProperty", "description": "This function resets a given state property to null. It is typically used in React components to clear state.", "parameters": {"stateProperty": {"type": "string", "description": "The name of the state property to reset."}, "required": ["stateProperty"]}}, "human_eval_answer": "resetStateProperty(stateProperty='userSession')", "question_type": "javascript"}
{"question": "How can I generate an authorization token for a user with username 'johndoe', valid for '3600' seconds, issued by 'myapp.net', with a role of 'admin', and encoded with 'HS256' algorithm?", "function": {"name": "createAuthToken", "description": "This function generates an authorization token with user details, validity, issuer, role, and encoding algorithm.", "parameters": {"username": {"type": "string", "description": "The username of the user for whom the token is being created."}, "validity": {"type": "Number", "description": "The number of seconds the token remains valid."}, "options": {"type": "object", "properties": {"issuer": {"type": "string", "description": "The entity that issued the token."}, "role": {"type": "string", "description": "The role of the user in the system."}, "algorithm": {"type": "string", "description": "The encoding algorithm to be used for token generation."}}, "required": ["username", "validity", "issuer", "role", "algorithm"]}}}, "human_eval_answer": "createAuthToken(username='johndoe', validity=3600, options={'issuer': 'myapp.net', 'role': 'admin', 'algorithm': 'HS256'})", "question_type": "javascript"}
{"question": "What is the best way to extract the unique elements from an array and return them sorted in ascending order?", "function": {"name": "getUniqueSorted", "description": "This function takes an array of elements and returns a new array of unique elements sorted in ascending order. It does not require any additional parameters for sorting.", "parameters": {"array": {"type": "array", "items": {"type": "string"}, "description": "The array from which to extract unique elements and sort them."}, "required": ["array"]}}, "human_eval_answer": "getUniqueSorted(array=[3, 1, 2, 1, 4, 3])", "question_type": "javascript"}
{"question": "How can I track the 'submitForm' action on a 'formHandler' object but only when the form has specific validation flags set?", "function": {"name": "trackSubmitWithValidation", "description": "This function tracks the 'submitForm' action on a given object. It only logs the submission when specific validation flags are set; if the flags are not set, the original action is performed without tracking.", "parameters": {"obj": {"type": "any", "description": "The object with the 'submitForm' action to track."}, "validationFlags": {"type": "array", "items": {"type": "string"}, "description": "An array of validation flags required to trigger tracking."}, "required": ["obj", "validationFlags"]}}, "human_eval_answer": "trackSubmitWithValidation(obj=formHandler, validationFlags=['isRequired', 'isValidEmail'])", "question_type": "javascript"}
{"question": "How do I change the content of a div with the ID 'contentBox' by invoking the 'update' action?", "function": {"name": "contentUpdater", "description": "This function updates the inner content of a specified div element when the 'update' action is called.", "parameters": {"elementID": {"type": "string", "description": "The ID of the div element whose content is to be updated."}, "newContent": {"type": "string", "description": "The new content that will replace the current content of the div element."}, "action": {"type": "string", "description": "The action to be performed. In this case, it should be 'update' to change the content."}, "required": ["elementID", "newContent", "action"]}}, "human_eval_answer": "contentUpdater(elementID='contentBox', newContent='New content here', action='update')", "question_type": "javascript"}
{"question": "How can I validate an object named 'serviceProvider' to ensure it complies with React's prop-type constraints for a component, specifically by checking that it is not an instance of a Promise, nor contains any methods that could lead to side effects, when passed as a prop to the component 'UserProfile'?", "function": {"name": "validateReactProp", "description": "This function validates an object to ensure it is safe to pass as a prop in a React component by checking that it is not a Promise and does not contain methods that could lead to side effects, raising a warning if the validation fails.", "parameters": {"obj": {"type": "any", "description": "The object to validate for safe usage as a React prop."}, "componentName": {"type": "string", "description": "The name of the React component to which the object is passed as a prop."}, "required": ["obj", "componentName"]}}, "human_eval_answer": "validateReactProp(obj=serviceProvider, componentName='UserProfile')", "question_type": "javascript"}
{"question": "How can I retrieve a list of books with a specific author from a collection called 'library'?", "function": {"name": "filterBooksByAuthor", "description": "This function filters through a collection of books within a library to find all books that are written by a specific author, returning a list of books that match the criteria.", "parameters": {"library": {"type": "array", "items": {"type": "string"}, "description": "The collection of book objects to filter through."}, "author": {"type": "string", "description": "The name of the author whose books you want to find."}, "required": ["library", "author"]}}, "human_eval_answer": "filterBooksByAuthor(library=libraryCollection, author='J.K. Rowling')", "question_type": "javascript"}
{"question": "How do I schedule a sequence of events where 'setupStage' precedes 'startConcert', and 'cleanupStage' follows both 'setupStage' and 'startConcert', ensuring only 3 events can happen at the same time?", "function": {"name": "EventScheduler", "description": "This function schedules a series of events, with each event possibly dependent on the completion of other events. It includes concurrency control to limit the number of simultaneous events.", "parameters": {"type": "object", "properties": {"events": {"type": "object", "description": "An object mapping event names to events or arrays that define an event and its prerequisites."}, "concurrencyLimit": {"type": "Number", "description": "The maximum number of events that can be scheduled concurrently. Optional parameter."}, "callback": {"type": "Function", "description": "A callback function that is invoked after all events have concluded or if an error has occurred. Optional parameter."}}, "required": ["events"]}}, "human_eval_answer": "EventScheduler(events={'setupStage': setupStageFunction, 'startConcert': ['setupStage', startConcertFunction], 'cleanupStage': ['setupStage', 'startConcert', cleanupStageFunction]}, concurrencyLimit=3)", "question_type": "javascript"}
{"question": "How can I replace the current text in an editor with 'Hello, World!' starting from position 5 and covering the next 7 characters?", "function": {"name": "setText", "description": "This function sets new text in an editor, starting from a specified position for a given length. If the length is not specified, it replaces text till the end.", "parameters": {"newText": {"type": "string", "description": "The new text to set."}, "start": {"type": "Number", "description": "The starting position for the new text."}, "length": {"type": "Number", "description": "The length of text to replace. Optional parameter."}, "required": ["newText", "start"]}}, "human_eval_answer": "setText(newText='Hello, World!', start=5, length=7)", "question_type": "javascript"}
{"question": "How can I process and transform all decorators of a TypeScript declaration node named 'myNode', within a container named 'myContainer', given a list of all decorators and parameters named 'decoratorsList'?", "function": {"name": "transformAllDecoratorsOfDeclaration", "description": "This function processes and transforms all decorators associated with a TypeScript declaration node. It combines transformed decorators and parameters decorators into a single array.", "parameters": {"node": {"type": "any", "description": "The TypeScript declaration node to process."}, "container": {"type": "any", "description": "The container that holds the node."}, "allDecorators": {"type": "object", "properties": {"decorators": {"type": "array", "items": {"type": "string"}, "description": "An array of decorators to transform."}, "parameters": {"type": "array", "items": {"type": "string"}, "description": "An array of parameters whose decorators need to be transformed."}}, "description": "An object containing arrays of decorators and parameters to be transformed."}, "required": ["node", "container", "allDecorators"]}}, "human_eval_answer": "transformAllDecoratorsOfDeclaration(node=myNode, container=myContainer, allDecorators=decoratorsList)", "question_type": "javascript"}
{"question": "How can I process a queue of file watch objects named 'fileWatchQueue' with a polling interval of 500 milliseconds, starting from index 0 and handling 10 files at a time to check for modifications?", "function": {"name": "pollQueue", "description": "This function processes a queue of file watch objects at specified intervals, checking a chunk of files at a time for any modifications.", "parameters": {"queue": {"type": "array", "items": {"type": "string"}, "description": "The queue of file watch objects to be processed."}, "pollingInterval": {"type": "Number", "description": "The interval in milliseconds at which the queue is polled."}, "pollIndex": {"type": "Number", "description": "The starting index in the queue from which polling begins."}, "chunkSize": {"type": "Number", "description": "The number of files to be checked in each polling interval."}, "required": ["queue", "pollingInterval", "pollIndex", "chunkSize"]}}, "human_eval_answer": "pollQueue(queue=fileWatchQueue, pollingInterval=500, pollIndex=0, chunkSize=10)", "question_type": "javascript"}
{"question": "How can I ensure that a new line is emitted before the leading comments of a node with position 42 in a TypeScript file, using a lineMap object named 'tsLineMap' and a writer object named 'tsWriter'?", "function": {"name": "emitNewLineBeforeLeadingComments", "description": "This function ensures that a new line is emitted before the leading comments of a specified node within a TypeScript file.", "parameters": {"lineMap": {"type": "any", "description": "An object representing the line map of the TypeScript file."}, "writer": {"type": "any", "description": "An object used for writing to the TypeScript file."}, "node": {"type": "any", "description": "The node before which a new line should be emitted."}, "leadingComments": {"type": "any", "description": "An array of leading comment objects associated with the node."}, "required": ["lineMap", "writer", "node", "leadingComments"]}}, "human_eval_answer": "emitNewLineBeforeLeadingComments(lineMap=tsLineMap, writer=tsWriter, node={pos: 42}, leadingComments=[])", "question_type": "javascript"}
{"question": "How can I apply a function named 'processType' to each type in a union type object named 'unionTypeObj' to analyze its properties?", "function": {"name": "forEachType", "description": "This function iterates over each type in a given type object, applying a specified function to it. If the type object represents a union of types, the function is applied to each type in the union; otherwise, it is applied directly to the single type.", "parameters": {"type": {"type": "any", "description": "The type object, potentially representing a union of types."}, "f": {"type": "any", "description": "The function to apply to each type in the type object."}, "required": ["type", "f"]}}, "human_eval_answer": "forEachType(type=unionTypeObj, f=processType)", "question_type": "javascript"}
{"question": "How can I check if two TypeScript declaration objects, one representing a parameter and the other a variable declaration, have identical declaration flags considering their optionality, privacy, protection level, asynchronicity, abstractness, readonly status, and static nature?", "function": {"name": "areDeclarationFlagsIdentical", "description": "This function compares two TypeScript declaration objects to determine if they have identical declaration flags, taking into account specific allowances for differences in optionality between parameters and variable declarations.", "parameters": {"left": {"type": "object", "description": "The first TypeScript declaration object to compare."}, "right": {"type": "object", "description": "The second TypeScript declaration object to compare."}, "required": ["left", "right"]}}, "human_eval_answer": "areDeclarationFlagsIdentical(left=parameterObject, right=variableDeclarationObject)", "question_type": "javascript"}
{"question": "How can I update the label of a break node in my abstract syntax tree to 'loopEnd' if its current label is not already 'loopEnd'?", "function": {"name": "updateBreak", "description": "This function updates the label of a break node within an abstract syntax tree. If the current label of the node does not match the provided label, it creates a new break node with the specified label and updates the original node.", "parameters": {"node": {"type": "any", "description": "The break node to be updated."}, "label": {"type": "string", "description": "The new label to assign to the break node."}, "required": ["node", "label"]}}, "human_eval_answer": "updateBreak(node=breakNode, label='loopEnd')", "question_type": "javascript"}
{"question": "How can I add statements for initializing properties named ['width', 'height'] for a receiver object named 'shape' into an existing statements array named 'shapeStatements'?", "function": {"name": "addInitializedPropertyStatements", "description": "This function adds statements for initializing properties to an array of statements. It is designed to work with TypeScript's AST manipulation.", "parameters": {"statements": {"type": "array", "items": {"type": "string"}, "description": "The array of statements to which the new initialized property statements will be added."}, "property": {"type": "array", "items": {"type": "string"}, "description": "An array of property names that need to be initialized."}, "receiver": {"type": "string", "description": "The name of the object for which the properties are being initialized."}, "required": ["statements", "properties", "receiver"]}}, "human_eval_answer": "addInitializedPropertyStatements(statements=shapeStatements, property=['width', 'height'], receiver='shape')", "question_type": "javascript"}
{"question": "How can I determine the appropriate directory to monitor for changes, starting from a failed lookup location directory '/projects/myApp/node_modules/react', to ensure efficient file watching in a TypeScript project?", "function": {"name": "getDirectoryToWatchFromFailedLookupLocationDirectory", "description": "This function determines the most suitable directory to watch for file changes based on a given directory path, especially handling paths within 'node_modules' by selecting the top-most 'node_modules' directory or an ancestor directory.", "parameters": {"dir": {"type": "string", "description": "The initial directory to consider for watching."}, "dirPath": {"type": "string", "description": "The full path of the directory to consider for watching."}, "required": ["dir", "dirPath"]}}, "human_eval_answer": "getDirectoryToWatchFromFailedLookupLocationDirectory(dir='/projects/myApp/node_modules/react', dirPath='/projects/myApp/node_modules/react')", "question_type": "javascript"}
{"question": "How can I determine if a synthetic rest parameter should be added to a function declaration that already contains a variadic type in its last parameter, given the declaration object 'funcDeclaration' and its parameters array 'funcParameters'?", "function": {"name": "maybeAddJsSyntheticRestParameter", "description": "This function checks a given function declaration to see if it should add a synthetic rest parameter based on the presence of a variadic type in the last parameter or in the JSDoc tags. It modifies the parameters array directly if necessary.", "parameters": {"declaration": {"type": "any", "description": "The function declaration object to check."}, "parameters": {"type": "array", "items": {"type": "string"}, "description": "The array of parameters for the function declaration."}, "required": ["declaration", "parameters"]}}, "human_eval_answer": "maybeAddJsSyntheticRestParameter(declaration=funcDeclaration, parameters=funcParameters)", "question_type": "javascript"}
{"question": "How can I determine the value to be used for a property named 'maxItems' in a configuration object, given that the default value is 10, but the configuration object does not explicitly define 'maxItems'?", "function": {"name": "assignOwnDefaults", "description": "This function determines the value to be assigned to a property in an object, preferring the object's own value if it exists and is not undefined, otherwise using a source value.", "parameters": {"objectValue": {"type": "any", "description": "The value of the property in the object."}, "sourceValue": {"type": "any", "description": "The default or source value to use if the object's value is undefined or the object does not have its own property for the key."}, "key": {"type": "string", "description": "The key of the property to check in the object."}, "object": {"type": "object", "description": "The object to check for the property."}, "required": ["objectValue", "sourceValue", "key", "object"]}}, "human_eval_answer": "assignOwnDefaults(objectValue=undefined, sourceValue=10, key='maxItems', object={})", "question_type": "javascript"}
{"question": "How can I create a queue with a worker function that processes tasks, setting the concurrency level to 5 and without specifying a payload size?", "function": {"name": "queue_1", "description": "This function creates a queue object with a specified worker function and concurrency level. It allows for tasks to be added to the queue and processed according to the concurrency level. Optional payload size can be specified to limit the number of tasks processed per worker call.", "parameters": {"worker": {"type": "any", "description": "The worker function that processes each task."}, "concurrency": {"type": "Number", "description": "The maximum number of tasks to be processed concurrently."}, "payload": {"type": "Number", "description": "Optional. The number of tasks each worker function call should process at most."}}, "required": ["worker", "concurrency"]}, "human_eval_answer": "queue_1(worker=myWorkerFunction, concurrency=5)", "question_type": "javascript"}
{"question": "How can I create a task queue with a concurrency of 5, where tasks are functions that log a message to the console, and ensure that when the queue becomes saturated, it logs 'Queue is saturated', and when it becomes unsaturated, it logs 'Queue is unsaturated'?", "function": {"name": "B", "description": "This complex function initializes a task queue with customizable concurrency, task addition, and event handling capabilities. It allows for synchronous and asynchronous task execution, pausing and resuming the queue, and handling various queue events.", "parameters": {"e": {"type": "any", "description": "The initial task or an array of tasks to be added to the queue."}, "t": {"type": "Number", "description": "The concurrency level of the task queue."}, "n": {"type": "Number", "description": "The payload size for each task worker. Optional parameter."}, "required": ["t"]}}, "human_eval_answer": "B(t=5).saturated(()=>console.log('Queue is saturated')).unsaturated(()=>console.log('Queue is unsaturated'))", "question_type": "javascript"}
{"question": "How can I execute a callback function named 'processResult' that handles an error 'null' and a result value of 'Operation successful'?", "function": {"name": "invokeCallback", "description": "This function invokes a callback with an error and a value. If the callback throws an error, it is caught and re-thrown asynchronously.", "parameters": {"callback": {"type": "any", "description": "The callback function to be invoked."}, "error": {"type": "any", "description": "The error to pass to the callback function. Can be 'null' if there is no error."}, "value": {"type": "any", "description": "The value to pass to the callback function."}, "required": ["callback", "error", "value"]}}, "human_eval_answer": "invokeCallback(callback=processResult, error=null, value='Operation successful')", "question_type": "javascript"}
{"question": "How can I execute a custom callback function named 'processNode' on a specific node named 'currentNode' with a state object 'nodeState' during a tree traversal?", "function": {"name": "skipThrough", "description": "This function allows for a custom operation to be performed on a node during a tree traversal by executing a callback function with the node and a state object as arguments.", "parameters": {"node": {"type": "any", "description": "The current node being processed in the tree traversal."}, "st": {"type": "any", "description": "The state object associated with the current node."}, "c": {"type": "any", "description": "The callback function to be executed on the current node and state object."}, "required": ["node", "st", "c"]}}, "human_eval_answer": "skipThrough(node=currentNode, st=nodeState, c=processNode)", "question_type": "javascript"}
{"question": "How can I asynchronously retrieve a map of remote Git references and their corresponding commit hashes for a repository URL 'https://github.com/yarnpkg/berry' from a starting directory '/home/user/projects'?", "function": {"name": "Sde", "description": "This asynchronous function retrieves a map of remote Git references and their corresponding commit hashes for a given repository URL, using a specified starting directory.", "parameters": {"type": "object", "properties": {"t": {"type": "string", "description": "The repository URL."}, "e": {"type": "object", "properties": {"startingCwd": {"type": "string", "description": "The starting directory from which the Git command is executed."}, "configuration": {"type": "object", "description": "Additional configuration for the Git command."}}, "required": ["startingCwd"]}}, "required": ["t", "e"]}}, "human_eval_answer": "Sde(t='https://github.com/yarnpkg/berry', e={'startingCwd': '/home/user/projects', 'configuration': {}})", "question_type": "javascript"}
{"question": "How can I update the property 'version' of an object named 'packageInfo' to '1.2.3', ensuring the update only occurs if the new value differs from the existing one or if 'version' is not already a property of the object?", "function": {"name": "vOe", "description": "This function updates a property of an object to a new value, but only if the new value is different from the existing one or if the property does not already exist on the object.", "parameters": {"r": {"type": "object", "description": "The object to update."}, "e": {"type": "string", "description": "The property of the object to update."}, "t": {"type": "any", "description": "The new value to assign to the property."}, "required": ["r", "e", "t"]}}, "human_eval_answer": "vOe(r=packageInfo, e='version', t='1.2.3')", "question_type": "javascript"}
{"question": "How can I calculate the difference in days between the dates '2023-04-01' and '2023-04-15' using a specific time unit of 'days'?", "function": {"name": "sTe", "description": "This function calculates the difference between two dates in a specified time unit.", "parameters": {"r": {"type": "date", "description": "The start date for the calculation."}, "e": {"type": "date", "description": "The end date for the calculation."}, "t": {"type": "string", "description": "The unit of time to calculate the difference in. For example, 'days', 'hours', etc."}, "required": ["r", "e", "t"]}}, "human_eval_answer": "sTe(r='2023-04-01', e='2023-04-15', t='days')", "question_type": "javascript"}
{"question": "How can I update the DOM event listeners from an old virtual node to a new one, considering the new virtual node has a click event that needs to be normalized and updated?", "function": {"name": "updateDOMListeners", "description": "This function updates the DOM event listeners from an old virtual node to a new one, ensuring that any changes in event listeners are properly handled and applied to the target element.", "parameters": {"oldVnode": {"type": "object", "description": "The old virtual node, containing data about previous event listeners."}, "vnode": {"type": "object", "description": "The new virtual node, containing data about current event listeners."}, "required": ["oldVnode", "vnode"]}}, "human_eval_answer": "updateDOMListeners(oldVnode=oldVirtualNode, vnode=newVirtualNode)", "question_type": "javascript"}
{"question": "How can I determine the appropriate boolean string representation for the 'contenteditable' attribute when the value provided is 'plaintext-only', ensuring it's a valid value for contenteditable?", "function": {"name": "convertEnumeratedValue", "description": "This function converts a given key-value pair to a 'true' or 'false' string based on specific conditions. It specifically handles falsy values, the string 'false', and validates the 'contenteditable' attribute's value.", "parameters": {"key": {"type": "string", "description": "The attribute key to be evaluated."}, "value": {"type": "string", "description": "The value associated with the key."}, "required": ["key", "value"]}}, "human_eval_answer": "convertEnumeratedValue(key='contenteditable', value='plaintext-only')", "question_type": "javascript"}
{"question": "Can I find the dimensions and properties of a triangle, if I know its three sides are 5 units, 4 units and 3 units long?", "function": [{"name": "triangle_properties.get", "description": "Retrieve the dimensions, such as area and perimeter, of a triangle if lengths of three sides are given.", "parameters": {"type": "object", "properties": {"side1": {"type": "number", "description": "The length of first side of the triangle."}, "side2": {"type": "number", "description": "The length of second side of the triangle."}, "side3": {"type": "number", "description": "The length of third side of the triangle."}, "get_area": {"type": "boolean", "description": "A flag to determine whether to calculate the area of triangle. Default is true.", "default": true, "optional": true}, "get_perimeter": {"type": "boolean", "description": "A flag to determine whether to calculate the perimeter of triangle. Default is true.", "default": true, "optional": true}, "get_angles": {"type": "boolean", "description": "A flag to determine whether to calculate the internal angles of triangle. Default is true.", "default": true, "optional": true}}, "required": ["side1", "side2", "side3"]}}, {"name": "circle_properties.get", "description": "Retrieve the dimensions, such as area and circumference, of a circle if radius is given.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The length of radius of the circle."}, "get_area": {"type": "boolean", "description": "A flag to determine whether to calculate the area of circle. Default is true.", "default": true, "optional": true}, "get_circumference": {"type": "boolean", "description": "A flag to determine whether to calculate the circumference of circle. Default is true.", "default": true, "optional": true}}, "required": ["radius"]}}], "human_eval_answer": "triangle_properties.get(side1=5, side2=4, side3=3)", "question_type": "multiple_function"}
{"question": "Calculate the area of a triangle, given the lengths of its three sides: 3, 4, and 5.", "function": [{"name": "math.triangle_area_heron", "description": "Calculates the area of a triangle using Heron's formula, given the lengths of its three sides.", "parameters": {"type": "object", "properties": {"side1": {"type": "number", "description": "Length of the first side of the triangle."}, "side2": {"type": "number", "description": "Length of the second side of the triangle."}, "side3": {"type": "number", "description": "Length of the third side of the triangle."}}, "required": ["side1", "side2", "side3"]}}, {"name": "math.triangle_area_base_height", "description": "Calculates the area of a triangle using the formula (1/2)base*height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The base length of the triangle."}, "height": {"type": "number", "description": "The height of the triangle."}}, "required": ["base", "height"]}}, {"name": "math.circle_area", "description": "Calculates the area of a circle given its radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}}, "required": ["radius"]}}], "human_eval_answer": "math.triangle_area_heron(side1=3, side2=4, side3=5)", "question_type": "multiple_function"}
{"question": "What is the capital of Brazil?", "function": [{"name": "country_info.capital", "description": "Fetch the capital city of a specified country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Name of the country."}}, "required": ["country"]}}, {"name": "country_info.population", "description": "Fetch the current population of a specified country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Name of the country."}}, "required": ["country"]}}, {"name": "country_info.largest_city", "description": "Fetch the largest city of a specified country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Name of the country."}}, "required": ["country"]}}], "human_eval_answer": "country_info.capital(country='Brazil'),", "question_type": "multiple_function"}
{"question": "Compute the Euclidean distance between two points A(3,4) and B(1,2).", "function": [{"name": "EuclideanDistance.calculate", "description": "Calculate the Euclidean distance between two points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point A."}, "pointB": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point B."}, "rounding": {"type": "integer", "description": "Optional: The number of decimals to round off the result."}}, "required": ["pointA", "pointB"]}}, {"name": "angleToXAxis.calculate", "description": "Calculate the angle between two points with respect to x-axis.", "parameters": {"type": "object", "properties": {"pointA": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point A."}, "pointB": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point B."}, "rounding": {"type": "integer", "description": "Optional: The number of decimals to round off the result."}}, "required": ["pointA", "pointB"]}}], "human_eval_answer": "EuclideanDistance.calculate(pointA=[3,4], pointB=[1,2])", "question_type": "multiple_function"}
{"question": "Can you calculate the displacement of a car moving at an initial speed of 20 m/s and then accelerates at 10 m/s^2 for 5 seconds? (assuming a straight line motion)", "function": [{"name": "kinematics.calculate_displacement", "description": "Calculate displacement based on initial speed, acceleration, and time interval for a motion along a straight line.", "parameters": {"type": "object", "properties": {"initial_speed": {"type": "number", "description": "The initial speed of the moving object in m/s."}, "acceleration": {"type": "number", "description": "The rate of change of speed, m/s^2."}, "time": {"type": "number", "description": "The time interval during which the acceleration is applied, in seconds."}, "rounding": {"type": "integer", "description": "The number of decimals to round off the result (optional).", "default": 2}}, "required": ["initial_speed", "acceleration", "time"]}}, {"name": "kinematics.calculate_final_speed", "description": "Calculate the final speed of an object that starts from an initial speed and then accelerates for a certain duration.", "parameters": {"type": "object", "properties": {"initial_speed": {"type": "number", "description": "The initial speed of the moving object in m/s."}, "acceleration": {"type": "number", "description": "The rate of change of speed, m/s^2."}, "time": {"type": "number", "description": "The time interval during which the acceleration is applied, in seconds."}, "rounding": {"type": "integer", "description": "The number of decimals to round off the result (optional).", "default": 2}}, "required": ["initial_speed", "acceleration", "time"]}}], "human_eval_answer": "kinematics.calculate_displacement(initial_speed=20, acceleration=10, time=5)", "question_type": "multiple_function"}
{"question": "What is the wind speed and temperature in location given by coordinates 46.603354,1.8883340 on December 13, 2019?", "function": [{"name": "weather.get_by_coordinates_date", "description": "Retrieves the historical weather data based on coordinates and date.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "tuple", "items": {"type": "number"}, "description": "The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude."}, "date": {"type": "string", "format": "date", "description": "The date for which to retrieve the historical weather data in the format YYYY-MM-DD."}}, "required": ["coordinates", "date"]}}, {"name": "weather.get_by_city_date", "description": "Retrieves the historical weather data based on city and date.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city for which to retrieve the weather."}, "date": {"type": "string", "format": "date", "description": "The date for which to retrieve the historical weather data in the format YYYY-MM-DD."}}, "required": ["city", "date"]}}, {"name": "weather.get_forecast_by_coordinates", "description": "Get the weather forecast for a specific geographical coordinates.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "tuple", "items": {"type": "number"}, "description": "The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude."}, "days_ahead": {"type": "integer", "description": "Number of days to forecast from current date (optional, default is 7)."}}, "required": ["coordinates"]}}], "human_eval_answer": "weather.get_by_coordinates_date(coordinates=(46.603354,1.8883340), date='2019-12-13')", "question_type": "multiple_function"}
{"question": "Calculate the capacitance of a parallel plate capacitor where the area of the plate is 10 square meters, the distance between plates is 0.01 meters and the dielectric constant K is 1.0.", "function": [{"name": "capacitance_calculator.calculate", "description": "Calculate the capacitance of a parallel plate capacitor based on the area, distance and dielectric constant using the equation C = \u03b5\u2080KA/d.", "parameters": {"type": "object", "properties": {"A": {"type": "number", "description": "The area of one plate of the capacitor in square meters."}, "d": {"type": "number", "description": "The distance between the two plates in meters."}, "K": {"type": "number", "description": "The dielectric constant (default is 1.0 for free space, optional)."}}, "required": ["A", "d"]}}, {"name": "resistance_calculator.calculate", "description": "Calculate the resistance of an electrical circuit based on current and voltage.", "parameters": {"type": "object", "properties": {"I": {"type": "number", "description": "The electric current flowing in Amperes."}, "V": {"type": "number", "description": "The voltage difference in Volts."}}, "required": ["I", "V"]}}, {"name": "magnetic_field.calculate", "description": "Calculate the magnetic field based on the current flowing and the radial distance.", "parameters": {"type": "object", "properties": {"I": {"type": "number", "description": "The electric current flowing in Amperes."}, "r": {"type": "number", "description": "The radial distance from the line of current in meters."}}, "required": ["I", "r"]}}], "human_eval_answer": "capacitance_calculator.calculate(A=10, d=0.01, K=1)", "question_type": "multiple_function"}
{"question": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?", "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}], "human_eval_answer": "wildlife_population.assess_growth(species='deer', location='Washington state', duration=10)", "question_type": "multiple_function"}
{"question": "Find a 3 bedroom villa for sale within $300,000 to $400,000 budget in San Diego.", "function": [{"name": "realestate.find_properties", "description": "Find properties based on location, budget, and specifications", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state where the property is located, e.g. San Diego, CA."}, "propertyType": {"type": "string", "description": "Type of property such as villa, condo, apartment, etc."}, "bedrooms": {"type": "integer", "description": "Number of bedrooms required in the property."}, "budget": {"type": "object", "properties": {"min": {"type": "number", "description": "Minimum budget limit."}, "max": {"type": "number", "description": "Maximum budget limit."}}, "description": "Budget range for the property."}}, "required": ["location", "propertyType", "bedrooms", "budget"]}}, {"name": "property_valuation.get", "description": "Get estimated value of a property based on location, specifications and age", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state where the property is located, e.g. San Diego, CA."}, "propertyType": {"type": "string", "description": "Type of property such as villa, condo, apartment, etc."}, "bedrooms": {"type": "integer", "description": "Number of bedrooms required in the property."}, "age": {"type": "integer", "description": "Age of the property in years."}}, "required": ["location", "propertyType", "bedrooms", "age"]}}], "human_eval_answer": "realestate.find_properties(location='San Diego', propertyType='villa', bedrooms=3, budget={'min': 300000, 'max': 400000})", "question_type": "multiple_function"}
{"question": "Calculate the average grade for student John who has these scores {'math':90, 'science':75, 'history':82, 'music':89} across different subjects.", "function": [{"name": "calculate_average", "description": "This function calculates the average grade across different subjects for a specific student.", "parameters": {"type": "object", "properties": {"gradeDict": {"type": "object", "description": "A dictionary where keys represent subjects and values represent scores"}}}}, {"name": "calculate_standard_deviation", "description": "This function calculates the standard deviation across different scores for a specific student.", "parameters": {"type": "object", "properties": {"gradeDict": {"type": "object", "description": "A dictionary where keys represent subjects and values represent scores"}}}}, {"name": "highest_grade", "description": "This function finds the subject where the student got the highest score.", "parameters": {"type": "object", "properties": {"gradeDict": {"type": "object", "description": "A dictionary where keys represent subjects and values represent scores"}}}}], "human_eval_answer": "calculate_average(gradeDict={'math':90, 'science':75, 'history':82, 'music':89})", "question_type": "multiple_function"}
{"question": "I need to delete some columns from my employees database on personal_data table. I want to remove their email addresses and social security numbers to respect privacy.", "function": [{"name": "database.modify_columns", "description": "This function allows deletion or addition of columns in a database", "parameters": {"type": "object", "properties": {"db_name": {"type": "string", "description": "The name of the database to modify."}, "table": {"type": "string", "description": "The name of the table to modify."}, "operation": {"type": "string", "description": "The operation to carry out on the table. Can be 'delete' or 'add'."}, "columns": {"type": "array", "description": "List of the columns to add or delete from the table."}}, "required": ["db_name", "table", "operation", "columns"]}}, {"name": "database.create_backup", "description": "This function creates a backup of the database before modification", "parameters": {"type": "object", "properties": {"db_name": {"type": "string", "description": "The name of the database to create a backup of."}, "backup_location": {"type": "string", "description": "The file path where the backup should be stored."}, "timestamp": {"type": "boolean", "description": "Option to append a timestamp to the backup file name.", "default": "False"}}, "required": ["db_name", "backup_location"]}}], "human_eval_answer": "database.modify_columns(db_name='employees', table='personal_data', operation='delete', columns=['email', 'ssn'])", "question_type": "multiple_function"}
{"question": "Calculate the roots of a quadratic equation with coefficients 5, 20, and -25", "function": [{"name": "math_roots.quadratic", "description": "Calculate the roots of a quadratic equation.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of the second-degree term."}, "b": {"type": "number", "description": "Coefficient of the first-degree term."}, "c": {"type": "number", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, {"name": "math.roots.cubic", "description": "Calculate the roots of a cubic equation.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of the third-degree term."}, "b": {"type": "number", "description": "Coefficient of the second-degree term."}, "c": {"type": "number", "description": "Coefficient of the first-degree term."}, "d": {"type": "number", "description": "Constant term."}}, "required": ["a", "b", "c", "d"]}}, {"name": "math.roots.polynomial", "description": "Calculate the roots of a polynomial equation.", "parameters": {"type": "object", "properties": {"coefficients": {"type": "array", "items": {"type": "number"}, "description": "Array of coefficients of the polynomial equation starting from highest degree term."}, "degree": {"type": "number", "description": "Degree of the polynomial equation."}}, "required": ["coefficients"]}}], "human_eval_answer": "math_roots.quadratic(a=5, b=20, c=-25)", "question_type": "multiple_function"}
{"question": "What is the year over year growth rate for company 'Tech Inc' with revenues of $1M in 2019 and $1.2M in 2020?", "function": [{"name": "corporate_finance.calculate_YOY_growth_rate", "description": "Calculate the year over year (YOY) growth rate for a company.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company for which to calculate the YOY growth rate."}, "year1": {"type": "integer", "description": "The initial year."}, "year1_revenue": {"type": "number", "description": "The revenue for the initial year."}, "year2": {"type": "integer", "description": "The subsequent year."}, "year2_revenue": {"type": "number", "description": "The revenue for the subsequent year."}}, "required": ["company_name", "year1", "year1_revenue", "year2", "year2_revenue"]}}, {"name": "financial_ratios.calculate_ROE", "description": "Calculate the return on equity (ROE) for a company.", "parameters": {"type": "object", "properties": {"net_income": {"type": "number", "description": "Net income for the period."}, "shareholder_equity": {"type": "number", "description": "Average shareholder equity for the period."}}, "required": ["net_income", "shareholder_equity"]}}, {"name": "financial_ratios.calculate_ROA", "description": "Calculate the return on assets (ROA) for a company.", "parameters": {"type": "object", "properties": {"net_income": {"type": "number", "description": "Net income for the period."}, "total_assets": {"type": "number", "description": "Total average assets for the period."}}, "required": ["net_income", "total_assets"]}}], "human_eval_answer": "corporate_finance.calculate_YOY_growth_rate(company_name='Tech Inc', year1=2019, year1_revenue=1000000, year2=2020, year2_revenue=1200000)", "question_type": "multiple_function"}
{"question": "How much revenue would company XYZ generate if we increase the sales units of product A by 10% while keeping the price the same?", "function": [{"name": "corporate_finance.revenue_forecast", "description": "Estimate the revenue of a company by multiplying the sales units of the product with its selling price.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that you want to calculate the revenue for."}, "product": {"type": "string", "description": "The product sold by the company."}, "sales_units_increase_percentage": {"type": "number", "description": "Percentage increase in the sales units. This value is optional and defaults to zero if not provided."}}, "required": ["company", "product"]}}, {"name": "corporate_finance.product_price", "description": "Fetch the current selling price of the product.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that sells the product."}, "product": {"type": "string", "description": "The product whose price we want to fetch."}}, "required": ["company", "product"]}}], "human_eval_answer": "corporate_finance.revenue_forecast(company='XYZ', product='A', sales_units_increase_percentage=10)", "question_type": "multiple_function"}
{"question": "Calculate the depreciated value of a property costing $200,000 with an annual depreciation rate of 3% for 5 years.", "function": [{"name": "finance.property_depreciation", "description": "Calculates the depreciated value of a property given its initial cost, depreciation rate, and the number of years.", "parameters": {"type": "object", "properties": {"initial_cost": {"type": "number", "description": "The initial cost of the property."}, "depreciation_rate": {"type": "number", "description": "The annual depreciation rate in percentage."}, "years": {"type": "integer", "description": "The number of years for which to calculate the depreciation."}, "monthly": {"type": "boolean", "description": "If set to true, it will calculate monthly depreciation instead of annually. (optional)", "default": false}}, "required": ["initial_cost", "depreciation_rate", "years"]}}, {"name": "finance.inflation_adjustment", "description": "Adjusts a sum of money for inflation based on the consumer price index (CPI).", "parameters": {"type": "object", "properties": {"initial_sum": {"type": "number", "description": "The initial sum of money."}, "years": {"type": "integer", "description": "The number of years over which inflation is calculated."}, "inflation_rate": {"type": "number", "description": "The annual rate of inflation."}}, "required": ["initial_sum", "years"]}}, {"name": "finance.loan_repayment", "description": "Calculates the monthly repayment for a loan.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "number", "description": "The amount borrowed or loaned."}, "interest_rate": {"type": "number", "description": "The annual interest rate."}, "loan_term": {"type": "integer", "description": "The term of the loan in years."}}, "required": ["loan_amount", "interest_rate", "loan_term"]}}], "human_eval_answer": "finance.property_depreciation(initial_cost=200000, depreciation_rate=3, years=5)", "question_type": "multiple_function"}
{"question": "How much is the potential of the Solar farm at location with coordinates [43.653225, -79.383186] in December, given that it has a total solar panel area of 80000 sq ft?", "function": [{"name": "solarFarm.potential", "description": "Estimate the energy output of a solar farm given its location and panel area for a particular month.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The geographic coordinates of the location of the solar farm."}, "panelArea": {"type": "number", "description": "The total solar panel area in square feet at the location."}, "month": {"type": "string", "description": "The month for which to calculate the potential energy output.", "optional": true}}, "required": ["coordinates", "panelArea"]}}, {"name": "windFarm.potential", "description": "Estimate the energy output of a wind farm given its location and turbine count for a particular month.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The geographic coordinates of the location of the wind farm."}, "turbineCount": {"type": "number", "description": "The total number of wind turbines at the location."}, "month": {"type": "string", "description": "The month for which to calculate the potential energy output.", "optional": true}}, "required": ["coordinates", "turbineCount"]}}], "human_eval_answer": "solarFarm.potential(coordinates=[43.653225, -79.383186], panelArea=80000, month='December')", "question_type": "multiple_function"}
{"question": "What's the required minimum population size (Ne) for maintaining the genetic diversity of a wild tiger population for the next 100 years with a probability of 0.95?", "function": [{"name": "population_genetics.calculate_ne", "description": "Calculate the effective population size necessary to maintain genetic diversity in a wild animal population for a specified number of generations with a given probability.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species of wild animal."}, "generations": {"type": "integer", "description": "The number of generations for which to maintain the genetic diversity."}, "probability": {"type": "number", "description": "The probability of maintaining genetic diversity."}}, "required": ["species", "generations", "probability"]}}, {"name": "ecology.calculate_carrying_capacity", "description": "Calculate the maximum population size of the species that the environment can sustain indefinitely.", "parameters": {"type": "object", "properties": {"habitat_area": {"type": "number", "description": "The area of the habitat in square kilometers."}, "species": {"type": "string", "description": "The species of animal."}, "productivity": {"type": "number", "description": "The biological productivity of the habitat in animals per square kilometer per year."}}, "required": ["habitat_area", "species", "productivity"]}}, {"name": "species_distribution_modeling.project_range_shift", "description": "Predict the potential future geographic distribution of a species under a specified climate change scenario.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species of animal."}, "climate_scenario": {"type": "string", "description": "The name of the climate change scenario."}, "future_time": {"type": "integer", "description": "The future time in years for the prediction.", "default": 100}}, "required": ["species", "climate_scenario"]}}], "human_eval_answer": "population_genetics.calculate_ne(species='tiger', generations=100, probability=0.95)", "question_type": "multiple_function"}
{"question": "Find the conversion rate from Euro to Dollar at January 1, 2022", "function": [{"name": "currency_conversion.get_rate", "description": "Get the currency conversion rate from one currency to another at a specified date.", "parameters": {"type": "object", "properties": {"from_currency": {"type": "string", "description": "The currency that you want to convert from."}, "to_currency": {"type": "string", "description": "The currency that you want to convert to."}, "date": {"type": "string", "description": "The date at which the conversion rate applies. Default is the current date.", "default": "today"}}, "required": ["from_currency", "to_currency"]}}, {"name": "currency_conversion.get_latest_rate", "description": "Get the latest currency conversion rate from one currency to another.", "parameters": {"type": "object", "properties": {"from_currency": {"type": "string", "description": "The currency that you want to convert from."}, "to_currency": {"type": "string", "description": "The currency that you want to convert to."}}, "required": ["from_currency", "to_currency"]}}, {"name": "currency_conversion.convert", "description": "Converts a specified amount of money from one currency to another at the latest rate.", "parameters": {"type": "object", "properties": {"from_currency": {"type": "string", "description": "The currency that you want to convert from."}, "to_currency": {"type": "string", "description": "The currency that you want to convert to."}, "amount": {"type": "number", "description": "The amount of money that you want to convert."}}, "required": ["from_currency", "to_currency", "amount"]}}], "human_eval_answer": "currency_conversion.get_rate(from_currency='EUR', to_currency='Dollar', date='2022-01-01')", "question_type": "multiple_function"}
{"question": "Who were the main participants and what was the location of the Battle of Stalingrad?", "function": [{"name": "european_history.battle_details", "description": "Get details of a specific historical European battle.", "parameters": {"type": "object", "properties": {"battle": {"type": "string", "description": "Name of the battle"}}, "required": ["battle"]}}, {"name": "european_history.war_details", "description": "Get details of a specific historical European war.", "parameters": {"type": "object", "properties": {"war": {"type": "string", "description": "Name of the war"}}, "required": ["war"]}}, {"name": "european_history.leader_info", "description": "Get information about a specific historical leader in European history.", "parameters": {"type": "object", "properties": {"leader": {"type": "string", "description": "Name of the leader"}}, "required": ["leader"]}}], "human_eval_answer": "european_history.battle_details(battle='Battle of Stalingrad')", "question_type": "multiple_function"}
{"question": "What are the three great Schism in Christianity history?", "function": [{"name": "religion_history.get_schisms", "description": "Retrieves a list of major schisms in a specified religion.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the schisms."}, "count": {"type": "integer", "description": "Number of top schisms to retrieve.", "default": 3}}, "required": ["religion", "count"]}}, {"name": "religion_history.get_councils", "description": "Retrieves a list of major councils in a specified religion.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the councils."}, "count": {"type": "integer", "description": "Number of top councils to retrieve.", "default": 3}}, "required": ["religion", "count"]}}, {"name": "religion_history.get_reformations", "description": "Retrieves a list of major reformations in a specified religion.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the reformations."}, "count": {"type": "integer", "description": "Number of top reformations to retrieve.", "default": 3}}, "required": ["religion", "count"]}}], "human_eval_answer": "religion_history.get_schisms(religion='Christianity', count=3)", "question_type": "multiple_function"}
{"question": "What is the price to commission a sculpture made of marble with a size of 3 feet?", "function": [{"name": "sculpture_price.calculate", "description": "Calculate the estimated price to commission a sculpture based on the material and size.", "parameters": {"type": "object", "properties": {"material": {"type": "string", "description": "The material used for the sculpture."}, "size": {"type": "integer", "description": "The size of the sculpture in feet."}, "complexity": {"type": "string", "enum": ["low", "medium", "high"], "description": "The complexity level of the sculpture. Default is 'medium'.", "default": "medium"}}, "required": ["material", "size"]}}, {"name": "sculptor_info.get", "description": "Get information about a specific sculptor.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the sculptor."}}, "required": ["name"]}}, {"name": "sculpture_availability.check", "description": "Check the availability of a specific sculpture in the inventory.", "parameters": {"type": "object", "properties": {"sculpture_name": {"type": "string", "description": "The name of the sculpture."}, "material": {"type": "string", "description": "The material of the sculpture."}}, "required": ["sculpture_name", "material"]}}], "human_eval_answer": "sculpture_price.calculate(material='marble', size=3)", "question_type": "multiple_function"}
{"question": "I want to generate a sound of 440Hz frequency for 5 seconds. What is the function and how can I use it?", "function": [{"name": "generate_sound_wave", "description": "This function is for generating a sinusoidal sound wave file of a certain frequency for a specific duration and save it to a WAV file.", "parameters": {"type": "object", "properties": {"frequency": {"type": "integer", "description": "The frequency of the sound wave in Hz."}, "duration": {"type": "integer", "description": "The duration of the sound in seconds."}, "wave_type": {"type": "string", "enum": ["sine", "square", "sawtooth"], "description": "The waveform to be used to generate the sound.", "default": "sine"}}, "required": ["frequency", "duration"]}}, {"name": "play_sound_wave", "description": "This function is for playing a sound wave file.", "parameters": {"type": "object", "properties": {"wave_file": {"type": "string", "description": "The filename of the sound wave file to be played."}, "volume": {"type": "number", "description": "The volume level at which the sound is to be played (1 is 100%).", "default": 1}}, "required": ["wave_file"]}}], "human_eval_answer": "generate_sound_wave(frequency=440, duration=5)", "question_type": "multiple_function"}
{"question": "What is the record for the most points scored by a single player in an NBA game?", "function": [{"name": "sports_data.basketball.most_points_single_game", "description": "Returns the record for the most points scored by a single player in one game of NBA, including the player name, points scored, and game date.", "parameters": {"type": "object", "properties": {"league": {"type": "string", "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."}}, "required": ["league"]}}, {"name": "sports_data.basketball.most_points_single_season", "description": "Returns the record for the most points scored by a single player in one season of NBA, including the player name, points scored, and season.", "parameters": {"type": "object", "properties": {"league": {"type": "string", "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."}}, "required": ["league"]}}, {"name": "sports_data.basketball.most_points_career", "description": "Returns the record for the most points scored by a player in his career in NBA, including the player name, total points scored, and career span.", "parameters": {"type": "object", "properties": {"league": {"type": "string", "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."}}, "required": ["league"]}}], "human_eval_answer": "sports_data.basketball.most_points_single_game(league='NBA')", "question_type": "multiple_function"}
{"question": "What are the current stats for basketball player LeBron James including points per game, assists, rebounds and minutes per game.", "function": [{"name": "basketball.player_stats.get", "description": "Get current statistics for a specified basketball player", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The name of the player."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including points, assists, rebounds, minutes."}}, "required": ["player_name", "stats_fields"]}}, {"name": "basketball.team_stats.get", "description": "Get current statistics for a specific basketball team", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the team."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, win rate."}}, "required": ["team_name", "stats_fields"]}}, {"name": "basketball.game_stats.get", "description": "Get the detailed statistical data from a specific basketball game", "parameters": {"type": "object", "properties": {"team1": {"type": "string", "description": "One of the competing teams in the game."}, "team2": {"type": "string", "description": "One of the competing teams in the game."}, "date": {"type": "string", "description": "The date when the game occurred."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, turnovers."}}, "required": ["team1", "team2", "date"]}}], "human_eval_answer": "basketball.player_stats.get(player_name='LeBron James', stats_fields=['points per game', 'assists', 'rebounds', 'minutes per game'])", "question_type": "multiple_function"}
{"question": "What is the fastest route from London to Edinburgh for playing a chess championship? Also provide an estimate of the distance.", "function": [{"name": "route_planner.calculate_route", "description": "Determines the best route between two points.", "parameters": {"type": "object", "properties": {"start": {"type": "string", "description": "The starting point of the journey."}, "destination": {"type": "string", "description": "The destination of the journey."}, "method": {"type": "string", "enum": ["fastest", "shortest", "balanced"], "description": "The method to use when calculating the route (default is 'fastest').", "default": "fastest"}}, "required": ["start", "destination"]}}, {"name": "chess_club_details.find", "description": "Provides details about a chess club, including location.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the chess club."}, "city": {"type": "string", "description": "The city in which the chess club is located."}, "event": {"type": "string", "description": "The event hosted by the club.", "default": "null"}}, "required": ["name", "city"]}}], "human_eval_answer": "route_planner.calculate_route(start='London', destination='Edinburgh', method='fastest')", "question_type": "multiple_function"}
{"question": "What is the cheapest selling price for the game 'Assassins Creed Valhalla' in the PlayStation Store in the United States?", "function": [{"name": "video_games.store_price", "description": "Fetches the selling price of a specified game in a particular gaming platform store and in a specific region.", "parameters": {"type": "object", "properties": {"game_title": {"type": "string", "description": "The title of the video game"}, "platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan", "optional": "True"}}}}, {"name": "video_games.on_sale", "description": "Checks if a particular game is currently on sale in a specific gaming platform store and in a specific region.", "parameters": {"type": "object", "properties": {"game_title": {"type": "string", "description": "The title of the video game"}, "platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan", "optional": "True"}}}}, {"name": "video_games.store_currency", "description": "Fetches the currency used in a specific region in a gaming platform store.", "parameters": {"type": "object", "properties": {"platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan", "optional": "True"}}}}], "human_eval_answer": "video_games.store_price.get_price(game_title='Assassins Creed Valhalla', platform='PlayStation', region='United States')", "question_type": "multiple_function"}
{"question": "Find out the rewards for playing Fortnite on Playstation platform with different missions and trophies", "function": [{"name": "game_rewards.get", "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "mission": {"type": "string", "description": "The mission for which you want to know the rewards.", "optional": true}, "trophy": {"type": "string", "description": "The trophy level for which you want to know the rewards.", "optional": true}}, "required": ["game", "platform"]}}, {"name": "game_scores.get", "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "level": {"type": "integer", "description": "The level of the game for which you want to retrieve the scores."}, "player": {"type": "string", "description": "The name of the player for whom you want to retrieve scores.", "optional": true}}, "required": ["game", "platform", "level"]}}, {"name": "game_missions.list", "description": "List all missions for a certain game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}}, "required": ["game"]}}], "human_eval_answer": "game_rewards.get(game='Fortnite', platform='Playstation')", "question_type": "multiple_function"}
{"question": "What is the shortest path from Paris, France to Rome, Italy by using a public transportation?", "function": [{"name": "maps.shortest_path", "description": "Find the shortest path from one location to another by using a specific mode of transportation.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The name or coordinates of the start location."}, "end_location": {"type": "string", "description": "The name or coordinates of the end location."}, "mode": {"type": "string", "description": "The mode of transportation (walk, bike, transit, drive).", "default": "walk"}}, "required": ["start_location", "end_location"]}}, {"name": "maps.route_times", "description": "Estimates the time it will take to travel from one location to another by a specific mode of transportation.", "parameters": {"type": "object", "properties": {"route": {"type": "string", "description": "The string representation of the route."}, "mode": {"type": "string", "description": "The mode of transportation (walk, bike, transit, drive).", "default": "walk"}}, "required": ["route"]}}], "human_eval_answer": "maps.shortest_path(start_location='Paris, France', end_location='Rome, Italy', mode='transit')", "question_type": "multiple_function"}
{"question": "What's the root of quadratic equation with coefficients 2, 3 and -4?", "function": [{"name": "solve.quadratic_equation", "description": "Solve a quadratic equation with given coefficients a, b, and c.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "Coefficient of x^2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, {"name": "convert.rgb_to_hex", "description": "Converts RGB values to Hexadecimal color code.", "parameters": {"type": "object", "properties": {"r": {"type": "integer", "description": "The Red component."}, "g": {"type": "integer", "description": "The Green component."}, "b": {"type": "integer", "description": "The Blue component."}}, "required": ["r", "g", "b"]}}, {"name": "perform.string_reverse", "description": "Reverses a given string.", "parameters": {"type": "object", "properties": {"input_string": {"type": "string", "description": "The string to be reversed."}}, "required": ["input_string"]}}], "human_eval_answer": "solve.quadratic_equation(a=2, b=3, c=-4)", "question_type": "multiple_function"}
{"question": "Find the intersection points of the functions y=3x+2 and y=2x+3.", "function": [{"name": "functions.intersect", "description": "Locate the intersection points of two functions.", "parameters": {"type": "object", "properties": {"function1": {"type": "string", "description": "First function given as a string with x as the variable, e.g. 3x+2"}, "function2": {"type": "string", "description": "Second function given as a string with x as the variable, e.g. 2x+3"}}, "required": ["function1", "function2"]}}, {"name": "functions.zero", "description": "Find the zero points of a function.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "Function given as a string with x as the variable, e.g. 3x+2"}}, "required": ["function"]}}], "human_eval_answer": "functions.intersect(function1='3x+2', function2='2x+3')", "question_type": "multiple_function"}
{"question": "What is the area of a rectangle with length 12 meters and width 5 meters?", "function": [{"name": "rectangle.area", "description": "Calculate the area of a rectangle with given length and width", "parameters": {"type": "object", "properties": {"length": {"type": "number", "description": "Length of the rectangle"}, "width": {"type": "number", "description": "Width of the rectangle"}}, "required": ["length", "width"]}}, {"name": "triangle.area", "description": "Calculate the area of a triangle with given base and height", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "Base of the triangle"}, "height": {"type": "number", "description": "Height of the triangle"}}, "required": ["base", "height"]}}, {"name": "circle.area", "description": "Calculate the area of a circle with given radius", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "Radius of the circle"}, "isDiameter": {"type": "boolean", "description": "Whether the given length is the diameter of the circle, default is false", "default": false}}, "required": ["radius"]}}], "human_eval_answer": "rectangle.area(length=12, width=5)", "question_type": "multiple_function"}
{"question": "What is the area and perimeter of a rectangle with width of 7 units and length of 10 units?", "function": [{"name": "geometry_rectangle.calculate", "description": "Calculates the area and perimeter of a rectangle given the width and length.", "parameters": {"type": "object", "properties": {"width": {"type": "integer", "description": "The width of the rectangle."}, "length": {"type": "integer", "description": "The length of the rectangle."}}, "required": ["width", "length"]}}, {"name": "geometry_square.calculate", "description": "Calculates the area and perimeter of a square given the side length.", "parameters": {"type": "object", "properties": {"side": {"type": "integer", "description": "The length of a side of the square."}}, "required": ["side"]}}, {"name": "geometry_circle.calculate", "description": "Calculates the area and circumference of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}], "human_eval_answer": "geometry_rectangle.calculate(width=7, length=10)", "question_type": "multiple_function"}
{"question": "Calculate the volume of a cone with radius 4 and height 7.", "function": [{"name": "geometry.calculate_cone_volume", "description": "Calculate the volume of a cone given the radius and height.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "Radius of the cone base."}, "height": {"type": "number", "description": "Height of the cone."}, "round_off": {"type": "integer", "description": "Number of decimal places to round off the answer."}}, "required": ["radius", "height"]}}, {"name": "physics.calculate_cone_mass", "description": "Calculate the mass of a cone given the radius, height, and density.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "Radius of the cone base."}, "height": {"type": "number", "description": "Height of the cone."}, "density": {"type": "number", "description": "Density of the material the cone is made of."}}, "required": ["radius", "height", "density"]}}], "human_eval_answer": "geometry.calculate_cone_volume(radius=4, height=7)", "question_type": "multiple_function"}
{"question": "Find the integral of the function f(x) = 3x^2 from 1 to 2.", "function": [{"name": "calculate_integral", "description": "Calculate the definite integral of a single-variable function.", "parameters": {"type": "object", "properties": {"func": {"type": "string", "description": "The function to be integrated."}, "a": {"type": "integer", "description": "The lower bound of the integration."}, "b": {"type": "integer", "description": "The upper bound of the integration."}}, "required": ["func", "a", "b"]}}, {"name": "calculate_derivative", "description": "Calculate the derivative of a single-variable function.", "parameters": {"type": "object", "properties": {"func": {"type": "string", "description": "The function to be differentiated."}, "x_value": {"type": "integer", "description": "The x-value at which the derivative should be calculated."}, "order": {"type": "integer", "description": "The order of the derivative (optional). Default is 1st order.", "default": 1}}, "required": ["func", "x_value"]}}], "human_eval_answer": "calculate_integral(func='3x^2', a=1, b=2)", "question_type": "multiple_function"}
{"question": "Calculate the Least Common Multiple (LCM) of 18 and 12.", "function": [{"name": "math.lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}, {"name": "math.gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}, {"name": "math.sqrt", "description": "Calculates the square root of a number.", "parameters": {"type": "object", "properties": {"num": {"type": "number", "description": "The number."}, "accuracy": {"type": "number", "description": "The number of decimal places in the result.", "optional": true}}, "required": ["num"]}}], "human_eval_answer": "math.lcm(num1=18, num2=12)", "question_type": "multiple_function"}
{"question": "Calculate the greatest common divisor between 128 and 256.", "function": [{"name": "calculate_gcd", "description": "Calculate the greatest common divisor (gcd) between two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number to calculate gcd for."}, "num2": {"type": "integer", "description": "Second number to calculate gcd for."}, "algorithm": {"type": "string", "description": "The specific algorithm to use in the calculation. Supported values: 'euclidean', 'binary'"}}, "required": ["num1", "num2"]}}, {"name": "calculate_lcm", "description": "Calculate the least common multiple (lcm) between two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number to calculate lcm for."}, "num2": {"type": "integer", "description": "Second number to calculate lcm for."}, "method": {"type": "string", "description": "The specific method to use in the calculation. Supported values: 'standard', 'reduced'"}}, "required": ["num1", "num2"]}}], "human_eval_answer": "calculate_gcd(num1=128, num2=256, algorithm='euclidean')", "question_type": "multiple_function"}
{"question": "Find out how fast an object was going if it started from rest and traveled a distance of 20 meters over 4 seconds due to a constant acceleration?", "function": [{"name": "kinematics.calculate_speed_from_rest", "description": "Calculates the speed of an object that starts from rest under a constant acceleration over a specified distance.", "parameters": {"type": "object", "properties": {"distance": {"type": "float", "description": "The distance in meters the object has traveled."}, "time": {"type": "float", "description": "The time in seconds it took the object to travel."}, "initial_speed": {"type": "float", "description": "The initial speed of the object.", "default": 0}}, "required": ["distance", "time"]}}, {"name": "kinematics.calculate_acceleration", "description": "Calculates the acceleration of an object under given conditions.", "parameters": {"type": "object", "properties": {"initial_speed": {"type": "float", "description": "The initial speed of the object."}, "final_speed": {"type": "float", "description": "The final speed of the object."}, "time": {"type": "float", "description": "The time in seconds it took the object to reach the final speed."}, "distance": {"type": "float", "description": "The distance in meters the object has traveled.", "default": 0}}, "required": ["initial_speed", "final_speed", "time"]}}], "human_eval_answer": "kinematics.calculate_speed_from_rest(distance=20, time=4)", "question_type": "multiple_function"}
{"question": "Find the final velocity of an object thrown up at 40 m/s after 6 seconds.", "function": [{"name": "kinematics.final_velocity", "description": "Find the final velocity of an object moving under constant acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "time": {"type": "number", "description": "The time in seconds the object has been moving."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"}}, "required": ["initial_velocity", "time"]}}, {"name": "physics.wave_velocity", "description": "Calculate the velocity of a wave based on its frequency and wavelength.", "parameters": {"type": "object", "properties": {"frequency": {"type": "number", "description": "The frequency of the wave in Hz."}, "wavelength": {"type": "number", "description": "The wavelength of the wave in m."}}, "required": ["frequency", "wavelength"]}}, {"name": "kinematics.distance", "description": "Find the distance traveled by an object moving under constant acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "time": {"type": "number", "description": "The time in seconds the object has been moving."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"}}, "required": ["initial_velocity", "time"]}}], "human_eval_answer": "kinematics.final_velocity(initial_velocity=40, time=6)", "question_type": "multiple_function"}
{"question": "Find a book 'The Alchemist' in the library branches within New York city.", "function": [{"name": "library.search_book", "description": "Searches for a book in the library within the specified city.", "parameters": {"type": "object", "properties": {"book_name": {"type": "string", "description": "The name of the book to search for."}, "city": {"type": "string", "description": "The city to search within."}, "availability": {"type": "boolean", "description": "If true, search for available copies. If false or omitted, search for any copy regardless of availability."}, "genre": {"type": "string", "description": "The genre of the book to filter search (optional)."}}, "required": ["book_name", "city"]}}, {"name": "library.reserve_book", "description": "Reserves a book in the library if available.", "parameters": {"type": "object", "properties": {"book_id": {"type": "string", "description": "The id of the book to reserve."}, "branch_id": {"type": "string", "description": "The id of the library branch to reserve from."}, "return_date": {"type": "string", "description": "The date the book is to be returned (optional)."}}, "required": ["book_id", "branch_id"]}}], "human_eval_answer": "library.search_book(book_name='The Alchemist', city='New York')", "question_type": "multiple_function"}
{"question": "Find a ride from New York to Philadelphia with maximum cost of $50", "function": [{"name": "ride_hailing.get_rides", "description": "Find ride from source to destination with an optional cost limit", "parameters": {"type": "object", "properties": {"source": {"type": "string", "description": "The starting point of the journey"}, "destination": {"type": "string", "description": "The endpoint of the journey"}, "max_cost": {"type": "number", "description": "The maximum cost of the ride. It is optional"}}, "required": ["source", "destination"]}}, {"name": "grocery_delivery.order", "description": "Order grocery items from a specific location with optional delivery price limit", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location of the grocery store"}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order"}, "max_delivery_cost": {"type": "number", "description": "The maximum delivery cost. It is optional"}}, "required": ["location", "items"]}}], "human_eval_answer": "ride_hailing.get_rides(source=\"New York\", destination=\"Philadelphia\", max_cost=50)", "question_type": "multiple_function"}
{"question": "Calculate the strength of magnetic field given distance is 8 meters and current is 12 Amperes?", "function": [{"name": "electromagnetism.biot_savart_law", "description": "Calculate magnetic field strength using Biot-Savart law. Input the current in Ampere and the distance in meters.", "parameters": {"type": "object", "properties": {"current": {"type": "number", "description": "The current in the conductor, in Amperes."}, "distance": {"type": "number", "description": "Distance from the current carrying conductor, in meters."}, "mu0": {"type": "number", "description": "Permeability of free space. Its value is approximated to be 4\u03c0 * 10^-7 H/m. Optional"}}, "required": ["current", "distance"]}}, {"name": "electromagnetism.ampere_law", "description": "Calculate magnetic field strength using Ampere's Circuital Law. Input the current enclosed by a circular path and the distance from the center of the circle. Can be applied to a cylindrical or spherical symmetry of consistent magnetic field. ", "parameters": {"type": "object", "properties": {"enclosed_current": {"type": "number", "description": "The total current enclosed by the loop. In Amperes."}, "radius": {"type": "number", "description": "The radius of the circle or the distance from the center of the circular path. In meters."}, "mu0": {"type": "number", "description": "Permeability of free space. Its value is approximated to be 4\u03c0 * 10^-7 H/m. Optional"}}, "required": ["enclosed_current", "radius"]}}], "human_eval_answer": "electromagnetism.biot_savart_law(current=12, distance=8)", "question_type": "multiple_function"}
{"question": "Calculate the magnetic field at point P using Ampere\u2019s law where current I is 10 Amperes and r is 0.01 meter.", "function": [{"name": "magnetic_field.calculate", "description": "Calculate the magnetic field based on the current flowing and the radial distance using Ampere\u2019s law", "parameters": {"type": "object", "properties": {"I": {"type": "number", "description": "The electric current flowing in Amperes."}, "r": {"type": "number", "description": "The radial distance from the line of current in meters."}}, "required": ["I", "r"]}}, {"name": "electric_field.calculate", "description": "Calculate the electric field based on the amount of charge and distance from the charge", "parameters": {"type": "object", "properties": {"Q": {"type": "number", "description": "The amount of charge in coulombs."}, "r": {"type": "number", "description": "The distance from the charge in meters."}}, "required": ["Q", "r"]}}, {"name": "electric_force.calculate", "description": "Calculate the electric force between two charges at a distance", "parameters": {"type": "object", "properties": {"Q1": {"type": "number", "description": "The amount of the first charge in coulombs."}, "Q2": {"type": "number", "description": "The amount of the second charge in coulombs."}, "r": {"type": "number", "description": "The distance between the two charges in meters."}}, "required": ["Q1", "Q2", "r"]}}], "human_eval_answer": "magnetic_field.calculate(I=10, r=0.01)", "question_type": "multiple_function"}
{"question": "Calculate the final temperature when 2 moles of gas at 300 K are mixed with 3 moles of the same gas at 400 K.", "function": [{"name": "calculate_final_temperature", "description": "Calculate the final temperature when different quantities of the same gas at different temperatures are mixed.", "parameters": {"type": "object", "properties": {"quantity1": {"type": "number", "description": "The quantity of the first sample of gas."}, "temperature1": {"type": "number", "description": "The temperature of the first sample of gas."}, "quantity2": {"type": "number", "description": "The quantity of the second sample of gas."}, "temperature2": {"type": "number", "description": "The temperature of the second sample of gas."}}, "required": ["quantity1", "temperature1", "quantity2", "temperature2"]}}, {"name": "calculate_mass", "description": "Calculate the mass of a gas given its quantity and molar mass.", "parameters": {"type": "object", "properties": {"quantity": {"type": "number", "description": "The quantity of the gas."}, "molar_mass": {"type": "number", "description": "The molar mass of the gas."}}, "required": ["quantity", "molar_mass"]}}], "human_eval_answer": "calculate_final_temperature(quantity1=2, temperature1=300, quantity2=3, temperature2=400)", "question_type": "multiple_function"}
{"question": "What is the energy produced by 5 mol of glucose (C6H12O6)?", "function": [{"name": "biological.calc_energy", "description": "Calculate energy from amount of substance based on its molecular composition.", "parameters": {"type": "object", "properties": {"mols": {"type": "number", "description": "Amount of substance in moles."}, "substance": {"type": "string", "description": "The chemical formula of the substance."}, "joules_per_mol": {"type": "number", "description": "The energy produced or required for the reaction, default value for glucose is 2800 kJ/mol", "default": 2800}}, "required": ["mols", "substance"]}}, {"name": "biological.calc_biomass", "description": "Calculate the biomass from the energy given the energy conversion efficiency.", "parameters": {"type": "object", "properties": {"energy": {"type": "number", "description": "The total energy produced."}, "efficiency": {"type": "number", "description": "The conversion efficiency, default value is 10%.", "default": 0.1}}, "required": ["energy"]}}, {"name": "physical.calc_work", "description": "Calculate the work from energy.", "parameters": {"type": "object", "properties": {"energy": {"type": "number", "description": "The total energy produced."}, "distance": {"type": "number", "description": "The distance over which the work is done."}}, "required": ["energy", "distance"]}}], "human_eval_answer": "biological.calc_energy(mols=5, substance='C6H12O6')", "question_type": "multiple_function"}
{"question": "How much will I weigh on Mars if my weight on Earth is 70 kg?", "function": [{"name": "calculate.weight_in_space", "description": "Calculate your weight on different planets given your weight on earth", "parameters": {"type": "object", "properties": {"weight_earth_kg": {"type": "number", "description": "Your weight on Earth in Kilograms."}, "planet": {"type": "string", "description": "The planet you want to know your weight on."}}, "required": ["weight_earth_kg", "planet"]}}, {"name": "currency_conversion", "description": "Convert a value from one currency to another.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "unit_conversion.convert", "description": "Convert a value from one unit to another.", "parameters": {"type": "object", "properties": {"value": {"type": "number", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}}, "required": ["value", "from_unit", "to_unit"]}}], "human_eval_answer": "calculate.weight_in_space(weight_earth_kg=70, planet='Mars')", "question_type": "multiple_function"}
{"question": "Calculate how many years ago was the Ice age?", "function": [{"name": "geology.get_era", "description": "Get the estimated date of a geological era.", "parameters": {"type": "object", "properties": {"era_name": {"type": "string", "description": "The name of the geological era. e.g Ice age"}, "calculate_years_ago": {"type": "boolean", "description": "True if years ago is to be calculated. False by default"}}, "required": ["era_name"]}}, {"name": "history.get_event_date", "description": "Get the date of an historical event.", "parameters": {"type": "object", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "calculate_years_ago": {"type": "boolean", "description": "True if years ago is to be calculated. False by default"}}, "required": ["event_name"]}}], "human_eval_answer": "geology.get_era(era_name='Ice age', calculate_years_ago=True)", "question_type": "multiple_function"}
{"question": "Sort this list of names in ascending order: ['Sam', 'Alice', 'Jack']", "function": [{"name": "sort_list", "description": "Sort the elements of a list in ascending or descending order", "parameters": {"type": "object", "properties": {"elements": {"type": "array", "items": {"type": "string"}, "description": "The list of elements to sort."}, "order": {"type": "string", "description": "The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order.", "default": "asc"}}, "required": ["elements"]}}, {"name": "filter_list", "description": "Filters elements of a list based on a given condition", "parameters": {"type": "object", "properties": {"elements": {"type": "array", "items": {"type": "string"}, "description": "The list of elements to filter."}, "condition": {"type": "string", "description": "The condition to filter the elements on."}}, "required": ["elements", "condition"]}}, {"name": "sum_elements", "description": "Add all elements of a numeric list", "parameters": {"type": "object", "properties": {"elements": {"type": "array", "items": {"type": "integer"}, "description": "The list of numeric elements to add."}}, "required": ["elements"]}}], "human_eval_answer": "sort_list(elements=['Sam', 'Alice', 'Jack'],order ='asc')", "question_type": "multiple_function"}
{"question": "Calculate the cosine similarity between vector A [3, 2, 1] and vector B [1, 2, 3].", "function": [{"name": "cosine_similarity.calculate", "description": "Calculate the cosine similarity between two vectors.", "parameters": {"type": "object", "properties": {"vector1": {"type": "array", "items": {"type": "integer"}, "description": "The first vector for calculating cosine similarity."}, "vector2": {"type": "array", "items": {"type": "integer"}, "description": "The second vector for calculating cosine similarity."}, "rounding": {"type": "integer", "description": "Optional: The number of decimals to round off the result."}}, "required": ["vector1", "vector2"]}}, {"name": "correlation.calculate", "description": "Calculate the correlation coefficient between two arrays of numbers.", "parameters": {"type": "object", "properties": {"array1": {"type": "array", "items": {"type": "integer"}, "description": "The first array of numbers."}, "array2": {"type": "array", "items": {"type": "integer"}, "description": "The second array of numbers."}, "type": {"type": "string", "enum": ["pearson", "spearman"], "description": "Optional: The type of correlation coefficient to calculate. Default is 'pearson'."}}, "required": ["array1", "array2"]}}], "human_eval_answer": "cosine_similarity.calculate(vector1=[3,2,1], vector2=[1,2,3])", "question_type": "multiple_function"}
{"question": "Find me a pet-friendly library with facilities for disabled people in New York City.", "function": [{"name": "library.find_nearby", "description": "Locate nearby libraries based on specific preferences such as being pet-friendly and having disabled access facilities.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city, for example, New York City, NY"}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["Pet-friendly", "Disabled Access", "24 hours", "Cafe Inside"]}, "description": "Your preferences for the library."}}, "required": ["location", "preferences"]}}, {"name": "store.find_nearby", "description": "Locate nearby stores based on specific preferences such as being pet-friendly and having disabled access facilities.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city, for example, New York City, NY"}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["Pet-friendly", "Disabled Access", "24 hours", "Cafe Inside"]}, "description": "Your preferences for the store."}}, "required": ["location", "preferences"]}}], "human_eval_answer": "library.find_nearby(location='New York City', preferences=['Pet-friendly', 'Disabled Access'])", "question_type": "multiple_function"}
{"question": "Calculate the compound interest for an amount of 1500 for a duration of 2 years with an annual interest rate of 2.5%.", "function": [{"name": "calc_Compound_Interest", "description": "Compute compound interest.", "parameters": {"type": "object", "properties": {"principle_amount": {"type": "number", "description": "The principle amount that is invested."}, "duration": {"type": "number", "description": "Duration of time period in years."}, "annual_rate": {"type": "number", "description": "Interest rate in percentage."}, "compound_freq": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per unit time."}}, "required": ["principle_amount", "duration", "annual_rate"]}}, {"name": "calc_Simple_Interest", "description": "Compute simple interest.", "parameters": {"type": "object", "properties": {"principle_amount": {"type": "number", "description": "The principle amount that is invested."}, "duration": {"type": "number", "description": "Duration of time period in years."}, "annual_rate": {"type": "number", "description": "Interest rate in percentage."}}, "required": ["principle_amount", "duration", "annual_rate"]}}, {"name": "future_value", "description": "Calculates the future value of an investment given an interest rate and time period.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial investment amount."}, "interest_rate": {"type": "number", "description": "The annual interest rate (as a decimal)."}, "time": {"type": "integer", "description": "The number of time periods the money is invested for."}, "num_compoundings": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per time period."}}, "required": ["initial_investment", "interest_rate", "time"]}}], "human_eval_answer": "calc_Compound_Interest(principle_amount=1500, duration=2, annual_rate=0.025)", "question_type": "multiple_function"}
{"question": "Predict the house prices for the next month in New York.", "function": [{"name": "house_price_forecast", "description": "Predict the house prices for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the house price prediction for."}, "months": {"type": "integer", "description": "Number of future months for the prediction."}, "features": {"type": "array", "items": {"type": "string", "enum": ["SqFt", "Bedrooms", "Bathrooms", "Location"]}, "description": "Additional features considered for prediction. Not required.", "optional": true}}, "required": ["location", "months"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "stock_market_forecast", "description": "Predict the stock prices for a specific company and time frame.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that you want to get the stock price prediction for."}, "days": {"type": "integer", "description": "Number of future days for the prediction."}}, "required": ["company", "days"]}}], "human_eval_answer": "house_price_forecast(location=\"New York\", months=1)", "question_type": "multiple_function"}
{"question": "Calculate the probability of rolling a sum of 7 on a roll of two dice.", "function": [{"name": "dice_roll_probability", "description": "Calculate the probability of a specific sum appearing from rolling two dice.", "parameters": {"type": "object", "properties": {"desired_sum": {"type": "integer", "description": "The sum for which to calculate the probability."}, "n_rolls": {"type": "integer", "description": "Number of dice to be rolled.", "optional": true}, "sides_per_die": {"type": "integer", "description": "Number of sides on each die."}}, "required": ["desired_sum", "sides_per_die"]}}, {"name": "flip_coin_probability", "description": "Calculate the probability of a specific outcome appearing from flipping a coin.", "parameters": {"type": "object", "properties": {"desired_outcome": {"type": "string", "description": "The outcome for which to calculate the probability."}, "n_flips": {"type": "integer", "description": "Number of coins to be flipped.", "optional": true}}, "required": ["desired_outcome"]}}, {"name": "shuffle_card_probability", "description": "Calculate the probability of a specific card appearing from a shuffled deck.", "parameters": {"type": "object", "properties": {"desired_card": {"type": "string", "description": "The card for which to calculate the probability."}, "n_decks": {"type": "integer", "description": "Number of decks to shuffle.", "optional": true}}, "required": ["desired_card"]}}], "human_eval_answer": "dice_roll_probability(desired_sum=7, sides_per_die=6,n_roll=2)", "question_type": "multiple_function"}
{"question": "I have 100 euro. How much is it in USD?", "function": [{"name": "currency_conversion", "description": "Convert a value from one currency to another.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "unit_conversion", "description": "Convert a value from one unit to another.", "parameters": {"type": "object", "properties": {"value": {"type": "number", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}}, "required": ["value", "from_unit", "to_unit"]}}], "human_eval_answer": "currency_conversion(amount=100, from_currency='Euro', to_currency='USD')", "question_type": "multiple_function"}
{"question": "Predict the house prices for next 5 years based on interest rates and unemployment rates.", "function": [{"name": "linear_regression", "description": "Applies linear regression to a given set of independent variables to make a prediction.", "parameters": {"type": "object", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables (interest rates and unemployment rates)."}, "dependent_var": {"type": "string", "description": "The dependent variable (house price)."}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices.", "optional": true}}, "required": ["independent_var", "dependent_var"]}}, {"name": "random_forest_regression", "description": "Applies Random Forest Regression to a given set of independent variables to make a prediction.", "parameters": {"type": "object", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables (interest rates and unemployment rates)."}, "dependent_var": {"type": "string", "description": "The dependent variable (house price)."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest.", "optional": true}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices.", "optional": true}}, "required": ["independent_var", "dependent_var"]}}], "human_eval_answer": "linear_regression(independent_var=['interest_rates', 'unemployment_rates'], dependent_var='house_price', forecast_period=5)", "question_type": "multiple_function"}
{"question": "Find out the historical dividend payments of Apple Inc for last five years.", "function": [{"name": "corporate_finance.dividend_data", "description": "Get historical dividend data of a specific company within a particular duration.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that you want to get the dividend data for."}, "years": {"type": "integer", "description": "Number of past years for which to retrieve the data."}, "frequency": {"type": "string", "enum": ["quarterly", "annually"], "description": "The frequency of the dividend payment."}}, "required": ["company", "years"]}}, {"name": "stock_market_data", "description": "Retrieve stock market data for a specific company and time frame.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that you want to get the stock market data for."}, "days": {"type": "integer", "description": "Number of past days for which to retrieve the data."}}, "required": ["company", "days"]}}], "human_eval_answer": "corporate_finance.dividend_data(company=\"Apple Inc\", years=5)", "question_type": "multiple_function"}
{"question": "Predict the stock price for Google for the next 3 days.", "function": [{"name": "stock_forecast", "description": "Predict the future stock price for a specific company and time frame.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that you want to get the stock price prediction for."}, "days": {"type": "integer", "description": "Number of future days for which to predict the stock price."}, "model": {"type": "string", "description": "The model to use for prediction."}}, "required": ["company", "days"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}], "human_eval_answer": "stock_forecast(company=\"Google\", days=3)", "question_type": "multiple_function"}
{"question": "Find the average closing price of Apple stock in the past 60 days", "function": [{"name": "avg_closing_price", "description": "Calculate the average closing price of a specific company over a given period of time", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "Name of the company to get data for"}, "days": {"type": "integer", "description": "Number of past days to calculate average closing price for"}, "data_source": {"type": "string", "description": "Source to fetch the stock data. default is 'yahoo finance'"}}, "required": ["company", "days"]}}, {"name": "total_revenue", "description": "Calculate the total revenue of a company over a specific period of time", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "Name of the company to get data for"}, "days": {"type": "integer", "description": "Number of past days to calculate total revenue for"}, "data_source": {"type": "string", "description": "Source to fetch the financial data. default is 'google finance'"}}, "required": ["company", "days"]}}, {"name": "volume_traded", "description": "Calculate the total volume of stocks traded over a certain period of time", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "Name of the company to get data for"}, "days": {"type": "integer", "description": "Number of past days to calculate volume traded for"}, "data_source": {"type": "string", "description": "Source to fetch the financial data. default is 'yahoo finance'"}}, "required": ["company", "days"]}}], "human_eval_answer": "avg_closing_price(company='Apple', days=60)", "question_type": "multiple_function"}
{"question": "Can you please calculate the compound interest for a principle of $1000, annual rate of 5% over 10 years with 4 compound per year.", "function": [{"name": "financial.compound_interest", "description": "Calculates compound interest.", "parameters": {"type": "object", "properties": {"principle": {"type": "number", "description": "The initial amount of money that is being compounded."}, "rate": {"type": "number", "description": "The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05."}, "time": {"type": "number", "description": "The amount of time, in years, that the money is to be compounded for."}, "n": {"type": "number", "description": "The number of times interest applied per time period."}}, "required": ["principle", "rate", "time", "n"]}}, {"name": "financial.simple_interest", "description": "Calculates simple interest.", "parameters": {"type": "object", "properties": {"principle": {"type": "number", "description": "The initial amount of money that interest is being calculated for."}, "rate": {"type": "number", "description": "The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05."}, "time": {"type": "number", "description": "The amount of time, in years, that the money is to be compounded for."}}, "required": ["principle", "rate", "time"]}}], "human_eval_answer": "financial.compound_interest(principle=1000, rate=0.05, time=10, n=4)", "question_type": "multiple_function"}
{"question": "Search for divorce law specialists in Los Angeles", "function": [{"name": "lawyer.search", "description": "Search for a lawyer based on area of expertise and location", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "expertise": {"type": "string", "description": "Area of legal expertise. For example, 'Divorce', 'Criminal', 'Business'."}}, "required": ["location", "expertise"]}}, {"name": "doctor.search", "description": "Search for a doctor based on area of expertise and location", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "specialization": {"type": "string", "description": "Medical specialization. For example, 'Cardiology', 'Orthopedics', 'Gynecology'."}}, "required": ["location", "specialization"]}}], "human_eval_answer": "lawyer.search(location='Los Angeles', expertise='Divorce')", "question_type": "multiple_function"}
{"question": "Find lawyers specializing in criminal law near me in New York.", "function": [{"name": "lawyer_finder", "description": "Locate lawyers near you based on their specialization.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Your location"}, "specialization": {"type": "array", "items": {"type": "string"}, "description": "Specializations of lawyer that you are looking for."}, "experience": {"type": "number", "description": "Experience in years that lawyer has."}}, "required": ["location", "specialization"]}}, {"name": "car_rental", "description": "Rent a car near you based on your preference.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Your location"}, "car_type": {"type": "array", "items": {"type": "string"}, "description": "Type of cars that you want to rent."}, "fuel_type": {"type": "string", "description": "Preferred fuel type of car. Gas, diesel, electric, hybrid etc."}}, "required": ["location", "car_type"]}}], "human_eval_answer": "lawyer_finder(location='New York', specialization=['Criminal Law'])", "question_type": "multiple_function"}
{"question": "What will be the humidity and temperature for New York City after 7 days?", "function": [{"name": "humidity_temperature_forecast", "description": "Retrieve forecast of humidity and temperature for a specific location and for a future date.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity and temperature forecast for."}, "days": {"type": "integer", "description": "Number of future days for which to retrieve the forecast."}}, "required": ["location", "days"]}}, {"name": "movie_showtimes", "description": "Retrieve movie showtimes for a specific location and for a future date.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the movie showtimes for."}, "days": {"type": "integer", "description": "Number of future days for which to retrieve the showtimes."}}, "required": ["location", "days"]}}, {"name": "event_search", "description": "Search for events happening in a specific location for a future date.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the event information for."}, "days": {"type": "integer", "description": "Number of future days for which to retrieve the event information."}}, "required": ["location", "days"]}}], "human_eval_answer": "humidity_temperature_forecast(location='New York City', days=7)", "question_type": "multiple_function"}
{"question": "Find a Landscape Architect who is experienced 5 years in small space garden design in Portland", "function": [{"name": "landscape_architect.find_specialty", "description": "Search for a landscape architect based on the location and specialization", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state where the professional is based, e.g. Portland, OR."}, "specialization": {"type": "string", "description": "A specific area of expertise. Common areas include residential design, commercial design, urban design, and park design."}, "years_experience": {"type": "integer", "description": "Number of years the professional has been practicing in their field. (optional)", "default": 0}}, "required": ["location", "specialization"]}}, {"name": "home_renovation_expert.find_specialty", "description": "Search for a home renovation expert based on the location and specialization", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state where the professional is based, e.g. Portland, OR."}, "specialization": {"type": "string", "description": "A specific area of expertise, such as kitchen or bathroom renovation."}, "years_experience": {"type": "integer", "description": "Number of years the professional has been practicing in their field. (optional)", "default": 0}}, "required": ["location", "specialization"]}}], "human_eval_answer": "landscape_architect.find_specialty(location='Portland', specialization='small space garden design', years_experience=5)", "question_type": "multiple_function"}
{"question": "Find me the closest nature park that allows camping and has scenic views in Boston, MA.", "function": [{"name": "nature_park.find_nearby", "description": "Locate nearby nature parks based on specific criteria like camping availability and scenic views.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA."}, "features": {"type": "array", "items": {"type": "string", "enum": ["Camping", "Scenic View", "Trails", "Picnic Areas"]}, "description": "Preferred features in nature park."}}, "required": ["location", "features"]}}, {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Delivery", "Outdoor Seating", "Vegetarian Options"]}, "description": "Preferred amenities in restaurant."}}, "required": ["location"]}}], "human_eval_answer": "nature_park.find_nearby(location='Boston, MA', features=['Camping', 'Scenic View'])", "question_type": "multiple_function"}
{"question": "What will be the air quality index of New York for the next week?", "function": [{"name": "air_quality_forecast", "description": "Retrieve an air quality forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality forecast for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "news", "description": "Retrieve news articles for a specific topic.", "parameters": {"type": "object", "properties": {"topic": {"type": "string", "description": "The topic that you want to get the news for."}, "days": {"type": "integer", "description": "Number of past days for which to retrieve the news."}}, "required": ["topic", "days"]}}], "human_eval_answer": "air_quality_forecast(location=\"New York\", days=7)", "question_type": "multiple_function"}
{"question": "Give me the UV index for Tokyo for tomorrow.", "function": [{"name": "uv_index.get_future", "description": "Retrieve UV index data for a specified location and date.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location to retrieve the UV index for."}, "date": {"type": "string", "format": "date", "description": "The date for the UV index.", "default": "Tomorrow"}}, "required": ["location"]}}, {"name": "rainfall_prediction", "description": "Retrieve rainfall data for a specified location and date.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location to retrieve the rainfall prediction for."}, "date": {"type": "string", "format": "date", "description": "The date for the rainfall prediction."}}, "required": ["location"]}}, {"name": "snowfall_prediction", "description": "Retrieve snowfall data for a specified location and date.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location to retrieve the snowfall prediction for."}, "date": {"type": "string", "format": "date", "description": "The date for the snowfall prediction."}}, "required": ["location"]}}], "human_eval_answer": "uv_index.get_future(location='Tokyo', date='Tomorrow')", "question_type": "multiple_function"}
{"question": "Find the distance between New York City and Los Angeles.", "function": [{"name": "geodistance.find", "description": "Find the distance between two cities on the globe.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "The originating city for the distance calculation."}, "destination": {"type": "string", "description": "The destination city for the distance calculation."}, "unit": {"type": "string", "default": "miles", "description": "The unit of measure for the distance calculation."}}, "required": ["origin", "destination"]}}, {"name": "timezones.get_difference", "description": "Find the time difference between two cities.", "parameters": {"type": "object", "properties": {"city1": {"type": "string", "description": "The first city."}, "city2": {"type": "string", "description": "The second city."}}, "required": ["city1", "city2"]}}, {"name": "flights.search", "description": "Find flights between two cities.", "parameters": {"type": "object", "properties": {"from_city": {"type": "string", "description": "The city to depart from."}, "to_city": {"type": "string", "description": "The city to arrive at."}, "date": {"type": "string", "default": "next monday", "description": "The date to fly."}}, "required": ["from_city", "to_city"]}}], "human_eval_answer": "geodistance.find(origin='New York City', destination='Los Angeles')", "question_type": "multiple_function"}
{"question": "How much traffic should I expect from Las Vegas to Los Angeles this weekend?", "function": [{"name": "traffic_estimate", "description": "Estimate traffic from one location to another for a specific time period.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "Starting location for the journey."}, "end_location": {"type": "string", "description": "Ending location for the journey."}, "time_period": {"type": "string", "description": "Specify a time frame to estimate the traffic, 'now' for current, 'weekend' for the coming weekend."}}, "required": ["start_location", "end_location"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "calculate_distance", "description": "Calculate distance between two locations.", "parameters": {"type": "object", "properties": {"start_point": {"type": "string", "description": "Starting point of the journey."}, "end_point": {"type": "string", "description": "Ending point of the journey."}}, "required": ["start_point", "end_point"]}}], "human_eval_answer": "traffic_estimate(start_location='Las Vegas', end_location='Los Angeles', time_period='weekend')", "question_type": "multiple_function"}
{"question": "Translate Hello, how are you? from English to French.", "function": [{"name": "translate", "description": "Translate text from a specified source language to a specified target language.", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text to be translated."}, "source_language": {"type": "string", "description": "The language the text is currently in."}, "target_language": {"type": "string", "description": "The language the text will be translated to."}}, "required": ["text", "source_language", "target_language"]}}, {"name": "word_count", "description": "Count the number of words in the given text.", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text that the number of words is to be calculated."}}, "required": ["text"]}}, {"name": "sentiment_analysis", "description": "Analyze the sentiment of a specified text.", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text whose sentiment is to be analyzed."}}, "required": ["text"]}}], "human_eval_answer": "translate(text='Hello, how are you?', source_language='English', target_language='French')", "question_type": "multiple_function"}
{"question": "Can I find a historical fiction book at the New York public library?", "function": [{"name": "library.search_books", "description": "Search for a book in a given library with optional parameters", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Name or city of library"}, "genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book"}}, "required": ["location", "genre"]}}, {"name": "google.books_search", "description": "Search for a book in the Google Books library with optional parameters", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book"}}, "required": ["genre"]}}, {"name": "openlibrary.books_search", "description": "Search for a book in the Open Library with optional parameters", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book"}}, "required": ["genre"]}}], "human_eval_answer": "library.search_books(location='New York', genre='Historical Fiction')", "question_type": "multiple_function"}
{"question": "Determine my personality type based on the five factor model with given information: I'm talkative, gets nervous easily, has few artistic interests, tend to be lazy and has a forgiving nature.", "function": [{"name": "five_factor_model.analyse", "description": "Analyse personality based on the five-factor model, also known as the Big Five, which measures openness, conscientiousness, extraversion, agreeableness, and neuroticism.", "parameters": {"type": "object", "properties": {"talkative": {"type": "boolean", "description": "Indicates if the user is talkative."}, "nervous": {"type": "boolean", "description": "Indicates if the user gets nervous easily."}, "artistic_interests": {"type": "boolean", "description": "Indicates if the user has many artistic interests."}, "lazy": {"type": "boolean", "description": "Indicates if the user tends to be lazy."}, "forgiving": {"type": "boolean", "description": "Indicates if the user is forgiving."}}, "required": ["talkative", "nervous", "artistic_interests", "lazy", "forgiving"]}}, {"name": "MBTI.analyse", "description": "Analyse personality based on the Myers-Briggs Type Indicator (MBTI) which sorts for preferences and generates a 4-letter personality type.", "parameters": {"type": "object", "properties": {"thinking_vs_feeling": {"type": "string", "description": "Preference of user between thinking and feeling."}, "introverted_vs_extroverted": {"type": "string", "description": "Preference of user between introverted and extroverted."}, "judging_vs_perceiving": {"type": "string", "description": "Preference of user between judging and perceiving."}, "sensing_vs_intuition": {"type": "string", "description": "Preference of user between sensing and intuition."}}, "required": ["thinking_vs_feeling", "introverted_vs_extroverted", "judging_vs_perceiving", "sensing_vs_intuition"]}}], "human_eval_answer": "five_factor_model.analyse(talkative=True, nervous=True, artistic_interests=False, lazy=True, forgiving=True)", "question_type": "multiple_function"}
{"question": "Who were the kings of France during the 18th century?", "function": [{"name": "european_history.get_monarchs", "description": "Provides a list of monarchs based on the specified country and century.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Country name."}, "century": {"type": "integer", "description": "Century as an integer. For example, for the 1700s, input '18'."}}, "required": ["country", "century"]}}, {"name": "european_history.get_events", "description": "Provides a list of major historical events based on the specified country and century.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Country name."}, "century": {"type": "integer", "description": "Century as an integer. For example, for the 1700s, input '18'."}, "event_type": {"type": "string", "description": "Type of the event such as 'war', 'invention', 'revolution' etc. This field is optional"}}, "required": ["country", "century"]}}, {"name": "european_history.get_culture", "description": "Provides information on cultural trends, art movements, philosophical ideas based on the specified country and century.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Country name."}, "century": {"type": "integer", "description": "Century as an integer. For example, for the 1700s, input '18'."}, "aspect": {"type": "string", "description": "Aspect of culture such as 'literature', 'art', 'philosophy' etc. This field is optional"}}, "required": ["country", "century"]}}], "human_eval_answer": "european_history.get_monarchs(country='France', century=18)", "question_type": "multiple_function"}
{"question": "How many veterans were there in the United States in the year 1954?", "function": [{"name": "get_population", "description": "Retrieve population data for a specific year and population category", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year for which to retrieve the population data"}, "category": {"type": "string", "description": "The population category (e.g., total, veterans, women)"}}, "required": ["year", "category"]}}, {"name": "get_demographics", "description": "Retrieve demographic data for a specific year and demographic category", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year for which to retrieve the demographic data"}, "category": {"type": "string", "description": "The demographic category (e.g., gender, race, age)"}}, "required": ["year", "category"]}}, {"name": "get_bureau_statistics", "description": "Retrieve statistical data for a specific year and statistical category", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year for which to retrieve the statistical data"}, "category": {"type": "string", "description": "The statistical category (e.g., employment, crime, health)"}}, "required": ["year", "category"]}}], "human_eval_answer": "get_population(year=1954, category='veterans')", "question_type": "multiple_function"}
{"question": "What was the population of California in 1970?", "function": [{"name": "us_history.population_by_state_year", "description": "Retrieve historical population data for a specific U.S. state and year.", "parameters": {"type": "object", "properties": {"state": {"type": "string", "description": "The U.S. state for which to retrieve the population."}, "year": {"type": "integer", "description": "The year for which to retrieve the population."}}, "required": ["state", "year"]}}, {"name": "us_economy.gdp_by_state_year", "description": "Retrieve historical GDP data for a specific U.S. state and year.", "parameters": {"type": "object", "properties": {"state": {"type": "string", "description": "The U.S. state for which to retrieve the GDP."}, "year": {"type": "integer", "description": "The year for which to retrieve the GDP."}, "adjustment": {"type": "string", "description": "The type of adjustment for inflation, 'Real' or 'Nominal'. Optional, 'Nominal' by default.", "enum": ["Real", "Nominal"]}}, "required": ["state", "year"]}}], "human_eval_answer": "us_history.population_by_state_year(state='California', year=1970)", "question_type": "multiple_function"}
{"question": "Who was the founder of Buddhism and where was it originated?", "function": [{"name": "religion.get_origin", "description": "Retrieves the origin and founder information of a specified religion.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the founder and origin."}}, "required": ["religion"]}}, {"name": "religion.get_core_beliefs", "description": "Retrieves the core beliefs and practices of a specified religion.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the core beliefs and practices."}}, "required": ["religion"]}}], "human_eval_answer": "religion.get_origin(religion='Buddhism')", "question_type": "multiple_function"}
{"question": "Find the price of Van Gogh's painting 'Starry Night' on auction platform.", "function": [{"name": "art_auction.fetch_artwork_price", "description": "Fetch the price of a specific artwork on the auction platform.", "parameters": {"type": "object", "properties": {"artwork_name": {"type": "string", "description": "The name of the artwork to be searched."}, "artist": {"type": "string", "description": "The artist's name to ensure the precise artwork is fetched."}, "platform": {"type": "string", "description": "The platform where the artwork's price should be fetched from.", "default": "all"}}, "required": ["artwork_name", "artist"]}}, {"name": "library.search_book", "description": "Search for a specific book in the library.", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "The title of the book to be searched."}, "author": {"type": "string", "description": "The author of the book to ensure the precise book is fetched."}, "platform": {"type": "string", "description": "The library where the book should be fetched from.", "default": "all"}}, "required": ["title", "author"]}}], "human_eval_answer": "art_auction.fetch_artwork_price(artwork_name='Starry Night', artist='Van Gogh', platform='auction_platform')", "question_type": "multiple_function"}
{"question": "Which paint color is currently most popular for living rooms?", "function": [{"name": "paint_color.trends", "description": "Find the most popular paint color for a specific area in the home.", "parameters": {"type": "object", "properties": {"room": {"type": "string", "description": "Type of the room e.g. Living room, Bathroom etc."}, "period": {"type": "string", "enum": ["Daily", "Weekly", "Monthly"], "description": "The period over which to check the paint color trend."}}, "required": ["room"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "house_price_trends", "description": "Find the average house price in a specific area.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state, e.g. New York, NY."}, "period": {"type": "string", "enum": ["Quarterly", "Yearly"], "description": "The period over which to check the price trend."}}, "required": ["location"]}}], "human_eval_answer": "paint_color.trends(room='living room')", "question_type": "multiple_function"}
{"question": "I want to order a custom bronze sculpture of a horse. What material options are available?", "function": [{"name": "sculpture.create_custom", "description": "Order a custom sculpture with your preferred material.", "parameters": {"type": "object", "properties": {"item": {"type": "string", "description": "The subject of the sculpture, e.g. horse"}, "material": {"type": "string", "enum": ["Bronze", "Marble", "Terracotta", "Wood", "Stone"], "description": "Preferred material for the sculpture."}, "size": {"type": "integer", "description": "The desired size for the sculpture in inches. This parameter is optional"}}, "required": ["item", "material"]}}, {"name": "painting.create_custom", "description": "Order a custom painting with your preferred color.", "parameters": {"type": "object", "properties": {"subject": {"type": "string", "description": "The subject of the painting, e.g. horse"}, "color": {"type": "string", "enum": ["Red", "Blue", "Green", "Yellow", "Black"], "description": "Preferred main color for the painting."}, "size": {"type": "integer", "description": "The desired size for the painting in inches. This parameter is optional"}}, "required": ["subject", "color"]}}], "human_eval_answer": "sculpture.create_custom(item='horse', material='Bronze')", "question_type": "multiple_function"}
{"question": "Search for famous contemporary sculptures in New York.", "function": [{"name": "artwork_search.find", "description": "Search for artworks based on type and location.", "parameters": {"type": "object", "properties": {"type": {"type": "string", "description": "Type of the artwork. E.g., painting, sculpture, installation."}, "location": {"type": "string", "description": "Location or city where the artwork is."}, "era": {"type": "string", "description": "Time period of the artwork, can be 'contemporary', 'modern', 'renaissance', etc.", "optional": "True"}}, "required": ["type", "location"]}}, {"name": "tourist_attraction.find", "description": "Search for tourist attractions based on type and location.", "parameters": {"type": "object", "properties": {"attractionType": {"type": "string", "description": "Type of the attraction. E.g., monument, museum, park."}, "location": {"type": "string", "description": "Location or city where the attraction is."}}, "required": ["attractionType", "location"]}}, {"name": "park_search.find", "description": "Search for parks based on facilities and location.", "parameters": {"type": "object", "properties": {"facilities": {"type": "array", "items": {"type": "string"}, "description": "List of facilities in the park."}, "location": {"type": "string", "description": "Location or city where the park is."}}, "required": ["facilities", "location"]}}], "human_eval_answer": "artwork_search.find(type='sculpture', location='New York', era='contemporary')", "question_type": "multiple_function"}
{"question": "Get me information about Natural History Museum in London including timings, exhibitions, and accessibility.", "function": [{"name": "museum_info", "description": "Retrieve information about a specific museum.", "parameters": {"type": "object", "properties": {"museum": {"type": "string", "description": "The name of the museum you want to get information for."}, "city": {"type": "string", "description": "The city where the museum is located."}, "features": {"type": "array", "items": {"type": "string", "enum": ["timings", "exhibitions", "accessibility", "events", "history"]}, "description": "Features of the museum to get information on. For multiple features, separate them by comma.", "default": "timings, exhibitions"}}, "required": ["museum", "city"]}}, {"name": "tourist_spot_info", "description": "Retrieve information about a specific tourist spot.", "parameters": {"type": "object", "properties": {"spot": {"type": "string", "description": "The name of the tourist spot you want to get information for."}, "city": {"type": "string", "description": "The city where the tourist spot is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["timing", "attractions", "tickets", "accessibility", "history"]}, "description": "Details of the tourist spot to get information on. For multiple details, separate them by comma.", "default": "timing, attractions"}}, "required": ["spot", "city"]}}], "human_eval_answer": "museum_info(museum='Natural History Museum', city='London', features=['timings', 'exhibitions', 'accessibility'])", "question_type": "multiple_function"}
{"question": "Find art exhibitions for the upcoming month in the Museum of Modern Art, New York.", "function": [{"name": "exhibition_info", "description": "Get exhibition information for a specific museum.", "parameters": {"type": "object", "properties": {"museum_name": {"type": "string", "description": "Name of the museum for which to find exhibitions."}, "month": {"type": "integer", "description": "Number of upcoming months for which to retrieve exhibition details."}}, "required": ["museum_name"]}}, {"name": "restaurant_info", "description": "Get restaurant information for a specific area.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location for which to find restaurants."}, "food_type": {"type": "string", "description": "Type of cuisine for which to find restaurants.", "enum": ["Italian", "Chinese", "Mexican", "American"]}}, "required": ["location"]}}], "human_eval_answer": "exhibition_info(museum_name=\"Museum of Modern Art\", month=1)", "question_type": "multiple_function"}
{"question": "Find a local guitar shop that also offers violin lessons in Nashville.", "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop."}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop."}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym."}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available."}}, "required": ["location"]}}], "human_eval_answer": "music_shop.find_nearby(location='Nashville', services=['Violin Lessons'], instruments=['Guitars'])", "question_type": "multiple_function"}
{"question": "Book a ticket for the upcoming Eminem concert in New York City, I would like to get the one with backstage access.", "function": [{"name": "concert.book_ticket", "description": "Book a ticket for a concert at a specific location with various add-ons like backstage pass.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "Name of the artist for the concert."}, "location": {"type": "string", "description": "City where the concert will take place."}, "add_ons": {"type": "array", "items": {"type": "string", "enum": ["Backstage Pass", "VIP Seating", "Parking Pass"]}, "description": "Add-ons for the concert."}}, "required": ["artist", "location"]}}, {"name": "festival.book_ticket", "description": "Book a ticket for a festival at a specific location with various add-ons like camping access.", "parameters": {"type": "object", "properties": {"festival": {"type": "string", "description": "Name of the festival."}, "location": {"type": "string", "description": "City where the festival will take place."}, "add_ons": {"type": "array", "items": {"type": "string", "enum": ["Camping Pass", "VIP Seating", "Parking Pass"]}, "description": "Add-ons for the festival."}}, "required": ["festival", "location"]}}], "human_eval_answer": "concert.book_ticket(artist='Eminem', location='New York City', add_ons=['Backstage Pass'])", "question_type": "multiple_function"}
{"question": "Play a song in C Major key at tempo 120 bpm.", "function": [{"name": "music.generate", "description": "Generate a piece of music given a key, tempo, and time signature.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key of the piece, e.g., C Major."}, "tempo": {"type": "integer", "description": "Tempo of the piece in beats per minute."}, "time_signature": {"type": "string", "description": "Time signature of the piece, e.g., 4/4.", "optional": true}}, "required": ["key", "tempo"]}}, {"name": "audio.generate", "description": "Generate an audio signal given a frequency, amplitude, and duration.", "parameters": {"type": "object", "properties": {"frequency": {"type": "number", "description": "Frequency of the audio signal in Hz."}, "amplitude": {"type": "number", "description": "Amplitude of the audio signal."}, "duration": {"type": "number", "description": "Duration of the audio signal in seconds.", "optional": true}}, "required": ["frequency", "amplitude"]}}], "human_eval_answer": "music.generate(key=\"C Major\", tempo=120)", "question_type": "multiple_function"}
{"question": "How many goals has Lionel Messi scored for Barcelona till date?", "function": [{"name": "player_stats.get_all_time_goals", "description": "Fetch all-time goals scored by a particular football player for a specified team.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The name of the football player."}, "team_name": {"type": "string", "description": "The name of the team for which player has played."}, "competition": {"type": "string", "description": "Competition for which to fetch stats (optional)."}}, "required": ["player_name", "team_name"]}}, {"name": "team_stats.get_top_scorer", "description": "Fetch the top scorer of a specified football team.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the football team."}, "competition": {"type": "string", "description": "Competition for which to fetch stats (optional)."}}, "required": ["team_name"]}}, {"name": "league_stats.get_top_scorer", "description": "Fetch the top scorer of a specified football league.", "parameters": {"type": "object", "properties": {"league_name": {"type": "string", "description": "The name of the football league."}, "season": {"type": "string", "description": "Season for which to fetch stats (optional)."}}, "required": ["league_name"]}}], "human_eval_answer": "player_stats.get_all_time_goals(player_name=\"Lionel Messi\", team_name=\"Barcelona\")", "question_type": "multiple_function"}
{"question": "Give me the top 10 goal scorers in the UEFA Champions League from Barcelona team.", "function": [{"name": "getTopGoalScorers", "description": "Returns the top goal scorers for a specific competition and team", "parameters": {"type": "object", "properties": {"competition": {"type": "string", "description": "The name of the competition (for example, 'UEFA Champions League')."}, "team": {"type": "string", "description": "The name of the team (for example, 'Barcelona')."}, "number": {"type": "integer", "description": "The number of top goal scorers to retrieve."}}, "required": ["competition", "team", "number"]}}, {"name": "getTopAssists", "description": "Returns the top assist makers for a specific competition and team", "parameters": {"type": "object", "properties": {"competition": {"type": "string", "description": "The name of the competition (for example, 'UEFA Champions League')."}, "team": {"type": "string", "description": "The name of the team (for example, 'Barcelona')."}, "number": {"type": "integer", "description": "The number of top assist makers to retrieve."}}, "required": ["competition", "team", "number"]}}], "human_eval_answer": "getTopGoalScorers(competition='UEFA Champions League', team='Barcelona', number=10)", "question_type": "multiple_function"}
{"question": "Get the soccer scores for Real Madrid games in La Liga for the last 5 rounds.", "function": [{"name": "soccer_scores.get_scores", "description": "Retrieve soccer scores for a specific team and league within a certain range of rounds.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The soccer team whose scores are to be retrieved."}, "league": {"type": "string", "description": "The league in which the team competes."}, "rounds": {"type": "integer", "description": "Number of past rounds for which to retrieve the scores."}}, "required": ["team", "league", "rounds"]}}, {"name": "basketball_scores.get_scores", "description": "Retrieve basketball scores for a specific team and league within a certain range of rounds.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The basketball team whose scores are to be retrieved."}, "league": {"type": "string", "description": "The league in which the team competes."}, "rounds": {"type": "integer", "description": "Number of past rounds for which to retrieve the scores."}}, "required": ["team", "league", "rounds"]}}], "human_eval_answer": "soccer_scores.get_scores(team='Real Madrid', league='La Liga', rounds=5)", "question_type": "multiple_function"}
{"question": "What are some recommended board games for 2 players and strategy based from store BoardGameGeek?", "function": [{"name": "BoardGameGeek.recommend", "description": "Generate game recommendation from BoardGameGeek store based on number of players and category.", "parameters": {"type": "object", "properties": {"numPlayers": {"type": "integer", "description": "The number of players who will play the game."}, "category": {"type": "string", "description": "The preferred category of board game. E.g. strategy, family, party etc."}, "difficulty": {"type": "string", "description": "Preferred difficulty level. E.g. beginner, intermediate, advanced etc. This is an optional parameter."}}, "required": ["numPlayers", "category"]}}, {"name": "AmazonGameStore.recommend", "description": "Generate game recommendation from Amazon Game Store based on number of players and category.", "parameters": {"type": "object", "properties": {"numOfPlayers": {"type": "integer", "description": "The number of players who will play the game."}, "category": {"type": "string", "description": "The preferred category of board game. E.g. strategy, family, party etc."}, "priceRange": {"type": "string", "description": "The price range you are willing to pay for the board game. E.g. $10-$20, $20-$30 etc. This is an optional parameter."}}, "required": ["numOfPlayers", "category"]}}], "human_eval_answer": "BoardGameGeek.recommend(numPlayers=2, category='strategy')", "question_type": "multiple_function"}
{"question": "Find the latest update or patch for the game 'Cyberpunk 2077' on Xbox platform.", "function": [{"name": "games.update.find", "description": "Find the latest updates or patches for a specific game on a specified gaming platform.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform, e.g. Xbox, Playstation, PC."}, "region": {"type": "string", "description": "The region of the update (optional, default is 'global')"}}, "required": ["game", "platform"]}}, {"name": "games.price.find", "description": "Find the current price for a specific game on a specified gaming platform.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform, e.g. Xbox, Playstation, PC."}}, "required": ["game", "platform"]}}, {"name": "games.reviews.find", "description": "Find reviews for a specific game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}, "region": {"type": "string", "description": "The region where the reviews are coming from (optional, default is 'global')"}}, "required": ["game"]}}], "human_eval_answer": "games.update.find(game='Cyberpunk 2077', platform='Xbox')", "question_type": "multiple_function"}
{"question": "Find me the number of active players in the game 'World of Warcraft' in 2020.", "function": [{"name": "video_games.get_player_count", "description": "Retrieves the number of active players for a specified video game and year.", "parameters": {"type": "object", "properties": {"game_title": {"type": "string", "description": "The title of the video game."}, "year": {"type": "integer", "description": "The year in question."}, "platform": {"type": "string", "optional": true, "description": "The gaming platform (e.g. 'PC', 'Xbox', 'Playstation')."}}, "required": ["game_title", "year"]}}, {"name": "video_games.get_sales", "description": "Retrieves the sales figures for a specified video game and year.", "parameters": {"type": "object", "properties": {"game_title": {"type": "string", "description": "The title of the video game."}, "year": {"type": "integer", "description": "The year in question."}, "platform": {"type": "string", "optional": true, "description": "The gaming platform (e.g. 'PC', 'Xbox', 'Playstation')."}}, "required": ["game_title", "year"]}}], "human_eval_answer": "video_games.get_player_count(game_title='World of Warcraft', year=2020)", "question_type": "multiple_function"}
{"question": "Find a healthy lunch recipe under 500 calories that uses chicken and mushrooms.", "function": [{"name": "recipe_search", "description": "Searches for recipes based on a list of ingredients and a maximum caloric value.", "parameters": {"type": "object", "properties": {"ingredients": {"type": "array", "items": {"type": "string"}, "description": "A list of ingredients you want to use in the recipe."}, "calories": {"type": "number", "description": "The maximum number of calories for the recipe."}, "meal": {"type": "string", "description": "Type of the meal for the recipe, it's optional and could be breakfast, lunch or dinner."}}, "required": ["ingredients", "calories"]}}, {"name": "restaurant_search", "description": "Searches for restaurants based on a list of preferred ingredients and maximum calorie count.", "parameters": {"type": "object", "properties": {"ingredients": {"type": "array", "items": {"type": "string"}, "description": "A list of ingredients you prefer in the restaurant's dishes."}, "calories": {"type": "number", "description": "The maximum calorie count you prefer for the restaurant's dishes."}, "meal": {"type": "string", "description": "Type of the meal for the restaurant's dishes, it's optional and could be breakfast, lunch or dinner."}}, "required": ["ingredients", "calories"]}}, {"name": "ingredient_replace", "description": "Replaces an ingredient in a recipe with a substitute, keeping the calories below a certain number.", "parameters": {"type": "object", "properties": {"original_ingredient": {"type": "string", "description": "The ingredient in the recipe to replace."}, "replacement_ingredient": {"type": "string", "description": "The substitute ingredient to replace the original one."}, "calories": {"type": "number", "description": "The maximum number of calories for the recipe after replacement."}}, "required": ["original_ingredient", "replacement_ingredient", "calories"]}}], "human_eval_answer": "recipe_search(ingredients=['chicken', 'mushrooms'], calories=500, meal='lunch')", "question_type": "multiple_function"}
{"question": "I want a seafood restaurant in Seattle that can accommodate a group of 5.", "function": [{"name": "restaurant.find_group", "description": "Find restaurants suitable for groups based on specified criteria such as location and cuisine.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "array", "items": {"type": "string", "enum": ["Seafood", "Italian", "Indian", "Chinese"]}, "description": "Preferred cuisine at the restaurant."}, "group_size": {"type": "integer", "description": "Size of the group that the restaurant should accommodate."}}, "required": ["location", "group_size"]}}, {"name": "events.find_event", "description": "Find events suitable for groups based on specified criteria such as location and event type.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["Concert", "Sports", "Exhibition", "Festival"]}, "description": "Type of event."}, "group_size": {"type": "integer", "description": "Size of the group that the event should accommodate."}}, "required": ["location", "group_size"]}}], "human_eval_answer": "restaurant.find_group(location='Seattle', cuisine=['Seafood'], group_size=5)", "question_type": "multiple_function"}
{"question": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?", "function": [{"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "object", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}, {"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "object", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']."}}, "required": ["cuisine"]}}], "human_eval_answer": "recipe.find(mainIngredient=\"apple pie\", ingredientLimit=5)", "question_type": "multiple_function"}
{"question": "Get me a list of available vegetarian and gluten-free foods at the Walmart near Denver.", "function": [{"name": "walmart.vegan_products", "description": "Get available vegan products at specified Walmart store", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state where the Walmart store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within"}}, "required": ["location"]}}, {"name": "wholefoods.vegan_products", "description": "Get available vegan products at specified Whole Foods store", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state where the Whole Foods store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within"}}, "required": ["location"]}}, {"name": "safeway.vegan_products", "description": "Get available vegan products at specified Safeway store", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state where the Safeway store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within"}}, "required": ["location"]}}], "human_eval_answer": "walmart.vegan_products(location='Denver, CO', categories=['vegetarian', 'gluten-free'])", "question_type": "multiple_function"}
{"question": "Book a deluxe room for 2 nights at the Marriott hotel in New York and add breakfast as an extra service", "function": [{"name": "hotel.book", "description": "Book a hotel room given the location, room type, and number of nights and additional services", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of the hotel."}, "roomType": {"type": "string", "description": "Type of the room to be booked."}, "nights": {"type": "integer", "description": "Number of nights to book the room for."}, "additional_services": {"type": "array", "items": {"type": "string", "description": "Additonal services that can be booked."}, "description": "Additional services to be added."}}, "required": ["location", "roomType", "nights"]}}, {"name": "car.rental", "description": "Rent a car at the specified location for a specific number of days", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of the car rental."}, "days": {"type": "integer", "description": "Number of days for which to rent the car."}, "car_type": {"type": "string", "description": "Type of the car to rent."}, "pick_up": {"type": "string", "description": "Location of where to pick up the car."}}, "required": ["location", "days", "car_type"]}}], "human_eval_answer": "hotel.book(location='New York', roomType='deluxe', nights=2, additional_services=['breakfast'])", "question_type": "multiple_function"}
{"question": "I want to book a suite with queen size bed for 3 nights in Hilton New York. Can you find the pricing for me?", "function": [{"name": "hotel_room_pricing.get", "description": "Get pricing for a specific type of hotel room for specified number of nights.", "parameters": {"type": "object", "properties": {"hotelName": {"type": "string", "description": "The name of the hotel e.g. Hilton New York"}, "roomType": {"type": "string", "description": "Type of the room to be booked."}, "nights": {"type": "integer", "description": "Number of nights to book the room for."}}, "required": ["hotelName", "roomType", "nights"]}}, {"name": "car_rental_pricing.get", "description": "Get pricing for a specific type of rental car for a specified number of days.", "parameters": {"type": "object", "properties": {"rentalCompany": {"type": "string", "description": "The name of the rental company."}, "carType": {"type": "string", "description": "Type of the car to be rented."}, "days": {"type": "integer", "description": "Number of days to rent the car."}}, "required": ["rentalCompany", "carType", "days"]}}, {"name": "flight_ticket_pricing.get", "description": "Get pricing for a specific type of flight ticket for specified number of passengers.", "parameters": {"type": "object", "properties": {"airline": {"type": "string", "description": "The name of the airline."}, "flightClass": {"type": "string", "description": "Class of the flight."}, "passengers": {"type": "integer", "description": "Number of passengers."}}, "required": ["airline", "flightClass", "passengers"]}}], "human_eval_answer": "hotel_room_pricing.get(hotelName=\"Hilton New York\", roomType=\"suite with queen size bed\", nights=3)", "question_type": "multiple_function"}
{"question": "Convert 200 euros to US dollars using current exchange rate.", "function": [{"name": "currency_exchange.convert", "description": "Converts a value from one currency to another using the latest exchange rate.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}, "live_conversion": {"type": "boolean", "description": "If true, use the latest exchange rate for conversion, else use the last known rate."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "unit_conversion.convert", "description": "Converts a value from one unit to another.", "parameters": {"type": "object", "properties": {"value": {"type": "number", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}}, "required": ["value", "from_unit", "to_unit"]}}], "human_eval_answer": "currency_exchange.convert(amount=200, from_currency='EUR', to_currency='USD', live_conversion=true)", "question_type": "multiple_function"}
{"question": "Solve a quadratic equation where a=2, b=6, and c=5", "function": [{"name": "portfolio_future_value", "description": "Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.", "parameters": {"type": "object", "properties": {"stock": {"type": "string", "description": "The ticker symbol of the stock."}, "invested_amount": {"type": "number", "description": "The invested amount in USD."}, "expected_annual_return": {"type": "number", "description": "The expected annual return on investment as a decimal. E.g. 5% = 0.05"}, "years": {"type": "integer", "description": "The number of years for which the investment is made."}}, "required": ["stock", "invested_amount", "expected_annual_return", "years"]}}, {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}, {"name": "solve_quadratic_equation", "description": "Function solves the quadratic equation and returns its roots.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of x squared"}, "b": {"type": "number", "description": "Coefficient of x"}, "c": {"type": "number", "description": "Constant term in the quadratic equation"}}, "required": ["a", "b", "c"]}}], "human_eval_answer": "solve_quadratic_equation(a=2, b=6, c=5)", "question_type": "multiple_function"}
{"question": "What's the area of a circle with a radius of 10?", "function": [{"name": "geometry.area_circle", "description": "Calculate the area of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "units": {"type": "string", "description": "The units in which the radius is measured (defaults to meters).", "default": "meters"}}, "required": ["radius"]}}, {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "object", "properties": {"start_range": {"type": "number", "description": "Start of the range in radians."}, "end_range": {"type": "number", "description": "End of the range in radians."}, "frequency": {"type": "number", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "number", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "number", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}], "human_eval_answer": "geometry.area_circle(radius=10)", "question_type": "multiple_function"}
{"question": "Calculate the circumference of a circle with radius 3", "function": [{"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}, {"name": "geometry.circumference", "description": "Calculate the circumference of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "units": {"type": "string", "description": "Units for the output circumference measurement. Default is 'cm'."}}, "required": ["radius"]}}, {"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}, {"name": "get_current_time", "description": "Retrieve the current time for a specified city and country.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city for which the current time is to be retrieved."}, "country": {"type": "string", "description": "The country where the city is located."}, "format": {"type": "string", "description": "The format in which the time is to be displayed, optional (defaults to 'HH:MM:SS')."}}, "required": ["city", "country"]}}], "human_eval_answer": "geometry.circumference(radius=3)", "question_type": "multiple_function"}
{"question": "Calculate the derivative of the function 2x^2 at x = 1.", "function": [{"name": "calculus.derivative", "description": "Compute the derivative of a function at a specific value.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "value": {"type": "integer", "description": "The value where the derivative needs to be calculated at."}, "function_variable": {"type": "string", "description": "The variable present in the function, for instance x or y, etc."}}, "required": ["function", "value"]}}, {"name": "get_personality_traits", "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.", "parameters": {"type": "object", "properties": {"type": {"type": "string", "description": "The personality type."}, "traits": {"type": "array", "items": {"type": "string", "enum": ["strengths", "weaknesses"]}, "description": "List of traits to be retrieved, default is ['strengths', 'weaknesses']."}}, "required": ["type"]}}], "human_eval_answer": "calculus.derivative(function=\"2*x^2\", value=1, function_variable=\"x\")", "question_type": "multiple_function"}
{"question": "Find the highest common factor of 36 and 24.", "function": [{"name": "music_generator.generate_scale_progression", "description": "Generate a music scale progression in a specific key with a given tempo and duration.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key in which to generate the scale progression."}, "tempo": {"type": "integer", "description": "The tempo of the scale progression in BPM."}, "duration": {"type": "integer", "description": "The duration of each note in beats."}, "scale_type": {"type": "string", "default": "major", "description": "The type of scale to generate. Defaults to 'major'."}}, "required": ["key", "tempo", "duration"]}}, {"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "object", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}], "human_eval_answer": "math.hcf(number1=36, number2=24)", "question_type": "multiple_function"}
{"question": "Find the greatest common divisor (GCD) of 12 and 18", "function": [{"name": "get_top_cases", "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.", "parameters": {"type": "object", "properties": {"field_of_law": {"type": "string", "description": "The specific field of law e.g., constitutional law, criminal law, etc."}, "top_number": {"type": "integer", "description": "The number of top cases to retrieve."}, "country": {"type": "string", "description": "The country where the law cases should be retrieved from. Default is US."}}, "required": ["field_of_law", "top_number"]}}, {"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}], "human_eval_answer": "math.gcd(num1=12, num2=18)", "question_type": "multiple_function"}
{"question": "Calculate the displacement of a car given the initial velocity of 10 and acceleeration of 9.8 within 5 seconds.", "function": [{"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}, {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "object", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "object", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "time": {"type": "number", "description": "The time in seconds that the object has been in motion."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2.", "default": 0}}, "required": ["initial_velocity", "time"]}}], "human_eval_answer": "calculate_displacement(initial_velocity=10, time=5, acceleration=9.8)", "question_type": "multiple_function"}
{"question": "Calculate the final speed of an object dropped from 100 m without air resistance.", "function": [{"name": "court_case.search", "description": "Retrieves details about a court case using its docket number and location.", "parameters": {"type": "object", "properties": {"docket_number": {"type": "string", "description": "The docket number for the case."}, "location": {"type": "string", "description": "The location where the case is registered, in the format: city, state, e.g., Dallas, TX."}, "full_text": {"type": "boolean", "default": "false", "description": "Option to return the full text of the case ruling."}}, "required": ["docket_number", "location"]}}, {"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Defaults to global if not specified"}}, "required": ["event"]}}, {"name": "calculate_final_speed", "description": "Calculate the final speed of an object dropped from a certain height without air resistance.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "height": {"type": "number", "description": "The height from which the object is dropped."}, "gravity": {"type": "number", "description": "The gravitational acceleration. Default is 9.8 m/s^2."}}, "required": ["initial_velocity", "height"]}}], "human_eval_answer": "calculate_final_speed(initial_velocity=0, height=100)", "question_type": "multiple_function"}
{"question": "Find the shortest driving distance between New York City and Washington D.C.", "function": [{"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "object", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}, {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "Starting point of the journey."}, "destination": {"type": "string", "description": "End point of the journey."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is kilometers)."}}, "required": ["origin", "destination"]}}, {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}, {"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "object", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}], "human_eval_answer": "get_shortest_driving_distance(origin='New York City', destination='Washington D.C.')", "question_type": "multiple_function"}
{"question": "Calculate the magnetic field produced at the center of a circular loop carrying current of 5 Ampere with a radius of 4 meters", "function": [{"name": "calculate_magnetic_field", "description": "Calculate the magnetic field produced at the center of a circular loop carrying current.", "parameters": {"type": "object", "properties": {"current": {"type": "number", "description": "The current through the circular loop in Amperes."}, "radius": {"type": "number", "description": "The radius of the circular loop in meters."}, "permeability": {"type": "number", "description": "The magnetic permeability. Default is permeability in free space."}}, "required": ["current", "radius"]}}, {"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}, {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter."}}, "required": ["company_name", "year"]}}], "human_eval_answer": "calculate_magnetic_field(current=5, radius=4)", "question_type": "multiple_function"}
{"question": "Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs.", "function": [{"name": "group_dynamics.pattern", "description": "Examine the social dynamics and interactions within a group based on the personality traits and group size.", "parameters": {"type": "object", "properties": {"total": {"type": "integer", "description": "The total group size."}, "extroverts": {"type": "integer", "description": "The number of extroverted members in the group."}, "introverts": {"type": "integer", "description": "The number of introverted members in the group."}}, "required": ["total", "extroverts", "introverts"]}}, {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "object", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}, {"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "object", "properties": {"quantity": {"type": "number", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}, {"name": "calculate_electric_field_strength", "description": "Calculate the electric field strength at a certain distance from a point charge.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge in Coulombs."}, "distance": {"type": "number", "description": "The distance from the charge in meters."}, "medium": {"type": "string", "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."}}, "required": ["charge", "distance"]}}], "human_eval_answer": "calculate_electric_field_strength(charge=0.01, distance=4)", "question_type": "multiple_function"}
{"question": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "function": [{"name": "calculate_density", "description": "Calculate the density of a substance based on its mass and volume.", "parameters": {"type": "object", "properties": {"mass": {"type": "number", "description": "The mass of the substance in kilograms."}, "volume": {"type": "number", "description": "The volume of the substance in cubic meters."}, "unit": {"type": "string", "description": "The unit of density. Default is kg/m\u00b3"}}, "required": ["mass", "volume"]}}, {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "object", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}], "human_eval_answer": "calculate_density(mass=45, volume=15)", "question_type": "multiple_function"}
{"question": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.", "function": [{"name": "calc_heat_capacity", "description": "Calculate the heat capacity at constant pressure of air using its temperature and volume.", "parameters": {"type": "object", "properties": {"temp": {"type": "number", "description": "The temperature of the gas in Kelvin."}, "volume": {"type": "number", "description": "The volume of the gas in m^3."}, "gas": {"type": "string", "description": "Type of gas, with air as default."}}, "required": ["temp", "volume"]}}, {"name": "calculate_discounted_cash_flow", "description": "Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.", "parameters": {"type": "object", "properties": {"coupon_payment": {"type": "number", "description": "The annual coupon payment."}, "period": {"type": "integer", "description": "The time frame in years for which coupon payment is made."}, "discount_rate": {"type": "number", "description": "The discount rate."}, "face_value": {"type": "number", "description": "The face value of the bond, default is $1000."}}, "required": ["coupon_payment", "period", "discount_rate"]}}], "human_eval_answer": "calc_heat_capacity(temp=298, volume=10, gas='air')", "question_type": "multiple_function"}
{"question": "What are the names of proteins found in the plasma membrane?", "function": [{"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "object", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}, {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold."}}, "required": ["location", "art_form"]}}, {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "object", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}], "human_eval_answer": "cellbio.get_proteins(cell_compartment=\"plasma membrane\")", "question_type": "multiple_function"}
{"question": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "function": [{"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}, {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "object", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}], "human_eval_answer": "mutation_type.find(snp_id='rs6034464')", "question_type": "multiple_function"}
{"question": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?", "function": [{"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "object", "properties": {"number": {"type": "number", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}, {"name": "find_flute", "description": "Locate a flute for sale based on specific requirements.", "parameters": {"type": "object", "properties": {"brand": {"type": "string", "description": "The brand of the flute. Example, 'Yamaha'"}, "specs": {"type": "array", "items": {"type": "string", "enum": ["open hole", "C foot", "silver headjoint"]}, "description": "The specifications of the flute desired."}}, "required": ["brand", "specs"]}}, {"name": "calculate_genotype_frequency", "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.", "parameters": {"type": "object", "properties": {"allele_frequency": {"type": "number", "description": "The frequency of the dominant allele in the population."}, "genotype": {"type": "string", "description": "The genotype which frequency is needed, default is homozygous dominant. ", "enum": ["AA", "Aa", "aa"]}}, "required": ["allele_frequency", "genotype"]}}], "human_eval_answer": "calculate_genotype_frequency(allele_frequency=0.3, genotype='AA')", "question_type": "multiple_function"}
{"question": "Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact.", "function": [{"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}, {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}], "human_eval_answer": "forest_growth_forecast(location='Yellowstone National Park', years=5, include_human_impact=true)", "question_type": "multiple_function"}
{"question": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7.", "function": [{"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "object", "properties": {"trait_values": {"type": "array", "items": {"type": "number"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "number"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}, {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer", "maximum": 400}}, "required": ["city", "specialty", "fee"]}}, {"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "object", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list."}}, "required": ["loc", "product_list"]}}], "human_eval_answer": "calculate_fitness(trait_values=[0.8, 0.7], trait_contributions=[0.4, 0.6])", "question_type": "multiple_function"}
{"question": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model", "function": [{"name": "modify_painting", "description": "Modify an existing painting's attributes such as size, medium, and color.", "parameters": {"type": "object", "properties": {"size": {"type": "string", "description": "The size of the painting in inches, width by height."}, "medium": {"type": "string", "description": "The medium of the painting, such as oil, acrylic, etc."}, "dominant_color": {"type": "string", "description": "The dominant color of the painting."}}, "required": ["size", "medium"]}}, {"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}, {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "object", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}], "human_eval_answer": "prediction.evolution(species='Homo Sapiens', years=50, model='Darwin')", "question_type": "multiple_function"}
{"question": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.", "function": [{"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The specific location or area."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free.", "default": "None"}}, "required": ["location", "food_type", "number"]}}, {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter."}}, "required": ["team_name", "num_matches"]}}, {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}, {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "object", "properties": {"budget": {"type": "number", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter."}}, "required": ["budget", "type"]}}], "human_eval_answer": "find_restaurants(location='Manhattan', food_type='Thai', number=5, dietary_requirements=['vegan'])", "question_type": "multiple_function"}
{"question": "Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm.", "function": [{"name": "celebrity_net_worth.get", "description": "Get the total net worth of a sports celebrity based on most recent data.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The full name of the sports celebrity."}, "currency": {"type": "string", "description": "The currency in which the net worth will be returned. Default is 'USD'."}}, "required": ["name", "currency"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) of a person.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "Weight of the person in kilograms."}, "height": {"type": "number", "description": "Height of the person in centimeters."}, "unit": {"type": "string", "description": "Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'."}}, "required": ["weight", "height"]}}], "human_eval_answer": "calculate_bmi(weight=85, height=180)", "question_type": "multiple_function"}
{"question": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall.", "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel."}}, "required": ["location", "room_type", "duration", "start_date"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}, {"name": "calculate_BMI", "description": "Calculate the Body Mass Index (BMI) given a person's weight and height.", "parameters": {"type": "object", "properties": {"weight_kg": {"type": "number", "description": "The weight of the person in kilograms."}, "height_m": {"type": "number", "description": "The height of the person in meters."}}, "required": ["weight_kg", "height_m"]}}], "human_eval_answer": "calculate_BMI(weight_kg=70, height_m=1.75)", "question_type": "multiple_function"}
{"question": "Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database.", "function": [{"name": "imdb.find_movies_by_actor", "description": "Searches the database to find all movies by a specific actor within a certain year.", "parameters": {"type": "object", "properties": {"actor_name": {"type": "string", "description": "The name of the actor."}, "year": {"type": "integer", "description": "The specific year to search in."}, "category": {"type": "string", "description": "The category of the film (e.g. Drama, Comedy, etc). This parameter is optional."}}, "required": ["actor_name", "year"]}}, {"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types."}}, "required": ["company_name", "location", "year"]}}, {"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "object", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false"}}, "required": ["departure_location", "destination_location", "date"]}}], "human_eval_answer": "imdb.find_movies_by_actor(actor_name='Leonardo DiCaprio', year=2010)", "question_type": "multiple_function"}
{"question": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "object", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "object", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed."}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}, {"name": "calculate_return_on_investment", "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.", "parameters": {"type": "object", "properties": {"purchase_price": {"type": "number", "description": "The price the stock was bought at."}, "sale_price": {"type": "number", "description": "The price the stock was sold at."}, "dividend": {"type": "number", "description": "Any dividends received from the stock.", "default": 0}}, "required": ["purchase_price", "sale_price"]}}, {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "object", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}, {"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}], "human_eval_answer": "database.query(table='users', conditions=[{'field':'age', 'operation':'>', 'value':'25'}, {'field':'job', 'operation':'=', 'value':'engineer'}])", "question_type": "multiple_function"}
{"question": "How much time will it take for the light to reach earth from a star 4 light years away?", "function": [{"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}, {"name": "latest_exchange_rate", "description": "Retrieve the latest exchange rate between two specified currencies.", "parameters": {"type": "object", "properties": {"source_currency": {"type": "string", "description": "The currency you are converting from."}, "target_currency": {"type": "string", "description": "The currency you are converting to."}, "amount": {"type": "number", "description": "The amount to be converted. If omitted, exchange rate of 1 unit source currency is given"}}, "required": ["source_currency", "target_currency"]}}, {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}, {"name": "light_travel_time", "description": "Calculate the time taken for light to travel from a celestial body to another.", "parameters": {"type": "object", "properties": {"distance_in_light_years": {"type": "number", "description": "The distance between the two celestial bodies in light years."}, "speed_of_light": {"type": "number", "description": "The speed of light in vacuum, in m/s. Default value is 299792458 m/s."}}, "required": ["distance_in_light_years"]}}], "human_eval_answer": "light_travel_time(distance_in_light_years=4)", "question_type": "multiple_function"}
{"question": "Calculate the area of a triangle with base 6 and height 10.", "function": [{"name": "geometry.area_triangle", "description": "Calculate the area of a triangle.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle from the base."}, "unit": {"type": "string", "description": "The measurement unit for the area. Defaults to square meters."}}, "required": ["base", "height"]}}, {"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "object", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}, {"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "object", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid."}}, "required": ["start", "end"]}}], "human_eval_answer": "geometry.area_triangle(base=6, height=10)", "question_type": "multiple_function"}
{"question": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization.", "function": [{"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "object", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}, {"name": "travel_itinerary_generator", "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.", "parameters": {"type": "object", "properties": {"destination": {"type": "string", "description": "Destination city of the trip."}, "days": {"type": "integer", "description": "Number of days for the trip."}, "daily_budget": {"type": "number", "description": "The maximum daily budget for the trip."}, "exploration_type": {"type": "string", "enum": ["nature", "urban", "history", "culture"], "description": "The preferred exploration type.", "default": "urban"}}, "required": ["destination", "days", "daily_budget"]}}, {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "object", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}, {"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "object", "properties": {"quantity": {"type": "number", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}], "human_eval_answer": "run_linear_regression(predictors=['Age', 'Income', 'Education'], target='Purchase_Amount', standardize=True)", "question_type": "multiple_function"}
{"question": "Calculate the probability of drawing a king from a deck of cards.", "function": [{"name": "predict_house_price", "description": "Predict house price based on area, number of rooms and year of construction.", "parameters": {"type": "object", "properties": {"area": {"type": "integer", "description": "Area of the house in square feet."}, "rooms": {"type": "integer", "description": "Number of rooms in the house."}, "year": {"type": "integer", "description": "Year when the house was constructed."}, "location": {"type": "string", "description": "The location or city of the house."}}, "required": ["area", "rooms", "year", "location"]}}, {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "object", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}, {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "object", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}], "human_eval_answer": "calculate_probability(total_outcomes=52, favorable_outcomes=4)", "question_type": "multiple_function"}
{"question": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?", "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The base number."}, "exponent": {"type": "number", "description": "The exponent."}, "mod": {"type": "number", "description": "The modulus. Default is None. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}, {"name": "probabilities.calculate_single", "description": "Calculate the probability of an event.", "parameters": {"type": "object", "properties": {"total_outcomes": {"type": "integer", "description": "The total number of outcomes."}, "event_outcomes": {"type": "integer", "description": "The number of outcomes where the event occurs."}, "round": {"type": "integer", "description": "Round the answer to a specified number of decimal places. Defaults to 2."}}, "required": ["total_outcomes", "event_outcomes"]}}, {"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "object", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}], "human_eval_answer": "probabilities.calculate_single(total_outcomes=52, event_outcomes=4)", "question_type": "multiple_function"}
{"question": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.", "function": [{"name": "run_two_sample_ttest", "description": "Runs a two sample t-test for two given data groups.", "parameters": {"type": "object", "properties": {"group1": {"type": "array", "items": {"type": "integer"}, "description": "First group of data points."}, "group2": {"type": "array", "items": {"type": "integer"}, "description": "Second group of data points."}, "equal_variance": {"type": "boolean", "description": "Assumption about whether the two samples have equal variance.", "default": true}}, "required": ["group1", "group2"]}}, {"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant."}}, "required": ["location", "cuisine"]}}, {"name": "get_personality_traits", "description": "Retrieve the common personality traits of people based on their hobbies or activities.", "parameters": {"type": "object", "properties": {"hobby": {"type": "string", "description": "The hobby or activity of interest."}, "trait_count": {"type": "integer", "description": "The number of top traits to return, default is 5"}}, "required": ["hobby"]}}], "human_eval_answer": "run_two_sample_ttest(group1=[3, 4, 5, 6, 4], group2=[7, 8, 9, 8, 7], equal_variance=true)", "question_type": "multiple_function"}
{"question": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45.", "function": [{"name": "geometry.area_triangle", "description": "Calculate the area of a triangle.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle from the base."}, "unit": {"type": "string", "description": "The measurement unit for the area. Defaults to square meters."}}, "required": ["base", "height"]}}, {"name": "t_test", "description": "Perform a statistical t-test to check if the means of two independent datasets are statistically different.", "parameters": {"type": "object", "properties": {"dataset_A": {"type": "array", "items": {"type": "integer"}, "description": "Dataset A for comparison."}, "dataset_B": {"type": "array", "items": {"type": "integer"}, "description": "Dataset B for comparison."}, "alpha": {"type": "float", "description": "Significance level for the test. Default is 0.05."}}, "required": ["dataset_A", "dataset_B"]}}, {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}], "human_eval_answer": "t_test(dataset_A=[12, 24, 36], dataset_B=[15, 30, 45])", "question_type": "multiple_function"}
{"question": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?", "function": [{"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "object", "properties": {"total_payout": {"type": "number", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}, {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "object", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}, {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "object", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}], "human_eval_answer": "finance.calculate_quarterly_dividend_per_share(total_payout=50_000_000,outstanding_shares=100_000_000)", "question_type": "multiple_function"}
{"question": "Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000.", "function": [{"name": "calculate_return_on_equity", "description": "Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.", "parameters": {"type": "object", "properties": {"net_income": {"type": "number", "description": "The company's net income."}, "shareholder_equity": {"type": "number", "description": "The company's total shareholder's equity."}, "dividends_paid": {"type": "number", "description": "The total dividends paid by the company. Optional. If not given, assumes it's 0."}}, "required": ["net_income", "shareholder_equity"]}}, {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "object", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, {"name": "law_case_search.find_historical", "description": "Search for a historical law case based on specific criteria like the subject and year.", "parameters": {"type": "object", "properties": {"subject": {"type": "string", "description": "The subject matter of the case, e.g., 'fraud'"}, "from_year": {"type": "integer", "description": "The start year for the range of the case. The case should happen after this year."}, "to_year": {"type": "integer", "description": "The end year for the range of the case. The case should happen before this year."}}, "required": ["subject", "from_year", "to_year"]}}, {"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}], "human_eval_answer": "calculate_return_on_equity(net_income=2000000, shareholder_equity=10000000, dividends_paid=200000)", "question_type": "multiple_function"}
{"question": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "function": [{"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "number", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "number", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}, {"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types."}}, "required": ["company_name", "location", "year"]}}], "human_eval_answer": "compound_interest(principal=10000, annual_rate=0.05, compounding_freq='monthly', time_in_years=5)", "question_type": "multiple_function"}
{"question": "Calculate the Compound Annual Growth Rate (CAGR) for an initial investment of $2000, final value of $3000 in a period of 4 years.", "function": [{"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, {"name": "solve_quadratic", "description": "Find the roots of a quadratic equation. Returns both roots.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "Coefficient of x\u00b2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, {"name": "calculate_cagr", "description": "Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.", "parameters": {"type": "object", "properties": {"initial_value": {"type": "number", "description": "The initial investment value."}, "final_value": {"type": "number", "description": "The final investment value."}, "period_in_years": {"type": "integer", "description": "The period of the investment in years."}}, "required": ["initial_value", "final_value", "period_in_years"]}}], "human_eval_answer": "calculate_cagr(initial_value=2000, final_value=3000, period_in_years=4)", "question_type": "multiple_function"}
{"question": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days.", "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference."}}, "required": ["location"]}}, {"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "object", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}, {"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "object", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}], "human_eval_answer": "market_performance.get_data(indexes=['S&P 500', 'Dow Jones'], days=5)", "question_type": "multiple_function"}
{"question": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.", "function": [{"name": "finance.calculate_future_value", "description": "Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial investment amount."}, "rate_of_return": {"type": "number", "description": "The annual rate of return."}, "years": {"type": "integer", "description": "The time frame of the investment in years."}, "contribution": {"type": "number", "description": "Optional: Additional regular contributions. Default is 0."}}, "required": ["initial_investment", "rate_of_return", "years"]}}, {"name": "create_histogram", "description": "Create a histogram based on provided data.", "parameters": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "number"}, "description": "The data for which histogram needs to be plotted."}, "bins": {"type": "number", "description": "The number of equal-width bins in the range. Default is 10."}}, "required": ["data", "bins"]}}, {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "object", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}], "human_eval_answer": "finance.calculate_future_value(initial_investment=20000, rate_of_return=0.08, years=5)", "question_type": "multiple_function"}
{"question": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years.", "function": [{"name": "geometry.calculate_area_circle", "description": "Calculate the area of a circle given its radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "unit": {"type": "string", "description": "The measurement unit of the radius (optional parameter, default is 'units')."}}, "required": ["radius"]}}, {"name": "calculate_mutual_fund_balance", "description": "Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.", "parameters": {"type": "object", "properties": {"investment_amount": {"type": "number", "description": "The initial total amount invested in the fund."}, "annual_yield": {"type": "number", "description": "The annual yield rate of the fund."}, "years": {"type": "integer", "description": "The period of time for the fund to mature."}}, "required": ["investment_amount", "annual_yield", "years"]}}], "human_eval_answer": "calculate_mutual_fund_balance(investment_amount=50000, annual_yield=0.05, years=3)", "question_type": "multiple_function"}
{"question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": [{"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "object", "properties": {"principle": {"type": "number", "description": "The initial amount of the investment."}, "interest_rate": {"type": "number", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}, {"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}, "region": {"type": "string", "description": "The geographical region in which the game is being played (Optional)."}}, "required": ["game", "season"]}}, {"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "number", "description": "The population of the country."}, "land_area": {"type": "number", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}], "human_eval_answer": "crime_record.get_record(case_number='CA123456', county='San Diego', details=True)", "question_type": "multiple_function"}
{"question": "Who was the victim in the case docket numbered 2022/AL2562 in California?", "function": [{"name": "calculate_triangle_area", "description": "Calculate the area of a triangle given its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle."}, "unit": {"type": "string", "description": "The unit of measure (defaults to 'units' if not specified)"}}, "required": ["base", "height"]}}, {"name": "get_case_info", "description": "Retrieve case details using a specific case docket number and court location.", "parameters": {"type": "object", "properties": {"docket": {"type": "string", "description": "Docket number for the specific court case."}, "court": {"type": "string", "description": "Court in which the case was heard."}, "info_type": {"type": "string", "description": "Specify the information type needed for the case. i.e., victim, accused, verdict etc."}}, "required": ["docket", "court", "info_type"]}}], "human_eval_answer": "get_case_info(docket=\"2022/AL2562\", court=\"California\", info_type=\"victim\")", "question_type": "multiple_function"}
{"question": "Provide me the official crime rate of violent crime in San Francisco in 2020.", "function": [{"name": "get_crime_rate", "description": "Retrieve the official crime rate of a city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The name of the city."}, "state": {"type": "string", "description": "The state where the city is located."}, "type": {"type": "string", "description": "Optional. The type of crime."}, "year": {"type": "integer", "description": "Optional. The year for the crime rate data."}}, "required": ["city", "state"]}}, {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "object", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "object", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}], "human_eval_answer": "get_crime_rate(city=\"San Francisco\", state=\"California\", type=\"violent\", year=2020)", "question_type": "multiple_function"}
{"question": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.", "function": [{"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}, {"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed."}, "location": {"type": "string", "description": "Location where the lawsuit was filed."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}, {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "object", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional)."}}, "required": ["items", "quantities"]}}], "human_eval_answer": "lawsuit_search(company='Google', start_date='2021-01', location='California')", "question_type": "multiple_function"}
{"question": "How to obtain the detailed case information of the R vs Adams legal case?", "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "object", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}, {"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "object", "properties": {"investment_amount": {"type": "number", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "number", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}, {"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "object", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. Default is false."}}, "required": ["case_id", "details"]}}], "human_eval_answer": "legal_case.fetch(case_id='R vs Adams', details=True)", "question_type": "multiple_function"}
{"question": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "function": [{"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}, {"name": "game_score.highest", "description": "Retrieve the highest score achieved by any player in a specific game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the online game."}, "platform": {"type": "string", "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"}, "region": {"type": "string", "description": "The geographic region of the player. Defaults to 'Global'"}}, "required": ["game", "platform"]}}, {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter."}}, "required": ["company_name", "year"]}}, {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "object", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}], "human_eval_answer": "lawsuit_details.find(company_name='Apple Inc.', year=2010, case_type='Patent')", "question_type": "multiple_function"}
{"question": "Find the lawsuits filed against the company Google in California in the year 2020.", "function": [{"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types."}}, "required": ["company_name", "location", "year"]}}, {"name": "hilton_hotel.check_availability", "description": "Check hotel availability for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to check hotel availability."}, "check_in_date": {"type": "string", "description": "The check-in date in the format YYYY-MM-DD."}, "check_out_date": {"type": "string", "description": "The check-out date in the format YYYY-MM-DD."}, "no_of_adults": {"type": "integer", "description": "The number of adults for the hotel booking."}, "hotel_chain": {"type": "string", "description": "The hotel chain where you want to book the hotel.", "default": "Hilton"}}, "required": ["location", "check_in_date", "check_out_date", "no_of_adults"]}}], "human_eval_answer": "lawsuits_search(company_name='Google', location='California', year=2020)", "question_type": "multiple_function"}
{"question": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed.", "function": [{"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey."}}, "required": ["start_location", "end_location"]}}, {"name": "lawsuit.check_case", "description": "Verify the details of a lawsuit case and check its status using case ID.", "parameters": {"type": "object", "properties": {"case_id": {"type": "integer", "description": "The identification number of the lawsuit case."}, "closed_status": {"type": "boolean", "description": "The status of the lawsuit case to be verified."}}, "required": ["case_id", "closed_status"]}}, {"name": "get_protein_sequence", "description": "Retrieve the protein sequence encoded by a human gene.", "parameters": {"type": "object", "properties": {"gene": {"type": "string", "description": "The human gene of interest."}, "species": {"type": "string", "description": "The species for which the gene is to be analyzed.", "default": "Homo sapiens"}}, "required": ["gene"]}}], "human_eval_answer": "lawsuit.check_case(case_id=1234, closed_status=True)", "question_type": "multiple_function"}
{"question": "What is the humidity level in Miami, Florida in the upcoming 7 days?", "function": [{"name": "get_team_score", "description": "Retrieves the latest game score, individual player stats, and team stats for a specified sports team.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The league that the team is part of."}, "include_player_stats": {"type": "boolean", "default": false, "description": "Indicates if individual player statistics should be included in the result. Default is false."}}, "required": ["team_name", "league"]}}, {"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Optional parameter."}}, "required": ["location", "days"]}}], "human_eval_answer": "weather.humidity_forecast(location=\"Miami\", days=7)", "question_type": "multiple_function"}
{"question": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437).", "function": [{"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "class"]}}, {"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "genre": {"type": "string", "description": "Genre of music to be played at the concert."}}, "required": ["location", "genre"]}}, {"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "object", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, {"name": "calculate_slope_gradient", "description": "Calculate the slope gradient between two geographical coordinates.", "parameters": {"type": "object", "properties": {"point1": {"type": "array", "items": {"type": "number"}, "description": "The geographic coordinates for the first point [Latitude, Longitude]."}, "point2": {"type": "array", "items": {"type": "number"}, "description": "The geographic coordinates for the second point [Latitude, Longitude]."}, "unit": {"type": "string", "enum": ["degree", "percent", "ratio"], "description": "The unit for the slope gradient. Default is 'degree'."}}, "required": ["point1", "point2"]}}], "human_eval_answer": "calculate_slope_gradient(point1=[40.7128, -74.0060], point2=[34.0522, -118.2437], unit='degree')", "question_type": "multiple_function"}
{"question": "What is the air quality index in London 2022/08/16?", "function": [{"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season."}}, "required": ["team", "league"]}}, {"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date you want to get the air quality index for. Default is today."}}, "required": ["location", "date"]}}], "human_eval_answer": "air_quality(location='London', date='2022-08-16')", "question_type": "multiple_function"}
{"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year?", "function": [{"name": "grocery_store.find_best", "description": "Find the closest high-rated grocery stores based on certain product availability.", "parameters": {"type": "object", "properties": {"my_location": {"type": "string", "description": "The current location of the user."}, "rating": {"type": "float", "description": "The minimum required store rating."}, "products": {"type": "array", "items": {"type": "string"}, "description": "Required products in a list."}}, "required": ["my_location", "products"]}}, {"name": "sculpture.get_details", "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "The artist who made the sculpture."}, "title": {"type": "string", "description": "The title of the sculpture."}, "detail": {"type": "string", "description": "The specific detail wanted about the sculpture. Default is 'general information'."}}, "required": ["artist", "title"]}}, {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "number", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "number", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}], "human_eval_answer": "calculate_emissions(distance=12000, fuel_type='gas', fuel_efficiency=25)", "question_type": "multiple_function"}
{"question": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle.", "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "number", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}, {"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}], "human_eval_answer": "restaurant.find_nearby(location=\"Seattle\", cuisine=\"Chinese\", max_distance=10)", "question_type": "multiple_function"}
{"question": "Get me the directions from New York to Los Angeles avoiding highways and toll roads.", "function": [{"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. (optional)"}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false. (optional)"}}, "required": ["location"]}}, {"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "object", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid."}}, "required": ["start", "end"]}}], "human_eval_answer": "map_service.get_directions(start='New York', end='Los Angeles', avoid=['highways', 'tolls'])", "question_type": "multiple_function"}
{"question": "Give me detail information about stocks of Apple Inc.", "function": [{"name": "get_current_time", "description": "Retrieve the current time in a specific time zone.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the city."}, "country": {"type": "string", "description": "The name of the country."}, "timezone": {"type": "string", "description": "The optional timezone to get current time."}}, "required": ["location", "country"]}}, {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}], "human_eval_answer": "get_stock_info(company_name='Apple Inc.', detail_level='detailed')", "question_type": "multiple_function"}
{"question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "object", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}], "human_eval_answer": "sentiment_analysis(text='I love the food here! It is always fresh and delicious.', language='english')", "question_type": "multiple_function"}
{"question": "Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1.", "function": [{"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "object", "properties": {"charge1": {"type": "number", "description": "The quantity of charge on the first body."}, "charge2": {"type": "number", "description": "The quantity of charge on the second body."}, "distance": {"type": "number", "description": "The distance between the two bodies."}, "constant": {"type": "number", "description": "The value of the electrostatic constant."}}, "required": ["charge1", "charge2", "distance"]}}, {"name": "grocery_store.find_best", "description": "Find the closest high-rated grocery stores based on certain product availability.", "parameters": {"type": "object", "properties": {"my_location": {"type": "string", "description": "The current location of the user."}, "rating": {"type": "float", "description": "The minimum required store rating."}, "products": {"type": "array", "items": {"type": "string"}, "description": "Required products in a list."}}, "required": ["my_location", "products"]}}, {"name": "calculate_neuronal_activity", "description": "Calculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it.", "parameters": {"type": "object", "properties": {"input_synaptic_rate": {"type": "number", "description": "The synaptic input rate, usually represented as number of inputs per second."}, "weight": {"type": "number", "description": "The weight of the input, denoting its influence on the neuron's state."}, "decay_rate": {"type": "number", "description": "The rate at which the neuron's potential decays in the absence of inputs."}}, "required": ["input_synaptic_rate", "decay_rate"], "optional": ["weight"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "time": {"type": "number", "description": "The time in seconds that the object has been in motion."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2.", "default": 0}}, "required": ["initial_velocity", "time"]}}], "human_eval_answer": "calculate_neuronal_activity(input_synaptic_rate=200.0, weight=0.5, decay_rate=0.1)", "question_type": "multiple_function"}
{"question": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics.", "function": [{"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "object", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}, {"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "object", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic, Optional."}, "region": {"type": "string", "description": "Region of interest for twitter search, Optional."}}, "required": ["topic"]}}, {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}], "human_eval_answer": "social_media_analytics.most_followed(topic='psychology', sub_topics=['behaviour', 'group dynamics'])", "question_type": "multiple_function"}
{"question": "Provide key war events in German history from 1871 to 1945.", "function": [{"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. If none is provided, all types will be considered."}}, "required": ["country", "start_year", "end_year"]}}, {"name": "get_sculpture_value", "description": "Retrieve the current market value of a particular sculpture by a specific artist.", "parameters": {"type": "object", "properties": {"sculpture": {"type": "string", "description": "The name of the sculpture."}, "artist": {"type": "string", "description": "The name of the artist who created the sculpture."}, "year": {"type": "integer", "description": "The year the sculpture was created. This is optional and is not required for all sculptures."}}, "required": ["sculpture", "artist"]}}], "human_eval_answer": "history.get_key_events(country='Germany', start_year=1871, end_year=1945, event_type=['War'])", "question_type": "multiple_function"}
{"question": "When was the signing of the Treaty of Lisbon?", "function": [{"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "number", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "number", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}, {"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "object", "properties": {"initial_temp": {"type": "number", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "number", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "number", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}, {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Defaults to global if not specified"}}, "required": ["event"]}}], "human_eval_answer": "get_event_date(event='Treaty of Lisbon')", "question_type": "multiple_function"}
{"question": "Who was the full name of the president of the United States in 1861?", "function": [{"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "object", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "object", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}, {"name": "US_president.in_year", "description": "Retrieve the name of the U.S. president in a given year.", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year in question."}, "full_name": {"type": "boolean", "default": true, "description": "Option to return full name with middle initial, if applicable."}}, "required": ["year"]}}, {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "object", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "object", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}}, "required": ["rank", "suit"]}}], "human_eval_answer": "US_president.in_year(year=1861, full_name=true)", "question_type": "multiple_function"}
{"question": "Who discovered the neutron? Give me detail information.", "function": [{"name": "get_discoverer", "description": "Get the person or team who made a particular scientific discovery", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The discovery for which the discoverer's information is needed."}, "detail": {"type": "boolean", "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."}}, "required": ["discovery", "detail"]}}, {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "Weight of the person in lbs."}, "height": {"type": "number", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}, {"name": "museum_working_hours.get", "description": "Get the working hours of a museum in a specific location.", "parameters": {"type": "object", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The location of the museum."}, "day": {"type": "string", "description": "Specific day of the week. Optional parameter"}}, "required": ["museum", "location"]}}], "human_eval_answer": "get_discoverer(discovery='neutron', detail=true)", "question_type": "multiple_function"}
{"question": "What was Albert Einstein's contribution to science on March 17, 1915?", "function": [{"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}, {"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "object", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields."}}, "required": ["scientist", "date"]}}, {"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "object", "properties": {"first_note_frequency": {"type": "number", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "number", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "number", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}], "human_eval_answer": "historical_contrib.get_contrib(scientist='Albert Einstein', date='1915-03-17')", "question_type": "multiple_function"}
{"question": "What is the earliest reference of Jesus Christ in history from historical record?", "function": [{"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season if not provided."}}, "required": ["team", "league"]}}, {"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}], "human_eval_answer": "get_earliest_reference(name='Jesus Christ', source='historical records')", "question_type": "multiple_function"}
{"question": "Get the biography and main contributions of Pope Innocent III.", "function": [{"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}, {"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "object", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known."}}, "required": ["author", "work_title"]}}, {"name": "portfolio_future_value", "description": "Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.", "parameters": {"type": "object", "properties": {"stock": {"type": "string", "description": "The ticker symbol of the stock."}, "invested_amount": {"type": "number", "description": "The invested amount in USD."}, "expected_annual_return": {"type": "number", "description": "The expected annual return on investment as a decimal. E.g. 5% = 0.05"}, "years": {"type": "integer", "description": "The number of years for which the investment is made."}}, "required": ["stock", "invested_amount", "expected_annual_return", "years"]}}, {"name": "religious_history.get_papal_biography", "description": "Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.", "parameters": {"type": "object", "properties": {"papal_name": {"type": "string", "description": "The papal name of the Pope."}, "include_contributions": {"type": "boolean", "default": false, "description": "Include main contributions of the Pope in the response if true."}}, "required": ["papal_name", "include_contributions"]}}], "human_eval_answer": "religious_history.get_papal_biography(papal_name='Innocent III', include_contributions=True)", "question_type": "multiple_function"}
{"question": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.", "function": [{"name": "prob_dist.binomial", "description": "Compute the probability of having 'success' outcome from binomial distribution.", "parameters": {"type": "object", "properties": {"trials": {"type": "integer", "description": "The number of independent experiments."}, "successes": {"type": "integer", "description": "The number of success events."}, "p": {"type": "number", "description": "The probability of success on any given trial, defaults to 0.5"}}, "required": ["trials", "successes"]}}, {"name": "calculate_paint_needed", "description": "Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.", "parameters": {"type": "object", "properties": {"coverage_rate": {"type": "integer", "description": "The area in square feet that one gallon of paint can cover."}, "length": {"type": "integer", "description": "Length of the wall to be painted in feet."}, "height": {"type": "integer", "description": "Height of the wall to be painted in feet."}}, "required": ["coverage_rate", "length", "height"]}}, {"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}], "human_eval_answer": "calculate_paint_needed(coverage_rate=400, length=30, height=12)", "question_type": "multiple_function"}
{"question": "Find me the most recent art sculpture by James Plensa with detailed description.", "function": [{"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}, {"name": "monarch.getMonarchOfYear", "description": "Retrieve the monarch of a specific location during a specified year.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location (e.g., country) whose monarch needs to be found."}, "year": {"type": "integer", "description": "The year to search the monarch."}, "fullName": {"type": "boolean", "default": "false", "description": "If true, returns the full name and title of the monarch."}}, "required": ["location", "year"]}}, {"name": "get_sculpture_info", "description": "Retrieves the most recent artwork by a specified artist with its detailed description.", "parameters": {"type": "object", "properties": {"artist_name": {"type": "string", "description": "The name of the artist."}, "year": {"type": "integer", "description": "Year of the sculpture. This is optional."}, "detail": {"type": "boolean", "description": "If True, it provides detailed description of the sculpture. Defaults to False."}}, "required": ["artist_name"]}}, {"name": "get_zodiac_compatibility", "description": "Retrieve the compatibility score between two Zodiac signs.", "parameters": {"type": "object", "properties": {"sign1": {"type": "string", "description": "The first Zodiac sign."}, "sign2": {"type": "string", "description": "The second Zodiac sign."}, "scale": {"type": "string", "enum": ["percentage", "0-10 scale"], "description": "The scale on which compatibility should be shown. Default is 'percentage'."}}, "required": ["sign1", "sign2"]}}], "human_eval_answer": "get_sculpture_info(artist_name=\"James Plensa\", detail=True)", "question_type": "multiple_function"}
{"question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": [{"name": "card_game_probability.calculate", "description": "Calculate the probability of drawing a certain card or suit from a deck of cards.", "parameters": {"type": "object", "properties": {"total_cards": {"type": "integer", "description": "Total number of cards in the deck."}, "desired_cards": {"type": "integer", "description": "Number of cards in the deck that satisfy the conditions."}, "cards_drawn": {"type": "integer", "default": 1, "description": "Number of cards drawn from the deck."}}, "required": ["total_cards", "desired_cards"]}}, {"name": "get_sculpture_info", "description": "Retrieves the most recent artwork by a specified artist with its detailed description.", "parameters": {"type": "object", "properties": {"artist_name": {"type": "string", "description": "The name of the artist."}, "year": {"type": "integer", "description": "Year of the sculpture. This is optional."}, "detail": {"type": "boolean", "description": "If True, it provides detailed description of the sculpture. Defaults to False."}}, "required": ["artist_name"]}}, {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold."}}, "required": ["location", "art_form"]}}], "human_eval_answer": "find_exhibition(location='New York', art_form='sculpture', month='upcoming', user_ratings='high')", "question_type": "multiple_function"}
{"question": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?", "function": [{"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "object", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}, {"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional)."}}, "required": ["player_name", "year"]}}], "human_eval_answer": "analyze_structure(building_id='B1004', floors=[2, 3, 4], mode='dynamic')", "question_type": "multiple_function"}
{"question": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity.", "function": [{"name": "metropolitan_museum.get_top_artworks", "description": "Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number of artworks to fetch"}, "sort_by": {"type": "string", "description": "The criteria to sort the results on.", "enum": ["popularity", "chronological", "alphabetical"]}}, "required": ["number"]}}, {"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed."}, "location": {"type": "string", "description": "Location where the lawsuit was filed."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}], "human_eval_answer": "metropolitan_museum.get_top_artworks(number=5, sort_by='popularity')", "question_type": "multiple_function"}
{"question": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?", "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store."}}, "required": ["location"]}}, {"name": "calculate_NPV", "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.", "parameters": {"type": "object", "properties": {"cash_flows": {"type": "array", "items": {"type": "number"}, "description": "Series of future cash flows."}, "discount_rate": {"type": "number", "description": "The discount rate to use."}, "initial_investment": {"type": "number", "description": "The initial investment. Default is 0 if not specified."}}, "required": ["cash_flows", "discount_rate"]}}, {"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "object", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}, {"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}], "human_eval_answer": "instrument_price.get(brand='Fender', model='American Professional II Stratocaster', finish='Rosewood')", "question_type": "multiple_function"}
{"question": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area.", "function": [{"name": "identify_color_rgb", "description": "This function identifies the RGB values of a named color.", "parameters": {"type": "object", "properties": {"color_name": {"type": "string", "description": "Name of the color."}, "standard": {"type": "string", "description": "The color standard (e.g. basic, pantone). Default is 'basic'"}}, "required": ["color_name"]}}, {"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "object", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}, {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}], "human_eval_answer": "guitar_price.find(model=\"Gibson Les Paul\", condition=\"Excellent\", location=\"Chicago\")", "question_type": "multiple_function"}
{"question": "Find me a classical concert this weekend in Los Angeles with cheap tickets.", "function": [{"name": "concert.search", "description": "Locate a concert based on specific criteria like genre, location, and date.", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "Genre of the concert."}, "location": {"type": "string", "description": "City of the concert."}, "date": {"type": "string", "description": "Date of the concert, e.g. this weekend, today, tomorrow, or date string."}, "price_range": {"type": "string", "enum": ["free", "cheap", "moderate", "expensive"], "description": "Expected price range of the concert tickets."}}, "required": ["genre", "location", "date"]}}, {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}, {"name": "team_score.get_latest", "description": "Retrieve the score of the most recent game for a specified sports team.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "Name of the sports team."}, "include_opponent": {"type": "boolean", "description": "Include the name of the opponent team in the return.", "default": "false"}}, "required": ["team"]}}], "human_eval_answer": "concert.search(genre='classical', location='Los Angeles', date='this weekend', price_range='cheap')", "question_type": "multiple_function"}
{"question": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute.", "function": [{"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}, {"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "number", "description": "The population of the country."}, "land_area": {"type": "number", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, {"name": "get_directions", "description": "Retrieve directions from one location to another.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting point of the journey."}, "end_location": {"type": "string", "description": "The destination point of the journey."}, "route_type": {"type": "string", "description": "Type of route to use (e.g., fastest, scenic). Default is fastest.", "enum": ["fastest", "scenic"]}}, "required": ["start_location", "end_location"]}}], "human_eval_answer": "music_generator.generate_melody(key='C', start_note='C4', length=16, tempo=120)", "question_type": "multiple_function"}
{"question": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen.", "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "object", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "object", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, {"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "object", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}], "human_eval_answer": "get_song_lyrics(song_title='Bohemian Rhapsody', artist_name='Queen')", "question_type": "multiple_function"}
{"question": "What is the musical scale associated with C sharp major?", "function": [{"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}, {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "object", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list."}}, "required": ["loc", "product_list"]}}], "human_eval_answer": "musical_scale(key='C#', scale_type='major')", "question_type": "multiple_function"}
{"question": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season", "function": [{"name": "monopoly_odds_calculator", "description": "Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number for which the odds are calculated."}, "dice_number": {"type": "integer", "description": "The number of dice involved in the roll."}, "dice_faces": {"type": "integer", "description": "The number of faces on a single die. Default is 6 for standard six-faced die."}}, "required": ["number", "dice_number"]}}, {"name": "soccer_stat.get_player_stats", "description": "Retrieve soccer player statistics for a given season.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "season": {"type": "string", "description": "Soccer season, usually specified by two years."}, "league": {"type": "string", "description": "Optional - the soccer league, defaults to all leagues."}}, "required": ["player_name", "season"]}}, {"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "object", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}, {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}], "human_eval_answer": "soccer_stat.get_player_stats(player_name='Cristiano Ronaldo', season='2019-2020')", "question_type": "multiple_function"}
{"question": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?", "function": [{"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "object", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game."}}, "required": ["teams", "date"]}}, {"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "object", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}], "human_eval_answer": "game_result.get_winner(teams=['Lakers', 'Clippers'], date='2021-01-28')", "question_type": "multiple_function"}
{"question": "Find me the detailed profile of basketball player Lebron James", "function": [{"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "object", "properties": {"principle": {"type": "number", "description": "The initial amount of the investment."}, "interest_rate": {"type": "number", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}, {"name": "sports_db.find_athlete", "description": "Find the profile information of a sports athlete based on their full name.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The full name of the athlete."}, "team": {"type": "string", "description": "The team the athlete belongs to."}, "sport": {"type": "string", "description": "The sport that athlete plays.", "enum": ["Basketball", "Baseball", "Football", "Soccer"]}}, "required": ["name", "sport"]}}, {"name": "get_traffic_info", "description": "Retrieve current traffic conditions for a specified route.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting point of the route."}, "end_location": {"type": "string", "description": "The destination of the route."}, "mode": {"type": "string", "enum": ["driving", "walking", "bicycling", "transit"], "description": "Preferred method of transportation, default to 'driving'."}}, "required": ["start_location", "end_location"]}}, {"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "object", "properties": {"quantity": {"type": "number", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}], "human_eval_answer": "sports_db.find_athlete(name=\"Lebron James\", sport=\"Basketball\")", "question_type": "multiple_function"}
{"question": "Get the NBA team's ranking with the best defence in the 2021 season.", "function": [{"name": "get_defense_ranking", "description": "Retrieve the defence ranking of NBA teams in a specified season.", "parameters": {"type": "object", "properties": {"season": {"type": "integer", "description": "The NBA season to get defence ranking from."}, "top": {"type": "integer", "default": 1, "description": "Number of top teams in defence ranking to fetch."}}, "required": ["season"]}}, {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "object", "properties": {"list": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting. If not specified, it will default to ascending."}}, "required": ["list", "order"]}}, {"name": "calculate_cagr", "description": "Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.", "parameters": {"type": "object", "properties": {"initial_value": {"type": "number", "description": "The initial investment value."}, "final_value": {"type": "number", "description": "The final investment value."}, "period_in_years": {"type": "integer", "description": "The period of the investment in years."}}, "required": ["initial_value", "final_value", "period_in_years"]}}], "human_eval_answer": "get_defense_ranking(season=2021, top=1)", "question_type": "multiple_function"}
{"question": "What is the ranking of Manchester United in Premier League?", "function": [{"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season."}}, "required": ["team", "league"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "object", "properties": {"principle": {"type": "number", "description": "The initial amount of the investment."}, "interest_rate": {"type": "number", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}], "human_eval_answer": "sports_ranking(team='Manchester United', league='Premier League')", "question_type": "multiple_function"}
{"question": "Who is ranked as the top player in woman tennis?", "function": [{"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "object", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}, {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "object", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}, {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "object", "properties": {"budget": {"type": "number", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter."}}, "required": ["budget", "type"]}}, {"name": "electromagnetic_force", "description": "Calculate the electromagnetic force between two charges placed at a certain distance.", "parameters": {"type": "object", "properties": {"charge1": {"type": "number", "description": "The magnitude of the first charge in coulombs."}, "charge2": {"type": "number", "description": "The magnitude of the second charge in coulombs."}, "distance": {"type": "number", "description": "The distance between the two charges in meters."}, "medium_permittivity": {"type": "number", "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity)."}}, "required": ["charge1", "charge2", "distance"]}}], "human_eval_answer": "sports_ranking.get_top_player(sport='tennis', gender='women')", "question_type": "multiple_function"}
{"question": "Give me the schedule of Manchester United for the next 6 games in Premier League.", "function": [{"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format."}}, "required": ["location"]}}, {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "object", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "object", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}}, "required": ["rank", "suit"]}}, {"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}, {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel."}}, "required": ["location", "room_type", "duration", "start_date"]}}], "human_eval_answer": "sports_team.get_schedule(team_name='Manchester United', num_of_games=6, league='Premier League')", "question_type": "multiple_function"}
{"question": "Find the top chess players in New York with a rating above 2300.", "function": [{"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}, {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, {"name": "get_historical_GDP", "description": "Retrieve historical GDP data for a specific country and time range.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country for which the historical GDP data is required."}, "start_year": {"type": "integer", "description": "Starting year of the period for which GDP data is required."}, "end_year": {"type": "integer", "description": "Ending year of the period for which GDP data is required."}}, "required": ["country", "start_year", "end_year"]}}], "human_eval_answer": "board_game.chess.get_top_players(location=\"New York\", minimum_rating=2300)", "question_type": "multiple_function"}
{"question": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck.", "function": [{"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "object", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "object", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}}, "required": ["rank", "suit"]}}, {"name": "currency_exchange.convert", "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "number", "description": "The amount in base currency to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "object", "properties": {"value": {"type": "number", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 0."}}, "required": ["value", "from_unit", "to_unit"]}}, {"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}], "human_eval_answer": "find_card_in_deck(rank='Queen', suit='Hearts')", "question_type": "multiple_function"}
{"question": "What is the probability of getting a full house in poker?", "function": [{"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "object", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "number", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}, {"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "object", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, {"name": "hospital.locate", "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Denver, CO"}, "radius": {"type": "integer", "description": "The radius within which you want to find the hospital in kms."}, "department": {"type": "string", "description": "Specific department within the hospital", "enum": ["General Medicine", "Emergency", "Pediatrics", "Cardiology", "Orthopedics"]}}, "required": ["location", "radius"]}}], "human_eval_answer": "poker_probability.full_house(deck_size=52, hand_size=5)", "question_type": "multiple_function"}
{"question": "Fetch player statistics of 'Zelda' on Switch for user 'Sam'.", "function": [{"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}, {"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "object", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false"}}, "required": ["departure_location", "destination_location", "date"]}}, {"name": "game_stats.fetch_player_statistics", "description": "Fetch player statistics for a specific video game for a given user.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the video game."}, "username": {"type": "string", "description": "The username of the player."}, "platform": {"type": "string", "description": "The platform user is playing on.", "default": "PC"}}, "required": ["game", "username"]}}, {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}], "human_eval_answer": "game_stats.fetch_player_statistics(game='Zelda', username='Sam', platform='Switch')", "question_type": "multiple_function"}
{"question": "Get me the details of the last game played by Liverpool F.C. Include its statistics.", "function": [{"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "object", "properties": {"start_range": {"type": "number", "description": "Start of the range in radians."}, "end_range": {"type": "number", "description": "End of the range in radians."}, "frequency": {"type": "number", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "number", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "number", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}, {"name": "random_forest.train", "description": "Train a Random Forest Model on given data", "parameters": {"type": "object", "properties": {"n_estimators": {"type": "integer", "description": "The number of trees in the forest."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree."}, "data": {"type": "Dataframe", "description": "The training data for the model."}}, "required": ["n_estimators", "max_depth", "data"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}, {"name": "building.get_dimensions", "description": "Retrieve the dimensions of a specific building based on its name.", "parameters": {"type": "object", "properties": {"building_name": {"type": "string", "description": "The name of the building."}, "unit": {"type": "string", "description": "The unit in which you want the dimensions. Default is meter.", "enum": ["meter", "feet"]}}, "required": ["building_name", "unit"]}}], "human_eval_answer": "soccer.get_last_match(team_name=\"Liverpool F.C.\", include_stats=true)", "question_type": "multiple_function"}
{"question": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10.", "function": [{"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "object", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "number", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}, {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "number"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}, {"name": "geo_distance.calculate", "description": "Calculate the geographic distance between two given locations.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting location for the distance calculation."}, "end_location": {"type": "string", "description": "The destination location for the distance calculation."}, "units": {"type": "string", "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."}}, "required": ["start_location", "end_location"]}}, {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "object", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy."}}, "required": ["to", "subject", "body"]}}], "human_eval_answer": "multiplayer_game_finder(platform='Windows 10', rating=4.5)", "question_type": "multiple_function"}
{"question": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "function": [{"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "object", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner')"}}, "required": ["website", "recipe"]}}, {"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "object", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}], "human_eval_answer": "recipe_info.get_calories(website='Foodnetwork.com', recipe='Beef Lasagna')", "question_type": "multiple_function"}
{"question": "Give me a recipe for a vegetarian pasta with cheese for 2 servings.", "function": [{"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "object", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}, {"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "duration": {"type": "integer", "description": "Duration in hours for the detailed forecast."}, "include_precipitation": {"type": "boolean", "description": "Whether to include precipitation data in the forecast."}}, "required": ["location", "duration"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "object", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}], "human_eval_answer": "recipe_search(dietary_restriction='Vegetarian', ingredients=['pasta', 'cheese'], servings=2)", "question_type": "multiple_function"}
{"question": "Find the closest sushi restaurant with a patio in Boston.", "function": [{"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, {"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant."}}, "required": ["location", "cuisine"]}}], "human_eval_answer": "restaurant_search.find_closest(location=\"Boston\", cuisine=\"Sushi\", amenities=[\"Patio\"])", "question_type": "multiple_function"}
{"question": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "function": [{"name": "science_history.get_discovery_details", "description": "Retrieve the details of a scientific discovery based on the discovery name.", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The name of the discovery, e.g. Gravity"}, "method_used": {"type": "string", "description": "The method used for the discovery, default value is 'default' which gives the most accepted method."}}, "required": ["discovery"]}}, {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "object", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "number", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}], "human_eval_answer": "find_recipe(dietary_restrictions=\"vegan\", recipe_type=\"brownies\", time=30)", "question_type": "multiple_function"}
{"question": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles.", "function": [{"name": "whole_foods.check_price", "description": "Check the price of items at a specific Whole Foods location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of the Whole Foods store."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items for which the price needs to be checked."}}, "required": ["location", "items"]}}, {"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}, {"name": "geometry.area_circle", "description": "Calculate the area of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "units": {"type": "string", "description": "The units in which the radius is measured (defaults to meters).", "default": "meters"}}, "required": ["radius"]}}, {"name": "find_recipes", "description": "Find recipes based on dietary restrictions, meal type, and preferred ingredients.", "parameters": {"type": "object", "properties": {"diet": {"type": "string", "description": "The dietary restrictions, e.g., 'vegan', 'gluten-free'."}, "meal_type": {"type": "string", "description": "The type of meal, e.g., 'dinner', 'breakfast'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The preferred ingredients. If left blank, it will return general recipes."}}, "required": ["diet", "meal_type"]}}], "human_eval_answer": "whole_foods.check_price(location='Los Angeles', items=['tomatoes', 'lettuce'])", "question_type": "multiple_function"}
{"question": "Find the grocery store closest to Berkeley that has at least a 4.5 star rating, selling tomatoes and also pet food.", "function": [{"name": "psych_research.get_preference", "description": "Gathers research data on public preference between two options, based on societal category.", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "The societal category the preference data is about. E.g. reading, transportation, food"}, "option_one": {"type": "string", "description": "The first option people could prefer."}, "option_two": {"type": "string", "description": "The second option people could prefer."}, "demographic": {"type": "string", "description": "Specific demographic of society to narrow down the research.", "default": "all"}}, "required": ["category", "option_one", "option_two"]}}, {"name": "train_random_forest_classifier", "description": "Train a Random Forest classifier with the specified parameters.", "parameters": {"type": "object", "properties": {"dataset": {"type": "string", "description": "The dataset to train the classifier on."}, "max_depth": {"type": "integer", "description": "The maximum depth of the trees in the forest."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest."}}, "required": ["dataset", "max_depth", "n_estimators"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "grocery_store.find_best", "description": "Find the closest high-rated grocery stores based on certain product availability.", "parameters": {"type": "object", "properties": {"my_location": {"type": "string", "description": "The current location of the user."}, "rating": {"type": "float", "description": "The minimum required store rating."}, "products": {"type": "array", "items": {"type": "string"}, "description": "Required products in a list."}}, "required": ["my_location", "products"]}}], "human_eval_answer": "grocery_store.find_best(my_location=\"Berkeley\", rating=4.5, products=[\"tomatoes\", \"pet food\"])", "question_type": "multiple_function"}
{"question": "Convert time 3pm from New York time zone to London time zone.", "function": [{"name": "timezone.convert", "description": "Convert time from one time zone to another.", "parameters": {"type": "object", "properties": {"time": {"type": "string", "description": "The local time you want to convert, e.g. 3pm"}, "from_timezone": {"type": "string", "description": "The time zone you want to convert from."}, "to_timezone": {"type": "string", "description": "The time zone you want to convert to."}}, "required": ["time", "from_timezone", "to_timezone"]}}, {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "object", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy."}}, "required": ["energy_type", "usage_duration"]}}], "human_eval_answer": "timezone.convert(time='3pm', from_timezone='America/New_York', to_timezone='Europe/London')", "question_type": "multiple_function"}
{"question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": [{"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}, {"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "object", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}], "human_eval_answer": "book_hotel(hotel_name='Hilton Hotel', location='Chicago', room_type='single', start_date='10-12-2022', nights=2)", "question_type": "multiple_function"}
{"question": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "function": [{"name": "elephant_population_estimate", "description": "Estimate future population of elephants given current population and growth rate.", "parameters": {"type": "object", "properties": {"current_population": {"type": "integer", "description": "The current number of elephants."}, "growth_rate": {"type": "number", "description": "The annual population growth rate of elephants."}, "years": {"type": "integer", "description": "The number of years to project the population."}}, "required": ["current_population", "growth_rate", "years"]}}, {"name": "random.normalvariate", "description": "Generates a random number from a normal distribution given the mean and standard deviation.", "parameters": {"type": "object", "properties": {"mu": {"type": "number", "description": "Mean of the normal distribution."}, "sigma": {"type": "number", "description": "Standard deviation of the normal distribution."}}, "required": ["mu", "sigma"]}}, {"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}, {"name": "get_personality_traits", "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.", "parameters": {"type": "object", "properties": {"type": {"type": "string", "description": "The personality type."}, "traits": {"type": "array", "items": {"type": "string", "enum": ["strengths", "weaknesses"]}, "description": "List of traits to be retrieved, default is ['strengths', 'weaknesses']."}}, "required": ["type"]}}], "human_eval_answer": "book_hotel(hotel_name='Hotel Paradise', location='Las Vegas', room_type='luxury', start_date='05-12-2022', stay_duration=3, view='city view')", "question_type": "multiple_function"}
{"question": "Convert 150 Euros to Canadian dollars.", "function": [{"name": "currency_conversion.convert", "description": "Convert a value from one currency to another.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "time": {"type": "number", "description": "The time in seconds that the object has been in motion."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2.", "default": 0}}, "required": ["initial_velocity", "time"]}}, {"name": "calc_absolute_pressure", "description": "Calculates the absolute pressure from gauge and atmospheric pressures.", "parameters": {"type": "object", "properties": {"atm_pressure": {"type": "number", "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."}, "gauge_pressure": {"type": "number", "description": "The gauge pressure in atmospheres (atm). Must be provided."}}, "required": ["gauge_pressure"]}}], "human_eval_answer": "currency_conversion.convert(amount=150, from_currency='EUR', to_currency='CAD')", "question_type": "multiple_function"}
{"question": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "number", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}, {"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}, {"name": "grocery_store.find_best", "description": "Find the closest high-rated grocery stores based on certain product availability.", "parameters": {"type": "object", "properties": {"my_location": {"type": "string", "description": "The current location of the user."}, "rating": {"type": "float", "description": "The minimum required store rating."}, "products": {"type": "array", "items": {"type": "string"}, "description": "Required products in a list."}}, "required": ["my_location", "products"]}}, {"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "object", "properties": {"number": {"type": "number", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}], "human_eval_answer": "maps.get_distance_duration(start_location='Eiffel Tower', end_location='Louvre Museum')", "question_type": "multiple_function"}
{"question": "What are the opening hours of the Metropolitan Museum of Art on Saturday?", "function": [{"name": "monopoly_odds_calculator", "description": "Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number for which the odds are calculated."}, "dice_number": {"type": "integer", "description": "The number of dice involved in the roll."}, "dice_faces": {"type": "integer", "description": "The number of faces on a single die. Default is 6 for standard six-faced die."}}, "required": ["number", "dice_number"]}}, {"name": "lawsuit.check_case", "description": "Verify the details of a lawsuit case and check its status using case ID.", "parameters": {"type": "object", "properties": {"case_id": {"type": "integer", "description": "The identification number of the lawsuit case."}, "closed_status": {"type": "boolean", "description": "The status of the lawsuit case to be verified."}}, "required": ["case_id", "closed_status"]}}, {"name": "get_museum_hours", "description": "Retrieve opening hours of a specified museum for the specified day.", "parameters": {"type": "object", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "day": {"type": "string", "description": "Day of the week. If not specified, returns the current day's hours."}}, "required": ["museum_name", "day"]}}, {"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "object", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}], "human_eval_answer": "get_museum_hours(museum_name=\"Metropolitan Museum of Art\", day=\"Saturday\")", "question_type": "multiple_function"}
{"question": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.", "function": [{"name": "calc_heat_capacity", "description": "Calculate the heat capacity at constant pressure of air using its temperature and volume.", "parameters": {"type": "object", "properties": {"temp": {"type": "number", "description": "The temperature of the gas in Kelvin."}, "volume": {"type": "number", "description": "The volume of the gas in m^3."}, "gas": {"type": "string", "description": "Type of gas, with air as default."}}, "required": ["temp", "volume"]}}, {"name": "get_team_rank", "description": "Get the team ranking in a sports league based on season and type.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The name of the league in which the team competes."}, "season": {"type": "string", "description": "The season for which the team's ranking is sought."}, "type": {"type": "string", "description": "Type of the season: regular or playoff.", "enum": ["regular", "playoff"]}}, "required": ["team_name", "league", "season", "type"]}}, {"name": "get_lawsuit_details", "description": "Retrieve the detailed information about a lawsuit based on its case number and the court location.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The case number of the lawsuit."}, "court_location": {"type": "string", "description": "The location of the court where the case is filed."}, "additional_details": {"type": "array", "items": {"type": "string", "enum": ["attorneys", "plaintiffs", "defendants", "charges", "court_updates"]}, "description": "Optional. Array containing additional details to be fetched."}}, "required": ["case_number", "court_location"]}}], "human_eval_answer": "calc_heat_capacity(temp=298, volume=10, gas='air')", "question_type": "multiple_function"}
{"question": "What are the names of proteins found in the plasma membrane?", "function": [{"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "object", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}, {"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "number", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "number", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}, {"name": "calculate_genotype_frequency", "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.", "parameters": {"type": "object", "properties": {"allele_frequency": {"type": "number", "description": "The frequency of the dominant allele in the population."}, "genotype": {"type": "string", "description": "The genotype which frequency is needed, default is homozygous dominant. ", "enum": ["AA", "Aa", "aa"]}}, "required": ["allele_frequency", "genotype"]}}, {"name": "calculate_electric_field", "description": "Calculate the electric field produced by a charge at a certain distance.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "Charge in coulombs producing the electric field."}, "distance": {"type": "number", "description": "Distance from the charge in meters where the field is being measured."}, "permitivity": {"type": "number", "description": "Permitivity of the space where field is being calculated, default is for vacuum."}}, "required": ["charge", "distance"]}}], "human_eval_answer": "cellbio.get_proteins(cell_compartment=\"plasma membrane\")", "question_type": "multiple_function"}
{"question": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "function": [{"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "class"]}}, {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "object", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list."}}, "required": ["loc", "product_list"]}}, {"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The specific location or area."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free.", "default": "None"}}, "required": ["location", "food_type", "number"]}}, {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "object", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}], "human_eval_answer": "mutation_type.find(snp_id='rs6034464')", "question_type": "multiple_function"}
{"question": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?", "function": [{"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}, "region": {"type": "string", "description": "The geographical region in which the game is being played (Optional)."}}, "required": ["game", "season"]}}, {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "calculate_genotype_frequency", "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.", "parameters": {"type": "object", "properties": {"allele_frequency": {"type": "number", "description": "The frequency of the dominant allele in the population."}, "genotype": {"type": "string", "description": "The genotype which frequency is needed, default is homozygous dominant. ", "enum": ["AA", "Aa", "aa"]}}, "required": ["allele_frequency", "genotype"]}}, {"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "object", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}], "human_eval_answer": "calculate_genotype_frequency(allele_frequency=0.3, genotype='AA')", "question_type": "multiple_function"}
{"question": "Predict the growth of forest in Yellowstone for the next 5 years including human impact.", "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "object", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "object", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. If left empty, it fetches all records. (Optional)"}}, "required": ["database_name", "table_name", "conditions"]}}, {"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}], "human_eval_answer": "forest_growth_forecast(location='Yellowstone', years=5, include_human_impact=true)", "question_type": "multiple_function"}
{"question": "Play songs from the artists Taylor Swift and Maroon 5, with a play time of 20 minutes and 15 minutes respectively, on Spotify.", "function": {"name": "spotify.play", "description": "Play specific tracks from a given artist for a specific time duration.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "The artist whose songs you want to play."}, "duration": {"type": "integer", "description": "The duration for which the songs should be played, in minutes."}}, "required": ["artist", "duration"]}}, "human_eval_answer": "[spotify.play(artist=\"Taylor Swift\", duration=20), spotify.play(artist=\"Maroon 5\", duration=15)]", "question_type": "parallel_function"}
{"question": "Calculate the induced electromagnetic force for a magnetic field of 5 Tesla, area of 2 square meters and change in time of 4 seconds, then repeat with a change in time of 10 seconds.", "function": {"name": "calculate_em_force", "description": "Calculate the induced electromagnetic force based on Faraday's Law of Electromagnetic Induction, given the magnetic field (in Tesla), change in magnetic field area (in square meters), and the change in time (in seconds).", "parameters": {"type": "object", "properties": {"b_field": {"type": "number", "description": "The magnetic field in Tesla."}, "area": {"type": "number", "description": "The change in area of magnetic field in square meters."}, "d_time": {"type": "number", "description": "The change in time in seconds."}}, "required": ["b_field", "area", "d_time"]}}, "human_eval_answer": "[calculate_em_force(b_field=5, area=2, d_time=4),calculate_em_force(b_field=5, area=2, d_time=10)]", "question_type": "parallel_function"}
{"question": "Calculate the resistance of a wire with a length of 5m and cross sectional area 0.01m\u00b2 with resistivity of copper and aluminum", "function": {"name": "calculate_resistance", "description": "Calculate the resistance of a wire using resistivity, length, and cross-sectional area.", "parameters": {"type": "object", "properties": {"length": {"type": "number", "description": "The length of the wire in meters."}, "area": {"type": "number", "description": "The cross-sectional area of the wire in square meters."}, "resistivity": {"type": "string", "description": "Resistivity of the material (Default: 'copper'). Allowed values: 'copper', 'aluminum'"}}, "required": ["length", "area"]}}, "human_eval_answer": "[calculate_resistance(length=5, area=0.01,resistivity='copper'),calculate_resistance(length=5, area=0.01, resistivity='aluminum')]", "question_type": "parallel_function"}
{"question": "Get the protein sequence of human HbA1c, normal hemoglobin, and rat hemoglobin and their 3D models", "function": {"name": "protein_info.get_sequence_and_3D", "description": "Retrive the sequence and 3D models of proteins.", "parameters": {"type": "object", "properties": {"protein_name": {"type": "string", "description": "The name of the protein."}}, "required": ["protein_name"], "optional": {"model_3d": {"type": "boolean", "description": "Set true to get 3D model of the protein."}}}}, "human_eval_answer": "[protein_info.get_sequence_and_3D(protein_name='human HbA1c', model_3d=True), protein_info.get_sequence_and_3D(protein_name='normal hemoglobin', model_3d=True), protein_info.get_sequence_and_3D(protein_name='rat hemoglobin', model_3d=True)]", "question_type": "parallel_function"}
{"question": "Calculate the body mass index for a person who is 6 feet tall and weighs 80 kg, also for a person who is 5.6 feet and weighs 60 kg.", "function": {"name": "calculate_bmi", "description": "Calculate body mass index for a person based on their weight and height.", "parameters": {"type": "object", "properties": {"height": {"type": "number", "description": "The height of the person in feet."}, "weight": {"type": "number", "description": "The weight of the person in kilograms."}}, "required": ["height", "weight"]}}, "human_eval_answer": "[calculate_bmi(height=6, weight=80), calculate_bmi(height=5.6, weight=60)]", "question_type": "parallel_function"}
{"question": "Find the list of TV shows and their ratings on Netflix for 'Friends', and Hulu for 'The Office' and 'Stranger Things' and sort by its rating", "function": {"name": "streaming_services.shows_list_and_ratings", "description": "Get a list of shows and their ratings on specific streaming services.", "parameters": {"type": "object", "properties": {"streaming_service": {"type": "string", "description": "Name of the streaming service. E.g., Netflix, Hulu, etc."}, "show_list": {"type": "array", "items": {"type": "string"}, "description": "List of show names to search for on the platform."}, "sort_by_rating": {"type": "boolean", "description": "If set to true, returns the list sorted by ratings. Defaults to false."}}, "required": ["streaming_service", "show_list"]}}, "human_eval_answer": "[streaming_services.shows_list_and_ratings(streaming_service='Netflix', show_list=['Friends'], sort_by_rating=True), streaming_services.shows_list_and_ratings(streaming_service='Hulu', show_list=['The Office', 'Stranger Things'], sort_by_rating=True)]", "question_type": "parallel_function"}
{"question": "Calculate the amount of sales tax to be added on a purchase amount of $30.45 in Chicago, Illinois, $52.33 in Sacramento, California and $11.23 in Portland, Oregon.", "function": {"name": "calculate_sales_tax", "description": "Calculate the sales tax for a given purchase amount in a specific city and state.", "parameters": {"type": "object", "properties": {"purchase_amount": {"type": "number", "description": "The purchase amount."}, "city": {"type": "string", "description": "The city where the purchase is made."}, "state": {"type": "string", "description": "The state where the purchase is made."}}, "required": ["purchase_amount", "city", "state"]}}, "human_eval_answer": "[calculate_sales_tax(purchase_amount=30.45, city='Chicago', state='IL'), calculate_sales_tax(purchase_amount=52.33, city='Sacramento', state='CA'), calculate_sales_tax(purchase_amount=11.23, city='Portland', state='OR')]", "question_type": "parallel_function"}
{"question": "Find the factorial of 5,10 and 15.", "function": {"name": "math.factorial", "description": "Calculate the factorial of a given positive integer.", "parameters": {"type": "object", "properties": {"number": {"type": "number", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}, "human_eval_answer": "[math.factorial(number=5),math.factorial(number=10),math.factorial(number=15)]", "question_type": "parallel_function"}
{"question": "Fetch the population of New York City, NY,  and Los Angeles, CA from US Census Database, and also get the population data for Alaska state and USA", "function": {"name": "database_us_census.get_population", "description": "Fetch population data from US Census database.", "parameters": {"type": "object", "properties": {"area": {"type": "string", "description": "Name of the city, state, or country."}, "type": {"type": "string", "description": "Specify whether the area is city/state/country."}, "year": {"type": "integer", "description": "Year of the data", "default": "Current Year"}}, "required": ["area", "type"]}}, "human_eval_answer": "[database_us_census.get_population(area='New York City, NY', type='city'), database_us_census.get_population(area='Los Angeles, CA', type='city'), database_us_census.get_population(area='Alaska', type='state'), database_us_census.get_population(area='USA', type='country')]", "question_type": "parallel_function"}
{"question": "Find two movie theatres near San Diego with availability for Tenet at 5 pm and No Time To Die at 7:30 pm.", "function": {"name": "find_movie_showing", "description": "Find local movie theatres and their schedule for a specific movie", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. San Diego, CA"}, "movie": {"type": "array", "items": {"type": "string", "enum": ["Tenet", "No Time To Die"]}, "description": "Preferred movie to watch."}, "time": {"type": "array", "items": {"type": "string", "description": "Show time for each movie"}}}, "required": ["location", "movie", "time"]}}, "human_eval_answer": "[find_movie_showing(location='San Diego', movie='Tenet', time='5pm'), find_movie_showing(location='San Diego', movie='No Time To Die', time='7:30pm')]", "question_type": "parallel_function"}
{"question": "Compute the Pythagorean Theorem of two side lengths: 3 and 4, 5 and 12.", "function": {"name": "math.pythagoras", "description": "Calculates the hypotenuse of a right triangle based on the lengths of the other two sides.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Length of one of the sides of a right triangle."}, "b": {"type": "number", "description": "Length of the other side of a right triangle."}}, "required": ["a", "b"]}}, "human_eval_answer": "[math.pythagoras(a=3, b=4), math.pythagoras(a=5, b=12)]", "question_type": "parallel_function"}
{"question": "Predict house price for a house of size 3000 sq ft. in location New York and 4000 sq ft. in Los Angeles using Machine Learning Model.", "function": {"name": "ml.predict_house_price", "description": "Predict house price using Machine Learning model given the house size and location", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of the house"}, "size": {"type": "integer", "description": "Size of the house in square feet"}}, "required": ["location", "size"]}}, "human_eval_answer": "[ml.predict_house_price(location='New York', size=3000), ml.predict_house_price(location='Los Angeles', size=4000)]", "question_type": "parallel_function"}
{"question": "Build a decision tree classifier model with gini criterion, maximum depth of 5 and random state of 1, another with entropy criterion, maximum depth of 10 and random state of 1.", "function": {"name": "model.DecisionTreeClassifier", "description": "Build a Decision Tree Classifier model with provided criteria", "parameters": {"type": "object", "properties": {"criterion": {"type": "string", "description": "The function to measure the quality of a split, either 'gini' for the Gini impurity or 'entropy' for the information gain."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree, specifying how deep the tree can be."}, "random_state": {"type": "integer", "description": "Controls the randomness of the estimator"}}, "required": ["criterion", "max_depth", "random_state"]}}, "human_eval_answer": "[model.DecisionTreeClassifier(criterion='gini', max_depth=5, random_state=1), model.DecisionTreeClassifier(criterion='entropy', max_depth=10, random_state=1)]", "question_type": "parallel_function"}
{"question": "Can you give me 95% confidence interval for a sample mean with standard deviation of 10, sample size of 50 and sample mean of 25? And can you do the same but for a sample size of 150 instead?", "function": {"name": "confidence_interval.calculate", "description": "Calculate the confidence interval for a mean.", "parameters": {"type": "object", "properties": {"sample_std_dev": {"type": "number", "description": "The standard deviation of the sample."}, "sample_size": {"type": "integer", "description": "The size of the sample."}, "sample_mean": {"type": "number", "description": "The mean of the sample."}, "confidence_level": {"type": "number", "description": "The level of confidence. Default is 0.95."}}, "required": ["sample_std_dev", "sample_size", "sample_mean"]}}, "human_eval_answer": "[confidence_interval.calculate(sample_std_dev=10, sample_size=50, sample_mean=25), confidence_interval.calculate(sample_std_dev=10, sample_size=150, sample_mean=25)]", "question_type": "parallel_function"}
{"question": "Calculate the Present Value of an investment paying $1000 per year, with an interest rate of 5%, for 10, 20 and 30 years.", "function": {"name": "calculate_present_value", "description": "Calculate the present value of a future cash flows stream.", "parameters": {"type": "object", "properties": {"payment_per_year": {"type": "number", "description": "The payment received per year."}, "interest_rate": {"type": "number", "description": "The interest rate applied per period."}, "years": {"type": "integer", "description": "The total number of years."}}, "required": ["payment_per_year", "interest_rate", "years"]}}, "human_eval_answer": "[calculate_present_value(payment_per_year=1000, interest_rate=0.05, years=10), calculate_present_value(payment_per_year=1000, interest_rate=0.05, years=20), calculate_present_value(payment_per_year=1000, interest_rate=0.05, years=30)]", "question_type": "parallel_function"}
{"question": "What will be the capital gains tax for a short term capital gains of $15000, long term gains of $25000 in the state of California and $20000 short term, $50000 long term in Florida?", "function": {"name": "calculate_capital_gains_tax", "description": "Calculate the capital gains tax for a given gains type and amount", "parameters": {"type": "object", "properties": {"short_term_gain": {"type": "number", "description": "The short term capital gain amount."}, "long_term_gain": {"type": "number", "description": "The long term capital gain amount."}, "state": {"type": "string", "description": "The state where the income is generated.", "default": "federal"}}, "required": ["short_term_gain", "long_term_gain"]}}, "human_eval_answer": "[calculate_capital_gains_tax(short_term_gain=15000, long_term_gain=25000, state='CA'), calculate_capital_gains_tax(short_term_gain=20000, long_term_gain=50000, state='FL')]", "question_type": "parallel_function"}
{"question": "Calculate return on investment for an initial investment of $2000 with a gain of $500. Do the same calculation for an initial investment of $5000 with a loss of $1000.", "function": {"name": "calculate_return_on_investment", "description": "Calculate the return on investment given an initial investment and a gain or loss.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial amount of money invested."}, "gain_loss": {"type": "number", "description": "The amount gained or lost. If loss, provide as negative value."}}, "required": ["initial_investment", "gain_loss"]}}, "human_eval_answer": "[calculate_return_on_investment(initial_investment=2000, gain_loss=500), calculate_return_on_investment(initial_investment=5000, gain_loss=-1000)]", "question_type": "parallel_function"}
{"question": "Get the latest closing prices and volumes for Apple Inc., Google LLC., and Microsoft Corporation in the New York Stock Exchange", "function": {"name": "get_stock_data", "description": "Retrieve the most recent trading day's closing price and volume for a specified stock.", "parameters": {"type": "object", "properties": {"symbol": {"type": "string", "description": "The stock symbol of the company."}, "data_points": {"type": "array", "items": {"type": "string", "enum": ["price", "volume"]}, "description": "The type of data you want to retrieve for the stock. This can include closing price, opening price, volume, etc."}}, "required": ["symbol", "data_points"]}}, "human_eval_answer": "[get_stock_data(symbol='AAPL', data_points=['price', 'volume']), get_stock_data(symbol='GOOGL', data_points=['price', 'volume']), get_stock_data(symbol='MSFT', data_points=['price', 'volume'])]", "question_type": "parallel_function"}
{"question": "Calculate the Future Value of an investment of $1000 with an annual interest rate of 5% for 1,5 and 10 years.", "function": {"name": "financials.calculate_future_value", "description": "Calculate the future value of an investment based on a constant interest rate.", "parameters": {"type": "object", "properties": {"present_value": {"type": "number", "description": "The present value or initial amount of the investment."}, "annual_interest_rate": {"type": "number", "description": "The annual interest rate as a decimal."}, "number_of_years": {"type": "integer", "description": "The number of years the money is invested for."}}, "required": ["present_value", "annual_interest_rate", "number_of_years"]}}, "human_eval_answer": "[financials.calculate_future_value(present_value=1000, annual_interest_rate=0.05, number_of_years=1), financials.calculate_future_value(present_value=1000, annual_interest_rate=0.05, number_of_years=5), financials.calculate_future_value(present_value=1000, annual_interest_rate=0.05, number_of_years=10)]", "question_type": "parallel_function"}
{"question": "Calculate the monthly mortgage payment for a loan amount of $400,000, with an annual interest rate of 4% and a loan term of 15, 20 and 30 years.", "function": {"name": "calculate_mortgage_payment", "description": "Calculate the monthly mortgage payment for a given loan amount, interest rate, and loan term.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "number", "description": "The loan amount."}, "interest_rate": {"type": "number", "description": "The annual interest rate."}, "loan_term": {"type": "integer", "description": "The loan term in years."}}, "required": ["loan_amount", "interest_rate", "loan_term"]}}, "human_eval_answer": "[calculate_mortgage_payment(loan_amount=400000, interest_rate=0.04, loan_term=15),calculate_mortgage_payment(loan_amount=400000, interest_rate=0.04, loan_term=20),calculate_mortgage_payment(loan_amount=400000, interest_rate=0.04, loan_term=30)]", "question_type": "parallel_function"}
{"question": "Can you check my loan eligibility for a home loan of amount $500,000 from HSBC with annual income $100,000 and for Wells Fargo for a amount of $700,000 with annual income of $120,000?", "function": {"name": "loan_eligibility_check", "api_call": "loaneligibilitychecker/v1/check", "description": "Check for eligibility for a loan given income and loan amount", "parameters": {"type": "object", "properties": {"financial_institution": {"type": "string", "description": "The name of the financial institution e.g. HSBC"}, "loan_amount": {"type": "number", "description": "The loan amount that is requested"}, "annual_income": {"type": "number", "description": "Annual income of the applicant"}}, "required": ["financial_institution", "loan_amount", "annual_income"]}}, "human_eval_answer": "[loan_eligibility_check(financial_institution='HSBC', loan_amount=500000, annual_income=100000),loan_eligibility_check(financial_institution='Wells Fargo', loan_amount=700000, annual_income=120000)]", "question_type": "parallel_function"}
{"question": "Show me all individuals who were convicted for money laundering from San Francisco in 2019 and ones convicted for the same in Texas in 2018", "function": {"name": "law_crimes.search", "description": "Locate individuals based on their crime conviction and location.", "parameters": {"type": "object", "properties": {"crime": {"type": "string", "description": "Type of crime to search."}, "location": {"type": "string", "description": "City or state where the crime was committed."}, "year": {"type": "integer", "description": "The year when the crime was committed."}}, "required": ["crime", "location", "year"]}}, "human_eval_answer": "[law_crimes.search(crime=\"money laundering\", location=\"San Francisco\", year=2019), law_crimes.search(crime=\"money laundering\", location=\"Texas\", year=2018)]", "question_type": "parallel_function"}
{"question": "What is the status and scheduled trial date for case number XY1234 in Los Angeles County Court, and case number GH5678 in Orange County Court?", "function": {"name": "court_info.get_case_status", "description": "Retrieves the status and trial dates for court cases from specified county courts.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The specific court case number."}, "court": {"type": "string", "description": "The county court where the case is filed."}, "details": {"type": "string", "enum": ["status", "trial_date"], "description": "Specific details required about the court case. Defaults to 'status'."}}, "required": ["case_number", "court"]}}, "human_eval_answer": "[court_info.get_case_status(case_number='XY1234', court='Los Angeles County Court', details=['status','trial_date']),court_info.get_case_status(case_number='GH5678', court='Orange County Court', details=['status','trial_date'])]", "question_type": "parallel_function"}
{"question": "Please calculate the amount of alimony the payor spouse would have to pay to the recipient spouse in California for the next 10 years and 20 years if the payor spouse's monthly gross income is $10,000 and the recipient spouse's monthly gross income is $3,000.", "function": {"name": "alimony_calculator.ca.calculate", "description": "Calculate the amount of alimony one spouse would have to pay to the other spouse in the state of California.", "parameters": {"type": "object", "properties": {"payor_income": {"type": "number", "description": "The monthly gross income of the payor spouse."}, "recipient_income": {"type": "number", "description": "The monthly gross income of the recipient spouse."}, "duration": {"type": "number", "description": "The duration of the alimony in years."}}, "required": ["payor_income", "recipient_income", "duration"]}}, "human_eval_answer": "[alimony_calculator.ca.calculate(payor_income=10000, recipient_income=3000, duration=10), alimony_calculator.ca.calculate(payor_income=10000, recipient_income=3000, duration=20)]", "question_type": "parallel_function"}
{"question": "Can you find me case law details of Case No 28473 and 64725, their history and details of litigants?", "function": {"name": "law_case.get_details", "description": "Fetches detailed information on a specific case including its history and the litigants involved.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The unique number identifying the case."}, "include_history": {"type": "boolean", "description": "Flag indicating if case history should be included. Default is false."}, "include_litigants": {"type": "boolean", "description": "Flag indicating if litigant details should be included. Default is false."}}, "required": ["case_number"]}}, "human_eval_answer": "[law_case.get_details(case_number='28473', include_history=true, include_litigants=true), law_case.get_details(case_number='64725', include_history=true, include_litigants=true)]", "question_type": "parallel_function"}
{"question": "List all cases against a company named 'Dara Inc' filed in 2019, Also list cases filed in the year 2018 against the same company.", "function": {"name": "lawsuit.lookup", "description": "Look up lawsuit cases against a company by year.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The year in which the lawsuit was filed."}}, "required": ["company_name", "year"]}}, "human_eval_answer": "[lawsuit.lookup(company_name='Dara Inc', year=2019),lawsuit.lookup(company_name='Dara Inc', year=2018)]", "question_type": "parallel_function"}
{"question": "Find details of lawsuits with case numbers '67813', '71249' filed in the New York District court for type 'Civil' and 'Criminal' cases.", "function": {"name": "court_case.find", "description": "Locate details of court cases based on specific parameters like case number and case type.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and court where the lawsuit is filed."}, "case_number": {"type": "array", "items": {"type": "string"}, "description": "The unique case numbers of the lawsuits."}, "case_type": {"type": "string", "enum": ["Civil", "Criminal"], "description": "Type of the court case."}}, "required": ["location", "case_number"]}}, "human_eval_answer": "[court_case.find(location=\"New York District\", case_number=\"67813\", case_type=\"Civil\"), court_case.find(location=\"New York District\", case_number=\"71249\", case_type=\"Criminal\")]", "question_type": "parallel_function"}
{"question": "Find a nature reserve around Berkeley within 10 kilometers that has picnic tables and public restrooms, as well as one around Tokyo within 5 kilometers that has playgrounds and biking trails.", "function": {"name": "nature_reserve.find_nearby", "description": "Locate nearby nature reserves based on specific criteria such as amenities and proximity.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to locate a nature reserve."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Picnic Tables", "Public Restrooms", "Playgrounds", "Biking Trails", "Hiking Trails", "Camping Grounds"]}, "description": "Preferred amenities in the nature reserve."}, "proximity": {"type": "integer", "description": "The radius within which to look for nature reserves in kilometers."}}, "required": ["location", "proximity", "amenities"]}}, "human_eval_answer": "[nature_reserve.find_nearby(location='Berkeley', amenities=['Picnic Tables', 'Public Restrooms'], proximity=10), nature_reserve.find_nearby(location='Tokyo', amenities=['Playgrounds', 'Biking Trails'], proximity=5)]", "question_type": "parallel_function"}
{"question": "What is the temperature right now and for the next three hours in Seattle and Los Angeles?", "function": {"name": "get_current_and_future_temperature", "description": "Provides the current temperature and forecasts the temperature for the next few hours at a particular location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the temperature for."}, "hours": {"type": "integer", "description": "Number of hours for the temperature forecast."}}, "required": ["location", "hours"]}}, "human_eval_answer": "[get_current_and_future_temperature(location='Seattle', hours=3), get_current_and_future_temperature(location='Los Angeles', hours=3)]", "question_type": "parallel_function"}
{"question": "Find out how much waste a family of four generates in Los Angeles, assuming two children and two adults. Also, calculate waste production for a bachelor in New York.", "function": {"name": "waste_calculation.calculate", "description": "Calculates the estimated waste generated by different population sizes in a specific location.", "parameters": {"type": "object", "properties": {"population": {"type": "object", "description": "The description of population. 'adults' is the number of adults in the household. 'children' is the number of children. 'singles' is the number of single adults living alone.", "required": ["adults", "children", "singles"]}, "location": {"type": "string", "description": "The city where the population resides."}}, "required": ["population", "location"]}}, "human_eval_answer": "[waste_calculation.calculate(population={'adults': 2, 'children': 2, 'singles': 0}, location='Los Angeles'), waste_calculation.calculate(population={'adults': 0, 'children': 0, 'singles': 1}, location='New York')]", "question_type": "parallel_function"}
{"question": "Book a flight from San Francisco to Tokyo on May 3rd 2022 and another flight from Tokyo to Sydney on May 18th 2022.", "function": {"name": "book_flight", "description": "Book a flight from a departure city to a destination city on a specific date.", "parameters": {"type": "object", "properties": {"departure_city": {"type": "string", "description": "The city from which the flight will depart."}, "destination_city": {"type": "string", "description": "The city to which the flight is going."}, "date": {"type": "string", "description": "The date of the flight."}}, "required": ["departure_city", "destination_city", "date"]}}, "human_eval_answer": "[book_flight(departure_city=\"San Francisco\", destination_city=\"Tokyo\", date=\"2022-05-03\"),book_flight(departure_city=\"Tokyo\", destination_city=\"Sydney\", date=\"2022-05-18\")]", "question_type": "parallel_function"}
{"question": "What was the Treaty of Paris about? Also, what was the importance of Magna Carta in history?", "function": {"name": "history_fact.fetch", "description": "Retrieve facts about historical events or documents", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The historical event or document you want to know about."}, "depth": {"type": "string", "description": "The depth of information required. Choices are 'brief' or 'detailed'."}, "year": {"type": "integer", "description": "The year of the event/document."}}, "required": ["event"]}}, "human_eval_answer": "[history_fact.fetch(event='Treaty of Paris'), history_fact.fetch(event='Magna Carta')]", "question_type": "parallel_function"}
{"question": "Provide me the major events during the presidency of Abraham Lincoln and George Washington.", "function": {"name": "us_history.events_by_presidency", "description": "Retrieve the major events during the presidency of a specified US president.", "parameters": {"type": "object", "properties": {"president_name": {"type": "string", "description": "The name of the US president."}, "start_year": {"type": "integer", "description": "The start year of their presidency (optional)."}, "end_year": {"type": "integer", "description": "The end year of their presidency (optional)."}}, "required": ["president_name"]}}, "human_eval_answer": "[us_history.events_by_presidency(president_name='Abraham Lincoln'), us_history.events_by_presidency(president_name='George Washington')]", "question_type": "parallel_function"}
{"question": "Find out who was the president of United States in 1980 and 2016, and the vice president in 1975 and 2011.", "function": {"name": "get_president_and_vp", "description": "Get the President and Vice President of United States for a specified year.", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year for which president or vice president information is needed."}, "position": {"type": "string", "description": "The position: either 'president' or 'vice president'."}}, "required": ["year", "position"]}}, "human_eval_answer": "[get_president_and_vp(year=1980, position='president'), get_president_and_vp(year=2016, position='president'), get_president_and_vp(year=1975, position='vice president'), get_president_and_vp(year=2011, position='vice president')]", "question_type": "parallel_function"}
{"question": "I want to know the rise and fall of Christianity in Egypt and Turkey from 100 A.D to 1500 A.D.", "function": {"name": "religion_history.track", "description": "Track the historical development of a specific religion in a specific area within a specific time frame.", "parameters": {"type": "object", "properties": {"region": {"type": "string", "description": "The geographical area where the religion's history is to be tracked."}, "religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The beginning year of the time frame."}, "end_year": {"type": "integer", "description": "The ending year of the time frame."}}, "required": ["region", "religion", "start_year", "end_year"]}}, "human_eval_answer": "[religion_history.track(region=\"Egypt\", religion=\"Christianity\", start_year=100, end_year=1500), religion_history.track(region=\"Turkey\", religion=\"Christianity\", start_year=100, end_year=1500)]", "question_type": "parallel_function"}
{"question": "Fetch the details of the ancient empires Persian Empire and Mauryan Empire with their religious history and influences.", "function": {"name": "ancient_empires.get_religion_info", "description": "Retrieve information about religious history and influences of an ancient empire.", "parameters": {"type": "object", "properties": {"empire_name": {"type": "string", "description": "The name of the ancient empire."}, "include_influences": {"type": "boolean", "default": false, "description": "Specify whether to include details about the religious influences of the empire."}}, "required": ["empire_name"]}}, "human_eval_answer": "[ancient_empires.get_religion_info(empire_name='Persian Empire', include_influences=true), ancient_empires.get_religion_info(empire_name='Mauryan Empire', include_influences=true)]", "question_type": "parallel_function"}
{"question": "Using watercolor, what combination of colors should I mix to get the color magenta and what quantity for each color? Also, I want to know how to get color navy by using acrylic paint and their respective quantities.", "function": {"name": "paint_color_mixture", "description": "Gives a combination of primary colors to mix for creating a certain color. This function requires type of paint and color.", "parameters": {"type": "object", "properties": {"paint_type": {"type": "string", "description": "The type of paint (Watercolor, Oil, Acrylic)."}, "color": {"type": "string", "description": "The color to be produced from the mixture."}}, "required": ["paint_type", "color"]}}, "human_eval_answer": "[paint_color_mixture(paint_type='Watercolor', color='Magenta'), paint_color_mixture(paint_type='Acrylic', color='Navy')]", "question_type": "parallel_function"}
{"question": "What are the RGB and HEX color values for navy, purple and maroon? ", "function": {"name": "color_converter.get_color_info", "description": "Retrieve RGB values and hexadecimal codes of a specific color.", "parameters": {"type": "object", "properties": {"color_name": {"type": "string", "description": "The name of the color."}, "conversion_type": {"type": "array", "items": {"type": "string", "enum": ["RGB", "HEX"]}, "description": "The conversion type for the color."}}, "required": ["color_name", "conversion_type"]}}, "human_eval_answer": "[color_converter.get_color_info(color_name='navy', conversion_type=['RGB', 'HEX']), color_converter.get_color_info(color_name='purple', conversion_type=['RGB', 'HEX']), color_converter.get_color_info(color_name='maroon', conversion_type=['RGB', 'HEX'])]", "question_type": "parallel_function"}
{"question": "What's the driving distance between New York and Washington DC, and between Los Angeles and San Francisco with optional parameter shortest route enabled?", "function": {"name": "calc_distance", "description": "Calculate the driving distance between two locations.", "parameters": {"type": "object", "properties": {"start_loc": {"type": "string", "description": "Starting location."}, "end_loc": {"type": "string", "description": "Ending location."}, "shortest_route": {"type": "boolean", "default": "false", "description": "If true, returns the shortest driving route."}}, "required": ["start_loc", "end_loc"]}}, "human_eval_answer": "[calc_distance(start_loc=\"New York\", end_loc=\"Washington DC\", shortest_route=True), calc_distance(start_loc=\"Los Angeles\", end_loc=\"San Francisco\", shortest_route=True)]", "question_type": "parallel_function"}
{"question": "Find opening hours and ticket prices for adults and children for the National Museum in Washington D.C. and the Louvre Museum in Paris.", "function": {"name": "museum_info.get_info", "description": "Retrieve specific details about museums, such as opening hours and ticket prices.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City where the museum is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["Opening hours", "Adult tickets", "Child tickets"]}, "description": "List of details to retrieve about the museum."}}, "required": ["location", "details"]}}, "human_eval_answer": "[museum_info.get_info(location='Washington D.C.', details=['Opening hours', 'Adult tickets', 'Child tickets']),museum_info.get_info(location='Paris', details=['Opening hours', 'Adult tickets', 'Child tickets'])]", "question_type": "parallel_function"}
{"question": "Give me the detail of the exhibition named 'Wonder of Nature' in the Louvre museum, and 'Age of Reptiles' in the British Museum. Plus their cost per visit for children and adult.", "function": {"name": "museum.exhibition_detail", "description": "Provides details of a particular exhibition in a museum, including the cost per visit for different age groups.", "parameters": {"type": "object", "properties": {"exhibition_name": {"type": "string", "description": "The name of the exhibition."}, "museum_name": {"type": "string", "description": "The name of the museum."}, "visitor_type": {"type": "array", "items": {"type": "string", "enum": ["child", "adult"]}, "description": "Age group of the visitor."}}, "required": ["exhibition_name", "museum_name"]}}, "human_eval_answer": "[museum.exhibition_detail(exhibition_name='Wonder of Nature', museum_name='Louvre', visitor_type=['child', 'adult']), museum.exhibition_detail(exhibition_name='Age of Reptiles', museum_name='British Museum', visitor_type=['child', 'adult'])]", "question_type": "parallel_function"}
{"question": "Show me the closest music shop where I can purchase a Yamaha acoustic guitar and a Kawai piano in San Francisco, California, and Chicago, Illinois.", "function": {"name": "find_music_instrument_store", "description": "Locate nearby music instrument stores that sell specific brands or instruments", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state e.g. San Francisco, CA."}, "instruments": {"type": "array", "items": {"type": "string"}, "description": "A list of specific instruments or brands you are looking for."}}, "required": ["location", "instruments"]}}, "human_eval_answer": "[find_music_instrument_store(location='San Francisco, CA', instruments=['Yamaha Acoustic Guitar', 'Kawai Piano']), find_music_instrument_store(location='Chicago, IL', instruments=['Yamaha Acoustic Guitar', 'Kawai Piano'])]", "question_type": "parallel_function"}
{"question": "Get me the price and stock availability for a Yamaha P125 piano in Berlin and Madrid's music stores.", "function": {"name": "check_instrument_availability", "description": "Get the price and availability of a specified instrument in a music store located in a specified city", "parameters": {"type": "object", "properties": {"instrument": {"type": "string", "description": "The name of the musical instrument."}, "city": {"type": "string", "description": "City where the store is located."}}, "required": ["instrument", "city"]}}, "human_eval_answer": "[check_instrument_availability(instrument='Yamaha P125', city='Berlin'), check_instrument_availability(instrument='Yamaha P125', city='Madrid')]", "question_type": "parallel_function"}
{"question": "Can you find me any upcoming rock and jazz concerts for the next month in San Francisco, California and New York, New York?", "function": {"name": "concert_finder", "description": "Locate upcoming concerts based on music genre in specified city and state.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state to find concerts."}, "music_genre": {"type": "string", "description": "Music genre of the concerts."}, "time_period": {"type": "integer", "description": "Number of days to search upcoming concerts.", "default": 30}}, "required": ["location", "music_genre"]}}, "human_eval_answer": "[concert_finder(location='San Francisco, California', music_genre='rock', time_period=30), concert_finder(location='San Francisco, California', music_genre='jazz', time_period=30), concert_finder(location='New York, New York', music_genre='rock', time_period=30), concert_finder(location='New York, New York', music_genre='jazz', time_period=30)]", "question_type": "parallel_function"}
{"question": "Find me all the classical concerts near Berlin and Paris happening next Friday, and I am interested only in those with available parking.", "function": {"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre and availability of parking.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the user wants to find a concert."}, "date": {"type": "string", "description": "The date on which the user wants to attend a concert."}, "genre": {"type": "string", "description": "The genre of music of the concert."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Parking", "Food and Beverages", "VIP Seating", "Disability Access"]}, "description": "Amenities preferred at the concert."}}, "required": ["location", "date", "genre"]}}, "human_eval_answer": "[concert.find_nearby(location=\"Berlin\", date=\"next Friday\", genre=\"Classical\", amenities=\"Parking\"), concert.find_nearby(location=\"Paris\", date=\"next Friday\", genre=\"Classical\", amenities=\"Parking\")]", "question_type": "parallel_function"}
{"question": "What's the current most played Pop song and also find me the current most played Rock song in Australia.", "function": {"name": "musicCharts.getMostPlayed", "description": "This function retrieves the most played song in a particular genre from a specified region", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "Music genre e.g., Rock, Pop, HipHop etc."}, "region": {"type": "string", "description": "Region where the song popularity is to be checked"}, "duration": {"type": "integer", "description": "Time duration in hours for which the music played count will be considered."}}, "required": ["genre", "region"]}}, "human_eval_answer": "[musicCharts.getMostPlayed(genre='Pop', region='Australia'), musicCharts.getMostPlayed(genre='Rock', region='Australia')]", "question_type": "parallel_function"}
{"question": "Find the winning percentage of Lakers and Bulls in NBA seasons 2018 and 2020.", "function": {"name": "calculate_winning_percentage", "description": "Calculate the winning percentage for a particular basketball team in a given season.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the basketball team."}, "season": {"type": "integer", "description": "The season (year) you want to find winning percentage for."}}, "required": ["team", "season"]}}, "human_eval_answer": "[calculate_winning_percentage(team='Lakers', season=2018), calculate_winning_percentage(team='Bulls', season=2018), calculate_winning_percentage(team='Lakers', season=2020), calculate_winning_percentage(team='Bulls', season=2020)]", "question_type": "parallel_function"}
{"question": "What is the current ranking of Barcelona and Manchester United in the UEFA Champions League and La Liga respectively?", "function": {"name": "get_team_ranking", "description": "Retrieve the current ranking of a football team in a specific league.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the football team."}, "league": {"type": "string", "description": "The league the team is competing in. E.g. UEFA Champions League, La Liga."}}, "required": ["team", "league"]}}, "human_eval_answer": "[get_team_ranking(team=\"Barcelona\", league=\"UEFA Champions League\"),get_team_ranking(team=\"Manchester United\", league=\"La Liga\")]", "question_type": "parallel_function"}
{"question": "In a game of Pokemon GO, what moves can a Pikachu learn? Also, check if Bulbasaur can learn a specific move named 'Solar Beam'.", "function": {"name": "PokemonGO.get_moves", "description": "Retrieve the set of moves a Pokemon can learn. The optional parameter checks if the Pokemon can learn a specified move.", "parameters": {"type": "object", "properties": {"pokemon": {"type": "string", "description": "The name of the Pokemon."}, "move": {"type": "string", "description": "An optional parameter that checks if the Pokemon can learn this specific move."}}, "required": ["pokemon"]}}, "human_eval_answer": "[PokemonGO.get_moves(pokemon='Pikachu'),PokemonGO.get_moves(pokemon='Bulbasaur', move='Solar Beam')]", "question_type": "parallel_function"}
{"question": "Check if the player with id 3142 in team RocketLeague has achieved top scorer status in seasons 2017, 2018 and 2019.", "function": {"name": "player_status.check", "description": "Check a player's status in a team for a particular season.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The team where the player plays."}, "player_id": {"type": "integer", "description": "The id of the player."}, "season": {"type": "integer", "description": "The season for which player's status need to be checked. Optional. Default is current season."}}, "required": ["team", "player_id"]}}, "human_eval_answer": "[player_status.check(team='RocketLeague', player_id=3142, season=2017), player_status.check(team='RocketLeague', player_id=3142, season=2018), player_status.check(team='RocketLeague', player_id=3142, season=2019)]", "question_type": "parallel_function"}
{"question": "How to save game progress at stage 7 in easy mode and stage 3 in hard mode?", "function": {"name": "game.save_progress", "description": "Save the current state of a player's game, given the stage, level and game mode.", "parameters": {"type": "object", "properties": {"stage": {"type": "integer", "description": "The current stage in the game the player has reached."}, "mode": {"type": "string", "enum": ["easy", "hard"], "description": "The game mode. Available modes are easy or hard."}, "level": {"type": "string", "default": "user", "description": "The player's level."}}, "required": ["stage", "mode"]}}, "human_eval_answer": "[game.save_progress(stage=7, mode='easy', level='user'), game.save_progress(stage=3, mode='hard', level='user')]", "question_type": "parallel_function"}
{"question": "Search for a Chicken Noodle Soup recipe and a Vegan Salad recipe.", "function": {"name": "recipe_search.find", "description": "Locate recipes based on the type of dish.", "parameters": {"type": "object", "properties": {"dish": {"type": "string", "description": "The name of the dish to search for."}, "diet": {"type": "string", "enum": ["Vegan", "Vegetarian", "Paleo", "Keto"], "description": "Dietary preference."}}, "required": ["dish"]}}, "human_eval_answer": "[recipe_search.find(dish=\"Chicken Noodle Soup\"),recipe_search.find(dish=\"Salad\", diet=\"Vegan\")]", "question_type": "parallel_function"}
{"question": "Find an Italian restaurant near me in New York that provides vegetarian food options and a Japanese sushi restaurant in Los Angeles that offers delivery service.", "function": {"name": "restaurant_finder", "description": "Search for restaurants based on location, cuisine type and other preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state, e.g. New York, NY."}, "cuisine": {"type": "string", "description": "Type of cuisine the user is interested in, e.g. Italian, Japanese etc."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["Vegetarian", "Delivery", "Vegan", "Takeout"]}, "description": "Extra features in the restaurant"}}, "required": ["location", "cuisine"]}}, "human_eval_answer": "[restaurant_finder(location='New York', cuisine='Italian', preferences='Vegetarian'), restaurant_finder(location='Los Angeles', cuisine='Japanese', preferences='Delivery')]", "question_type": "parallel_function"}
{"question": "Tell me a cooking recipe for 'Lasagne Bolognese' for serving 4 people and another one for 'Caesar Salad' for serving 2 people", "function": {"name": "get_cooking_recipe", "description": "Retrieve the cooking recipe for a specified food item.", "parameters": {"type": "object", "properties": {"dish_name": {"type": "string", "description": "Name of the food dish for which recipe is required."}, "serving_size": {"type": "integer", "description": "Number of people for which the dish will be prepared."}}, "required": ["dish_name", "serving_size"]}}, "human_eval_answer": "[get_cooking_recipe(dish_name='Lasagne Bolognese', serving_size=4), get_cooking_recipe(dish_name='Caesar Salad', serving_size=2)]", "question_type": "parallel_function"}
{"question": "I want to order a large pepperoni pizza and a chicken Caesar salad from Whole Foods at the downtown location and then another order of the same items from the uptown location.", "function": {"name": "whole_foods.order", "description": "Order food from Whole Foods", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of Whole Foods."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "size": {"type": "string", "description": "Size of the order.", "enum": ["small", "medium", "large"]}}, "required": ["location", "items", "size"]}}, "human_eval_answer": "[whole_foods.order(location=\"downtown\",items=[\"large pepperoni pizza\", \"chicken Caesar salad\"], size=\"large\"), whole_foods.order(location=\"uptown\",items=[\"large pepperoni pizza\", \"chicken Caesar salad\"], size=\"large\")]", "question_type": "parallel_function"}
{"question": "Find a supermarket in New York City that opens 24 hours and another one in San Diego that offers home delivery.", "function": {"name": "grocery_store.find_by_criteria", "description": "Find grocery stores based on specific criteria such as location, hours of operation, or availability of services.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to find a grocery store."}, "criteria": {"type": "array", "items": {"type": "string", "enum": ["24 hours", "Home Delivery", "In-store Pickup"]}, "description": "Specific features or services you're looking for in a grocery store."}}, "required": ["location", "criteria"]}}, "human_eval_answer": "[grocery_store.find_by_criteria(location='New York City', criteria=['24 hours']), grocery_store.find_by_criteria(location='San Diego', criteria=['Home Delivery'])]", "question_type": "parallel_function"}
{"question": "Check the hotel room availability for 'Queens Hotel' in Berlin, Germany from March 10, 2022 to March 20, 2022 and for 'Royal Hotel' in Paris, France from April 5, 2022 to April 15, 2022.", "function": {"name": "hotel_booking.check_availability", "description": "Check room availability for a particular hotel for given dates.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "check_in_date": {"type": "string", "description": "The check-in date in YYYY-MM-DD format."}, "check_out_date": {"type": "string", "description": "The check-out date in YYYY-MM-DD format."}}, "required": ["hotel_name", "location", "check_in_date", "check_out_date"]}}, "human_eval_answer": "[hotel_booking.check_availability(hotel_name='Queens Hotel', location='Berlin, Germany', check_in_date='2022-03-10', check_out_date='2022-03-20'), hotel_booking.check_availability(hotel_name='Royal Hotel', location='Paris, France', check_in_date='2022-04-05', check_out_date='2022-04-15')]", "question_type": "parallel_function"}
{"question": "Book a room for 2 adults and a child at the Sheraton Hotel in New York with check-in on May 1, 2022 and check-out on May 5, 2022. Also, Book a room for 1 adult and 2 children at the Marriott in Los Angeles with check-in on June 1, 2022 and check-out on June 10, 2022.", "function": {"name": "hotel_booking.book", "description": "Book a hotel room at the specified location for the specified number of adults and children.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city where the hotel is located."}, "check_in": {"type": "string", "description": "The check-in date in the format yyyy-mm-dd."}, "check_out": {"type": "string", "description": "The check-out date in the format yyyy-mm-dd."}, "adults": {"type": "integer", "description": "The number of adults for the booking."}, "children": {"type": "integer", "description": "The number of children for the booking."}}, "required": ["hotel_name", "location", "check_in", "check_out", "adults", "children"]}}, "human_eval_answer": "[hotel_booking.book(hotel_name='Sheraton Hotel', location='New York', check_in='2022-05-01', check_out='2022-05-05', adults=2, children=1), hotel_booking.book(hotel_name='Marriott', location='Los Angeles', check_in='2022-06-01', check_out='2022-06-10', adults=1, children=2)]", "question_type": "parallel_function"}
{"question": "Get me the currency exchange rates of the following pairs: USD to AUD and USD to CAD?", "function": {"name": "get_exchange_rate", "description": "Fetch the current exchange rate for the provided currency pairs.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The base currency in the pair."}, "target_currency": {"type": "string", "description": "The currency to which the base currency needs to be converted."}}, "required": ["base_currency", "target_currency"]}}, "human_eval_answer": "[get_exchange_rate(base_currency='USD', target_currency='AUD'), get_exchange_rate(base_currency='USD', target_currency='CAD')]", "question_type": "parallel_function"}
{"question": "How much will it cost in dollars if I transfer 15000 Euro to dollars? and how much if I convert 200 pounds to dollars?", "function": {"name": "get_conversion_cost", "description": "Convert a value from one currency to another including conversion charges.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to be converted."}, "from_currency": {"type": "string", "description": "The current currency of the amount."}, "to_currency": {"type": "string", "description": "The target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}, "human_eval_answer": "[get_conversion_cost(amount=15000, from_currency='EUR', to_currency='USD'),get_conversion_cost(amount=200, from_currency='GBP', to_currency='USD')]", "question_type": "parallel_function"}
{"question": "What is the product of the factorial of 5, the factorial of 7, and the factorial of 9?", "function": {"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "object", "properties": {"number": {"type": "number", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}, "human_eval_answer": "[math.factorial(number=5), math.factorial(number=7), math.factorial(number=9)]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the Euclidean norm, or the length of the vector from the origin to the point (3, 4) using the math.hypot function, and then calculate the Euclidean norm from the origin to the point (6, 8) using the same function? Also, can you calculate the Euclidean norm from the origin to the point (9, 12, 15) using the math.hypot function?\"", "function": {"name": "math.hypot", "description": "Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.", "parameters": {"type": "object", "properties": {"x": {"type": "number", "description": "The x-coordinate value."}, "y": {"type": "number", "description": "The y-coordinate value."}, "z": {"type": "number", "description": "Optional. The z-coordinate value. Default is 0."}}, "required": ["x", "y"]}}, "human_eval_answer": "[\"math.hypot(x=3, y=4)\", \"math.hypot(x=6, y=8)\", \"math.hypot(x=9, y=12, z=15)\"]", "question_type": "parallel_function"}
{"question": "\"Can you help me find the roots of two quadratic equations? The first equation is 3x^2 + 4x + 2 = 0, where 'a' is the coefficient of x^2, 'b' is the coefficient of x, and 'c' is the constant term. The second equation is 5x^2 - 7x + 3 = 0, where 'a' is the coefficient of x^2, 'b' is the coefficient of x, and 'c' is the constant term.\"", "function": {"name": "algebra.quadratic_roots", "description": "Find the roots of a quadratic equation ax^2 + bx + c = 0.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of x^2."}, "b": {"type": "number", "description": "Coefficient of x."}, "c": {"type": "number", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "[algebra.quadratic_roots(a=3, b=4, c=2), algebra.quadratic_roots(a=5, b=-7, c=3)]", "question_type": "parallel_function"}
{"question": "\"Can you help me find the roots of two quadratic equations? The first equation has coefficients of x squared, x, and the constant term as 5, 6, and 1 respectively. The second equation has coefficients of x squared, x, and the constant term as 3, 2, and 1 respectively. Can you solve these equations using the 'solve_quadratic_equation' function?\"", "function": {"name": "solve_quadratic_equation", "api_call": "root = solve_quadratic_equation(a, b, c)", "description": "Function solves the quadratic equation and returns its roots.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of x squared"}, "b": {"type": "number", "description": "Coefficient of x"}, "c": {"type": "number", "description": "Constant term in the quadratic equation"}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "[\"solve_quadratic_equation(a=5, b=6, c=1)\", \"solve_quadratic_equation(a=3, b=2, c=1)\"]", "question_type": "parallel_function"}
{"question": "\"Can you help me solve the following quadratic equations? The first one has coefficients a = 2, b = 5, and c = 3 and I want to find all roots, real or complex. The second equation has coefficients a = 1, b = -3, and c = 2 and I only want to find the real roots. The third equation has coefficients a = 4, b = -7, and c = 3 and I want to find all roots, real or complex. And the last equation has coefficients a = 1, b = 2, and c = 1 and I only want to find the real roots.\"", "function": {"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "number", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "number", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. This parameter is optional."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "[\"solve_quadratic(a=2, b=5, c=3, root_type='all')\", \"solve_quadratic(a=1, b=-3, c=2, root_type='real')\", \"solve_quadratic(a=4, b=-7, c=3, root_type='all')\", \"solve_quadratic(a=1, b=2, c=1, root_type='real')\"]", "question_type": "parallel_function"}
{"question": "What is the total circumference of four circles, where the first circle has a radius of 5cm, the second circle has a radius of 10cm, the third circle has a radius of 15cm, and the fourth circle has a radius of 20cm?", "function": {"name": "calculate_circumference", "description": "Calculates the circumference of a circle with a given radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle in the unit given."}, "unit": {"type": "string", "description": "The unit of measurement for the radius. Default is cm."}}, "required": ["radius"]}}, "human_eval_answer": "[calculate_circumference(radius=5, unit='cm'), calculate_circumference(radius=10, unit='cm'), calculate_circumference(radius=15, unit='cm'), calculate_circumference(radius=20, unit='cm')]", "question_type": "parallel_function"}
{"question": "What is the total area of three circles, where the first circle has a radius of 5 meters, the second circle has a radius of 10 meters, and the third circle has a radius of 15 meters, all measured in meters?", "function": {"name": "geometry.area_circle", "description": "Calculate the area of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "units": {"type": "string", "description": "The units in which the radius is measured (defaults to meters).", "default": "meters"}}, "required": ["radius"]}}, "human_eval_answer": "[geometry.area_circle(radius=5, units='meters'), geometry.area_circle(radius=10, units='meters'), geometry.area_circle(radius=15, units='meters')]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the area of two circles, one with a radius of 5 meters and the other with a radius of 10 meters, and then compare the two areas to determine which circle is larger and by how much?\"", "function": {"name": "geometry.calculate_area_circle", "description": "Calculate the area of a circle given its radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "unit": {"type": "string", "description": "The measurement unit of the radius (optional parameter, default is 'units')."}}, "required": ["radius"]}}, "human_eval_answer": "[\"geometry.calculate_area_circle(radius=5, unit='meters')\", \"geometry.calculate_area_circle(radius=10, unit='meters')\"]", "question_type": "parallel_function"}
{"question": "\"John is working on a project where he needs to calculate the area of two right-angled triangles. The first triangle has a base of 12 meters and a height of 15 meters. The second triangle has a base of 18 meters and a height of 24 meters. He wants to know the total area of these two triangles in square meters. Can you help him calculate this?\"", "function": {"name": "calculate_area", "description": "Calculate the area of a right-angled triangle given the lengths of its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the right-angled triangle."}, "height": {"type": "number", "description": "The height of the right-angled triangle."}, "unit": {"type": "string", "description": "The unit of measure used. Defaults to cm.", "default": "cm"}}, "required": ["base", "height"]}}, "human_eval_answer": "[calculate_area(base=12, height=15, unit='m'), calculate_area(base=18, height=24, unit='m')]", "question_type": "parallel_function"}
{"question": "\"John is a geometry teacher who is preparing a quiz for his students. He has drawn two triangles on the board. The first triangle has a base of 10 units and a height of 5 units. The second triangle has a base of 8 units and a height of 6 units. John wants to know the total area of the two triangles combined. Can you help him calculate this?\"", "function": {"name": "calculate_triangle_area", "description": "Calculate the area of a triangle using its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle from the base."}}, "required": ["base", "height"]}}, "human_eval_answer": "[calculate_triangle_area(base=10, height=5), calculate_triangle_area(base=8, height=6)]", "question_type": "parallel_function"}
{"question": "What is the combined circumference of four circles, where the first circle has a radius of 5cm, the second circle has a radius of 10cm, the third circle has a radius of 15cm, and the fourth circle has a radius of 20cm, and I want the output in meters?", "function": {"name": "geometry.circumference", "description": "Calculate the circumference of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "units": {"type": "string", "description": "Units for the output circumference measurement. Default is 'cm'."}}, "required": ["radius"]}}, "human_eval_answer": "[geometry.circumference(radius=5, units='m'), geometry.circumference(radius=10, units='m'), geometry.circumference(radius=15, units='m'), geometry.circumference(radius=20, units='m')]", "question_type": "parallel_function"}
{"question": "\"Could you calculate the derivative of the polynomial function '3x^3 - 2x^2 + 5x - 7' and then evaluate this derivative at x=4? After that, could you also calculate the derivative of the resulting function and evaluate it at x=2?\"", "function": {"name": "calculate_derivative", "description": "Calculate the derivative of a polynomial function.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The polynomial function."}, "x_value": {"type": "number", "description": "The x-value at which the derivative is calculated. Optional, if not given, the function will return a function of the derivative instead of a specific value."}}, "required": ["function"]}}, "human_eval_answer": "[calculate_derivative(function='3x^3 - 2x^2 + 5x - 7', x_value=4), calculate_derivative(function='9x^2 - 4x + 5', x_value=2)]", "question_type": "parallel_function"}
{"question": "\"Could you calculate the area under the curve for the function 'x^3' between x values of 2 and 5 using the 'trapezoid' method of numerical integration, and then do the same calculation but using the 'simpson' method? After that, could you repeat these calculations but for the function '2x^2+3x-1' between x values of -1 and 3?\"", "function": {"name": "integrate", "description": "Calculate the area under a curve for a specified function between two x values.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to integrate, represented as a string. For example, 'x^3'"}, "start_x": {"type": "number", "description": "The starting x-value to integrate over."}, "end_x": {"type": "number", "description": "The ending x-value to integrate over."}, "method": {"type": "string", "description": "The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'."}}, "required": ["function", "start_x", "end_x"]}}, "human_eval_answer": "[integrate(function='x^3', start_x=2, end_x=5, method='trapezoid'), integrate(function='x^3', start_x=2, end_x=5, method='simpson'), integrate(function='2x^2+3x-1', start_x=-1, end_x=3, method='trapezoid'), integrate(function='2x^2+3x-1', start_x=-1, end_x=3, method='simpson')]", "question_type": "parallel_function"}
{"question": "\"Can you compute the derivative of the function 3x^2 + 2x - 1 at the value 5, where the variable present in the function is 'x', and then compute the derivative of the function 4y^3 - 3y^2 + 2y - 1 at the value 3, where the variable present in the function is 'y'?\"", "function": {"name": "calculus.derivative", "description": "Compute the derivative of a function at a specific value.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "value": {"type": "integer", "description": "The value where the derivative needs to be calculated at."}, "function_variable": {"type": "string", "description": "The variable present in the function, for instance x or y, etc."}}, "required": ["function", "value"]}}, "human_eval_answer": "[calculus.derivative(function='3x^2 + 2x - 1', value=5, function_variable='x'), calculus.derivative(function='4y^3 - 3y^2 + 2y - 1', value=3, function_variable='y')]", "question_type": "parallel_function"}
{"question": "What are the prime factors of the number 4567 and 7890, and can you provide these in a formatted string as well as an array?", "function": {"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false"}}, "required": ["number", "formatted"]}}, "human_eval_answer": "[get_prime_factors(number=4567, formatted=True), get_prime_factors(number=4567, formatted=False), get_prime_factors(number=7890, formatted=True), get_prime_factors(number=7890, formatted=False)]", "question_type": "parallel_function"}
{"question": "What are the prime factors of the numbers 45, 100, and 150?", "function": {"name": "number_analysis.prime_factors", "description": "Compute the prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to be factored."}}, "required": ["number"]}}, "human_eval_answer": "[number_analysis.prime_factors(number=45), number_analysis.prime_factors(number=100), number_analysis.prime_factors(number=150)]", "question_type": "parallel_function"}
{"question": "What is the greatest common divisor (GCD) of the two pairs of numbers (45, 60) and (81, 27)?", "function": {"name": "math.gcd", "description": "Compute the greatest common divisor of two numbers", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}, "human_eval_answer": "[math.gcd(num1=45, num2=60), math.gcd(num1=81, num2=27)]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the highest common factor of the pair of numbers (45, 60) and then use that result to find the highest common factor with another pair of numbers (90, 120)? Please also find the highest common factor of the pair (36, 48) and then find the highest common factor of that result with the pair (72, 96).\"", "function": {"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "object", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}, "human_eval_answer": "[\"math.hcf(number1=45, number2=60)\", \"math.hcf(number1=15, number2=90)\", \"math.hcf(number1=15, number2=120)\", \"math.hcf(number1=36, number2=48)\", \"math.hcf(number1=12, number2=72)\", \"math.hcf(number1=12, number2=96)\"]", "question_type": "parallel_function"}
{"question": "\"Can you help me find the greatest common divisor of the following pairs of integers: (45, 60) and (81, 63)? Please use the number_theory.gcd function to compute this.\"", "function": {"name": "number_theory.gcd", "description": "Compute the greatest common divisor of two given integers.", "parameters": {"type": "object", "properties": {"number1": {"type": "integer", "description": "The first integer."}, "number2": {"type": "integer", "description": "The second integer."}}, "required": ["number1", "number2"]}}, "human_eval_answer": "[\"number_theory.gcd(number1=45, number2=60)\", \"number_theory.gcd(number1=81, number2=63)\"]", "question_type": "parallel_function"}
{"question": "What is the prime factorization of the number 4567 and the number 7890, if we want the results to be returned in a 'dictionary' format?", "function": {"name": "prime_factorize", "description": "Calculate the prime factorization of a given integer.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number for which to calculate the prime factorization."}, "return_type": {"type": "string", "description": "Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'."}}, "required": ["number"]}}, "human_eval_answer": "[prime_factorize(number=4567, return_type='dictionary'), prime_factorize(number=7890, return_type='dictionary')]", "question_type": "parallel_function"}
{"question": "\"John and Mary are playing a game where they each choose two numbers and then calculate the greatest common divisor (GCD) of their chosen numbers. John chose the numbers 36 and 48, while Mary chose the numbers 60 and 96. Can you help them find the GCD of their chosen numbers? Also, they want to know the GCD of the four numbers they chose. Can you calculate that as well?\"", "function": {"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}, "human_eval_answer": "[\"math.gcd(num1=36, num2=48)\", \"math.gcd(num1=60, num2=96)\", \"math.gcd(num1=math.gcd(num1=36, num2=48), num2=math.gcd(num1=60, num2=96))\"]", "question_type": "parallel_function"}
{"question": "\"Imagine you are conducting a physics experiment where you are dropping objects from different heights and observing their final velocities. You drop a tennis ball from a height of 10 meters with an initial velocity of 0 m/s and then from a height of 20 meters with the same initial velocity. You also drop a baseball from a height of 15 meters with an initial velocity of 0 m/s and then from a height of 25 meters with the same initial velocity. Assuming the acceleration due to gravity is approximately 9.81 m/s^2, can you calculate the final velocities of the tennis ball and the baseball for each drop?\"", "function": {"name": "calculate_final_velocity", "description": "Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.", "parameters": {"type": "object", "properties": {"height": {"type": "number", "description": "The height the object is dropped from, in meters."}, "initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s. Default is zero."}, "gravity": {"type": "number", "description": "Acceleration due to gravity. Default value is approximately 9.81 m/s^2, earth's gravity."}}, "required": ["height"]}}, "human_eval_answer": "[calculate_final_velocity(height=10, initial_velocity=0, gravity=9.81), calculate_final_velocity(height=20, initial_velocity=0, gravity=9.81), calculate_final_velocity(height=15, initial_velocity=0, gravity=9.81), calculate_final_velocity(height=25, initial_velocity=0, gravity=9.81)]", "question_type": "parallel_function"}
{"question": "A group of cyclists are planning a two-day cycling trip. On the first day, they plan to cover a distance of 120 kilometers in 5 hours. On the second day, they plan to cover a distance of 150 kilometers in 6 hours. They want to know their average velocity for each day in km/h. Could you calculate their velocity for each day using the 'calculate_velocity' function?", "function": {"name": "calculate_velocity", "description": "Calculate the velocity for a certain distance travelled within a specific duration.", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance travelled by the object, typically in kilometers."}, "duration": {"type": "number", "description": "The duration of the journey, typically in hours."}, "unit": {"type": "string", "description": "Optional parameter. The unit to return the velocity in. If not provided, the default is km/h."}}, "required": ["distance", "duration"]}}, "human_eval_answer": "[calculate_velocity(distance=120, duration=5), calculate_velocity(distance=150, duration=6)]", "question_type": "parallel_function"}
{"question": "A car is participating in a drag race. In the first round, the car starts from rest and accelerates at a rate of 5 meters/second^2 for 10 seconds. In the second round, the car starts with an initial velocity of 10 meters/second and accelerates at a rate of 7 meters/second^2 for 8 seconds. In the third round, the car starts with an initial velocity of 20 meters/second and accelerates at a rate of 4 meters/second^2 for 12 seconds. What are the final velocities of the car in each round?", "function": {"name": "final_velocity", "description": "Calculate the final velocity of an object given its initial velocity, acceleration, and time.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in meters/second."}, "acceleration": {"type": "number", "description": "The acceleration of the object in meters/second^2."}, "time": {"type": "number", "description": "The time over which the acceleration is applied in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "[final_velocity(initial_velocity=0, acceleration=5, time=10), final_velocity(initial_velocity=10, acceleration=7, time=8), final_velocity(initial_velocity=20, acceleration=4, time=12)]", "question_type": "parallel_function"}
{"question": "\"A car starts from rest and accelerates uniformly over a time of 5.2 seconds for a distance of 110 m. Determine the acceleration of the car. Then, another car with an initial velocity of 15 m/s accelerates at a rate of 3.5 m/s^2 for a time of 7 seconds. What is the displacement of the second car? Now, consider a third car that starts with an initial velocity of 20 m/s and accelerates at a rate of 2 m/s^2 for a time of 10 seconds. What is the displacement of the third car? Finally, a fourth car with an initial velocity of 25 m/s travels for a time of 8 seconds without any acceleration. What is the displacement of the fourth car?\"", "function": {"name": "calculate_displacement", "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "time": {"type": "number", "description": "The time in seconds that the object has been in motion."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2.", "default": 0}}, "required": ["initial_velocity", "time"]}}, "human_eval_answer": "[\"calculate_displacement(initial_velocity=15, time=7, acceleration=3.5)\", \"calculate_displacement(initial_velocity=20, time=10, acceleration=2)\", \"calculate_displacement(initial_velocity=25, time=8, acceleration=0)\"]", "question_type": "parallel_function"}
{"question": "A physics experiment is being conducted where two objects are dropped from a height, neglecting air resistance. The first object is dropped with an initial speed of 0 m/s and the second object is dropped with an initial speed of 5 m/s. If the first object is in free fall for 10 seconds and the second object is in free fall for 7 seconds, can you calculate the final speed of both objects considering the acceleration due to gravity as -9.81 m/s^2?", "function": {"name": "calculate_final_speed", "description": "Calculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2", "parameters": {"type": "object", "properties": {"initial_speed": {"type": "number", "description": "The initial speed of the object in m/s. Default is 0 for an object at rest."}, "time": {"type": "number", "description": "The time in seconds for which the object is in free fall."}, "gravity": {"type": "number", "description": "The acceleration due to gravity. Default is -9.81 m/s^2."}}, "required": ["time"]}}, "human_eval_answer": "[calculate_final_speed(initial_speed=0, time=10, gravity=-9.81), calculate_final_speed(initial_speed=5, time=7, gravity=-9.81)]", "question_type": "parallel_function"}
{"question": "\"Imagine you are conducting an experiment with two different objects. The first object is accelerated at a rate of 5 m/s^2 and travels a distance of 100 meters. The second object is accelerated at a rate of 10 m/s^2 and travels a distance of 200 meters. Both objects start from rest. Can you calculate the final velocity of each object using the kinematics.final_velocity_from_distance function?\"", "function": {"name": "kinematics.final_velocity_from_distance", "description": "Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.", "parameters": {"type": "object", "properties": {"acceleration": {"type": "number", "description": "Acceleration of the object, m/s^2."}, "distance": {"type": "number", "description": "Distance traveled by the object, m."}, "initial_velocity": {"type": "number", "description": "Initial velocity of the object. Default is 0, m/s"}}, "required": ["acceleration", "distance"]}}, "human_eval_answer": "[\"kinematics.final_velocity_from_distance(acceleration=5, distance=100)\", \"kinematics.final_velocity_from_distance(acceleration=10, distance=200)\"]", "question_type": "parallel_function"}
{"question": "\"Imagine you are observing two racing cars on a straight track. The first car, Car A, starts from rest and accelerates at a rate of 6 m/s\u00b2 for 10 seconds. The second car, Car B, starts with an initial velocity of 20 m/s and accelerates at a rate of 4 m/s\u00b2 for 15 seconds. Using the function 'calculate_final_velocity', can you determine the final velocities of both Car A and Car B?\"", "function": {"name": "calculate_final_velocity", "description": "Calculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time of acceleration."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "[calculate_final_velocity(initial_velocity=0, acceleration=6, time=10), calculate_final_velocity(initial_velocity=20, acceleration=4, time=15)]", "question_type": "parallel_function"}
{"question": "\"An experiment was conducted where two objects were dropped from different heights without air resistance. The first object had an initial velocity of 0 m/s and was dropped from a height of 10 meters. The second object had an initial velocity of 5 m/s and was dropped from a height of 20 meters. Assuming the gravitational acceleration to be 9.8 m/s^2, can you calculate the final speed of both objects?\"", "function": {"name": "calculate_final_speed", "description": "Calculate the final speed of an object dropped from a certain height without air resistance.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "height": {"type": "number", "description": "The height from which the object is dropped."}, "gravity": {"type": "number", "description": "The gravitational acceleration. Default is 9.8 m/s^2."}}, "required": ["initial_velocity", "height"]}}, "human_eval_answer": "[calculate_final_speed(initial_velocity=0, height=10, gravity=9.8), calculate_final_speed(initial_velocity=5, height=20, gravity=9.8)]", "question_type": "parallel_function"}
{"question": "Can you provide me with the fastest route from my home in San Francisco to my office in Palo Alto and then a scenic route from Palo Alto to the Golden Gate Bridge in San Francisco, and finally the fastest route back to my home from the Golden Gate Bridge?", "function": {"name": "get_directions", "description": "Retrieve directions from one location to another.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting point of the journey."}, "end_location": {"type": "string", "description": "The destination point of the journey."}, "route_type": {"type": "string", "description": "Type of route to use (e.g., fastest, scenic). Default is fastest.", "enum": ["fastest", "scenic"]}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "[get_directions(start_location='San Francisco', end_location='Palo Alto', route_type='fastest'), get_directions(start_location='Palo Alto', end_location='Golden Gate Bridge in San Francisco', route_type='scenic'), get_directions(start_location='Golden Gate Bridge in San Francisco', end_location='San Francisco', route_type='fastest')]", "question_type": "parallel_function"}
{"question": "Can you generate a travel itinerary for a 7-day trip to Tokyo with a daily budget of $200 focusing on urban exploration, then do the same for a 10-day trip to Paris with a daily budget of $150 focusing on history, followed by a 5-day trip to Sydney with a daily budget of $100 focusing on nature, and finally a 12-day trip to Rome with a daily budget of $180 focusing on culture?", "function": {"name": "travel_itinerary_generator", "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.", "parameters": {"type": "object", "properties": {"destination": {"type": "string", "description": "Destination city of the trip."}, "days": {"type": "integer", "description": "Number of days for the trip."}, "daily_budget": {"type": "number", "description": "The maximum daily budget for the trip."}, "exploration_type": {"type": "string", "enum": ["nature", "urban", "history", "culture"], "description": "The preferred exploration type.", "default": "urban"}}, "required": ["destination", "days", "daily_budget"]}}, "human_eval_answer": "[travel_itinerary_generator(destination='Tokyo', days=7, daily_budget=200, exploration_type='urban'), travel_itinerary_generator(destination='Paris', days=10, daily_budget=150, exploration_type='history'), travel_itinerary_generator(destination='Sydney', days=5, daily_budget=100, exploration_type='nature'), travel_itinerary_generator(destination='Rome', days=12, daily_budget=180, exploration_type='culture')]", "question_type": "parallel_function"}
{"question": "Can you help me find vegan restaurants in Los Angeles, CA that are open until at least 22:00, and then do the same for San Francisco, CA and Seattle, WA?", "function": {"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format."}}, "required": ["location"]}}, "human_eval_answer": "[vegan_restaurant.find_nearby(location='Los Angeles, CA', operating_hours=22), vegan_restaurant.find_nearby(location='San Francisco, CA', operating_hours=22), vegan_restaurant.find_nearby(location='Seattle, WA', operating_hours=22)]", "question_type": "parallel_function"}
{"question": "What is the shortest driving distance in miles from New York City to Los Angeles and then from Los Angeles to Miami, considering that you have to return to New York City from Miami?", "function": {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "Starting point of the journey."}, "destination": {"type": "string", "description": "End point of the journey."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is kilometers)."}}, "required": ["origin", "destination"]}}, "human_eval_answer": "[get_shortest_driving_distance(origin='New York City', destination='Los Angeles', unit='miles'), get_shortest_driving_distance(origin='Los Angeles', destination='Miami', unit='miles'), get_shortest_driving_distance(origin='Miami', destination='New York City', unit='miles')]", "question_type": "parallel_function"}
{"question": "What would be the estimated travel time if I start my journey from New York, make stops at Philadelphia, Washington D.C., and Atlanta, and finally reach Miami? Also, what if I skip the stop at Atlanta and directly go to Miami from Washington D.C.? And lastly, what if I start from Philadelphia instead of New York, stop at Washington D.C., and then reach Miami?", "function": {"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey."}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "[route.estimate_time(start_location='New York', end_location='Miami', stops=['Philadelphia', 'Washington D.C.', 'Atlanta']), route.estimate_time(start_location='New York', end_location='Miami', stops=['Philadelphia', 'Washington D.C.']), route.estimate_time(start_location='Philadelphia', end_location='Miami', stops=['Washington D.C.'])]", "question_type": "parallel_function"}
{"question": "\"In a physics experiment, you are given two charges. The first charge is 5 coulombs and is placed at a distance of 2 meters from the point where the electric field is being measured. The second charge is 3 coulombs and is placed at a distance of 4 meters from the same point. The experiment is conducted in a vacuum. Can you calculate the electric field produced by each charge at the point of measurement by invoking the 'calculate_electric_field' function?\"", "function": {"name": "calculate_electric_field", "description": "Calculate the electric field produced by a charge at a certain distance.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "Charge in coulombs producing the electric field."}, "distance": {"type": "number", "description": "Distance from the charge in meters where the field is being measured."}, "permitivity": {"type": "number", "description": "Permitivity of the space where field is being calculated, default is for vacuum."}}, "required": ["charge", "distance"]}}, "human_eval_answer": "[\"calculate_electric_field(charge=5, distance=2)\", \"calculate_electric_field(charge=3, distance=4)\"]", "question_type": "parallel_function"}
{"question": "\"A team of scientists is conducting an experiment involving a circular loop carrying an electric current. They have two different setups for this experiment. In the first setup, the loop has a radius of 0.5 meters and is carrying a current of 10 Amperes. In the second setup, the loop has a radius of 1 meter and is carrying a current of 15 Amperes. They want to compare the magnetic fields produced at the center of the loop in both setups. They assume the magnetic permeability to be the same as in free space in both cases. Can you calculate the magnetic fields for both setups using the 'calculate_magnetic_field' function and tell them which setup produces a stronger magnetic field?\"", "function": {"name": "calculate_magnetic_field", "description": "Calculate the magnetic field produced at the center of a circular loop carrying current.", "parameters": {"type": "object", "properties": {"current": {"type": "number", "description": "The current through the circular loop in Amperes."}, "radius": {"type": "number", "description": "The radius of the circular loop in meters."}, "permeability": {"type": "number", "description": "The magnetic permeability. Default is permeability in free space."}}, "required": ["current", "radius"]}}, "human_eval_answer": "[\"calculate_magnetic_field(current=10, radius=0.5)\", \"calculate_magnetic_field(current=15, radius=1)\"]", "question_type": "parallel_function"}
{"question": "\"In a physics experiment, you are given two charges. The first charge has a magnitude of 5 coulombs and the second charge has a magnitude of 10 coulombs. These charges are placed at a distance of 2 meters from each other. You are asked to calculate the electromagnetic force between these charges. You perform the experiment twice. The first time, the charges are placed in a vacuum, which has a permittivity of 8.854 x 10^-12 F/m. The second time, the charges are placed in a medium with a relative permittivity of 5 x 10^-12 F/m. Can you calculate the electromagnetic force between the charges in both scenarios?\"", "function": {"name": "electromagnetic_force", "description": "Calculate the electromagnetic force between two charges placed at a certain distance.", "parameters": {"type": "object", "properties": {"charge1": {"type": "number", "description": "The magnitude of the first charge in coulombs."}, "charge2": {"type": "number", "description": "The magnitude of the second charge in coulombs."}, "distance": {"type": "number", "description": "The distance between the two charges in meters."}, "medium_permittivity": {"type": "number", "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity)."}}, "required": ["charge1", "charge2", "distance"]}}, "human_eval_answer": "[\"electromagnetic_force(charge1=5, charge2=10, distance=2, medium_permittivity=8.854e-12)\", \"electromagnetic_force(charge1=5, charge2=10, distance=2, medium_permittivity=5e-12)\"]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the resonant frequency of an LC circuit with an inductance of 0.005 henries and a capacitance of 0.0000001 farads, and then round off the result to 3 decimal places? After that, can you calculate it again with an inductance of 0.007 henries and a capacitance of 0.0000002 farads, rounding off the result to 4 decimal places?\"", "function": {"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "object", "properties": {"inductance": {"type": "number", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "number", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}, "human_eval_answer": "[calculate_resonant_frequency(inductance=0.005, capacitance=0.0000001, round_off=3), calculate_resonant_frequency(inductance=0.007, capacitance=0.0000002, round_off=4)]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the electric field strength at a distance of 0.5 meters from a point charge of 2 Coulombs located in a vacuum? Then, can you also calculate the electric field strength at a distance of 1 meter and 2 meters from the same point charge? Lastly, can you calculate the electric field strength at a distance of 1 meter from the same point charge but this time located in air?\"", "function": {"name": "calculate_electric_field_strength", "description": "Calculate the electric field strength at a certain distance from a point charge.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge in Coulombs."}, "distance": {"type": "number", "description": "The distance from the charge in meters."}, "medium": {"type": "string", "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."}}, "required": ["charge", "distance"]}}, "human_eval_answer": "[\"calculate_electric_field_strength(charge=2, distance=0.5, medium='vacuum')\", \"calculate_electric_field_strength(charge=2, distance=1, medium='vacuum')\", \"calculate_electric_field_strength(charge=2, distance=2, medium='vacuum')\", \"calculate_electric_field_strength(charge=2, distance=1, medium='air')\"]", "question_type": "parallel_function"}
{"question": "\"Can you help me calculate the energy required for a phase change? I have a science experiment where I am first melting 500 grams of ice at 0 degrees Celsius, then I am freezing it back. After that, I am vaporizing the same mass of water at 100 degrees Celsius and then condensing it back to liquid state. The substance I am using for this experiment is water. Can you tell me how much energy is required or released during each of these phase changes?\"", "function": {"name": "thermo.calculate_energy", "description": "Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.", "parameters": {"type": "object", "properties": {"mass": {"type": "number", "description": "Mass of the substance in grams."}, "phase_transition": {"type": "string", "description": "Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'."}, "substance": {"type": "string", "description": "The substance which is undergoing phase change, default is 'water'"}}, "required": ["mass", "phase_transition"]}}, "human_eval_answer": "[\"thermo.calculate_energy(mass=500, phase_transition='melting', substance='water')\", \"thermo.calculate_energy(mass=500, phase_transition='freezing', substance='water')\", \"thermo.calculate_energy(mass=500, phase_transition='vaporization', substance='water')\", \"thermo.calculate_energy(mass=500, phase_transition='condensation', substance='water')\"]", "question_type": "parallel_function"}
{"question": "What are the boiling and melting points of water and iron at sea levels of 0 meters and 1000 meters respectively?", "function": {"name": "get_boiling_melting_points", "description": "Retrieve the boiling point and melting point of a substance based on its name and the sea level.", "parameters": {"type": "object", "properties": {"substance": {"type": "string", "description": "The name of the substance."}, "sea_level": {"type": "integer", "description": "The sea level in meters."}}, "required": ["substance", "sea_level"]}}, "human_eval_answer": "[get_boiling_melting_points(substance='water', sea_level=0), get_boiling_melting_points(substance='iron', sea_level=1000)]", "question_type": "parallel_function"}
{"question": "A scientist is conducting an experiment involving two different substances. The first substance has a mass of 10 kilograms and occupies a volume of 2 cubic meters. The second substance has a mass of 15 kilograms and occupies a volume of 3 cubic meters. The scientist wants to compare the densities of these two substances in kg/m\u00b3. Can you help the scientist calculate the densities of these two substances using the 'calculate_density' function?", "function": {"name": "calculate_density", "description": "Calculate the density of a substance based on its mass and volume.", "parameters": {"type": "object", "properties": {"mass": {"type": "number", "description": "The mass of the substance in kilograms."}, "volume": {"type": "number", "description": "The volume of the substance in cubic meters."}, "unit": {"type": "string", "description": "The unit of density. Default is kg/m\u00b3"}}, "required": ["mass", "volume"]}}, "human_eval_answer": "[calculate_density(mass=10, volume=2), calculate_density(mass=15, volume=3)]", "question_type": "parallel_function"}
{"question": "You are working in a lab and you have a sealed container with a gauge pressure of 2.5 atm. You are located at sea level where the atmospheric pressure is 1 atm. However, you need to transport the container to a high-altitude location where the atmospheric pressure is 0.85 atm. What will be the absolute pressure of the container at sea level and at the high-altitude location?", "function": {"name": "calc_absolute_pressure", "description": "Calculates the absolute pressure from gauge and atmospheric pressures.", "parameters": {"type": "object", "properties": {"atm_pressure": {"type": "number", "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."}, "gauge_pressure": {"type": "number", "description": "The gauge pressure in atmospheres (atm). Must be provided."}}, "required": ["gauge_pressure"]}}, "human_eval_answer": "[\"calc_absolute_pressure(gauge_pressure=2.5, atm_pressure=1)\", \"calc_absolute_pressure(gauge_pressure=2.5, atm_pressure=0.85)\"]", "question_type": "parallel_function"}
{"question": "A chemist is conducting an experiment with a 2 kg sample of a specific substance A. The experiment begins with the substance at an initial temperature of 25 degrees Celsius. The chemist then heats the substance to a final temperature of 75 degrees Celsius. The experiment is conducted under a pressure of 1 atmosphere. The chemist repeats the experiment with the same substance, but this time the initial temperature is 10 degrees Celsius and the final temperature is 50 degrees Celsius. Can you calculate the change in entropy for the substance under these set initial and final conditions for both experiments?", "function": {"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "object", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "number", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "number", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "number", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "number", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}, "human_eval_answer": "[entropy_change.calculate(substance='A', mass=2, initial_temperature=25, final_temperature=75, pressure=1), entropy_change.calculate(substance='A', mass=2, initial_temperature=10, final_temperature=50, pressure=1)]", "question_type": "parallel_function"}
{"question": "\"In a thermodynamics experiment, you are tasked with calculating the entropy change for a process. The process starts at an initial temperature of 300 Kelvin and ends at a final temperature of 350 Kelvin. The heat capacity of the system is 4.18 J/K. The process is isothermal. Can you calculate the entropy change for this process? What if the process is not isothermal, how does the entropy change?\"", "function": {"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "object", "properties": {"initial_temp": {"type": "number", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "number", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "number", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}, "human_eval_answer": "[\"calculate_entropy_change(initial_temp=300, final_temp=350, heat_capacity=4.18, isothermal=True)\", \"calculate_entropy_change(initial_temp=300, final_temp=350, heat_capacity=4.18, isothermal=False)\"]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the heat capacity at constant pressure of air for a science experiment I am conducting? I have a container with a volume of 2.5 m^3 and I am able to maintain the temperature at 300 Kelvin. I will be repeating the experiment at a higher temperature of 350 Kelvin and then at a lower volume of 1.5 m^3. I am using air for all these experiments. Can you provide the heat capacity for these three different conditions?\"", "function": {"name": "calc_heat_capacity", "description": "Calculate the heat capacity at constant pressure of air using its temperature and volume.", "parameters": {"type": "object", "properties": {"temp": {"type": "number", "description": "The temperature of the gas in Kelvin."}, "volume": {"type": "number", "description": "The volume of the gas in m^3."}, "gas": {"type": "string", "description": "Type of gas, with air as default."}}, "required": ["temp", "volume"]}}, "human_eval_answer": "[calc_heat_capacity(temp=300, volume=2.5, gas='air'), calc_heat_capacity(temp=350, volume=2.5, gas='air'), calc_heat_capacity(temp=300, volume=1.5, gas='air')]", "question_type": "parallel_function"}
{"question": "Can you fetch the DNA sequence of a molecule with the unique ID 'XYZ123' from the public database, then fetch the same sequence again but this time in 'genbank' format, and finally fetch the sequence once more but now with 500 base pairs included upstream the DNA sequence?", "function": {"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "object", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}, "human_eval_answer": "[fetch_DNA_sequence(DNA_id='XYZ123'), fetch_DNA_sequence(DNA_id='XYZ123', format='genbank'), fetch_DNA_sequence(DNA_id='XYZ123', upstream=500)]", "question_type": "parallel_function"}
{"question": "What are the protein sequences encoded by the BRCA1 and BRCA2 genes in Homo sapiens and Pan troglodytes (chimpanzee)?", "function": {"name": "get_protein_sequence", "description": "Retrieve the protein sequence encoded by a human gene.", "parameters": {"type": "object", "properties": {"gene": {"type": "string", "description": "The human gene of interest."}, "species": {"type": "string", "description": "The species for which the gene is to be analyzed.", "default": "Homo sapiens"}}, "required": ["gene"]}}, "human_eval_answer": "[get_protein_sequence(gene='BRCA1', species='Homo sapiens'), get_protein_sequence(gene='BRCA2', species='Homo sapiens'), get_protein_sequence(gene='BRCA1', species='Pan troglodytes'), get_protein_sequence(gene='BRCA2', species='Pan troglodytes')]", "question_type": "parallel_function"}
{"question": "Can you provide a detailed description of the structure and functioning of a neuron cell and then compare it with a less detailed description of a muscle cell in the human body?", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "object", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}, "human_eval_answer": "[biology.get_cell_info(cell_type='neuron', detailed=true), biology.get_cell_info(cell_type='muscle', detailed=false)]", "question_type": "parallel_function"}
{"question": "What are the proteins found in the cell compartments of the nucleus, mitochondria, and cytoplasm, and can you also provide a brief description of each protein?", "function": {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "object", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}, "human_eval_answer": "[cellbio.get_proteins(cell_compartment='nucleus', include_description=True), cellbio.get_proteins(cell_compartment='mitochondria', include_description=True), cellbio.get_proteins(cell_compartment='cytoplasm', include_description=True)]", "question_type": "parallel_function"}
{"question": "\"What is the function of the molecule ATP in the mitochondria and does it have a specific function within this organelle? Also, can you tell me the function of the molecule DNA in the nucleus and whether it has a specific function within the nucleus?\"", "function": {"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "object", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}, "human_eval_answer": "[cell_biology.function_lookup(molecule='ATP', organelle='mitochondria', specific_function=True), cell_biology.function_lookup(molecule='DNA', organelle='nucleus', specific_function=True)]", "question_type": "parallel_function"}
{"question": "What is the molecular weight of the compound C6H12O6 (Glucose) in 'grams/mole' and how does it compare to the molecular weight of the compound C12H22O11 (Sucrose) in the same unit?", "function": {"name": "calculate_molecular_weight", "description": "Calculate the molecular weight of a compound given the compound formula.", "parameters": {"type": "object", "properties": {"compound": {"type": "string", "description": "The molecular formula of the compound."}, "to_unit": {"type": "string", "description": "The unit in which to return the result. Default is 'grams/mole'"}}, "required": ["compound", "to_unit"]}}, "human_eval_answer": "[calculate_molecular_weight(compound='C6H12O6', to_unit='grams/mole'), calculate_molecular_weight(compound='C12H22O11', to_unit='grams/mole')]", "question_type": "parallel_function"}
{"question": "What is the type of the genetic mutation that has the SNP ID 'rs123456' in the species 'Homo sapiens' and the SNP ID 'rs7891011' in the species 'Canis lupus familiaris' (Dog)?", "function": {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "object", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}, "human_eval_answer": "[mutation_type.find(snp_id='rs123456', species='Homo sapiens'), mutation_type.find(snp_id='rs7891011', species='Canis lupus familiaris')]", "question_type": "parallel_function"}
{"question": "\"Could you please predict the likelihood of type 2 diabetes for four individuals with the following characteristics: The first person weighs 180 lbs, is 70 inches tall, and has a 'lightly active' lifestyle. The second person weighs 200 lbs, is 65 inches tall, and is 'very active'. The third person weighs 150 lbs, is 72 inches tall, and is 'moderately active'. The fourth person weighs 220 lbs, is 68 inches tall, and is 'extra active'.\"", "function": {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "Weight of the person in lbs."}, "height": {"type": "number", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}, "human_eval_answer": "[diabetes_prediction(weight=180, height=70, activity_level='lightly active'), diabetes_prediction(weight=200, height=65, activity_level='very active'), diabetes_prediction(weight=150, height=72, activity_level='moderately active'), diabetes_prediction(weight=220, height=68, activity_level='extra active')]", "question_type": "parallel_function"}
{"question": "Can you analyze the DNA sequence \"AGCTTAGCTA\" and \"AGCTTAGGCTA\" using the reference sequence \"AGCTTAGCTA\" to identify any potential 'insertion' mutations, then repeat the same analysis for 'deletion' and 'substitution' mutations?", "function": {"name": "analyze_dna_sequence", "description": "Analyzes the DNA sequence based on a reference sequence and return any potential mutations.", "parameters": {"type": "object", "properties": {"sequence": {"type": "string", "description": "The DNA sequence to be analyzed."}, "reference_sequence": {"type": "string", "description": "The reference DNA sequence."}, "mutation_type": {"type": "string", "enum": ["insertion", "deletion", "substitution"], "description": "Type of the mutation to be looked for in the sequence."}}, "required": ["sequence", "reference_sequence"]}}, "human_eval_answer": "[analyze_dna_sequence(sequence=\"AGCTTAGCTA\", reference_sequence=\"AGCTTAGCTA\", mutation_type=\"insertion\"), analyze_dna_sequence(sequence=\"AGCTTAGGCTA\", reference_sequence=\"AGCTTAGCTA\", mutation_type=\"insertion\"), analyze_dna_sequence(sequence=\"AGCTTAGCTA\", reference_sequence=\"AGCTTAGCTA\", mutation_type=\"deletion\"), analyze_dna_sequence(sequence=\"AGCTTAGGCTA\", reference_sequence=\"AGCTTAGCTA\", mutation_type=\"deletion\"), analyze_dna_sequence(sequence=\"AGCTTAGCTA\", reference_sequence=\"AGCTTAGCTA\", mutation_type=\"substitution\"), analyze_dna_sequence(sequence=\"AGCTTAGGCTA\", reference_sequence=\"AGCTTAGCTA\", mutation_type=\"substitution\")]", "question_type": "parallel_function"}
{"question": "\"Could you calculate the genetic similarity between a human and a chimpanzee, and then between a human and a gorilla, using their DNA sequences? Please provide the results in both percentage and fraction formats.\"", "function": {"name": "genetics.calculate_similarity", "description": "Calculates the genetic similarity between two species based on their DNA sequences.", "parameters": {"type": "object", "properties": {"species1": {"type": "string", "description": "The first species to compare."}, "species2": {"type": "string", "description": "The second species to compare."}, "format": {"type": "string", "description": "The format of the result (percentage or fraction). Default is percentage."}}, "required": ["species1", "species2"]}}, "human_eval_answer": "[genetics.calculate_similarity(species1='human', species2='chimpanzee', format='percentage'), genetics.calculate_similarity(species1='human', species2='chimpanzee', format='fraction'), genetics.calculate_similarity(species1='human', species2='gorilla', format='percentage'), genetics.calculate_similarity(species1='human', species2='gorilla', format='fraction')]", "question_type": "parallel_function"}
{"question": "\"In a population of butterflies, the frequency of the dominant allele for wing color is 0.7. Can you calculate the frequency of the homozygous dominant genotype (AA), heterozygous genotype (Aa), and homozygous recessive genotype (aa) using the Hardy Weinberg Principle?\"", "function": {"name": "calculate_genotype_frequency", "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.", "parameters": {"type": "object", "properties": {"allele_frequency": {"type": "number", "description": "The frequency of the dominant allele in the population."}, "genotype": {"type": "string", "description": "The genotype which frequency is needed, default is homozygous dominant. ", "enum": ["AA", "Aa", "aa"]}}, "required": ["allele_frequency", "genotype"]}}, "human_eval_answer": "[calculate_genotype_frequency(allele_frequency=0.7, genotype='AA'), calculate_genotype_frequency(allele_frequency=0.7, genotype='Aa'), calculate_genotype_frequency(allele_frequency=0.7, genotype='aa')]", "question_type": "parallel_function"}
{"question": "What is the population density of China in 2000 and 2010, given that the population was 1.267 billion in 2000 and 1.341 billion in 2010, and the land area remained constant at 9.597 million square kilometers?", "function": {"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "number", "description": "The population of the country."}, "land_area": {"type": "number", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, "human_eval_answer": "[calculate_density(country='China', year='2000', population=1.267e9, land_area=9.597e6), calculate_density(country='China', year='2010', population=1.341e9, land_area=9.597e6)]", "question_type": "parallel_function"}
{"question": "What are the precipitation statistics for the Amazon rainforest for the last six months, the last year, and the last five years?", "function": {"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}, "human_eval_answer": "[ecology_data.precipitation_stats(location='Amazon rainforest', time_frame='six_months'), ecology_data.precipitation_stats(location='Amazon rainforest', time_frame='year'), ecology_data.precipitation_stats(location='Amazon rainforest', time_frame='five_years')]", "question_type": "parallel_function"}
{"question": "\"Can you help me identify the bird species I saw during my recent trip? The first one was a small bird with a vibrant blue color that I spotted in a forest. The second one was a large bird with a mix of black colors that I saw near a lake. The third one was a medium-sized bird with a brown color that I noticed in a desert. Lastly, the fourth one was a large bird with a green color that I observed in a tropical rainforest. What could these birds be?\"", "function": {"name": "identify_bird", "description": "Identify a bird species based on certain characteristics.", "parameters": {"type": "object", "properties": {"color": {"type": "string", "description": "Color of the bird."}, "habitat": {"type": "string", "description": "Habitat of the bird."}, "size": {"type": "string", "enum": ["small", "medium", "large"], "description": "Size of the bird."}}, "required": ["color", "habitat"]}}, "human_eval_answer": "[\"identify_bird(color='blue', habitat='forest', size='small')\", \"identify_bird(color='black', habitat='lake', size='large')\", \"identify_bird(color='brown', habitat='desert', size='medium')\", \"identify_bird(color='green', habitat='tropical rainforest', size='large')\"]", "question_type": "parallel_function"}
{"question": "What would be the predicted forest growth in the Amazon Rainforest and the Boreal Forests of Canada over the next 10 years and 20 years, respectively, if we do not include the impact of human activities?", "function": {"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}, "human_eval_answer": "[forest_growth_forecast(location='Amazon Rainforest', years=10, include_human_impact=False), forest_growth_forecast(location='Boreal Forests of Canada', years=20, include_human_impact=False)]", "question_type": "parallel_function"}
{"question": "What is the population of turtles in the Galapagos Islands in 2015, and can you also provide the species information? After that, can you also tell me the same information for the same location but for the year 2020?", "function": {"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. (optional)"}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false. (optional)"}}, "required": ["location"]}}, "human_eval_answer": "[\"ecology.get_turtle_population(location='Galapagos Islands', year=2015, species=True)\", \"ecology.get_turtle_population(location='Galapagos Islands', year=2020, species=True)\"]", "question_type": "parallel_function"}
{"question": "What are the annual carbon emissions produced by a gasoline vehicle, a diesel vehicle, and an electric vehicle if they each drive 15,000 miles per year, using the default emission factor for the gasoline vehicle, an emission factor of 2.7 for the diesel vehicle, and an emission factor of 0 for the electric vehicle?", "function": {"name": "calculate_vehicle_emission", "description": "Calculate the annual carbon emissions produced by a specific type of vehicle based on mileage.", "parameters": {"type": "object", "properties": {"vehicle_type": {"type": "string", "description": "The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle."}, "miles_driven": {"type": "number", "description": "The number of miles driven per year."}, "emission_factor": {"type": "number", "description": "Optional emission factor to calculate emissions. Default factor is set for gas vehicles"}}, "required": ["vehicle_type", "miles_driven"]}}, "human_eval_answer": "[calculate_vehicle_emission(vehicle_type='gas', miles_driven=15000), calculate_vehicle_emission(vehicle_type='diesel', miles_driven=15000, emission_factor=2.7), calculate_vehicle_emission(vehicle_type='EV', miles_driven=15000, emission_factor=0)]", "question_type": "parallel_function"}
{"question": "Can you generate four different DNA sequences each with a length of 500, where the first sequence has a preference for nucleotide 'A', the second sequence has a preference for nucleotide 'T', the third sequence has a preference for nucleotide 'C', and the fourth sequence has a preference for nucleotide 'G'?", "function": {"name": "generate_DNA_sequence", "description": "Generate a random DNA sequence with a specific length and nucleotide preference.", "parameters": {"type": "object", "properties": {"length": {"type": "integer", "description": "The length of the DNA sequence to be generated."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["A", "T", "C", "G"]}, "description": "Preferred nucleotides to include more frequently in the DNA sequence."}}, "required": ["length", "preferences"]}}, "human_eval_answer": "[generate_DNA_sequence(length=500, preferences=['A']), generate_DNA_sequence(length=500, preferences=['T']), generate_DNA_sequence(length=500, preferences=['C']), generate_DNA_sequence(length=500, preferences=['G'])]", "question_type": "parallel_function"}
{"question": "What would be the projected population growth of Japan and India in the next 10 and 20 years respectively, considering the current growth rate, and how would these projections change if we consider a growth rate of 1.5% for Japan and 2.1% for India instead of the current growth rate?", "function": {"name": "population_projections", "description": "Calculates the projected population growth based on the current growth rate.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country for which to calculate the population projection."}, "years": {"type": "integer", "description": "Number of years for the projection."}, "growth_rate": {"type": "number", "description": "Optional parameter to specify the growth rate. Default is current growth rate."}}, "required": ["country", "years"]}}, "human_eval_answer": "[population_projections(country='Japan', years=10), population_projections(country='India', years=20), population_projections(country='Japan', years=10, growth_rate=0.015), population_projections(country='India', years=20, growth_rate=0.021)]", "question_type": "parallel_function"}
{"question": "In the African savannah, a group of researchers have been observing a herd of elephants for a few years. They have noticed that the current population of elephants is 500 and the annual population growth rate is 2%. They are interested in knowing the estimated population of elephants in 10 years. However, due to the unpredictable nature of the wild, they also want to consider a scenario where the growth rate drops to 1.5% and another scenario where it increases to 2.5%. Can you provide the estimated elephant population for these three scenarios in 10 years?", "function": {"name": "elephant_population_estimate", "description": "Estimate future population of elephants given current population and growth rate.", "parameters": {"type": "object", "properties": {"current_population": {"type": "integer", "description": "The current number of elephants."}, "growth_rate": {"type": "number", "description": "The annual population growth rate of elephants."}, "years": {"type": "integer", "description": "The number of years to project the population."}}, "required": ["current_population", "growth_rate", "years"]}}, "human_eval_answer": "[elephant_population_estimate(current_population=500, growth_rate=0.02, years=10), elephant_population_estimate(current_population=500, growth_rate=0.015, years=10), elephant_population_estimate(current_population=500, growth_rate=0.025, years=10)]", "question_type": "parallel_function"}
{"question": "What would be the predicted evolutionary rate for the African Elephant species over a period of 5000 years using the Darwin model, and how would this prediction change if we use the Lamarck model instead?", "function": {"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}, "human_eval_answer": "[prediction.evolution(species='African Elephant', years=5000, model='Darwin'), prediction.evolution(species='African Elephant', years=5000, model='Lamarck')]", "question_type": "parallel_function"}
{"question": "Can you help me find restaurants in New York, NY that cater to my dietary preferences which include Vegan, Gluten-free and Dairy-free options, and then do the same for Los Angeles, CA and Chicago, IL?", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference."}}, "required": ["location"]}}, "human_eval_answer": "[restaurant.find_nearby(location='New York, NY', dietary_preference=['Vegan', 'Gluten-free', 'Dairy-free']), restaurant.find_nearby(location='Los Angeles, CA', dietary_preference=['Vegan', 'Gluten-free', 'Dairy-free']), restaurant.find_nearby(location='Chicago, IL', dietary_preference=['Vegan', 'Gluten-free', 'Dairy-free'])]", "question_type": "parallel_function"}
{"question": "What is the average temperature in New York for the past 7 days in Fahrenheit and how does it compare to the average temperature in Los Angeles for the same period in Celsius?", "function": {"name": "average_temperature", "description": "Retrieves the average temperature for a specific location over the defined timeframe.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city to get the average temperature for."}, "days": {"type": "integer", "description": "The number of days to get the average temperature for."}, "temp_unit": {"type": "string", "description": "The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'."}}, "required": ["location", "days"]}}, "human_eval_answer": "[average_temperature(location='New York', days=7, temp_unit='Fahrenheit'), average_temperature(location='Los Angeles', days=7, temp_unit='Celsius')]", "question_type": "parallel_function"}
{"question": "You are given two sets of data, the first set is [12, 15, 11, 14, 18, 19, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26] and the second set is [32, 35, 31, 34, 38, 39, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]. Can you create two histograms using the 'create_histogram' function, one for each data set, with 5 bins each?", "function": {"name": "create_histogram", "description": "Create a histogram based on provided data.", "parameters": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "number"}, "description": "The data for which histogram needs to be plotted."}, "bins": {"type": "number", "description": "The number of equal-width bins in the range. Default is 10."}}, "required": ["data", "bins"]}}, "human_eval_answer": "[create_histogram(data=[12, 15, 11, 14, 18, 19, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], bins=5), create_histogram(data=[32, 35, 31, 34, 38, 39, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], bins=5)]", "question_type": "parallel_function"}
{"question": "\"Can you help me find four restaurants in New York that serve Italian food and cater to my dietary requirements of being vegan and gluten-free, and then find four more restaurants in Los Angeles that serve the same type of food and also cater to my dietary requirements?\"", "function": {"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The specific location or area."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free.", "default": "None"}}, "required": ["location", "food_type", "number"]}}, "human_eval_answer": "[find_restaurants(location='New York', food_type='Italian', number=4, dietary_requirements=['vegan', 'gluten-free']), find_restaurants(location='Los Angeles', food_type='Italian', number=4, dietary_requirements=['vegan', 'gluten-free'])]", "question_type": "parallel_function"}
{"question": "Can you find the fastest route from my home in San Francisco to my office in Palo Alto, then from my office to my friend's house in San Jose, and finally from my friend's house back to my home, while avoiding toll roads?", "function": {"name": "map_routing.fastest_route", "description": "Finds the fastest route from one location to another, with an option to avoid toll roads.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting location for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "avoid_tolls": {"type": "boolean", "description": "Option to avoid toll roads during the journey."}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "[map_routing.fastest_route(start_location='San Francisco', end_location='Palo Alto', avoid_tolls=True), map_routing.fastest_route(start_location='Palo Alto', end_location='San Jose', avoid_tolls=True), map_routing.fastest_route(start_location='San Jose', end_location='San Francisco', avoid_tolls=True)]", "question_type": "parallel_function"}
{"question": "You have four sets of numbers: the first set is [23, 45, 67, 89], the second set is [12, 34, 56, 78], the third set is [98, 76, 54, 32], and the fourth set is [87, 65, 43, 21]. Can you calculate the average of each set of numbers?", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}, "human_eval_answer": "[calculate_average(numbers=[23, 45, 67, 89]), calculate_average(numbers=[12, 34, 56, 78]), calculate_average(numbers=[98, 76, 54, 32]), calculate_average(numbers=[87, 65, 43, 21])]", "question_type": "parallel_function"}
{"question": "What is the total distance in kilometers if you were to travel from the Eiffel Tower in Paris (48.8584\u00b0 N, 2.2945\u00b0 E) to the Colosseum in Rome (41.8902\u00b0 N, 12.4922\u00b0 E), then to the Acropolis in Athens (37.9715\u00b0 N, 23.7257\u00b0 E), and finally to the Pyramids of Giza in Egypt (29.9792\u00b0 N, 31.1342\u00b0 E)?", "function": {"name": "calculate_distance", "description": "Calculate the distance between two GPS coordinates.", "parameters": {"type": "object", "properties": {"coord1": {"type": "tuple", "description": "The first coordinate as (latitude, longitude)."}, "coord2": {"type": "tuple", "description": "The second coordinate as (latitude, longitude)."}, "unit": {"type": "string", "description": "The unit of distance. Defaults to miles if not specified."}}, "required": ["coord1", "coord2", "unit"]}}, "human_eval_answer": "[calculate_distance(coord1=(48.8584, 2.2945), coord2=(41.8902, 12.4922), unit='kilometers'), calculate_distance(coord1=(41.8902, 12.4922), coord2=(37.9715, 23.7257), unit='kilometers'), calculate_distance(coord1=(37.9715, 23.7257), coord2=(29.9792, 31.1342), unit='kilometers')]", "question_type": "parallel_function"}
{"question": "\"Could you please calculate the Body Mass Index (BMI) of four individuals for me? The first person weighs 85 kilograms and is 175 centimeters tall, the second person weighs 60 kilograms and is 160 centimeters tall, the third person weighs 75 kilograms and is 180 centimeters tall, and the fourth person weighs 90 kilograms and is 185 centimeters tall. All measurements are in the metric system.\"", "function": {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) of a person.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "Weight of the person in kilograms."}, "height": {"type": "number", "description": "Height of the person in centimeters."}, "unit": {"type": "string", "description": "Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'."}}, "required": ["weight", "height"]}}, "human_eval_answer": "[calculate_bmi(weight=85, height=175, unit='metric'), calculate_bmi(weight=60, height=160, unit='metric'), calculate_bmi(weight=75, height=180, unit='metric'), calculate_bmi(weight=90, height=185, unit='metric')]", "question_type": "parallel_function"}
{"question": "What is the total distance in kilometers if I start my journey from New York, travel to Los Angeles, then from Los Angeles to Miami, and finally from Miami back to New York?", "function": {"name": "geo_distance.calculate", "description": "Calculate the geographic distance between two given locations.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting location for the distance calculation."}, "end_location": {"type": "string", "description": "The destination location for the distance calculation."}, "units": {"type": "string", "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "[geo_distance.calculate(start_location='New York', end_location='Los Angeles', units='kilometers'), geo_distance.calculate(start_location='Los Angeles', end_location='Miami', units='kilometers'), geo_distance.calculate(start_location='Miami', end_location='New York', units='kilometers')]", "question_type": "parallel_function"}
{"question": "What is the shortest distance between New York and Los Angeles using a bus as the preferred mode of public transportation, and then what is the shortest distance if we allow transfer between different modes of transportation?", "function": {"name": "city_distance.find_shortest", "description": "Calculates the shortest distance between two cities via available public transportation.", "parameters": {"type": "object", "properties": {"start_city": {"type": "string", "description": "The city you are starting from."}, "end_city": {"type": "string", "description": "The city you are heading to."}, "transportation": {"type": "string", "description": "Preferred mode of public transportation. Default is 'bus'."}, "allow_transfer": {"type": "boolean", "description": "Allows transfer between different transportation if true."}}, "required": ["start_city", "end_city"]}}, "human_eval_answer": "[city_distance.find_shortest(start_city='New York', end_city='Los Angeles', transportation='bus'), city_distance.find_shortest(start_city='New York', end_city='Los Angeles', transportation='bus', allow_transfer=True)]", "question_type": "parallel_function"}
{"question": "You have four lists of numbers: [45, 12, 67, 21, 89], [34, 78, 12, 56, 90], [23, 45, 67, 89, 12], and [56, 78, 90, 12, 34]. Can you use the 'array_sort' function to sort these lists in both ascending and descending order?", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "object", "properties": {"list": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting. If not specified, it will default to ascending."}}, "required": ["list", "order"]}}, "human_eval_answer": "[array_sort(list=[45, 12, 67, 21, 89], order='ascending'), array_sort(list=[45, 12, 67, 21, 89], order='descending'), array_sort(list=[34, 78, 12, 56, 90], order='ascending'), array_sort(list=[34, 78, 12, 56, 90], order='descending'), array_sort(list=[23, 45, 67, 89, 12], order='ascending'), array_sort(list=[23, 45, 67, 89, 12], order='descending'), array_sort(list=[56, 78, 90, 12, 34], order='ascending'), array_sort(list=[56, 78, 90, 12, 34], order='descending')]", "question_type": "parallel_function"}
{"question": "\"John, who weighs 85 kilograms and is 1.8 meters tall, and his friend Sarah, who weighs 60 kilograms and is 1.65 meters tall, are having a debate about their health. They decide to calculate their Body Mass Index (BMI) to settle the argument. Later, they meet their friend Mike, who weighs 75 kilograms and is 1.7 meters tall, and they decide to calculate his BMI as well. Can you help them calculate their BMIs?\"", "function": {"name": "calculate_BMI", "description": "Calculate the Body Mass Index (BMI) given a person's weight and height.", "parameters": {"type": "object", "properties": {"weight_kg": {"type": "number", "description": "The weight of the person in kilograms."}, "height_m": {"type": "number", "description": "The height of the person in meters."}}, "required": ["weight_kg", "height_m"]}}, "human_eval_answer": "[calculate_BMI(weight_kg=85, height_m=1.8), calculate_BMI(weight_kg=60, height_m=1.65), calculate_BMI(weight_kg=75, height_m=1.7)]", "question_type": "parallel_function"}
{"question": "Can you use the function 'employee.fetch_data' to fetch the 'Personal Info', 'Job History', 'Payroll', and 'Attendance' data fields for an employee with the unique ID of 12345 from the company named 'Tech Solutions'? And then, can you repeat the same process for another employee with the unique ID of 67890 from the same company?", "function": {"name": "employee.fetch_data", "description": "Fetches the detailed data for a specific employee in a given company.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "employee_id": {"type": "integer", "description": "The unique ID of the employee."}, "data_field": {"type": "array", "items": {"type": "string", "enum": ["Personal Info", "Job History", "Payroll", "Attendance"]}, "description": "Fields of data to be fetched for the employee (Optional)."}}, "required": ["company_name", "employee_id"]}}, "human_eval_answer": "[\"employee.fetch_data(company_name='Tech Solutions', employee_id=12345, data_field=['Personal Info', 'Job History', 'Payroll', 'Attendance'])\", \"employee.fetch_data(company_name='Tech Solutions', employee_id=67890, data_field=['Personal Info', 'Job History', 'Payroll', 'Attendance'])\"]", "question_type": "parallel_function"}
{"question": "Can you find all the Drama and Comedy movies that Leonardo DiCaprio starred in 2010 and 2012 respectively by searching the database?", "function": {"name": "imdb.find_movies_by_actor", "description": "Searches the database to find all movies by a specific actor within a certain year.", "parameters": {"type": "object", "properties": {"actor_name": {"type": "string", "description": "The name of the actor."}, "year": {"type": "integer", "description": "The specific year to search in."}, "category": {"type": "string", "description": "The category of the film (e.g. Drama, Comedy, etc). This parameter is optional."}}, "required": ["actor_name", "year"]}}, "human_eval_answer": "[imdb.find_movies_by_actor(actor_name='Leonardo DiCaprio', year=2010, category='Drama'), imdb.find_movies_by_actor(actor_name='Leonardo DiCaprio', year=2012, category='Comedy')]", "question_type": "parallel_function"}
{"question": "Can you provide me with the list of movie releases in the IMAX format at theaters in New York over the next 7 days, and also the list of movie releases in the 2D format at theaters in Los Angeles over the next 14 days?", "function": {"name": "get_theater_movie_releases", "description": "Retrieve the list of movie releases in specific theaters for a specified period.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location of the theaters."}, "timeframe": {"type": "integer", "description": "The number of days for which releases are required from current date."}, "format": {"type": "string", "description": "Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. This is an optional parameter."}}, "required": ["location", "timeframe"]}}, "human_eval_answer": "[get_theater_movie_releases(location='New York', timeframe=7, format='IMAX'), get_theater_movie_releases(location='Los Angeles', timeframe=14, format='2D')]", "question_type": "parallel_function"}
{"question": "Can you use the 'update_user_info' function to update the name and email of a customer with user ID 12345 in the 'CustomerInfo' database to \"John\" and \"example@.com\", then repeat the same process for another customer with user ID 67890, changing their name and email to the same value as well as well?", "function": {"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "object", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "object", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}, "human_eval_answer": "[update_user_info(user_id=12345, update_info={'name': 'John', 'email': 'example@.com'}, database='CustomerInfo'), update_user_info(user_id=67890, update_info={'name': 'John', 'email': 'example@.com'}, database='CustomerInfo')]", "question_type": "parallel_function"}
{"question": "You are planning to build three triangular gardens in your backyard. The first garden has a base of 10 meters and a height of 5 meters, the second garden has a base of 15 meters and a height of 7 meters, and the third garden has a base of 20 meters and a height of 10 meters. What is the total area of the three gardens?", "function": {"name": "calc_area_triangle", "description": "Calculate the area of a triangle with the formula area = 0.5 * base * height.", "parameters": {"type": "object", "properties": {"base": {"type": "integer", "description": "The length of the base of the triangle in meters."}, "height": {"type": "integer", "description": "The perpendicular height of the triangle from the base to the opposite vertex in meters."}}, "required": ["base", "height"]}}, "human_eval_answer": "[calc_area_triangle(base=10, height=5), calc_area_triangle(base=15, height=7), calc_area_triangle(base=20, height=10)]", "question_type": "parallel_function"}
{"question": "What is the result if you calculate the factorial of 5, subtract the factorial of 3 from it, then add the factorial of 4 and finally subtract the factorial of 2?", "function": {"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to compute factorial."}}, "required": ["number"]}}, "human_eval_answer": "[math.factorial(number=5), math.factorial(number=3), math.factorial(number=4), math.factorial(number=2)]", "question_type": "parallel_function"}
{"question": "What is the angle between the hour and minute hands of a clock at 3:15, rounded to 2 decimal places, and how does this compare to the angle at 8:20 and 11:50, both also rounded to 2 decimal places?", "function": {"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "object", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}, "human_eval_answer": "[calculate_clock_angle(hours=3, minutes=15, round_to=2), calculate_clock_angle(hours=8, minutes=20, round_to=2), calculate_clock_angle(hours=11, minutes=50, round_to=2)]", "question_type": "parallel_function"}
{"question": "\"Can you plot two sine waves for me? The first one should have a frequency of 5 Hz, starting from 0 radians and ending at 10 radians, with an amplitude of 2 and a phase shift of 1 radian. The second one should have a frequency of 10 Hz, starting from 0 radians and ending at 20 radians, with an amplitude of 3 and a phase shift of 2 radians.\"", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "object", "properties": {"start_range": {"type": "number", "description": "Start of the range in radians."}, "end_range": {"type": "number", "description": "End of the range in radians."}, "frequency": {"type": "number", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "number", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "number", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}, "human_eval_answer": "[\"plot_sine_wave(start_range=0, end_range=10, frequency=5, amplitude=2, phase_shift=1)\", \"plot_sine_wave(start_range=0, end_range=20, frequency=10, amplitude=3, phase_shift=2)\"]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the time it would take for light to travel from Earth to a newly discovered exoplanet that is 4.22 light years away, then to another exoplanet that is 6.1 light years from the first one, and finally back to Earth which is 5.88 light years from the second exoplanet? Assume the speed of light in vacuum is 299792458 m/s.\"", "function": {"name": "light_travel_time", "description": "Calculate the time taken for light to travel from a celestial body to another.", "parameters": {"type": "object", "properties": {"distance_in_light_years": {"type": "number", "description": "The distance between the two celestial bodies in light years."}, "speed_of_light": {"type": "number", "description": "The speed of light in vacuum, in m/s. Default value is 299792458 m/s."}}, "required": ["distance_in_light_years"]}}, "human_eval_answer": "[light_travel_time(distance_in_light_years=4.22, speed_of_light=299792458), light_travel_time(distance_in_light_years=6.1, speed_of_light=299792458), light_travel_time(distance_in_light_years=5.88, speed_of_light=299792458)]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the speed of a car that traveled a distance of 500 meters in 25 seconds and provide the answer in km/h? Also, can you calculate the speed of a bicycle that traveled a distance of 1000 meters in 200 seconds and provide the answer in m/s? Lastly, can you calculate the speed of a train that traveled a distance of 10000 meters in 600 seconds and provide the answer in km/h?\"", "function": {"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance the object travelled in meters."}, "time": {"type": "number", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}, "human_eval_answer": "[\"calculate_speed(distance=500, time=25, to_unit='km/h')\", \"calculate_speed(distance=1000, time=200, to_unit='m/s')\", \"calculate_speed(distance=10000, time=600, to_unit='km/h')\"]", "question_type": "parallel_function"}
{"question": "What is the distance in miles between the celestial bodies Mars and Venus, and then between Mars and Jupiter, given that the function 'calculate_distance' requires the names of the two celestial bodies and the unit of measurement?", "function": {"name": "calculate_distance", "description": "Calculate the distance between two celestial bodies.", "parameters": {"type": "object", "properties": {"body1": {"type": "string", "description": "The first celestial body."}, "body2": {"type": "string", "description": "The second celestial body."}, "unit": {"type": "string", "description": "The unit of measurement, default is 'kilometers'."}}, "required": ["body1", "body2"]}}, "human_eval_answer": "[calculate_distance(body1='Mars', body2='Venus', unit='miles'), calculate_distance(body1='Mars', body2='Jupiter', unit='miles')]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the area under the curve for the polynomial function with coefficients [3, -2, 1] (meaning the function is 3x^2 - 2x + 1) within the interval [-1, 2], and then do the same for the polynomial function with coefficients [1, 0, -1] (meaning the function is x^2 - 1) within the interval [0, 3]? Please provide both results.\"", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "object", "properties": {"polynomial": {"type": "array", "items": {"type": "number"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "number"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}, "human_eval_answer": "[\"mathematics.calculate_area_under_curve(polynomial=[3, -2, 1], limits=[-1, 2])\", \"mathematics.calculate_area_under_curve(polynomial=[1, 0, -1], limits=[0, 3])\"]", "question_type": "parallel_function"}
{"question": "\"Can you help me calculate the total area of three different triangles? The first triangle has a base of 15 meters and a height of 20 meters. The second triangle has a base of 25 feet and a height of 30 feet. And the third triangle has a base of 35 inches and a height of 40 inches. I would like the area of each triangle in their respective units.\"", "function": {"name": "geometry.area_triangle", "description": "Calculate the area of a triangle.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle from the base."}, "unit": {"type": "string", "description": "The measurement unit for the area. Defaults to square meters."}}, "required": ["base", "height"]}}, "human_eval_answer": "[\"geometry.area_triangle(base=15, height=20, unit='square meters')\", \"geometry.area_triangle(base=25, height=30, unit='square feet')\", \"geometry.area_triangle(base=35, height=40, unit='square inches')\"]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the result of the following mathematical operation: first, raise the number 3 to the power of 5, then raise the number 2 to the power of 3.\"", "function": {"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The base number."}, "exponent": {"type": "number", "description": "The exponent."}, "mod": {"type": "number", "description": "The modulus. Default is None. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}, "human_eval_answer": "[\"math.power(base=3, exponent=5)\", \"math.power(base=2, exponent=3)\", \"math.power(base=math.power(base=3, exponent=5)\"]", "question_type": "parallel_function"}
{"question": "You are given a task to train a Random Forest classifier on two different datasets, 'dataset1' and 'dataset2'. For the first run, you are asked to set the maximum depth of the trees in the forest to 10 and the number of trees in the forest to 100. For the second run, you are asked to set the maximum depth of the trees in the forest to 20 and the number of trees in the forest to 200. How would you invoke the 'train_random_forest_classifier' function to accomplish this task?", "function": {"name": "train_random_forest_classifier", "description": "Train a Random Forest classifier with the specified parameters.", "parameters": {"type": "object", "properties": {"dataset": {"type": "string", "description": "The dataset to train the classifier on."}, "max_depth": {"type": "integer", "description": "The maximum depth of the trees in the forest."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest."}}, "required": ["dataset", "max_depth", "n_estimators"]}}, "human_eval_answer": "[train_random_forest_classifier(dataset='dataset1', max_depth=10, n_estimators=100), train_random_forest_classifier(dataset='dataset2', max_depth=20, n_estimators=200)]", "question_type": "parallel_function"}
{"question": "\"Could you calculate the Body Mass Index (BMI) for four individuals? The first person weighs 75 kilograms and is 180 centimeters tall, the second person weighs 60 kilograms and is 165 centimeters tall, the third person weighs 80 kilograms and is 175 centimeters tall, and the fourth person weighs 90 kilograms and is 185 centimeters tall. Please use the metric system for all calculations.\"", "function": {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}, "human_eval_answer": "[calculate_bmi(weight=75, height=180, system='metric'), calculate_bmi(weight=60, height=165, system='metric'), calculate_bmi(weight=80, height=175, system='metric'), calculate_bmi(weight=90, height=185, system='metric')]", "question_type": "parallel_function"}
{"question": "You are given a dataset with various variables including 'Age', 'Income', 'Education', 'Gender', 'Marital Status', and 'Spending Score'. You want to predict 'Spending Score' based on the other variables. Could you please use the 'run_linear_regression' function to build a linear regression model using 'Age', 'Income', and 'Education' as predictor variables and 'Spending Score' as the target variable without applying standardization on the predictors? Then, could you please run the same function again but this time with standardization applied on the predictors?", "function": {"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "object", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}, "human_eval_answer": "[\"run_linear_regression(predictors=['Age', 'Income', 'Education'], target='Spending Score', standardize=False)\", \"run_linear_regression(predictors=['Age', 'Income', 'Education'], target='Spending Score', standardize=True)\"]", "question_type": "parallel_function"}
{"question": "You are given a dataset \"data_random_forest\" in the form of a dataframe and you want to train a Random Forest Model on this data. You decide to experiment with different numbers of trees in the forest and different maximum depths of the trees to see how these parameters affect the model's performance. \n\nFirst, you train a model with 100 trees and a maximum depth of 10. Then, you train another model with 200 trees and a maximum depth of 20. After that, you train a third model with 300 trees and a maximum depth of 30. Finally, you train a fourth model with 400 trees and a maximum depth of 40. \n\nCan you invoke the 'random_forest.train' function four times with these different parameters and compare the performance of the four models?", "function": {"name": "random_forest.train", "description": "Train a Random Forest Model on given data", "parameters": {"type": "object", "properties": {"n_estimators": {"type": "integer", "description": "The number of trees in the forest."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree."}, "data": {"type": "Dataframe", "description": "The training data for the model."}}, "required": ["n_estimators", "max_depth", "data"]}}, "human_eval_answer": "[\"random_forest.train(n_estimators=100, max_depth=10, data=data_random_forest)\", \"random_forest.train(n_estimators=200, max_depth=20, data=data_random_forest)\", \"random_forest.train(n_estimators=300, max_depth=30, data=data_random_forest)\", \"random_forest.train(n_estimators=400, max_depth=40, data=data_random_forest)\"]", "question_type": "parallel_function"}
{"question": "\"Could you use the 'predict_house_price' function to compare the estimated prices of four different houses? The first house is located in New York, has 3 bedrooms, 2 bathrooms, and an area of 1500 square feet. The second house is in Los Angeles, with 4 bedrooms, 3 bathrooms, and an area of 2000 square feet. The third house is in Chicago, with 2 bedrooms, 1 bathroom, and an area of 1200 square feet. The fourth house is in Miami, with 3 bedrooms, 2 bathrooms, and an area of 1800 square feet.\"", "function": {"name": "predict_house_price", "description": "Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.", "parameters": {"type": "object", "properties": {"bedrooms": {"type": "integer", "description": "The number of bedrooms in the house."}, "bathrooms": {"type": "integer", "description": "The number of bathrooms in the house."}, "area": {"type": "integer", "description": "The area of the house in square feet."}, "location": {"type": "string", "description": "The location of the house."}}, "required": ["bedrooms", "bathrooms", "area", "location"]}}, "human_eval_answer": "[\"predict_house_price(bedrooms=3, bathrooms=2, area=1500, location='New York')\", \"predict_house_price(bedrooms=4, bathrooms=3, area=2000, location='Los Angeles')\", \"predict_house_price(bedrooms=2, bathrooms=1, area=1200, location='Chicago')\", \"predict_house_price(bedrooms=3, bathrooms=2, area=1800, location='Miami')\"]", "question_type": "parallel_function"}
{"question": "You are a data scientist working on a project that requires you to generate random numbers from a normal distribution. You need to generate four random numbers: two from a normal distribution with a mean of 5 and a standard deviation of 2, and two from a normal distribution with a mean of 10 and a standard deviation of 3. How can you use the 'random.normalvariate' function to achieve this?", "function": {"name": "random.normalvariate", "description": "Generates a random number from a normal distribution given the mean and standard deviation.", "parameters": {"type": "object", "properties": {"mu": {"type": "number", "description": "Mean of the normal distribution."}, "sigma": {"type": "number", "description": "Standard deviation of the normal distribution."}}, "required": ["mu", "sigma"]}}, "human_eval_answer": "[random.normalvariate(mu=5, sigma=2), random.normalvariate(mu=5, sigma=2), random.normalvariate(mu=10, sigma=3), random.normalvariate(mu=10, sigma=3)]", "question_type": "parallel_function"}
{"question": "\"In a board game, you have a six-sided die. You are curious about the probability of rolling a 4 three times in a row. After that, you want to know the probability of rolling a 2 twice in a row. Finally, you wonder what the probability would be if the die had 8 sides and you wanted to roll a 7 two times in a row. Can you calculate these probabilities?\"", "function": {"name": "probability.dice_roll", "description": "Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.", "parameters": {"type": "object", "properties": {"desired_number": {"type": "integer", "description": "The number you want to roll."}, "number_of_rolls": {"type": "integer", "description": "How many times you want to roll that number in a row."}, "die_sides": {"type": "integer", "description": "The number of sides on the die (optional; default is 6)."}}, "required": ["desired_number", "number_of_rolls"]}}, "human_eval_answer": "[\"probability.dice_roll(desired_number=4, number_of_rolls=3)\", \"probability.dice_roll(desired_number=2, number_of_rolls=2)\", \"probability.dice_roll(desired_number=7, number_of_rolls=2, die_sides=8)\"]", "question_type": "parallel_function"}
{"question": "\"In a game of chance, you have a 0.3 probability of winning any given round. If you play this game 20 times, what is the probability of winning exactly 5 times? Also, if you play the game 50 times, what is the probability of winning exactly 15 times? Lastly, if you play the game 100 times, what is the probability of winning exactly 30 times? Use the function 'prob_dist.binomial' to compute these probabilities.\"", "function": {"name": "prob_dist.binomial", "description": "Compute the probability of having 'success' outcome from binomial distribution.", "parameters": {"type": "object", "properties": {"trials": {"type": "integer", "description": "The number of independent experiments."}, "successes": {"type": "integer", "description": "The number of success events."}, "p": {"type": "number", "description": "The probability of success on any given trial, defaults to 0.5"}}, "required": ["trials", "successes"]}}, "human_eval_answer": "[\"prob_dist.binomial(trials=20, successes=5, p=0.3)\", \"prob_dist.binomial(trials=50, successes=15, p=0.3)\", \"prob_dist.binomial(trials=100, successes=30, p=0.3)\"]", "question_type": "parallel_function"}
{"question": "\"In a game of basketball, a player has a 60% chance of making any given shot. In a series of 10 shots, what is the probability that the player makes exactly 7 shots? Also, in another series of 15 shots, what is the probability that the player makes exactly 10 shots? Finally, in a series of 20 shots, what is the probability that the player makes exactly 15 shots?\"", "function": {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "object", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}, "human_eval_answer": "[calculate_binomial_probability(number_of_trials=10, number_of_successes=7, probability_of_success=0.6), calculate_binomial_probability(number_of_trials=15, number_of_successes=10, probability_of_success=0.6), calculate_binomial_probability(number_of_trials=20, number_of_successes=15, probability_of_success=0.6)]", "question_type": "parallel_function"}
{"question": "You are a teacher preparing a probability lesson for your students. You have a deck of 52 playing cards and you want to explain the probability of drawing certain cards. \n\n1. What is the probability of drawing an Ace (4 successful outcomes) from the deck (52 total outcomes)? Please provide this as a decimal. \n\n2. Then, what is the probability of drawing a heart (13 successful outcomes) from the deck (52 total outcomes)? Please provide this as a decimal. \n\n3. Finally, what is the probability of drawing a red card (26 successful outcomes) from the deck (52 total outcomes)? But this time, please provide the answer as a ratio.", "function": {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "object", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}, "human_eval_answer": "[\"probability_of_event(success_outcomes=4, total_outcomes=52, format_as_ratio=false)\", \"probability_of_event(success_outcomes=13, total_outcomes=52, format_as_ratio=false)\", \"probability_of_event(success_outcomes=26, total_outcomes=52, format_as_ratio=true)\"]", "question_type": "parallel_function"}
{"question": "\"In a game of basketball, a player has a 60% chance of making a successful shot. In a particular match, the player attempts 10 shots. What is the probability that the player makes exactly 6 successful shots? Now, consider a different scenario where the player's success rate drops to 50% but the number of attempts remains the same. What is the probability of making exactly 6 successful shots in this scenario? Finally, consider a third scenario where the player's success rate remains at 50% but the number of attempts increases to 15. What is the probability of making exactly 6 successful shots in this third scenario?\"", "function": {"name": "calc_binomial_prob", "description": "Calculates the probability of an outcome based on the binomial distribution", "parameters": {"type": "object", "properties": {"num_trials": {"type": "integer", "description": "Number of independent experiments."}, "num_success": {"type": "integer", "description": "Number of times the event of interest has occurred."}, "prob_success": {"type": "number", "description": "Probability of the event of interest on any single experiment."}}, "required": ["num_trials", "num_success", "prob_success"]}}, "human_eval_answer": "[\"calc_binomial_prob(num_trials=10, num_success=6, prob_success=0.6)\", \"calc_binomial_prob(num_trials=10, num_success=6, prob_success=0.5)\", \"calc_binomial_prob(num_trials=15, num_success=6, prob_success=0.5)\"]", "question_type": "parallel_function"}
{"question": "You are a data analyst and you have been given two 2x2 contingency tables representing the results of a survey conducted in two different cities. The first table is [45, 55, 35, 65] and the second table is [30, 70, 50, 50]. You are asked to perform a Chi-Squared test for independence on both tables to determine if there is a significant relationship between the variables in each city. Use a significance level of 0.05 for both tests. Can you tell if there is a significant relationship in each city based on the Chi-Squared test results?", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "object", "properties": {"table": {"type": "array", "items": {"type": "number"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "number", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}, "human_eval_answer": "[chi_squared_test(table=[45, 55, 35, 65], alpha=0.05), chi_squared_test(table=[30, 70, 50, 50], alpha=0.05)]", "question_type": "parallel_function"}
{"question": "\"Could you please perform a statistical t-test to check if the means of two independent datasets are statistically different? The first dataset, Dataset A, includes the following integers: 12, 15, 18, 20, 22, 25, 28, 30, 32, 35. The second dataset, Dataset B, includes these integers: 14, 17, 19, 21, 23, 26, 29, 31, 33, 36. Please perform the test twice, once with a significance level of 0.05 and once with a significance level of 0.01.\"", "function": {"name": "t_test", "description": "Perform a statistical t-test to check if the means of two independent datasets are statistically different.", "parameters": {"type": "object", "properties": {"dataset_A": {"type": "array", "items": {"type": "integer"}, "description": "Dataset A for comparison."}, "dataset_B": {"type": "array", "items": {"type": "integer"}, "description": "Dataset B for comparison."}, "alpha": {"type": "float", "description": "Significance level for the test. Default is 0.05."}}, "required": ["dataset_A", "dataset_B"]}}, "human_eval_answer": "[\"t_test(dataset_A=[12, 15, 18, 20, 22, 25, 28, 30, 32, 35], dataset_B=[14, 17, 19, 21, 23, 26, 29, 31, 33, 36], alpha=0.05)\", \"t_test(dataset_A=[12, 15, 18, 20, 22, 25, 28, 30, 32, 35], dataset_B=[14, 17, 19, 21, 23, 26, 29, 31, 33, 36], alpha=0.01)\"]", "question_type": "parallel_function"}
{"question": "Can you predict the price of a house with an area of 2500 square feet, 3 rooms, constructed in the year 2000, and located in New York, and then compare it with the price of a similar house but with an area of 3000 square feet, constructed in the year 2005, and located in Los Angeles? Finally, predict the price of a third house with an area of 2000 square feet, 2 rooms, constructed in the year 1995, and located in Chicago.", "function": {"name": "predict_house_price", "description": "Predict house price based on area, number of rooms and year of construction.", "parameters": {"type": "object", "properties": {"area": {"type": "integer", "description": "Area of the house in square feet."}, "rooms": {"type": "integer", "description": "Number of rooms in the house."}, "year": {"type": "integer", "description": "Year when the house was constructed."}, "location": {"type": "string", "description": "The location or city of the house."}}, "required": ["area", "rooms", "year", "location"]}}, "human_eval_answer": "[predict_house_price(area=2500, rooms=3, year=2000, location='New York'), predict_house_price(area=3000, rooms=3, year=2005, location='Los Angeles'), predict_house_price(area=2000, rooms=2, year=1995, location='Chicago')]", "question_type": "parallel_function"}
{"question": "What is the coefficient of determination (R squared) of a regression model if we use the dataset located at \"/user/home/datasets/finance.csv\", with 'income', 'age' and 'education' as the independent variables and 'credit_score' as the dependent variable, and then repeat the same process with 'income', 'age' and 'credit_score' as the independent variables and 'education' as the dependent variable?", "function": {"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "object", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}, "human_eval_answer": "[linear_regression.get_r_squared(dataset_path=\"/user/home/datasets/finance.csv\", independent_variables=['income', 'age', 'education'], dependent_variable='credit_score'), linear_regression.get_r_squared(dataset_path=\"/user/home/datasets/finance.csv\", independent_variables=['income', 'age', 'credit_score'], dependent_variable='education')]", "question_type": "parallel_function"}
{"question": "\"Can you help me calculate the quarterly dividend per share for my company? We have just paid out a total of $5,000,000 in dividends and currently have 2,000,000 outstanding shares. Also, I am considering a scenario where we might increase our total payout to $6,000,000 while keeping the same number of outstanding shares. What would be the quarterly dividend per share in that case? And what if we also increase our outstanding shares to 2,500,000 while keeping the total payout at $6,000,000?\"", "function": {"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "object", "properties": {"total_payout": {"type": "number", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}, "human_eval_answer": "[\"finance.calculate_quarterly_dividend_per_share(total_payout=5000000, outstanding_shares=2000000)\", \"finance.calculate_quarterly_dividend_per_share(total_payout=6000000, outstanding_shares=2000000)\", \"finance.calculate_quarterly_dividend_per_share(total_payout=6000000, outstanding_shares=2500000)\"]", "question_type": "parallel_function"}
{"question": "\"Can you help me calculate the discounted cash flow of a bond? I have a bond with an annual coupon payment of $50, a time frame of 5 years, and a discount rate of 5%. Also, the face value of the bond is $1000. I would like to know the discounted cash flow for this bond. After that, I want to compare it with another bond that has an annual coupon payment of $60, a time frame of 7 years, and a discount rate of 4%, with the same face value of $1000. Can you calculate the discounted cash flow for this second bond as well?\"", "function": {"name": "calculate_discounted_cash_flow", "description": "Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.", "parameters": {"type": "object", "properties": {"coupon_payment": {"type": "number", "description": "The annual coupon payment."}, "period": {"type": "integer", "description": "The time frame in years for which coupon payment is made."}, "discount_rate": {"type": "number", "description": "The discount rate."}, "face_value": {"type": "number", "description": "The face value of the bond, default is $1000."}}, "required": ["coupon_payment", "period", "discount_rate"]}}, "human_eval_answer": "[calculate_discounted_cash_flow(coupon_payment=50, period=5, discount_rate=0.05, face_value=1000), calculate_discounted_cash_flow(coupon_payment=60, period=7, discount_rate=0.04, face_value=1000)]", "question_type": "parallel_function"}
{"question": "\"Can you help me calculate the compound interest for my savings? I initially invested $5000 as the principal amount. The bank offers an annual interest rate of 2.5% (or 0.025 in decimal form). I plan to keep my money in the bank for 10 years. Also, the interest is compounded quarterly, so it's compounded 4 times in a year. Can you calculate the compound interest for the first 2 years, then for the next 3 years and finally for the remaining 5 years?\"", "function": {"name": "calculate_compound_interest", "description": "Calculate compound interest for an initial principal amount.", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The principal amount that the interest is applied to."}, "rate": {"type": "number", "description": "The annual interest rate. Enter as a decimal. E.g, 5% is 0.05"}, "time": {"type": "number", "description": "The time the money is invested for in years."}, "n": {"type": "number", "description": "The number of times that interest is compounded per time period. Default is 1."}}, "required": ["principal", "rate", "time"]}}, "human_eval_answer": "[calculate_compound_interest(principal=5000, rate=0.025, time=2, n=4), calculate_compound_interest(principal=5000, rate=0.025, time=3, n=4), calculate_compound_interest(principal=5000, rate=0.025, time=5, n=4)]", "question_type": "parallel_function"}
{"question": "\"Can you calculate the return on equity for two companies? The first company has a net income of $1,000,000, shareholder's equity of $5,000,000, and paid dividends of $200,000. The second company has a net income of $2,000,000, shareholder's equity of $10,000,000, but did not pay any dividends.\"", "function": {"name": "calculate_return_on_equity", "description": "Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.", "parameters": {"type": "object", "properties": {"net_income": {"type": "number", "description": "The company's net income."}, "shareholder_equity": {"type": "number", "description": "The company's total shareholder's equity."}, "dividends_paid": {"type": "number", "description": "The total dividends paid by the company. Optional. If not given, assumes it's 0."}}, "required": ["net_income", "shareholder_equity"]}}, "human_eval_answer": "[calculate_return_on_equity(net_income=1000000, shareholder_equity=5000000, dividends_paid=200000), calculate_return_on_equity(net_income=2000000, shareholder_equity=10000000)]", "question_type": "parallel_function"}
{"question": "\"Imagine you have two different investment opportunities. The first one has a present value of $5000, an annual interest rate of 5%, and you plan to hold it for 10 years. The second one has a present value of $7000, an annual interest rate of 4%, and you plan to hold it for 15 years. Both investments compound interest annually. Can you calculate the future value of both investments using the finance.predict_future_value function?\"", "function": {"name": "finance.predict_future_value", "description": "Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.", "parameters": {"type": "object", "properties": {"present_value": {"type": "number", "description": "The present value of the investment."}, "annual_interest_rate": {"type": "number", "description": "The annual interest rate of the investment."}, "compounding_periods_per_year": {"type": "integer", "description": "The number of times that interest is compounded per year. Default is 1 (annually)."}, "time_years": {"type": "integer", "description": "The investment horizon in years."}}, "required": ["present_value", "annual_interest_rate", "time_years"]}}, "human_eval_answer": "[\"finance.predict_future_value(present_value=5000, annual_interest_rate=0.05, compounding_periods_per_year=1, time_years=10)\", \"finance.predict_future_value(present_value=7000, annual_interest_rate=0.04, compounding_periods_per_year=1, time_years=15)\"]", "question_type": "parallel_function"}
{"question": "\"John has decided to invest in two different funds. He invested $5000 in Fund A which has an annual return rate of 7% and he plans to keep his money there for 5 years. On the other hand, he invested $8000 in Fund B with an annual return rate of 5% for a period of 7 years. Can you predict the profit John will make from both Fund A and Fund B?\"", "function": {"name": "investment.predictProfit", "description": "Predict the profit for given investment after specified number of years.", "parameters": {"type": "object", "properties": {"investment_amount": {"type": "number", "description": "The amount invested in dollars."}, "annual_return": {"type": "number", "description": "The annual return rate of the investment."}, "years": {"type": "integer", "description": "The time period in years for which the investment is made."}}, "required": ["investment_amount", "annual_return", "years"]}}, "human_eval_answer": "[\"investment.predictProfit(investment_amount=5000, annual_return=0.07, years=5)\", \"investment.predictProfit(investment_amount=8000, annual_return=0.05, years=7)\"]", "question_type": "parallel_function"}
{"question": "You are an investor who recently sold some stocks. You bought one stock at $150, another at $200, and another at $250. You sold them at $180, $210, and $300 respectively. You also received dividends of $20, $30, and $40 for each stock. Can you calculate the return on investment for each of these stocks using the 'calculate_return_on_investment' function?", "function": {"name": "calculate_return_on_investment", "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.", "parameters": {"type": "object", "properties": {"purchase_price": {"type": "number", "description": "The price the stock was bought at."}, "sale_price": {"type": "number", "description": "The price the stock was sold at."}, "dividend": {"type": "number", "description": "Any dividends received from the stock.", "default": 0}}, "required": ["purchase_price", "sale_price"]}}, "human_eval_answer": "[calculate_return_on_investment(purchase_price=150, sale_price=180, dividend=20), calculate_return_on_investment(purchase_price=200, sale_price=210, dividend=30), calculate_return_on_investment(purchase_price=250, sale_price=300, dividend=40)]", "question_type": "parallel_function"}
{"question": "\"Could you please calculate the future value of my investments? I have invested $5000 in Apple Inc. (AAPL) and expect an annual return of 7% over the next 5 years. I have also invested $8000 in Microsoft Corporation (MSFT) with an expected annual return of 6% for the next 7 years. Lastly, I have invested $10000 in Amazon.com, Inc. (AMZN) expecting an annual return of 8% for the next 10 years.\"", "function": {"name": "portfolio_future_value", "description": "Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.", "parameters": {"type": "object", "properties": {"stock": {"type": "string", "description": "The ticker symbol of the stock."}, "invested_amount": {"type": "number", "description": "The invested amount in USD."}, "expected_annual_return": {"type": "number", "description": "The expected annual return on investment as a decimal. E.g. 5% = 0.05"}, "years": {"type": "integer", "description": "The number of years for which the investment is made."}}, "required": ["stock", "invested_amount", "expected_annual_return", "years"]}}, "human_eval_answer": "[portfolio_future_value(stock='AAPL', invested_amount=5000, expected_annual_return=0.07, years=5), portfolio_future_value(stock='MSFT', invested_amount=8000, expected_annual_return=0.06, years=7), portfolio_future_value(stock='AMZN', invested_amount=10000, expected_annual_return=0.08, years=10)]", "question_type": "parallel_function"}
{"question": "\"John invested $5000 in a mutual fund 5 years ago. Today, the value of his investment has grown to $7000. He wants to compare this with another investment he made 3 years ago where he invested $8000 and now it's worth $12000. Can you help John calculate the Compound Annual Growth Rate (CAGR) for both these investments?\"", "function": {"name": "calculate_cagr", "description": "Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.", "parameters": {"type": "object", "properties": {"initial_value": {"type": "number", "description": "The initial investment value."}, "final_value": {"type": "number", "description": "The final investment value."}, "period_in_years": {"type": "integer", "description": "The period of the investment in years."}}, "required": ["initial_value", "final_value", "period_in_years"]}}, "human_eval_answer": "[calculate_cagr(initial_value=5000, final_value=7000, period_in_years=5), calculate_cagr(initial_value=8000, final_value=12000, period_in_years=3)]", "question_type": "parallel_function"}
{"question": "What is the current price per ounce of gold, silver, platinum, and palladium?", "function": {"name": "get_metal_price", "description": "Retrieve the current price for a specified metal and measure.", "parameters": {"type": "object", "properties": {"metal": {"type": "string", "description": "The metal whose price needs to be fetched."}, "measure": {"type": "string", "description": "The measure unit for price, like 'ounce' or 'kg'."}}, "required": ["metal", "measure"]}}, "human_eval_answer": "[get_metal_price(metal='gold', measure='ounce'), get_metal_price(metal='silver', measure='ounce'), get_metal_price(metal='platinum', measure='ounce'), get_metal_price(metal='palladium', measure='ounce')]", "question_type": "parallel_function"}
{"question": "What were the closing stock prices for Microsoft and Apple on NASDAQ on the dates 2022-01-01 and 2022-02-01?", "function": {"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}, "human_eval_answer": "[get_stock_price(company_name='Microsoft', date='2022-01-01', exchange='NASDAQ'), get_stock_price(company_name='Microsoft', date='2022-02-01', exchange='NASDAQ'), get_stock_price(company_name='Apple', date='2022-01-01', exchange='NASDAQ'), get_stock_price(company_name='Apple', date='2022-02-01', exchange='NASDAQ')]", "question_type": "parallel_function"}
{"question": "What were the stock prices of Apple Inc. listed on NASDAQ and Microsoft Corporation listed on NYSE for the past 10 and 15 days respectively?", "function": {"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}, "human_eval_answer": "[get_stock_price(company='AAPL', days=10, exchange='NASDAQ'), get_stock_price(company='MSFT', days=15, exchange='NYSE')]", "question_type": "parallel_function"}
{"question": "What were the 'Open', 'Close', 'High', and 'Low' stock prices for Microsoft and Apple over the past 30 days?", "function": {"name": "stock_price", "description": "Get stock price data for a given company over a specified number of days.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company name."}, "days": {"type": "integer", "description": "The number of previous days to retrieve data for."}, "data_type": {"type": "string", "description": "The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'."}}, "required": ["company", "days"]}}, "human_eval_answer": "[stock_price(company='Microsoft', days=30, data_type='Open'), stock_price(company='Microsoft', days=30, data_type='Close'), stock_price(company='Microsoft', days=30, data_type='High'), stock_price(company='Microsoft', days=30, data_type='Low'), stock_price(company='Apple', days=30, data_type='Open'), stock_price(company='Apple', days=30, data_type='Close'), stock_price(company='Apple', days=30, data_type='High'), stock_price(company='Apple', days=30, data_type='Low')]", "question_type": "parallel_function"}
{"question": "Can you use the get_stock_prices function to retrieve the stock prices for Apple, Microsoft, Amazon, and Tesla over the duration of 1 week, 2 weeks, 3 weeks, and 1 month respectively?", "function": {"name": "get_stock_prices", "description": "Retrieves stock prices for specified companies and duration.", "parameters": {"type": "object", "properties": {"companies": {"type": "array", "items": {"type": "string"}, "description": "List of companies to retrieve stock prices for."}, "duration": {"type": "string", "description": "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."}}, "required": ["companies", "duration"]}}, "human_eval_answer": "[get_stock_prices(companies=['Apple'], duration='1 week'), get_stock_prices(companies=['Microsoft'], duration='2 weeks'), get_stock_prices(companies=['Amazon'], duration='3 weeks'), get_stock_prices(companies=['Tesla'], duration='1 month')]", "question_type": "parallel_function"}
{"question": "\"John is planning to invest in a mutual fund. He is considering two scenarios. In the first scenario, he will make an initial investment of $5000 with an annual rate of return of 7% and he will not make any additional contributions. In the second scenario, he will make an initial investment of $3000 with an annual rate of return of 6% and he will make additional regular contributions of $200 every year. He wants to compare the future value of his investment after 10 years in both scenarios. Can you help him calculate the future value of his investment in both scenarios?\"", "function": {"name": "finance.calculate_future_value", "description": "Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial investment amount."}, "rate_of_return": {"type": "number", "description": "The annual rate of return."}, "years": {"type": "integer", "description": "The time frame of the investment in years."}, "contribution": {"type": "number", "description": "Optional: Additional regular contributions. Default is 0."}}, "required": ["initial_investment", "rate_of_return", "years"]}}, "human_eval_answer": "[\"finance.calculate_future_value(initial_investment=5000, rate_of_return=0.07, years=10)\", \"finance.calculate_future_value(initial_investment=3000, rate_of_return=0.06, years=10, contribution=200)\"]", "question_type": "parallel_function"}
{"question": "\"Imagine you are a drone operator. You are currently operating a drone that is at a point (5, 7) in the sky. You are asked to move the drone to a new point (10, 15). After reaching the new point, you are again asked to move the drone to another point (20, 25). Can you calculate the total distance the drone has traveled using the Euclidean norm method?\"", "function": {"name": "math.hypot", "description": "Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.", "parameters": {"type": "object", "properties": {"x": {"type": "number", "description": "The x-coordinate value."}, "y": {"type": "number", "description": "The y-coordinate value."}, "z": {"type": "number", "description": "Optional. The z-coordinate value. Default is 0."}}, "required": ["x", "y"]}}, "human_eval_answer": "[\"math.hypot(x=5, y=7)\", \"math.hypot(x=10, y=15)\", \"math.hypot(x=20, y=25)\"]", "question_type": "parallel_function"}
{"question": "\"Can you help me find the roots of two different quadratic equations? The first equation is 3x^2 + 7x + 2 = 0, where 'a' is the coefficient of x^2 (3), 'b' is the coefficient of x (7), and 'c' is the constant term (2). The second equation is 5x^2 - 4x + 1 = 0, where 'a' is the coefficient of x^2 (5), 'b' is the coefficient of x (-4), and 'c' is the constant term (1).\"", "function": {"name": "algebra.quadratic_roots", "description": "Find the roots of a quadratic equation ax^2 + bx + c = 0.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of x^2."}, "b": {"type": "number", "description": "Coefficient of x."}, "c": {"type": "number", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "[algebra.quadratic_roots(a=3, b=7, c=2), algebra.quadratic_roots(a=5, b=-4, c=1)]", "question_type": "parallel_function"}
{"question": "Can you estimate the population of Bengal Tigers in India for the year 2020, compare it with the estimated population of African Elephants in Kenya for the same year, and then estimate the population of both these species in their respective countries for the current year?", "function": {"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "number", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}, "human_eval_answer": "[estimate_population(species='Bengal Tigers', country='India', year=2020), estimate_population(species='African Elephants', country='Kenya', year=2020), estimate_population(species='Bengal Tigers', country='India'), estimate_population(species='African Elephants', country='Kenya')]", "question_type": "parallel_function"}
{"question": "What are the potential greenhouse gas emissions savings if I switch to solar energy for 12 months and wind energy for 8 months in the Midwest region of the United States?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "object", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy."}}, "required": ["energy_type", "usage_duration"]}}, "human_eval_answer": "[calculate_emission_savings(energy_type='solar', usage_duration=12, region='Midwest'), calculate_emission_savings(energy_type='wind', usage_duration=8, region='Midwest')]", "question_type": "parallel_function"}
{"question": "What is the air quality data for New York City, including additional data like PM2.5, PM10, ozone levels, and pollution sources, for today, yesterday, and the day before yesterday?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}, "human_eval_answer": "[get_air_quality(location='New York City', detail=True, historical='today'), get_air_quality(location='New York City', detail=True, historical='yesterday'), get_air_quality(location='New York City', detail=True, historical='day before yesterday')]", "question_type": "parallel_function"}
{"question": "What are the current traffic conditions for a route from New York to Los Angeles using driving as the preferred method of transportation, then from Los Angeles to San Francisco using bicycling as the preferred method of transportation, and finally from San Francisco back to New York using transit as the preferred method of transportation?", "function": {"name": "get_traffic_info", "description": "Retrieve current traffic conditions for a specified route.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting point of the route."}, "end_location": {"type": "string", "description": "The destination of the route."}, "mode": {"type": "string", "enum": ["driving", "walking", "bicycling", "transit"], "description": "Preferred method of transportation, default to 'driving'."}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "[get_traffic_info(start_location='New York', end_location='Los Angeles', mode='driving'), get_traffic_info(start_location='Los Angeles', end_location='San Francisco', mode='bicycling'), get_traffic_info(start_location='San Francisco', end_location='New York', mode='transit')]", "question_type": "parallel_function"}
{"question": "Can you find me parks in New York, USA that have a Tennis Court and a Picnic Area, then find parks in Los Angeles, USA that have a Playground and Running Track, and finally find parks in Chicago, USA that have a Tennis Court and a Playground?", "function": {"name": "parks.find_nearby", "description": "Locate nearby parks based on specific criteria like tennis court availability.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. London, UK"}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Tennis Court", "Picnic Area", "Playground", "Running Track"]}, "description": "Preferred amenities in park."}}, "required": ["location"]}}, "human_eval_answer": "[parks.find_nearby(location='New York, USA', amenities=['Tennis Court', 'Picnic Area']), parks.find_nearby(location='Los Angeles, USA', amenities=['Playground', 'Running Track']), parks.find_nearby(location='Chicago, USA', amenities=['Tennis Court', 'Playground'])]", "question_type": "parallel_function"}
{"question": "What is the shortest driving distance from New York City to Los Angeles, and then from Los Angeles to Miami, considering both the shortest and scenic route preferences?", "function": {"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}, "human_eval_answer": "[calculate_shortest_distance(start_location=\"New York City\", end_location=\"Los Angeles\", route_preference=\"Shortest\"), calculate_shortest_distance(start_location=\"Los Angeles\", end_location=\"Miami\", route_preference=\"Shortest\"), calculate_shortest_distance(start_location=\"New York City\", end_location=\"Los Angeles\", route_preference=\"Scenic\"), calculate_shortest_distance(start_location=\"Los Angeles\", end_location=\"Miami\", route_preference=\"Scenic\")]", "question_type": "parallel_function"}
{"question": "Can you help me find public libraries in New York, NY that have a Reading Room and Fiction section, and then in Los Angeles, CA that offer Wi-Fi and have a Children Section, and finally in Chicago, IL that have a Cafe and a Reading Room?", "function": {"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}, "human_eval_answer": "[public_library.find_nearby(location='New York, NY', facilities=['Reading Room', 'Fiction']), public_library.find_nearby(location='Los Angeles, CA', facilities=['Wi-Fi', 'Children Section']), public_library.find_nearby(location='Chicago, IL', facilities=['Cafe', 'Reading Room'])]", "question_type": "parallel_function"}
{"question": "Can you fetch the latest news on the topic of \"Climate Change\" and \"Artificial Intelligence\", each with 5 articles, and specifically for the region \"Europe\"?", "function": {"name": "get_news", "description": "Fetches the latest news on a specific topic.", "parameters": {"type": "object", "properties": {"topic": {"type": "string", "description": "The subject for the news topic."}, "quantity": {"type": "integer", "description": "Number of articles to fetch."}, "region": {"type": "string", "description": "The geographical region for the news (Optional)."}}, "required": ["topic", "quantity"]}}, "human_eval_answer": "[get_news(topic=\"Climate Change\", quantity=5, region=\"Europe\"), get_news(topic=\"Artificial Intelligence\", quantity=5, region=\"Europe\")]", "question_type": "parallel_function"}
{"question": "Can you send an email to my colleague at john.doe@example.com with the subject \"Project Update\" and the body content \"Dear John, The project is progressing as planned and we are on track to meet our deadlines. Best, Alex\", then carbon copy the email to my manager at manager@example.com and blind carbon copy it to the HR at hr@example.com? After that, can you send another email to my other colleague at jane.doe@example.com with the subject \"Meeting Reminder\" and the body content \"Dear Jane, This is a reminder for our meeting scheduled for tomorrow at 10 AM. Best, Alex\", and carbon copy it to my assistant at assistant@example.com and blind carbon copy it to the HR at hr@example.com?", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "object", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy."}}, "required": ["to", "subject", "body"]}}, "human_eval_answer": "[send_email(to='john.doe@example.com', subject='Project Update', body='Dear John, The project is progressing as planned and we are on track to meet our deadlines. Best, Alex', cc='manager@example.com', bcc='hr@example.com'), send_email(to='jane.doe@example.com', subject='Meeting Reminder', body='Dear Jane, This is a reminder for our meeting scheduled for tomorrow at 10 AM. Best, Alex', cc='assistant@example.com', bcc='hr@example.com')]", "question_type": "parallel_function"}
{"question": "Can you find me upcoming jazz events in Los Angeles, CA for the next 14 days and then find the same for rock events in Chicago, IL for the next 10 days and finally find upcoming classical music events in Boston, MA for the next 7 days?", "function": {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}, "human_eval_answer": "[event_finder.find_upcoming(location='Los Angeles, CA', genre='jazz', days_ahead=14), event_finder.find_upcoming(location='Chicago, IL', genre='rock', days_ahead=10), event_finder.find_upcoming(location='Boston, MA', genre='classical music', days_ahead=7)]", "question_type": "parallel_function"}
{"question": "Can you provide a brief about the movie \"Inception\" and then retrieve additional information like Director, Cast, Awards etc. for the same movie \"Inception\" and also for the movie \"The Dark Knight\"?", "function": {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}, "human_eval_answer": "[movie_details.brief(title=\"Inception\", extra_info=true), movie_details.brief(title=\"The Dark Knight\", extra_info=true)]", "question_type": "parallel_function"}
{"question": "Can you please retrieve the details of two lawsuits for me? The first one has a case number of '12345' and was filed in the 'New York Supreme Court'. I would also like to know the verdict details for this case. The second lawsuit has a case number '67890' and was filed in the 'Los Angeles Superior Court'. I do not need the verdict details for this case.", "function": {"name": "get_lawsuit_details", "description": "Retrieve details of a lawsuit based on its case number and court location.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "Case number of the lawsuit."}, "court_location": {"type": "string", "description": "The location of the court where the lawsuit was filed."}, "with_verdict": {"type": "boolean", "description": "Flag to include verdict details if available. Default is False"}}, "required": ["case_number", "court_location"]}}, "human_eval_answer": "[get_lawsuit_details(case_number='12345', court_location='New York Supreme Court', with_verdict=True), get_lawsuit_details(case_number='67890', court_location='Los Angeles Superior Court', with_verdict=False)]", "question_type": "parallel_function"}
{"question": "\"Can you provide me with the details of the lawsuit case with the case number '12345ABC', which was initiated in the year 2018 and filed in the New York court jurisdiction? Also, can you retrieve the same information for another lawsuit case with the case number '67890XYZ', initiated in the year 2019 and filed in the California court jurisdiction?\"", "function": {"name": "lawsuit_info", "description": "Retrieves details of a lawsuit given a case number", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The unique identifier of the lawsuit case"}, "year": {"type": "number", "description": "The year in which the lawsuit case was initiated", "optional": true}, "location": {"type": "string", "description": "The location or court jurisdiction where the case was filed.", "optional": true}}, "required": ["case_number"]}}, "human_eval_answer": "[lawsuit_info(case_number='12345ABC', year=2018, location='New York'), lawsuit_info(case_number='67890XYZ', year=2019, location='California')]", "question_type": "parallel_function"}
{"question": "Can you use the lawsuit_search function to retrieve all lawsuits involving the entity \"Google\" from the county of \"Santa Clara\" and then do the same for the entity \"Facebook\" in the county of \"San Mateo\", both in the state of California?", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "object", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}, "human_eval_answer": "[lawsuit_search(entity=\"Google\", county=\"Santa Clara\", state=\"California\"), lawsuit_search(entity=\"Facebook\", county=\"San Mateo\", state=\"California\")]", "question_type": "parallel_function"}
{"question": "What is the current temperature and humidity in New York, Los Angeles, London and Tokyo, if I want to include both temperature and humidity in the results?", "function": {"name": "get_current_weather", "description": "Retrieves the current temperature and humidity for a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location to get the weather for."}, "include_temperature": {"type": "boolean", "description": "Whether to include the temperature in the result. Default is true."}, "include_humidity": {"type": "boolean", "description": "Whether to include the humidity in the result. Default is true."}}, "required": ["location"]}}, "human_eval_answer": "[get_current_weather(location='New York', include_temperature=True, include_humidity=True), get_current_weather(location='Los Angeles', include_temperature=True, include_humidity=True), get_current_weather(location='London', include_temperature=True, include_humidity=True), get_current_weather(location='Tokyo', include_temperature=True, include_humidity=True)]", "question_type": "parallel_function"}
{"question": "Find the sum of all the multiples of 3 and 5 between 1 and 1000. Also find the product of the first five prime numbers.", "function": [{"name": "math_toolkit.sum_of_multiples", "description": "Find the sum of all multiples of specified numbers within a specified range.", "parameters": {"type": "object", "properties": {"lower_limit": {"type": "integer", "description": "The start of the range (inclusive)."}, "upper_limit": {"type": "integer", "description": "The end of the range (inclusive)."}, "multiples": {"type": "array", "items": {"type": "integer"}, "description": "The numbers to find multiples of."}}, "required": ["lower_limit", "upper_limit", "multiples"]}}, {"name": "math_toolkit.product_of_primes", "description": "Find the product of the first n prime numbers.", "parameters": {"type": "object", "properties": {"count": {"type": "integer", "description": "The number of prime numbers to multiply together."}}, "required": ["count"]}}], "human_eval_answer": "[math_toolkit.sum_of_multiples(lower_limit=1, upper_limit=1000, multiples=[3,5]),math_toolkit.product_of_primes(count=5)]", "question_type": "parallel_multiple_function"}
{"question": "Find the area of a rectangle with length 7 and breadth 3. Also, calculate the area of a circle with radius 5.", "function": [{"name": "area_rectangle.calculate", "description": "Calculate the area of a rectangle given the length and breadth.", "parameters": {"type": "object", "properties": {"length": {"type": "number", "description": "The length of the rectangle."}, "breadth": {"type": "number", "description": "The breadth of the rectangle."}}, "required": ["length", "breadth"]}}, {"name": "area_circle.calculate", "description": "Calculate the area of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "volume_cylinder.calculate", "description": "Calculate the volume of a cylinder given the radius and the height.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the cylinder."}, "height": {"type": "number", "description": "The height of the cylinder."}}, "required": ["radius", "height"]}}], "human_eval_answer": "[area_rectangle.calculate(length=7, breadth=3),area_circle.calculate(radius=5)]", "question_type": "parallel_multiple_function"}
{"question": "Find the area and perimeter of a circle with a radius of 5 and also find the circumference of a circle with diameter of 10.", "function": [{"name": "circle.calculate_area", "description": "Calculate the area of a circle based on the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "circle.calculate_circumference", "description": "Calculate the circumference of a circle based on the diameter.", "parameters": {"type": "object", "properties": {"diameter": {"type": "integer", "description": "The diameter of the circle."}}, "required": ["diameter"]}}, {"name": "rectangle.calculate_perimeter", "description": "Calculate the perimeter of a rectangle based on the length and breadth.", "parameters": {"type": "object", "properties": {"length": {"type": "integer", "description": "The length of the rectangle."}, "breadth": {"type": "integer", "description": "The breadth of the rectangle."}}, "required": ["length", "breadth"]}}], "human_eval_answer": "[circle.calculate_area(radius=5), circle.calculate_circumference(diameter=10)]", "question_type": "parallel_multiple_function"}
{"question": "What are the length and the width of a rectangle which has a perimeter of 14 and area of 15.", "function": [{"name": "get_rectangle_property", "description": "Get specific property of the rectangle (like length, width) based on perimeter and area.", "parameters": {"type": "object", "properties": {"perimeter": {"type": "integer", "description": "Perimeter of the rectangle."}, "area": {"type": "integer", "description": "Area of the rectangle."}, "property": {"type": "string", "description": "Specific property required. It can be length, width or diagonal."}, "tolerance": {"type": "float", "description": "Allowed error for calculations. (optional)"}}, "required": ["perimeter", "area", "property"]}}], "human_eval_answer": "[ get_rectangle_property(perimeter=14, area=15, property='length'), get_rectangle_property(perimeter=14, area=15, property='width')]", "question_type": "parallel_multiple_function"}
{"question": "Calculate the area under the curve from x=1 to x=5 for the function f(x)=x^2. And find the derivative at x=3.", "function": [{"name": "integral", "description": "Calculate the definite integral of a function over an interval [a, b].", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to integrate."}, "a": {"type": "number", "description": "The lower bound of the interval."}, "b": {"type": "number", "description": "The upper bound of the interval."}}, "required": ["function", "a", "b"]}}, {"name": "derivative", "description": "Find the derivative of a function at a certain point.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to differentiate."}, "x": {"type": "number", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}], "human_eval_answer": "[integral(function='x^2', a=1, b=5), derivative(function='x^2', x=3)]", "question_type": "parallel_multiple_function"}
{"question": "Calculate the Greatest Common Divisor (GCD) of 96 and 128, and the least common multiple (LCM) of 15 and 25.", "function": [{"name": "gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "The first integer."}, "num2": {"type": "integer", "description": "The second integer."}}, "required": ["num1", "num2"]}}, {"name": "lcm", "description": "Calculate the least common multiple of two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "The first integer."}, "num2": {"type": "integer", "description": "The second integer."}}, "required": ["num1", "num2"]}}, {"name": "primeFactors", "description": "Find all prime factors of an integer.", "parameters": {"type": "object", "properties": {"num": {"type": "integer", "description": "The integer."}, "withMultiplicity": {"type": "boolean", "description": "If true, includes the multiplicity of each factor.", "default": "false"}}, "required": ["num"]}}], "human_eval_answer": "[gcd(num1=96, num2=128),lcm(num1=15, num2=25)]", "question_type": "parallel_multiple_function"}
{"question": "Find all prime numbers between 50 and 150. Then get the fibonacci series upto 150.", "function": [{"name": "find_prime_numbers", "description": "Locate all prime numbers in a specific number range.", "parameters": {"type": "object", "properties": {"start": {"type": "integer", "description": "The start of the number range"}, "end": {"type": "integer", "description": "The end of the number range"}}, "required": ["start", "end"]}}, {"name": "count_items", "description": "Count the number of items in a collection.", "parameters": {"type": "object", "properties": {"collection": {"type": "array", "items": {"type": "string"}, "description": "The collection of items to count"}}, "required": ["collection"]}}, {"name": "get_fibonacci_sequence", "description": "Generate a Fibonacci sequence up to a specific number of items.", "parameters": {"type": "object", "properties": {"count": {"type": "integer", "description": "The number of items to generate"}}, "required": ["count"]}}], "human_eval_answer": "[find_prime_numbers(start=50, end=150),count_items(collection=primes),get_fibonacci_sequence(count=150)]", "question_type": "parallel_multiple_function"}
{"question": "Calculate the time required for a car moving at 50 m/s to travel a distance of 600 m. Also calculate the time required for a bullet moving at 400 m/s to cover a distance of 1000 m.", "function": [{"name": "kinematics.calculate_time", "description": "Calculate time required for an object to travel a particular distance at a particular velocity.", "parameters": {"type": "object", "properties": {"velocity": {"type": "integer", "description": "The velocity of the object in m/s."}, "distance": {"type": "integer", "description": "The distance covered by the object in meters."}}, "required": ["velocity", "distance"]}}, {"name": "physics.calculate_force", "description": "Calculate the force required to move an object of a particular mass at a particular acceleration.", "parameters": {"type": "object", "properties": {"mass": {"type": "integer", "description": "The mass of the object in kg."}, "acceleration": {"type": "integer", "description": "The acceleration of the object in m/s^2."}}, "required": ["mass", "acceleration"]}}], "human_eval_answer": "[kinematics.calculate_time(velocity=50, distance=600), kinematics.calculate_time(velocity=400, distance=1000)]", "question_type": "parallel_multiple_function"}
{"question": "Calculate the final velocity of a moving object given initial velocity of 20 m/s, acceleration of 5 m/s^2 and time of 6 seconds. Also, compute the total distance covered by the object.", "function": [{"name": "kinematics.final_velocity", "description": "Calculates the final velocity of a moving object given initial velocity, acceleration and time.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2."}, "time": {"type": "number", "description": "The time for which the object has been moving in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}, {"name": "kinematics.distance_traveled", "description": "Computes the total distance covered by a moving object given initial velocity, acceleration and time.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2."}, "time": {"type": "number", "description": "The time for which the object has been moving in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "human_eval_answer": "[kinematics.final_velocity(initial_velocity=20, acceleration=5, time=6), kinematics.distance_traveled(initial_velocity=20, acceleration=5, time=6)]", "question_type": "parallel_multiple_function"}
{"question": "Book a flight from Seattle to Boston with American Airlines and book a hotel in Boston for 4 nights. ", "function": [{"name": "flight_book", "description": "Book a flight for a specific route and airlines", "parameters": {"type": "object", "properties": {"_from": {"type": "string", "description": "The departure city."}, "to": {"type": "string", "description": "The arrival city."}, "airlines": {"type": "string", "description": "The preferred airline."}}, "required": ["_from", "to", "airlines"]}}, {"name": "hotel_book", "description": "Book a hotel for a specific location for the number of nights", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the hotel is located."}, "nights": {"type": "integer", "description": "Number of nights for the stay."}}, "required": ["location", "nights"]}}], "human_eval_answer": "[flight_book(_from='Seattle', to='Boston', airlines='American Airlines'), hotel_book(location='Boston', nights=4)]", "question_type": "parallel_multiple_function"}
{"question": "Buy me a ticket to the Mamma Mia musical for next Friday, also get me a train ticket from New York to Chicago for the same day.", "function": [{"name": "musical_ticket.buy", "description": "Buy a ticket for a musical", "parameters": {"type": "object", "properties": {"show": {"type": "string", "description": "Name of the show."}, "date": {"type": "string", "description": "Date when the ticket should be bought for."}}, "required": ["show", "date"]}}, {"name": "train_ticket.buy", "description": "Buy a train ticket for a specific date and route.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "The departure city."}, "destination": {"type": "string", "description": "The destination city."}, "date": {"type": "string", "description": "The date when the journey should be."}}, "required": ["origin", "destination", "date"]}}, {"name": "concert_ticket.buy", "description": "Buy a concert ticket", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "Name of the artist."}, "date": {"type": "string", "description": "Date of the concert."}}, "required": ["artist", "date"]}}], "human_eval_answer": "[musical_ticket.buy(show='Mamma Mia', date='next Friday'),train_ticket.buy(origin='New York', destination='Chicago', date='next Friday')]", "question_type": "parallel_multiple_function"}
{"question": "What is the Electric field at 3m from a point charge with a value of 4C? Also, calculate the magnetic field for an electric current of 0.5A flowing through a solenoid having 25 turns per meter and a length of 2m.", "function": [{"name": "physics.electric_field", "description": "Calculate electric field for a given point charge and distance.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "Value of point charge in Coulombs."}, "distance": {"type": "number", "description": "Distance from the point charge in meters."}}, "required": ["charge", "distance"]}}, {"name": "physics.magnetic_field", "description": "Calculate magnetic field for given current flowing through solenoid.", "parameters": {"type": "object", "properties": {"current": {"type": "number", "description": "Electric current in Amperes."}, "turnsPerMeter": {"type": "number", "description": "Number of turns of solenoid per meter."}, "length": {"type": "number", "description": "Length of the solenoid in meters."}}, "required": ["current", "turnsPerMeter", "length"]}}], "human_eval_answer": "[physics.electric_field(charge=4, distance=3), physics.magnetic_field(current=0.5, turnsPerMeter=25, length=2)]", "question_type": "parallel_multiple_function"}
{"question": "Calculate the magnetic field produced by a wire carrying a current of 4 amps with a distance of 2 m from the wire. And find the voltage difference of a region in the direction of the electric field that is 3 m apart, assuming the electric field is 5 N/C.", "function": [{"name": "calculate_magnetic_field", "description": "Calculate the magnetic field produced by a current-carrying wire.", "parameters": {"type": "object", "properties": {"current": {"type": "number", "description": "The current in the wire in amperes."}, "distance": {"type": "number", "description": "The perpendicular distance from the wire in meters."}, "permeability": {"type": "number", "description": "The permeability of free space, a constant value."}}, "required": ["current", "distance"]}}, {"name": "calculate_voltage_difference", "description": "Calculate the voltage difference between two points in an electric field.", "parameters": {"type": "object", "properties": {"electric_field": {"type": "number", "description": "The electric field in newtons per coulomb."}, "distance": {"type": "number", "description": "The distance between the two points in the direction of the field in meters."}, "charge": {"type": "number", "description": "The charge of the test particle, typically an electron, in coulombs."}}, "required": ["electric_field", "distance"]}}], "human_eval_answer": "[calculate_magnetic_field(current=4, distance=2), calculate_voltage_difference(electric_field=5, distance=3)]", "question_type": "parallel_multiple_function"}
{"question": "'Calculate the energy required to heat 100 grams of water from 25 degrees Celsius to 100 degrees Celsius in joules, and also calculate the energy required to heat the same mass of Aluminium under same conditions in joules", "function": [{"name": "energy_calculator.calculate", "description": "Calculate the energy needed to heat a substance from an initial to a final temperature.", "parameters": {"type": "object", "properties": {"substance": {"type": "string", "description": "The substance to be heated."}, "mass": {"type": "number", "description": "The mass of the substance in grams."}, "initial_temperature": {"type": "number", "description": "The initial temperature of the substance in degrees Celsius."}, "final_temperature": {"type": "number", "description": "The final temperature of the substance in degrees Celsius."}, "unit": {"type": "string", "description": "The unit to report the energy in. Options are 'joules' and 'calories'. Defaults to 'joules'."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}, {"name": "temperature_converter.convert", "description": "Convert a temperature from one unit to another.", "parameters": {"type": "object", "properties": {"temperature": {"type": "number", "description": "The temperature to convert."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to. Defaults to 2."}}, "required": ["temperature", "from_unit", "to_unit"]}}], "human_eval_answer": "[energy_calculator.calculate(substance='water', mass=100, initial_temperature=25, final_temperature=100, unit='joules'), energy_calculator.calculate(substance='Aluminium', mass=100, initial_temperature=25, final_temperature=100, unit='joules')]", "question_type": "parallel_multiple_function"}
{"question": "Give me the population size of tigers in Bangladesh and India for the last 5 years. Also provide the projected population size of tigers in Nepal and Malaysia for the next 10 years.", "function": [{"name": "animal_population.get_history", "description": "Retrieve historical population size of a specific species in a given country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country of interest."}, "species": {"type": "string", "description": "Species of the animal."}, "years": {"type": "integer", "description": "Number of years of history to retrieve."}}, "required": ["country", "species", "years"]}}, {"name": "animal_population.get_projection", "description": "Predict the future population size of a specific species in a given country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country of interest."}, "species": {"type": "string", "description": "Species of the animal."}, "years": {"type": "integer", "description": "Number of years in the future to predict."}}, "required": ["country", "species", "years"]}}, {"name": "crop_yield.get_history", "description": "Retrieve historical crop yield data of a specific crop in a given country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country of interest."}, "crop": {"type": "string", "description": "Type of crop."}, "years": {"type": "integer", "description": "Number of years of history to retrieve."}}, "required": ["country", "crop", "years"]}}], "human_eval_answer": "[animal_population.get_history(country=\"Bangladesh\", species=\"tigers\", years=5),animal_population.get_history(country=\"India\", species=\"tigers\", years=5), animal_population.get_projection(country=\"Nepal\", species=\"tigers\", years=10), animal_population.get_projection(country=\"Malaysia\", species=\"tigers\", years=10)]", "question_type": "parallel_multiple_function"}
{"question": "Find a Chinese restaurant near me in New York and suggest a high-rated of 4 Italian restaurant in Los Angeles. Then find a cheapest flight for round-trip from New York to Los Angeles", "function": [{"name": "restaurant.search", "description": "Find a restaurant in a specified location based on the cuisine and ratings.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "cuisine": {"type": "string", "description": "The type of cuisine."}, "rating": {"type": "number", "description": "The minimum rating"}}, "required": ["location", "cuisine"], "optional": ["rating"]}}, {"name": "flight.search", "description": "Find flights between two cities.", "parameters": {"type": "object", "properties": {"_from": {"type": "string", "description": "The departure city."}, "to": {"type": "string", "description": "The destination city."}, "type": {"type": "string", "description": "The type of flight e.g., one-way, round-trip"}}, "required": ["_from", "to", "type"]}}], "human_eval_answer": "[restaurant.search(location=\"New York\", cuisine=\"Chinese\"), restaurant.search(location=\"Los Angeles\", cuisine=\"Italian\", rating=4), flight.search(_from=\"New York\", to=\"Los Angeles\", type=\"round-trip\")]", "question_type": "parallel_multiple_function"}
{"question": "Calculate the factorial of 8 and generate the prime numbers from 1 to 50.", "function": [{"name": "calculate_factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number of which you want to calculate the factorial."}}, "required": ["number"]}}, {"name": "generate_prime", "description": "Generate prime numbers within a given range.", "parameters": {"type": "object", "properties": {"start": {"type": "integer", "description": "The start of the range from which you want to find the prime numbers."}, "end": {"type": "integer", "description": "The end of the range from which you want to find the prime numbers."}}, "required": ["start", "end"]}}, {"name": "calculate_fibonacci", "description": "Calculate the Fibonacci series up to a specific position.", "parameters": {"type": "object", "properties": {"position": {"type": "integer", "description": "The position up to which you want to calculate the Fibonacci series."}}, "required": ["position"]}}], "human_eval_answer": "[calculate_factorial(number=8), generate_prime(start=1, end=50)]", "question_type": "parallel_multiple_function"}
{"question": "How many steps do I need to walk in order to lose 500 calories and how much water do I need to intake today if I exercise for 2 hours?", "function": [{"name": "steps_calorie_calculation", "description": "Calculate how many steps you need to walk to burn a specified amount of calories.", "parameters": {"type": "object", "properties": {"calorie": {"type": "number", "description": "The amount of calories to burn."}}, "required": ["calorie"]}}, {"name": "hydration_calculator", "description": "Calculate the amount of water to drink in a day given the hours of exercise.", "parameters": {"type": "object", "properties": {"exercise_time": {"type": "number", "description": "The number of hours of exercise."}}, "required": ["exercise_time"]}}, {"name": "payment_calculation", "description": "Calculate how much a person should pay given the items purchased and their quantities", "parameters": {"type": "object", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items purchased."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item purchased in correspondence with the previous items list."}}, "required": ["items", "quantities"]}}], "human_eval_answer": "[steps_calorie_calculation(calorie=500),hydration_calculator(exercise_time=2)]", "question_type": "parallel_multiple_function"}
{"question": "I need to convert 10 dollars to Euros and make a 10 dollar deposit in my local bank account with account number - 987654.", "function": [{"name": "currency_conversion", "description": "Convert a specific amount from one currency to another", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "Amount to convert."}, "from_currency": {"type": "string", "description": "Source currency."}, "to_currency": {"type": "string", "description": "Target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "banking_service", "description": "Make a deposit to a given bank account", "parameters": {"type": "object", "properties": {"account_id": {"type": "string", "description": "Target account to make deposit to."}, "amount": {"type": "number", "description": "Amount to deposit."}}, "required": ["account_id", "amount"]}}], "human_eval_answer": "[currency_conversion.convert(amount=10, from_currency='USD', to_currency='EUR'), banking_service.deposit(account_id='987654', amount=10)]", "question_type": "parallel_multiple_function"}
{"question": "Perform Gaussian integral of the function exp(-x^2) from -2 to 2. Also calculate the definite integral from 0 to pi of sin(x).", "function": [{"name": "math.gaussian_integral", "description": "Perform Gaussian integration over the range of the function.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to integrate, given in terms of x."}, "lower_limit": {"type": "number", "description": "The lower limit of the integral."}, "upper_limit": {"type": "number", "description": "The upper limit of the integral."}}, "required": ["function", "lower_limit", "upper_limit"]}}, {"name": "math.definite_integral", "description": "Calculate the definite integral of a function within specified bounds.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to integrate, given in terms of x."}, "lower_limit": {"type": "number", "description": "The lower limit of the integral."}, "upper_limit": {"type": "number", "description": "The upper limit of the integral."}}, "required": ["function", "lower_limit", "upper_limit"]}}], "human_eval_answer": "[math.gaussian_integral(function='exp(-x^2)', lower_limit=-2, upper_limit=2),math.definite_integral(function='sin(x)', lower_limit=0, upper_limit=3.1416)]", "question_type": "parallel_multiple_function"}
{"question": "Determine the median and variance for the following data points 3,4,5,2,8,5. Also determine the mode for these points.", "function": [{"name": "statistics.median", "description": "This function returns the median of the data set provided.", "parameters": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "integer"}, "description": "The list of data points."}}, "required": ["data"]}}, {"name": "statistics.variance", "description": "This function calculates the variance of a given set of numbers.", "parameters": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "integer"}, "description": "The list of data points."}, "population": {"type": "boolean", "description": "Determines whether to use population variance formula."}}, "required": ["data"]}}, {"name": "statistics.mode", "description": "This function determines the mode of a list of numbers.", "parameters": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "integer"}, "description": "The list of data points."}}, "required": ["data"]}}], "human_eval_answer": "[statistics.median(data=[3,4,5,2,8,5]), statistics.variance(data=[3,4,5,2,8,5]), statistics.mode(data=[3,4,5,2,8,5])]", "question_type": "parallel_multiple_function"}
{"question": "Use the data from dataset.csv file and fit a linear regression model to predict future sales by setting x=data['sales'] and y=data['future_sales']. Additionally, calculate and return the residuals.", "function": [{"name": "data_loading", "description": "Load data from a csv file into a data structure.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The path to the file to load."}, "delimiter": {"type": "string", "description": "The character used to separate values in the file. Optional.", "default": ","}}, "required": ["file_path"]}}, {"name": "linear_regression_fit", "description": "Fit a linear regression model to data.", "parameters": {"type": "object", "properties": {"x": {"type": "array", "items": {"type": "number"}, "description": "Array of the predictor variable."}, "y": {"type": "array", "items": {"type": "number"}, "description": "Array of the dependent variable."}, "return_residuals": {"type": "boolean", "description": "Flag indicating whether to return the residuals (the difference between the observed and predicted values). Optional.", "default": "false"}}, "required": ["x", "y"]}}], "human_eval_answer": "[data_loading(file_path='dataset.csv'), linear_regression_fit(x=data['sales'], y=data['future_sales'], return_residuals=true)]", "question_type": "parallel_multiple_function"}
{"question": "Find me the sales growth rate for company XYZ for the last 3 years and also the interest coverage ratio for the same duration.", "function": [{"name": "financial_ratios.interest_coverage", "description": "Calculate a company's interest coverage ratio given the company name and duration", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "years": {"type": "integer", "description": "Number of past years to calculate the ratio."}}, "required": ["company_name", "years"]}}, {"name": "sales_growth.calculate", "description": "Calculate a company's sales growth rate given the company name and duration", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that you want to get the sales growth rate for."}, "years": {"type": "integer", "description": "Number of past years for which to calculate the sales growth rate."}}, "required": ["company", "years"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}], "human_eval_answer": "[financial_ratios.interest_coverage(company_name=\"XYZ\", years=3), sales_growth.calculate(company=\"XYZ\", years=3)]", "question_type": "parallel_multiple_function"}
{"question": "Calculate the net profit margin of Company XYZ given that the net income is $20,000 and total revenue is $100,000. Also calculate the debt ratio of the same company if the total liabilities are $10,000 and total assets are $30,000.", "function": [{"name": "financial_ratio.net_profit_margin", "description": "Calculate net profit margin of a company given the net income and total revenue", "parameters": {"type": "object", "properties": {"net_income": {"type": "integer", "description": "The net income of the company."}, "total_revenue": {"type": "integer", "description": "The total revenue of the company."}}, "required": ["net_income", "total_revenue"]}}, {"name": "financial_ratio.debt_ratio", "description": "Calculate the debt ratio of a company given the total liabilities and total assets.", "parameters": {"type": "object", "properties": {"total_liabilities": {"type": "integer", "description": "The total liabilities of the company."}, "total_assets": {"type": "integer", "description": "The total assets of the company."}}, "required": ["total_liabilities", "total_assets"]}}], "human_eval_answer": "[financial_ratio.net_profit_margin(net_income=20000, total_revenue=100000), financial_ratio.debt_ratio(total_liabilities=10000, total_assets=30000)]", "question_type": "parallel_multiple_function"}
{"question": "Invest $2000 in Google and withdraw $1000 from Apple.", "function": [{"name": "investment.invest", "description": "Invest a specific amount in a company's stock.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company you want to invest in."}, "amount": {"type": "number", "description": "The amount you want to invest."}}, "required": ["company", "amount"]}}, {"name": "investment.withdraw", "description": "Withdraw a specific amount from a company's stock.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company you want to withdraw from."}, "amount": {"type": "number", "description": "The amount you want to withdraw."}}, "required": ["company", "amount"]}}], "human_eval_answer": "[investment.invest(company=\"Google\", amount=2000), investment.withdraw(company=\"Apple\", amount=1000)]", "question_type": "parallel_multiple_function"}
{"question": "How much would it cost me to invest in 50 shares of Apple's stock right now? Also calculate the total dividend payout if each share returns $1.30 as dividend.", "function": [{"name": "stock_invest.calculate_investment_cost", "description": "Calculate the cost of investing in a specific number of shares from a given company.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that you want to invest in."}, "shares": {"type": "integer", "description": "Number of shares to invest."}}, "required": ["company", "shares"]}}, {"name": "stock_invest.calculate_dividend_payout", "description": "Calculate the total dividend payout for a specific number of shares with known dividend per share.", "parameters": {"type": "object", "properties": {"shares": {"type": "integer", "description": "Number of shares to calculate dividends."}, "dividend_per_share": {"type": "number", "description": "Known dividend per share."}}, "required": ["shares", "dividend_per_share"]}}], "human_eval_answer": "[stock_invest.calculate_investment_cost(company='Apple', shares=50), stock_invest.calculate_dividend_payout(shares=50, dividend_per_share=1.3)]", "question_type": "parallel_multiple_function"}
{"question": "Get me the transaction history for my account '00125648' for the past 7 days and also calculate the total balance.", "function": [{"name": "bank.get_transaction_history", "description": "Retrieve transaction history for a specific bank account over a specified time frame.", "parameters": {"type": "object", "properties": {"account": {"type": "string", "description": "The account number for which transaction history is required."}, "days": {"type": "integer", "description": "Number of past days for which to retrieve the transaction history."}}, "required": ["account", "days"]}}, {"name": "bank.calculate_balance", "description": "Calculate the balance of a specified bank account based on the transactions.", "parameters": {"type": "object", "properties": {"account": {"type": "string", "description": "The account number for which balance is to be calculated."}, "transactions": {"type": "array", "items": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of the transaction."}, "type": {"type": "string", "enum": ["credit", "debit"], "description": "Type of the transaction."}}}}, "starting_balance": {"type": "number", "description": "The starting balance of the account, if known."}}, "required": ["account"]}}], "human_eval_answer": "[bank.get_transaction_history(account='00125648', days=7), bank.calculate_balance(account='00125648')]", "question_type": "parallel_multiple_function"}
{"question": "Transfer $5000 from my checking to saving account. And calculate my potential interests after 5 years if the annual interest rate is 3%.", "function": [{"name": "bank_account.transfer", "description": "Transfer a given amount from one account to another.", "parameters": {"type": "object", "properties": {"from_account": {"type": "string", "description": "The account to transfer from."}, "to_account": {"type": "string", "description": "The account to transfer to."}, "amount": {"type": "number", "description": "The amount to be transferred."}}, "required": ["from_account", "to_account", "amount"]}}, {"name": "bank_account.calculate_interest", "description": "Calculate the amount of interest accrued over a given time period.", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The initial amount of money."}, "rate": {"type": "number", "description": "The annual interest rate as a decimal."}, "time": {"type": "integer", "description": "The number of years the money is invested for."}}, "required": ["principal", "rate", "time"]}}], "human_eval_answer": "[bank_account.transfer(from_account='checking', to_account='saving', amount=5000), bank_account.calculate_interest(principal=5000, rate=0.03, time=5)]", "question_type": "parallel_multiple_function"}
{"question": "Find the conviction status of a criminal with name John Doe in New York, also find the nature of the criminal offenses he committed.", "function": [{"name": "criminal_record.get_status", "description": "Find the conviction status of a criminal in a specified region.", "parameters": {"type": "object", "properties": {"criminal_name": {"type": "string", "description": "Name of the criminal."}, "region": {"type": "string", "description": "Region where criminal record is to be searched."}}, "required": ["criminal_name", "region"]}}, {"name": "criminal_record.get_offense_nature", "description": "Get details about the nature of offenses committed by a criminal.", "parameters": {"type": "object", "properties": {"criminal_name": {"type": "string", "description": "Name of the criminal."}, "optional_param": {"type": "boolean", "description": "Optionally retrieve additional details, by default this is set to false."}}, "required": ["criminal_name"]}}], "human_eval_answer": "[criminal_record.get_status(criminal_name=\"John Doe\", region=\"New York\"),criminal_record.get_offense_nature(criminal_name=\"John Doe\")]", "question_type": "parallel_multiple_function"}
{"question": "Find cases that pertain to 'Theft' from court record in 'New York' and from 'San Francisco', filed in year 2021, and display briefs of top 5 relevant cases.", "function": [{"name": "court_records.search_cases", "description": "Search for court cases based on specific criteria.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the court is located"}, "query": {"type": "string", "description": "Search string to look for specific cases"}, "year": {"type": "integer", "description": "Year the case was filed"}, "limit": {"type": "integer", "description": "Limits the number of results returned"}}, "required": ["location", "query", "year"]}}, {"name": "briefs.display_cases", "description": "Display briefs of the cases", "parameters": {"type": "object", "properties": {"case_id": {"type": "array", "items": {"type": "string"}, "description": "A list of unique identifiers for cases."}}, "required": ["case_id"]}}], "human_eval_answer": "[briefs.display_cases(case_id = court_records.search_cases(location='New York', query='Theft', year=2021, limit=5)), briefs.display_cases(case_id = court_records.search_cases(location='San Francisco', query='Theft', year=2021, limit=5))]", "question_type": "parallel_multiple_function"}
{"question": "Find all law cases where Charles Dickens is a party and it happened in Boston. Also, get cases where University of California was a party and happened in Los Angeles.", "function": [{"name": "legal_case.find_parties", "description": "Locate legal cases involving a specified party in a particular city", "parameters": {"type": "object", "properties": {"party_name": {"type": "string", "description": "The name of the party involved in the case"}, "city": {"type": "string", "description": "The city where the case was heard"}}, "required": ["party_name", "city"]}}, {"name": "legal_case.get_summary", "description": "Get a summary of a legal case", "parameters": {"type": "object", "properties": {"case_id": {"type": "string", "description": "The unique ID of the case to summarise"}, "summary_type": {"type": "string", "description": "Type of the summary to get, e.g., brief, full", "default": "brief"}}, "required": ["case_id"], "optional": ["summary_type"]}}, {"name": "movie_ratings.get_movie", "description": "Get a movie by its name.", "parameters": {"type": "object", "properties": {"movie_name": {"type": "string", "description": "The name of the movie to be retrieved"}}, "required": ["movie_name"]}}], "human_eval_answer": "[legal_case.find_parties(party_name='Charles Dickens', city='Boston'),legal_case.find_parties(party_name='University of California', city='Los Angeles')]", "question_type": "parallel_multiple_function"}
{"question": "Find how many cases and the judge handling a specific lawsuit for Pacific Gas and Electric and Tesla Inc.", "function": [{"name": "lawsuit.fetch_details", "description": "Fetch the details of a lawsuit for a specific company.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The company involved in the lawsuit."}}, "required": ["company_name"]}}, {"name": "lawsuit.judge", "description": "Fetch the judge handling a lawsuit for a specific company.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The company involved in the lawsuit."}, "lawsuit_id": {"type": "integer", "description": "The ID number of the lawsuit.", "optional": true}}, "required": ["company_name"]}}], "human_eval_answer": "[lawsuit.fetch_details(company_name='Pacific Gas and Electric'), lawsuit.judge(company_name='Pacific Gas and Electric'), lawsuit.fetch_details(company_name='Tesla Inc'), lawsuit.judge(company_name='Tesla Inc')]", "question_type": "parallel_multiple_function"}
{"question": "Get temperature and humidity forecast for Boston, USA and precipitation forecast for Rome, Italy for next 10 days.", "function": [{"name": "weather_forecast_temperature", "description": "Retrieve a temperature forecast for a specific location for a certain number of days.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the temperature forecast for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "weather_forecast_humidity", "description": "Retrieve a humidity forecast for a specific location for a certain number of days.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity forecast for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "weather_forecast_precipitation", "description": "Retrieve a precipitation forecast for a specific location for a certain number of days.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the precipitation forecast for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}], "human_eval_answer": "[weather_forecast_temperature(location='Boston', days=10),weather_forecast_humidity(location='Boston', days=10),weather_forecast_precipitation(location='Rome', days=10)]", "question_type": "parallel_multiple_function"}
{"question": "Locate all supermarkets in Los Angeles and find the most popular site seeing place in Miami.", "function": [{"name": "supermarket.find_in_city", "description": "Find all supermarkets in a given city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city to locate supermarkets in."}, "state": {"type": "string", "description": "The state to further narrow down the search."}, "openNow": {"type": "boolean", "description": "If true, returns only supermarkets that are currently open."}}, "required": ["city", "state"]}}, {"name": "sightseeing.popular_in_city", "description": "Find the most popular sightseeing place in a given city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city to find sightseeing in."}, "state": {"type": "string", "description": "The state to further narrow down the search."}, "kidsFriendly": {"type": "boolean", "description": "If true, returns only kids friendly sightseeing places."}}, "required": ["city", "state"]}}], "human_eval_answer": "[supermarket.find_in_city(city=\"Los Angeles\", state=\"California\"), sightseeing.popular_in_city(city=\"Miami\", state=\"Florida\")]", "question_type": "parallel_multiple_function"}
{"question": "Translate the phrase 'Hello World' from English to Spanish and translate 'Goodbye' from French to English. In addition to that get current time in 'Los Angeles' and 'London'.", "function": [{"name": "translate_text", "description": "Translates a given text from one language to another", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text that needs to be translated"}, "from_lang": {"type": "string", "description": "The source language from which to translate"}, "to_lang": {"type": "string", "description": "The target language to which to translate"}}, "required": ["text", "from_lang", "to_lang"]}}, {"name": "get_current_time", "description": "Fetches current time for a given location", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location for which to fetch current time"}}, "required": ["location"]}}], "human_eval_answer": "[translate_text(text='Hello World', from_lang='English', to_lang='Spanish'), translate_text(text='Goodbye', from_lang='French', to_lang='English'), get_current_time(location='Los Angeles'), get_current_time(location='London')]", "question_type": "parallel_multiple_function"}
{"question": "Identify objects in my backyard image my_backyard_image_url and analyze the sentiment of today's journal entry my_journal_entry_text.", "function": [{"name": "image_processing.object_identification", "description": "Identify objects in a given image.", "parameters": {"type": "object", "properties": {"image_url": {"type": "string", "description": "The URL of the image."}}, "required": ["image_url"]}}, {"name": "text_analysis.sentiment_analysis", "description": "Analyze the sentiment of a given text.", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text to be analyzed."}}, "required": ["text"]}}], "human_eval_answer": "[image_processing.object_identification(image_url='my_backyard_image_url'), text_analysis.sentiment_analysis(text='my_journal_entry_text')]", "question_type": "parallel_multiple_function"}
{"question": "Find overview about the Battle of Waterloo and the signing of the Treaty of Tordesillas.", "function": [{"name": "euro_history.battle_details", "description": "Retrieve detailed information about a specific European historical battle.", "parameters": {"type": "object", "properties": {"battle_name": {"type": "string", "description": "The name of the historical battle."}, "specific_info": {"type": "array", "items": {"type": "string", "enum": ["overview", "causalities", "date"]}, "description": "The specific types of information to return about the battle."}}, "required": ["battle_name", "specific_info"]}}, {"name": "euro_history.treaty_info", "description": "Retrieve specific information about a signed European treaty.", "parameters": {"type": "object", "properties": {"treaty_name": {"type": "string", "description": "The name of the treaty."}, "info_requested": {"type": "array", "items": {"type": "string", "enum": ["signatories", "ratification date", "clauses"]}, "description": "Specific aspects of the treaty for which to return information."}}, "required": ["treaty_name", "info_requested"]}}], "human_eval_answer": "[euro_history.battle_details(battle_name=\"Waterloo\", specific_info=\"overview\"), euro_history.treaty_info(treaty_name=\"Tordesillas\")]", "question_type": "parallel_multiple_function"}
{"question": "Get me the timeline of World War 2 in Europe and then get me an array of important leaders involved during the war.", "function": [{"name": "history.get_timeline", "description": "Retrieve the timeline for a specific historical event", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The historical event you want the timeline for."}, "region": {"type": "string", "description": "Region of the event."}}, "required": ["event"]}}, {"name": "history.get_important_figures", "description": "Retrieve array of important figures involved during a specific historical event.", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The historical event for which you want the array of important figures."}, "number": {"type": "integer", "description": "Number of top figures you want."}}, "required": ["event"]}}], "human_eval_answer": "[history.get_timeline(event='World War 2', region='Europe'), history.get_important_figures(event='World War 2')]", "question_type": "parallel_multiple_function"}
{"question": "What was the average life expectancy in the USA in the year 1900 and 1950? Additionally, what was the Gross Domestic Product (GDP) of the USA in these years?", "function": [{"name": "us_history.life_expectancy", "description": "Retrieves the average life expectancy of the USA for a specific year.", "parameters": {"type": "object", "properties": {"year": {"type": "number", "description": "The year for which to retrieve life expectancy."}}, "required": ["year"]}}, {"name": "us_history.gdp", "description": "Retrieves the Gross Domestic Product of the USA for a specific year.", "parameters": {"type": "object", "properties": {"year": {"type": "number", "description": "The year for which to retrieve GDP data."}}, "required": ["year"]}}], "human_eval_answer": "[us_history.life_expectancy(year=1900), us_history.life_expectancy(year=1950), us_history.gdp(year=1900), us_history.gdp(year=1950)]", "question_type": "parallel_multiple_function"}
{"question": "What is the exact birthdate of Nikola Tesla and what his most famous discovery was?", "function": [{"name": "scientist_info.get_birthdate", "description": "Retrieve the birthdate of a specific scientist.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the scientist."}}, "required": ["name"]}}, {"name": "scientist_info.get_famous_discovery", "description": "Retrieve the most famous discovery made by a specific scientist.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the scientist."}, "discovery_order": {"type": "integer", "description": "The order of discoveries if the scientist made multiple discoveries. If not provided, the first (or most famous) discovery will be returned."}}, "required": ["name"]}}], "human_eval_answer": "[scientist_info.get_birthdate(name='Nikola Tesla'), scientist_info.get_famous_discovery(name='Nikola Tesla')]", "question_type": "parallel_multiple_function"}
{"question": "What is the weight of Neutron and Proton in atomic mass unit (amu) ? Also what is the diameter of a Proton and Neutron in femtometers?", "function": [{"name": "scienceFacts.getWeight", "description": "Fetch the atomic weight of an atomic particle", "parameters": {"type": "object", "properties": {"particle": {"type": "string", "description": "The atomic particle. e.g. Electron, Proton"}, "unit": {"type": "string", "description": "Unit to retrieve weight. For example, 'kg', 'pound', 'amu' etc."}}, "required": ["particle", "unit"]}}, {"name": "scienceFacts.getDiameter", "description": "Fetch the diameter of an atomic particle", "parameters": {"type": "object", "properties": {"particle": {"type": "string", "description": "The atomic particle. e.g. Electron, Proton"}, "unit": {"type": "string", "description": "Unit to retrieve diameter. For example, 'meter', 'cm', 'femtometers' etc."}}, "required": ["particle", "unit"]}}, {"name": "scienceFacts.getCharge", "description": "Fetch the electric charge of an atomic particle", "parameters": {"type": "object", "properties": {"particle": {"type": "string", "description": "The atomic particle. e.g. Electron, Proton"}, "unit": {"type": "string", "optional": true, "description": "Unit to retrieve electric charge. For example, 'coulombs' etc."}}, "required": ["particle"]}}], "human_eval_answer": "[scienceFacts.getWeight(particle='Neutron', unit='amu'), scienceFacts.getWeight(particle='Proton', unit='amu'), scienceFacts.getDiameter(particle='Proton', unit='femtometers'), scienceFacts.getDiameter(particle='Neutron', unit='femtometers')]", "question_type": "parallel_multiple_function"}
{"question": "Create a square painting with blue background and dimensions 16x16 inches, then display it for 30 seconds with 70% screen brightness", "function": [{"name": "painting.create", "description": "Creates a new painting with specified parameters", "parameters": {"type": "object", "properties": {"shape": {"type": "string", "description": "Shape of the painting to be created."}, "background_color": {"type": "string", "description": "Background color of the painting."}, "dimensions": {"type": "array", "items": {"type": "integer"}, "description": "Dimensions of the painting in inches."}}, "required": ["shape", "background_color", "dimensions"]}}, {"name": "display.set_screen_brightness", "description": "Sets the screen brightness for viewing the painting", "parameters": {"type": "object", "properties": {"percentage": {"type": "integer", "description": "Screen brightness level in percentage."}, "duration": {"type": "integer", "description": "Duration to maintain the brightness level in seconds."}}, "required": ["percentage", "duration"]}}, {"name": "painting.display", "description": "Displays a created painting for a specific amount of time", "parameters": {"type": "object", "properties": {"time": {"type": "integer", "description": "Time in seconds the painting will be displayed for."}}, "required": ["time"]}}], "human_eval_answer": "[painting.create(shape='square', background_color='blue', dimensions=[16,16]),display.set_screen_brightness(percentage=70, duration=30)]", "question_type": "parallel_multiple_function"}
{"question": "Find me a bronze statue in the Modern Arts Museum in New York and a stone sculpture in the Louvre Museum in Paris. Also, find me a painting made by Picasso in the Metropolitan Museum of Art.", "function": [{"name": "artwork.find", "description": "Locate artwork in museums based on specific criteria like type of material, artist, or era.", "parameters": {"type": "object", "properties": {"museum": {"type": "string", "description": "The name of the museum, e.g. Modern Arts Museum, New York"}, "type": {"type": "string", "description": "Type of the artwork. E.g. Painting, Sculpture"}, "material": {"type": "string", "optional": true, "description": "Material of the artwork if it's a sculpture. E.g. Bronze, Marble"}, "artist": {"type": "string", "optional": true, "description": "Name of the artist."}}, "required": ["museum", "type"]}}, {"name": "historical_landmark.find", "description": "Find historical landmarks based on specific criteria like location or era.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of the landmark."}, "era": {"type": "string", "optional": true, "description": "Era of the landmark. E.g. Middle Ages, Renaissance"}}, "required": ["location"]}}, {"name": "book.find", "description": "Find a book in a library based on specific criteria like author, genre or publication year.", "parameters": {"type": "object", "properties": {"library": {"type": "string", "description": "The name of the library."}, "author": {"type": "string", "description": "Author of the book."}, "genre": {"type": "string", "optional": true, "description": "Genre of the book."}, "year": {"type": "integer", "optional": true, "description": "Year of publication."}}, "required": ["library", "author"]}}], "human_eval_answer": "[artwork.find(museum='Modern Arts Museum, New York', type='sculpture', material='bronze'), artwork.find(museum='Louvre Museum, Paris', type='sculpture', material='stone'), artwork.find(museum='Metropolitan Museum of Art', type='painting', artist='Picasso')]", "question_type": "parallel_multiple_function"}
{"question": "What is the average price of a 4 ft x 4 ft marble statue in the museum of Philadelphia and 6 ft x 3 ft bronze sculpture in New York museum? ", "function": [{"name": "get_artwork_price", "description": "Retrieves the price of a sculpture based on size and material.", "parameters": {"type": "object", "properties": {"museum_location": {"type": "string", "description": "Location of the museum housing the sculpture."}, "sculpture_material": {"type": "string", "description": "Material of the sculpture."}, "sculpture_size": {"type": "array", "items": {"type": "integer"}, "description": "Dimensions of the sculpture."}}, "required": ["museum_location", "sculpture_material", "sculpture_size"]}}, {"name": "get_sculpture_details", "description": "Retrieves details of a sculpture, such as its material and size, from a museum database.", "parameters": {"type": "object", "properties": {"museum_location": {"type": "string", "description": "Location of the museum housing the sculpture."}, "sculpture_id": {"type": "integer", "description": "Database ID of the sculpture."}}, "required": ["museum_location", "sculpture_id"]}}], "human_eval_answer": "[get_artwork_price(museum_location='Philadelphia', sculpture_material='marble', sculpture_size=[4,4]), get_artwork_price(museum_location='New York', sculpture_material='bronze', sculpture_size=[6,3])]", "question_type": "parallel_multiple_function"}
{"question": "Design a house with 3 bedrooms, 2 bathrooms and a garden. Also, design an office with 5 rooms and a large meeting room", "function": [{"name": "house_designer.design", "description": "Design a house based on specific criteria", "parameters": {"type": "object", "properties": {"bedrooms": {"type": "integer", "description": "Number of bedrooms desired."}, "bathrooms": {"type": "integer", "description": "Number of bathrooms needed."}, "garden": {"type": "boolean", "description": "Does the house need a garden?"}}, "required": ["bedrooms", "bathrooms"]}}, {"name": "office_designer.design", "description": "Design an office space based on specific requirements", "parameters": {"type": "object", "properties": {"rooms": {"type": "integer", "description": "Number of rooms in the office."}, "meeting_room": {"type": "string", "enum": ["small", "medium", "large"], "description": "Size of the meeting room"}}, "required": ["rooms", "meeting_room"]}}], "human_eval_answer": "[house_designer.design(bedrooms=3, bathrooms=2, garden=True), office_designer.design(rooms=5, meeting_room='large')]", "question_type": "parallel_multiple_function"}
{"question": "Calculate the volume of a cuboid with a height of 10m, a width of 5m, and a depth of 8m. And find out the volume of a sphere with a radius of 4m.", "function": [{"name": "calcVolume.cuboid", "description": "Calculates the volume of a cuboid.", "parameters": {"type": "object", "properties": {"height": {"type": "number", "description": "The height of the cuboid."}, "width": {"type": "number", "description": "The width of the cuboid."}, "depth": {"type": "number", "description": "The depth of the cuboid."}}, "required": ["height", "width", "depth"]}}, {"name": "calcVolume.sphere", "description": "Calculates the volume of a sphere.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the sphere."}}, "required": ["radius"]}}], "human_eval_answer": "[calcVolume.cuboid(height=10, width=5, depth=8), calcVolume.sphere(radius=4)]", "question_type": "parallel_multiple_function"}
{"question": "Find the operational hours for Louvre Museum and the waiting time, then tell me how long it will take to travel from my current location to the museum.", "function": [{"name": "museum.get_hours", "description": "Retrieve the operational hours of a specified museum.", "parameters": {"type": "object", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}}, "required": ["museum_name"]}}, {"name": "museum.get_waiting_time", "description": "Retrieve the estimated waiting time at a specific museum.", "parameters": {"type": "object", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "day": {"type": "string", "enum": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], "description": "Day of the week."}}, "required": ["museum_name"]}}, {"name": "location.get_travel_time", "description": "Retrieve the estimated travel time from current location to a specific destination.", "parameters": {"type": "object", "properties": {"destination": {"type": "string", "description": "The destination location."}, "mode": {"type": "string", "enum": ["Driving", "Biking", "Walking"], "description": "Mode of travel."}}, "required": ["destination"]}}], "human_eval_answer": "[museum.get_hours(museum_name='Louvre Museum'), museum.get_waiting_time(museum_name='Louvre Museum'), location.get_travel_time(destination='Louvre Museum')]", "question_type": "parallel_multiple_function"}
{"question": "Find me the lowest price for a Yamaha Acoustic Guitar in Austin and compare it to the average price of Yamaha Acoustic Guitar in New York. Also tell me how many stores carry Yamaha Acoustic Guitar in each city.", "function": [{"name": "product_search", "description": "Searches a particular product within a given city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city where the product will be searched."}, "product": {"type": "string", "description": "The product that will be searched."}}, "required": ["city", "product"]}}, {"name": "lowest_price", "description": "Returns the lowest price for a particular product within a given city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city where the product will be searched."}, "product": {"type": "string", "description": "The product for which the lowest price will be searched."}}, "required": ["city", "product"]}}, {"name": "average_price", "description": "Returns the average price for a particular product within a given city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city where the product will be searched."}, "product": {"type": "string", "description": "The product for which the average price will be searched."}}, "required": ["city", "product"]}}, {"name": "store_count", "description": "Returns the number of stores that carry a particular product within a given city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city where the product will be searched."}, "product": {"type": "string", "description": "The product for which the number of stores will be searched."}}, "required": ["city", "product"]}}], "human_eval_answer": "[lowest_price(city='Austin', product='Yamaha Acoustic Guitar'), average_price(city='New York', product='Yamaha Acoustic Guitar'), store_count(city='Austin', product='Yamaha Acoustic Guitar'), store_count(city='New York', product='Yamaha Acoustic Guitar')]", "question_type": "parallel_multiple_function"}
{"question": "What is the equivalent note of C in Indian musical scale? And convert the frequency 440 Hz to wavelength?", "function": [{"name": "note_conversion.indian", "description": "Converts a note in Western music to Indian classical music.", "parameters": {"type": "object", "properties": {"note": {"type": "string", "description": "The note in Western musical scale."}}, "required": ["note"]}}, {"name": "frequency_to_wavelength", "description": "Converts the frequency of a musical note to its wavelength.", "parameters": {"type": "object", "properties": {"frequency": {"type": "number", "description": "The frequency in hertz of the musical note."}}, "required": ["frequency"]}}], "human_eval_answer": "[note_conversion.indian(note=\"C\"), frequency_to_wavelength(frequency=440)]", "question_type": "parallel_multiple_function"}
{"question": "Create a hip hop beat at 95 beats per minute with a major scale and make a bass melody with C4, E4, F4, G4.", "function": [{"name": "beat_generator", "description": "Generate a beat based on specified genre and beats per minute.", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "The genre of the beat, e.g. Hip Hop."}, "bpm": {"type": "integer", "description": "The beats per minute of the beat."}, "scale": {"type": "string", "optional": true, "description": "The scale for the beat, e.g. Major."}}, "required": ["genre", "bpm"]}}, {"name": "melody_generator", "description": "Create a melody based on specified notes.", "parameters": {"type": "object", "properties": {"note_sequence": {"type": "array", "items": {"type": "string"}, "description": "The sequence of notes for the melody."}, "instrument": {"type": "string", "optional": true, "description": "The instrument to play the melody, e.g. Bass."}}, "required": ["note_sequence"]}}], "human_eval_answer": "[beat_generator(genre='Hip Hop', bpm=95, scale='Major'), melody_generator(note_sequence=['C4', 'E4', 'F4', 'G4'], instrument='Bass')]", "question_type": "parallel_multiple_function"}
{"question": "Analyze the performance of the L.A Lakers in their last game and give me the field goal percentage and free throw percentage. Also, compare the team's points per game (ppg) average from 2018-2019 and 2019-2020 season.", "function": [{"name": "sport_analysis.last_game_performance", "description": "Analyzes the team's performance in their most recent game.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The sports team that needs to be analyzed."}, "details": {"type": "array", "items": {"type": "string", "enum": ["field goal %", "free throw %"]}, "description": "Key performance indicators that you want for the analysis"}}, "required": ["team", "details"]}}, {"name": "sport_analysis.compare_ppg", "description": "Compares a team's average points per game in two different seasons.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The sports team that needs to be compared."}, "seasons": {"type": "array", "items": {"type": "string"}, "description": "The seasons that you want to compare the ppg."}}, "required": ["team", "seasons"]}}], "human_eval_answer": "[sport_analysis.last_game_performance(team='L.A Lakers', details=['field goal %', 'free throw %']), sport_analysis.compare_ppg(team='L.A Lakers', seasons=['2018-2019', '2019-2020'])]", "question_type": "parallel_multiple_function"}
{"question": "Can you find information on Michael Jordan's highest scoring game and the total championships he won?", "function": [{"name": "get_player_record", "description": "Retrieve record stats for a specific player and stat type.", "parameters": {"type": "object", "properties": {"player": {"type": "string", "description": "The name of the player."}, "stat": {"type": "string", "description": "The type of statistic. E.g., 'highest_scoring_game', 'total_championships'."}}, "required": ["player", "stat"]}}, {"name": "get_team_info", "description": "Retrieve information for a specific team, such as championships won.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the team."}, "info": {"type": "string", "description": "The information sought. E.g., 'championships_won'."}}, "required": ["team", "info"]}}], "human_eval_answer": "[get_player_record(player='Michael Jordan', stat='highest_scoring_game'),get_player_record(player='Michael Jordan', stat='total_championships')]", "question_type": "parallel_multiple_function"}
{"question": "Play the Game of life for 3 rounds starting from an empty board, then play chess where the 1st move is e4 and the 2nd move is e5.", "function": [{"name": "game_of_life.play", "description": "Runs a round of game of life based on provided board.", "parameters": {"type": "object", "properties": {"rounds": {"type": "integer", "description": "Number of rounds to play."}, "start_board": {"type": "array", "items": {"type": "integer"}, "description": "Starting board of game, leave empty for random starting point."}}, "required": ["rounds", "start_board"]}}, {"name": "chess.play", "description": "Makes moves in a chess game.", "parameters": {"type": "object", "properties": {"moves": {"type": "array", "items": {"type": "string"}, "description": "List of moves to play in the game."}}, "required": ["moves"]}}], "human_eval_answer": "[game_of_life.play(rounds=3, start_board=[]), chess.play(moves=['e4', 'e5'])]", "question_type": "parallel_multiple_function"}
{"question": "Find a board game with complexity rating under 2.5 and that supports more than 5 players, as well as a trivia game that could be played within 60 minutes.", "function": [{"name": "board_game_search", "description": "Locate a board game based on specific criteria.", "parameters": {"type": "object", "properties": {"complexity": {"type": "number", "description": "The complexity rating of the board game (lower is simpler)."}, "player_count": {"type": "number", "description": "The minimum player count for the board game."}}, "required": ["complexity", "player_count"]}}, {"name": "trivia_game_search", "description": "Locate a trivia game based on play duration.", "parameters": {"type": "object", "properties": {"duration": {"type": "number", "description": "The maximum playing duration for the trivia game in minutes."}}, "required": ["duration"]}}, {"name": "card_game_search", "description": "Locate a card game based on a specific theme.", "parameters": {"type": "object", "properties": {"theme": {"type": "string", "description": "The theme for the card game."}}, "required": ["theme"]}}], "human_eval_answer": "[board_game_search.find_complex_and_players(complexity=2.5, player_count=5),trivia_game_search.find_by_duration(duration=60)]", "question_type": "parallel_multiple_function"}
{"question": "In game Battle Reign, change the armor level to 5 and find me a game guide for how to win in snowy weather conditions. Also find me any strategy guides available for game Shadow Fall.", "function": [{"name": "BattleReignGameAPI.update_player_equipment", "description": "Modify the player's equipment level for specified attributes", "parameters": {"type": "object", "properties": {"attribute": {"type": "string", "description": "The attribute of the equipment to modify."}, "level": {"type": "integer", "description": "The level to modify the attribute to."}, "playerID": {"type": "integer", "description": "Player ID of the player."}}, "required": ["attribute", "level"]}}, {"name": "GameGuideAPI.search_guide", "description": "Search for game guides given specific conditions and preferences", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "Name of the game."}, "condition": {"type": "string", "description": "Specific game conditions. (eg: 'snowy weather', 'hard mode')."}, "type": {"type": "string", "description": "Specific type of guide. (eg: 'strategy', 'walkthrough')"}}, "required": ["game"]}}], "human_eval_answer": "[BattleReignGameAPI.update_player_equipment(attribute='armor', level=5), GameGuideAPI.search_guide(game='Battle Reign', condition='snowy weather'), GameGuideAPI.search_guide(game='Shadow Fall', type='strategy')]", "question_type": "parallel_multiple_function"}
{"question": "I want a homemade healthy spaghetti recipe that is gluten free, how long will it take to prepare and cook, and what nutritional information could it provide me.", "function": [{"name": "recipe_search", "description": "Search for a recipe based on a particular ingredient or dietary requirement.", "parameters": {"type": "object", "properties": {"ingredient": {"type": "string", "description": "The ingredient that you want to have in the recipe."}, "dietary_requirements": {"type": "array", "items": {"type": "string", "enum": ["gluten_free", "dairy_free", "vegetarian", "vegan"]}, "description": "Dietary requirements in the recipe."}, "isHomemade": {"type": "boolean", "description": "If true, returns homemade recipe; otherwise, return not homemade recipe."}}, "required": ["ingredient", "dietary_requirements", "isHomemade"]}}, {"name": "recipe_prep_time", "description": "Calculate the estimated preparation and cooking time for a specified recipe.", "parameters": {"type": "object", "properties": {"recipe": {"type": "string", "description": "Name of the recipe to calculate time for."}}, "required": ["recipe"]}}, {"name": "recipe_nutrition_info", "description": "Provide detailed nutritional information for a specified recipe.", "parameters": {"type": "object", "properties": {"recipe": {"type": "string", "description": "Name of the recipe to fetch nutrition info for."}}, "required": ["recipe"]}}], "human_eval_answer": "[recipe_search(ingredient='spaghetti', dietary_requirements=['gluten_free'], isHomemade=true), recipe_prep_time(recipe='spaghetti'), recipe_nutrition_info(recipe='Homemade healthy gluten free spaghetti')]", "question_type": "parallel_multiple_function"}
{"question": "What is the current time in Beijing and Tokyo and how long is the difference between two cities?", "function": [{"name": "time_zones.get_current_time", "description": "Retrieve current time for the specified location", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the current time for."}}, "required": ["location"]}}, {"name": "time_zones.get_time_difference", "description": "Retrieve the time difference between two cities", "parameters": {"type": "object", "properties": {"city_1": {"type": "string", "description": "First city for calculating the time difference."}, "city_2": {"type": "string", "description": "Second city for calculating the time difference."}}, "required": ["city_1", "city_2"]}}], "human_eval_answer": "[time_zones.get_current_time(location=\"Beijing\"), time_zones.get_current_time(location=\"Tokyo\"), time_zones.get_time_difference(city_1=\"Beijing\", city_2=\"Tokyo\")]", "question_type": "parallel_multiple_function"}
{"question": "Find hotels in Paris, France and New York, USA with at least 4 stars rating. Also I prefer hotels with amenities like free WiFi, breakfast included, and gym facility", "function": [{"name": "hotel.find", "description": "Search for hotels given the location, minimum stars and specific amenities.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to find the hotel"}, "stars": {"type": "integer", "description": "Minimum number of stars the hotel should have", "optional": true}, "amenities": {"type": "array", "items": {"type": "string", "description": "Preferred amenities in hotel.", "enum": ["Free WiFi", "Breakfast Included", "Gym", "Free Parking"]}, "description": "List of preferred amenities in hotel", "optional": true}}, "required": ["location"]}}, {"name": "flight.search", "description": "Search for flights given the origin, destination, date, and number of passengers.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "The origin of the flight"}, "destination": {"type": "string", "description": "The destination of the flight"}, "date": {"type": "date", "description": "The date of the flight", "optional": true}, "passengers": {"type": "integer", "description": "The number of passengers", "optional": true}}, "required": ["origin", "destination"]}}], "human_eval_answer": "[hotel.find(location='Paris', stars=4, amenities=['Free WiFi', 'Breakfast Included', 'Gym']), hotel.find(location='New York', stars=4, amenities=['Free WiFi', 'Breakfast Included', 'Gym'])]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a geometry teacher preparing for your next class. You have two shapes, a triangle and a circle, that you want to discuss in detail. For the triangle, the lengths of the sides are 5 units, 7 units, and 9 units respectively. You want to calculate the area, perimeter, and internal angles of this triangle. For the circle, the radius is 3 units. You want to calculate the area and circumference of this circle. Can you provide these details?\"", "function": [{"name": "triangle_properties.get", "description": "Retrieve the dimensions, such as area and perimeter, of a triangle if lengths of three sides are given.", "parameters": {"type": "object", "properties": {"side1": {"type": "number", "description": "The length of first side of the triangle."}, "side2": {"type": "number", "description": "The length of second side of the triangle."}, "side3": {"type": "number", "description": "The length of third side of the triangle."}, "get_area": {"type": "boolean", "description": "A flag to determine whether to calculate the area of triangle. Default is true.", "default": true, "optional": true}, "get_perimeter": {"type": "boolean", "description": "A flag to determine whether to calculate the perimeter of triangle. Default is true.", "default": true, "optional": true}, "get_angles": {"type": "boolean", "description": "A flag to determine whether to calculate the internal angles of triangle. Default is true.", "default": true, "optional": true}}, "required": ["side1", "side2", "side3"]}}, {"name": "circle_properties.get", "description": "Retrieve the dimensions, such as area and circumference, of a circle if radius is given.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The length of radius of the circle."}, "get_area": {"type": "boolean", "description": "A flag to determine whether to calculate the area of circle. Default is true.", "default": true, "optional": true}, "get_circumference": {"type": "boolean", "description": "A flag to determine whether to calculate the circumference of circle. Default is true.", "default": true, "optional": true}}, "required": ["radius"]}}], "human_eval_answer": "[\"triangle_properties.get(side1=5, side2=7, side3=9, get_area=True, get_perimeter=True, get_angles=True)\", \"circle_properties.get(radius=3, get_area=True, get_circumference=True)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a math teacher preparing for a geometry class. You want to create a worksheet for your students that includes problems on calculating areas of different shapes. You have decided to include a problem on calculating the area of a triangle using Heron's formula, another problem on calculating the area of a triangle using the base and height, and a problem on calculating the area of a circle. For the first problem, you have chosen a triangle with sides of lengths 7 units, 10 units, and 5 units. For the second problem, you have chosen a triangle with a base of 8 units and a height of 6 units. For the third problem, you have chosen a circle with a radius of 4 units. Could you calculate the areas of these shapes for your worksheet?\"", "function": [{"name": "math.triangle_area_heron", "description": "Calculates the area of a triangle using Heron's formula, given the lengths of its three sides.", "parameters": {"type": "object", "properties": {"side1": {"type": "number", "description": "Length of the first side of the triangle."}, "side2": {"type": "number", "description": "Length of the second side of the triangle."}, "side3": {"type": "number", "description": "Length of the third side of the triangle."}}, "required": ["side1", "side2", "side3"]}}, {"name": "math.triangle_area_base_height", "description": "Calculates the area of a triangle using the formula (1/2)base*height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The base length of the triangle."}, "height": {"type": "number", "description": "The height of the triangle."}}, "required": ["base", "height"]}}, {"name": "math.circle_area", "description": "Calculates the area of a circle given its radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}}, "required": ["radius"]}}], "human_eval_answer": "[\"math.triangle_area_heron(side1=7, side2=10, side3=5)\", \"math.triangle_area_base_height(base=8, height=6)\", \"math.circle_area(radius=4)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"What is the capital city of Australia, what is the current population of Canada, and what is the largest city in Brazil?\"", "function": [{"name": "country_info.capital", "description": "Fetch the capital city of a specified country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Name of the country."}}, "required": ["country"]}}, {"name": "country_info.population", "description": "Fetch the current population of a specified country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Name of the country."}}, "required": ["country"]}}, {"name": "country_info.largest_city", "description": "Fetch the largest city of a specified country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Name of the country."}}, "required": ["country"]}}], "human_eval_answer": "[\"country_info.capital(country='Australia')\", \"country_info.population(country='Canada')\", \"country_info.largest_city(country='Brazil')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me with a couple of calculations? I have two points in a 2D space, Point A with coordinates [3, 2] and Point B with coordinates [7, 5]. First, I would like to know the Euclidean distance between these two points, rounded to 2 decimal places. Then, I would like to find out the angle between these two points with respect to the x-axis, also rounded to 2 decimal places. After that, I have another set of points, Point C with coordinates [10, 8] and Point D with coordinates [14, 12]. Could you please calculate the Euclidean distance and the angle to the x-axis for these points as well, both rounded to 2 decimal places?\"", "function": [{"name": "EuclideanDistance.calculate", "description": "Calculate the Euclidean distance between two points.", "parameters": {"type": "object", "properties": {"pointA": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point A."}, "pointB": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point B."}, "rounding": {"type": "integer", "description": "Optional: The number of decimals to round off the result."}}, "required": ["pointA", "pointB"]}}, {"name": "angleToXAxis.calculate", "description": "Calculate the angle between two points with respect to x-axis.", "parameters": {"type": "object", "properties": {"pointA": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point A."}, "pointB": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point B."}, "rounding": {"type": "integer", "description": "Optional: The number of decimals to round off the result."}}, "required": ["pointA", "pointB"]}}], "human_eval_answer": "[\"EuclideanDistance.calculate(pointA=[3, 2], pointB=[7, 5], rounding=2)\", \"angleToXAxis.calculate(pointA=[3, 2], pointB=[7, 5], rounding=2)\", \"EuclideanDistance.calculate(pointA=[10, 8], pointB=[14, 12], rounding=2)\", \"angleToXAxis.calculate(pointA=[10, 8], pointB=[14, 12], rounding=2)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"A car is traveling on a straight road. At the start, it has an initial speed of 5 m/s. Suddenly, the driver sees a traffic light turning red in the distance and starts to accelerate at a rate of 2 m/s^2. The driver keeps this acceleration for 10 seconds. Can you calculate the displacement of the car during this time? Also, what is the final speed of the car after this 10 seconds? Please round off your answers to 2 decimal places.\"", "function": [{"name": "kinematics.calculate_displacement", "description": "Calculate displacement based on initial speed, acceleration, and time interval for a motion along a straight line.", "parameters": {"type": "object", "properties": {"initial_speed": {"type": "number", "description": "The initial speed of the moving object in m/s."}, "acceleration": {"type": "number", "description": "The rate of change of speed, m/s^2."}, "time": {"type": "number", "description": "The time interval during which the acceleration is applied, in seconds."}, "rounding": {"type": "integer", "description": "The number of decimals to round off the result (optional).", "default": 2}}, "required": ["initial_speed", "acceleration", "time"]}}, {"name": "kinematics.calculate_final_speed", "description": "Calculate the final speed of an object that starts from an initial speed and then accelerates for a certain duration.", "parameters": {"type": "object", "properties": {"initial_speed": {"type": "number", "description": "The initial speed of the moving object in m/s."}, "acceleration": {"type": "number", "description": "The rate of change of speed, m/s^2."}, "time": {"type": "number", "description": "The time interval during which the acceleration is applied, in seconds."}, "rounding": {"type": "integer", "description": "The number of decimals to round off the result (optional).", "default": 2}}, "required": ["initial_speed", "acceleration", "time"]}}], "human_eval_answer": "[\"kinematics.calculate_displacement(initial_speed=5, acceleration=2, time=10, rounding=2)\", \"kinematics.calculate_final_speed(initial_speed=5, acceleration=2, time=10, rounding=2)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me what the weather was like in New York City on 2020-12-25 and 2021-01-01, and also provide the historical weather data for the geographical coordinates (40.7128, -74.0060) on 2021-01-15? Additionally, can you forecast the weather for the same coordinates for the next 10 days?\"", "function": [{"name": "weather.get_by_coordinates_date", "description": "Retrieves the historical weather data based on coordinates and date.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "tuple", "items": {"type": "number"}, "description": "The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude."}, "date": {"type": "string", "format": "date", "description": "The date for which to retrieve the historical weather data in the format YYYY-MM-DD."}}, "required": ["coordinates", "date"]}}, {"name": "weather.get_by_city_date", "description": "Retrieves the historical weather data based on city and date.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city for which to retrieve the weather."}, "date": {"type": "string", "format": "date", "description": "The date for which to retrieve the historical weather data in the format YYYY-MM-DD."}}, "required": ["city", "date"]}}, {"name": "weather.get_forecast_by_coordinates", "description": "Get the weather forecast for a specific geographical coordinates.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "tuple", "items": {"type": "number"}, "description": "The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude."}, "days_ahead": {"type": "integer", "description": "Number of days to forecast from current date (optional, default is 7)."}}, "required": ["coordinates"]}}], "human_eval_answer": "[\"weather.get_by_city_date(city='New York City', date='2020-12-25')\", \"weather.get_by_city_date(city='New York City', date='2021-01-01')\", \"weather.get_by_coordinates_date(coordinates=(40.7128, -74.0060), date='2021-01-15')\", \"weather.get_forecast_by_coordinates(coordinates=(40.7128, -74.0060), days_ahead=10)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me understand the ecological impact of the African Elephant in the Serengeti ecosystem over the last 5 years and also assess the population growth of the same species in the same location over the last 10 years? After that, I would also like to know the ecological impact of the Bengal Tiger in the Sundarbans ecosystem over the last 3 years and assess the population growth of the same species in the same location over the last 7 years.\"", "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}], "human_eval_answer": "[\"wildlife_population.assess_growth(species='African Elephant', location='Serengeti', duration=10)\", \"ecological_impact.analyze(species='African Elephant', ecosystem='Serengeti', location='Serengeti', timeframe=5)\", \"wildlife_population.assess_growth(species='Bengal Tiger', location='Sundarbans', duration=7)\", \"ecological_impact.analyze(species='Bengal Tiger', ecosystem='Sundarbans', location='Sundarbans', timeframe=3)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me find a property in San Francisco, CA that is a condo with 2 bedrooms and fits within my budget range of $500,000 to $800,000? After that, could you also provide an estimated value for a villa in Los Angeles, CA with 3 bedrooms that is 5 years old? Lastly, I would also like to know the estimated value of an apartment in New York, NY with 1 bedroom that is 10 years old.\"", "function": [{"name": "realestate.find_properties", "description": "Find properties based on location, budget, and specifications", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state where the property is located, e.g. San Diego, CA."}, "propertyType": {"type": "string", "description": "Type of property such as villa, condo, apartment, etc."}, "bedrooms": {"type": "integer", "description": "Number of bedrooms required in the property."}, "budget": {"type": "object", "properties": {"min": {"type": "number", "description": "Minimum budget limit."}, "max": {"type": "number", "description": "Maximum budget limit."}}, "description": "Budget range for the property."}}, "required": ["location", "propertyType", "bedrooms", "budget"]}}, {"name": "property_valuation.get", "description": "Get estimated value of a property based on location, specifications and age", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state where the property is located, e.g. San Diego, CA."}, "propertyType": {"type": "string", "description": "Type of property such as villa, condo, apartment, etc."}, "bedrooms": {"type": "integer", "description": "Number of bedrooms required in the property."}, "age": {"type": "integer", "description": "Age of the property in years."}}, "required": ["location", "propertyType", "bedrooms", "age"]}}], "human_eval_answer": "[\"realestate.find_properties(location='San Francisco, CA', propertyType='condo', bedrooms=2, budget={'min': 500000, 'max': 800000})\", \"property_valuation.get(location='Los Angeles, CA', propertyType='villa', bedrooms=3, age=5)\", \"property_valuation.get(location='New York, NY', propertyType='apartment', bedrooms=1, age=10)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"John is a student who recently received his grades for the semester. His grades were as follows: Math - 85, English - 90, Science - 88, History - 92, and Art - 89. Could you please help John to understand his performance better by doing the following: \n\n1) Calculate the average grade across all his subjects using the 'calculate_average' function with the grade dictionary {'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89}.\n\n2) Calculate the standard deviation of his grades using the 'calculate_standard_deviation' function with the same grade dictionary {'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89} to understand the variability of his scores.\n\n3) Identify the subject in which John scored the highest using the 'highest_grade' function with the grade dictionary {'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89}.\"", "function": [{"name": "calculate_average", "description": "This function calculates the average grade across different subjects for a specific student.", "parameters": {"type": "object", "properties": {"gradeDict": {"type": "object", "description": "A dictionary where keys represent subjects and values represent scores"}}}}, {"name": "calculate_standard_deviation", "description": "This function calculates the standard deviation across different scores for a specific student.", "parameters": {"type": "object", "properties": {"gradeDict": {"type": "object", "description": "A dictionary where keys represent subjects and values represent scores"}}}}, {"name": "highest_grade", "description": "This function finds the subject where the student got the highest score.", "parameters": {"type": "object", "properties": {"gradeDict": {"type": "object", "description": "A dictionary where keys represent subjects and values represent scores"}}}}], "human_eval_answer": "[\"calculate_average(gradeDict={'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89})\", \"calculate_standard_deviation(gradeDict={'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89})\", \"highest_grade(gradeDict={'Math': 85, 'English': 90, 'Science': 88, 'History': 92, 'Art': 89})\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with some math problems? First, I need to find the roots of a quadratic equation. The equation is 3x^2 + 4x - 7 = 0, where 3 is the coefficient of the second-degree term, 4 is the coefficient of the first-degree term, and -7 is the constant term. \n\nSecond, I have a cubic equation, 2x^3 - 5x^2 + 3x - 1 = 0. Here, 2 is the coefficient of the third-degree term, -5 is the coefficient of the second-degree term, 3 is the coefficient of the first-degree term, and -1 is the constant term. \n\nFinally, I have a polynomial equation of degree 4, which is 6x^4 - 3x^3 + 2x^2 - x + 1 = 0. The array of coefficients of the polynomial equation starting from the highest degree term is [6, -3, 2, -1, 1]. Can you calculate the roots for these equations?\"", "function": [{"name": "math_roots.quadratic", "description": "Calculate the roots of a quadratic equation.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of the second-degree term."}, "b": {"type": "number", "description": "Coefficient of the first-degree term."}, "c": {"type": "number", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, {"name": "math.roots.cubic", "description": "Calculate the roots of a cubic equation.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of the third-degree term."}, "b": {"type": "number", "description": "Coefficient of the second-degree term."}, "c": {"type": "number", "description": "Coefficient of the first-degree term."}, "d": {"type": "number", "description": "Constant term."}}, "required": ["a", "b", "c", "d"]}}, {"name": "math.roots.polynomial", "description": "Calculate the roots of a polynomial equation.", "parameters": {"type": "object", "properties": {"coefficients": {"type": "array", "items": {"type": "number"}, "description": "Array of coefficients of the polynomial equation starting from highest degree term."}, "degree": {"type": "number", "description": "Degree of the polynomial equation."}}, "required": ["coefficients"]}}], "human_eval_answer": "[\"math_roots.quadratic(a=3, b=4, c=-7)\", \"math.roots.cubic(a=2, b=-5, c=3, d=-1)\", \"math.roots.polynomial(coefficients=[6, -3, 2, -1, 1], degree=4)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me analyze the financial performance of a company named 'Tech Innovators'? I would like to understand their year over year (YOY) growth rate from 2018 to 2019. In 2018, their revenue was $500,000 and in 2019, it increased to $750,000. Additionally, I would like to know their return on equity (ROE) for the year 2019, where their net income was $100,000 and the average shareholder equity was $200,000. Lastly, I am also interested in their return on assets (ROA) for the same year, given that their total average assets were $1,000,000.\"", "function": [{"name": "corporate_finance.calculate_YOY_growth_rate", "description": "Calculate the year over year (YOY) growth rate for a company.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company for which to calculate the YOY growth rate."}, "year1": {"type": "integer", "description": "The initial year."}, "year1_revenue": {"type": "number", "description": "The revenue for the initial year."}, "year2": {"type": "integer", "description": "The subsequent year."}, "year2_revenue": {"type": "number", "description": "The revenue for the subsequent year."}}, "required": ["company_name", "year1", "year1_revenue", "year2", "year2_revenue"]}}, {"name": "financial_ratios.calculate_ROE", "description": "Calculate the return on equity (ROE) for a company.", "parameters": {"type": "object", "properties": {"net_income": {"type": "number", "description": "Net income for the period."}, "shareholder_equity": {"type": "number", "description": "Average shareholder equity for the period."}}, "required": ["net_income", "shareholder_equity"]}}, {"name": "financial_ratios.calculate_ROA", "description": "Calculate the return on assets (ROA) for a company.", "parameters": {"type": "object", "properties": {"net_income": {"type": "number", "description": "Net income for the period."}, "total_assets": {"type": "number", "description": "Total average assets for the period."}}, "required": ["net_income", "total_assets"]}}], "human_eval_answer": "[\"corporate_finance.calculate_YOY_growth_rate(company_name='Tech Innovators', year1=2018, year1_revenue=500000, year2=2019, year2_revenue=750000)\", \"financial_ratios.calculate_ROE(net_income=100000, shareholder_equity=200000)\", \"financial_ratios.calculate_ROA(net_income=100000, total_assets=1000000)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a real estate investor. You bought a property 5 years ago for $500,000. The annual depreciation rate for the property is 2%. Can you calculate the current depreciated value of the property? Now, consider you had a sum of $200,000 at the same time you bought the property. If the annual inflation rate has been 3% for the past 5 years, how much would that sum be worth today? Also, suppose you took out a loan of $300,000 with an annual interest rate of 4% to help finance the property purchase. If the loan term was 10 years, what would be your monthly repayment for the loan? Lastly, if you calculate the property depreciation monthly instead of annually, what would be the depreciated value of the property now?\"", "function": [{"name": "finance.property_depreciation", "description": "Calculates the depreciated value of a property given its initial cost, depreciation rate, and the number of years.", "parameters": {"type": "object", "properties": {"initial_cost": {"type": "number", "description": "The initial cost of the property."}, "depreciation_rate": {"type": "number", "description": "The annual depreciation rate in percentage."}, "years": {"type": "integer", "description": "The number of years for which to calculate the depreciation."}, "monthly": {"type": "boolean", "description": "If set to true, it will calculate monthly depreciation instead of annually. (optional)", "default": false}}, "required": ["initial_cost", "depreciation_rate", "years"]}}, {"name": "finance.inflation_adjustment", "description": "Adjusts a sum of money for inflation based on the consumer price index (CPI).", "parameters": {"type": "object", "properties": {"initial_sum": {"type": "number", "description": "The initial sum of money."}, "years": {"type": "integer", "description": "The number of years over which inflation is calculated."}, "inflation_rate": {"type": "number", "description": "The annual rate of inflation."}}, "required": ["initial_sum", "years"]}}, {"name": "finance.loan_repayment", "description": "Calculates the monthly repayment for a loan.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "number", "description": "The amount borrowed or loaned."}, "interest_rate": {"type": "number", "description": "The annual interest rate."}, "loan_term": {"type": "integer", "description": "The term of the loan in years."}}, "required": ["loan_amount", "interest_rate", "loan_term"]}}], "human_eval_answer": "[\"finance.property_depreciation(initial_cost=500000, depreciation_rate=0.02, years=5)\", \"finance.inflation_adjustment(initial_sum=200000, years=5, inflation_rate=0.03)\", \"finance.loan_repayment(loan_amount=300000, interest_rate=0.04, loan_term=10)\", \"finance.property_depreciation(initial_cost=500000, depreciation_rate=0.02, years=5, monthly=True)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me compare the potential energy output of two different renewable energy projects? The first project is a solar farm located at coordinates 37.7749 and -122.4194 with a total solar panel area of 50000 square feet. I would like to know the estimated energy output for the month of July. The second project is a wind farm located at coordinates 40.7128 and -74.0060 with a total of 100 wind turbines. I would also like to know the estimated energy output for this wind farm for the month of July.\"", "function": [{"name": "solarFarm.potential", "description": "Estimate the energy output of a solar farm given its location and panel area for a particular month.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The geographic coordinates of the location of the solar farm."}, "panelArea": {"type": "number", "description": "The total solar panel area in square feet at the location."}, "month": {"type": "string", "description": "The month for which to calculate the potential energy output.", "optional": true}}, "required": ["coordinates", "panelArea"]}}, {"name": "windFarm.potential", "description": "Estimate the energy output of a wind farm given its location and turbine count for a particular month.", "parameters": {"type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "number"}, "description": "The geographic coordinates of the location of the wind farm."}, "turbineCount": {"type": "number", "description": "The total number of wind turbines at the location."}, "month": {"type": "string", "description": "The month for which to calculate the potential energy output.", "optional": true}}, "required": ["coordinates", "turbineCount"]}}], "human_eval_answer": "[\"solarFarm.potential(coordinates=[37.7749, -122.4194], panelArea=50000, month='July')\", \"windFarm.potential(coordinates=[40.7128, -74.0060], turbineCount=100, month='July')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you first check the availability of a sculpture named 'The Thinker' made of bronze in the inventory using the 'sculpture_availability.check' function? Then, could you provide information about a sculptor named 'Auguste Rodin' using the 'sculptor_info.get' function? Lastly, could you calculate the estimated price to commission a sculpture made of marble, 10 feet in size, and with high complexity using the 'sculpture_price.calculate' function?\"", "function": [{"name": "sculpture_price.calculate", "description": "Calculate the estimated price to commission a sculpture based on the material and size.", "parameters": {"type": "object", "properties": {"material": {"type": "string", "description": "The material used for the sculpture."}, "size": {"type": "integer", "description": "The size of the sculpture in feet."}, "complexity": {"type": "string", "enum": ["low", "medium", "high"], "description": "The complexity level of the sculpture. Default is 'medium'.", "default": "medium"}}, "required": ["material", "size"]}}, {"name": "sculptor_info.get", "description": "Get information about a specific sculptor.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the sculptor."}}, "required": ["name"]}}, {"name": "sculpture_availability.check", "description": "Check the availability of a specific sculpture in the inventory.", "parameters": {"type": "object", "properties": {"sculpture_name": {"type": "string", "description": "The name of the sculpture."}, "material": {"type": "string", "description": "The material of the sculpture."}}, "required": ["sculpture_name", "material"]}}], "human_eval_answer": "[\"sculpture_availability.check(sculpture_name='The Thinker', material='bronze')\", \"sculptor_info.get(name='Auguste Rodin')\", \"sculpture_price.calculate(material='marble', size=10, complexity='high')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please generate a sinusoidal sound wave with a frequency of 440 Hz and a duration of 5 seconds, save it to a WAV file named 'test.wav', then generate a square wave sound with a frequency of 880 Hz and a duration of 10 seconds, save it to a file named 'test2.wav', and finally play the 'test.wav' file at a volume level of 0.8 and the 'test2.wav' file at a volume level of 0.6?\"", "function": [{"name": "generate_sound_wave", "description": "This function is for generating a sinusoidal sound wave file of a certain frequency for a specific duration and save it to a WAV file.", "parameters": {"type": "object", "properties": {"frequency": {"type": "integer", "description": "The frequency of the sound wave in Hz."}, "duration": {"type": "integer", "description": "The duration of the sound in seconds."}, "wave_type": {"type": "string", "enum": ["sine", "square", "sawtooth"], "description": "The waveform to be used to generate the sound.", "default": "sine"}}, "required": ["frequency", "duration"]}}, {"name": "play_sound_wave", "description": "This function is for playing a sound wave file.", "parameters": {"type": "object", "properties": {"wave_file": {"type": "string", "description": "The filename of the sound wave file to be played."}, "volume": {"type": "number", "description": "The volume level at which the sound is to be played (1 is 100%).", "default": 1}}, "required": ["wave_file"]}}], "human_eval_answer": "[\"generate_sound_wave(frequency=440, duration=5, wave_type='sine')\", \"generate_sound_wave(frequency=880, duration=10, wave_type='square')\", \"play_sound_wave(wave_file='test.wav', volume=0.8)\", \"play_sound_wave(wave_file='test2.wav', volume=0.6)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you provide me with the following information about the NBA league: the record for the most points scored by a single player in one game, including the player's name, points scored, and game date; the record for the most points scored by a single player in one season, including the player's name, points scored, and season; and the record for the most points scored by a player in his career, including the player's name, total points scored, and career span?\"", "function": [{"name": "sports_data.basketball.most_points_single_game", "description": "Returns the record for the most points scored by a single player in one game of NBA, including the player name, points scored, and game date.", "parameters": {"type": "object", "properties": {"league": {"type": "string", "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."}}, "required": ["league"]}}, {"name": "sports_data.basketball.most_points_single_season", "description": "Returns the record for the most points scored by a single player in one season of NBA, including the player name, points scored, and season.", "parameters": {"type": "object", "properties": {"league": {"type": "string", "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."}}, "required": ["league"]}}, {"name": "sports_data.basketball.most_points_career", "description": "Returns the record for the most points scored by a player in his career in NBA, including the player name, total points scored, and career span.", "parameters": {"type": "object", "properties": {"league": {"type": "string", "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."}}, "required": ["league"]}}], "human_eval_answer": "[\"sports_data.basketball.most_points_single_game('NBA')\", \"sports_data.basketball.most_points_single_season('NBA')\", \"sports_data.basketball.most_points_career('NBA')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you provide me with the current statistics for the basketball player LeBron James, specifically his points, assists, rebounds, and minutes played? Then, can you also provide the current statistics for the Los Angeles Lakers, including their total points, total assists, total rebounds, and win rate? After that, could you give me the detailed statistical data from the game between the Los Angeles Lakers and the Golden State Warriors that occurred on January 18, 2021, including total points, total assists, total rebounds, and turnovers?\"", "function": [{"name": "basketball.player_stats.get", "description": "Get current statistics for a specified basketball player", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The name of the player."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including points, assists, rebounds, minutes."}}, "required": ["player_name", "stats_fields"]}}, {"name": "basketball.team_stats.get", "description": "Get current statistics for a specific basketball team", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the team."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, win rate."}}, "required": ["team_name", "stats_fields"]}}, {"name": "basketball.game_stats.get", "description": "Get the detailed statistical data from a specific basketball game", "parameters": {"type": "object", "properties": {"team1": {"type": "string", "description": "One of the competing teams in the game."}, "team2": {"type": "string", "description": "One of the competing teams in the game."}, "date": {"type": "string", "description": "The date when the game occurred."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, turnovers."}}, "required": ["team1", "team2", "date"]}}], "human_eval_answer": "[\"basketball.player_stats.get({'player_name': 'LeBron James', 'stats_fields': ['points', 'assists', 'rebounds', 'minutes']}), basketball.team_stats.get({'team_name': 'Los Angeles Lakers', 'stats_fields': ['total points', 'total assists', 'total rebounds', 'win rate']}), basketball.game_stats.get({'team1': 'Los Angeles Lakers', 'team2': 'Golden State Warriors', 'date': '2021-01-18', 'stats_fields': ['total points', 'total assists', 'total rebounds', 'turnovers']})\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan my day? I want to start from my home in New York and go to a chess club named 'Knight Gambit' located in Boston. I want to take the fastest route. After that, I want to go to another chess club named 'Rook Corner' in Philadelphia, again taking the fastest route. Finally, I want to return home, but this time I want to take the shortest route. Can you also provide me with the details of the events hosted by both chess clubs?\"", "function": [{"name": "route_planner.calculate_route", "description": "Determines the best route between two points.", "parameters": {"type": "object", "properties": {"start": {"type": "string", "description": "The starting point of the journey."}, "destination": {"type": "string", "description": "The destination of the journey."}, "method": {"type": "string", "enum": ["fastest", "shortest", "balanced"], "description": "The method to use when calculating the route (default is 'fastest').", "default": "fastest"}}, "required": ["start", "destination"]}}, {"name": "chess_club_details.find", "description": "Provides details about a chess club, including location.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the chess club."}, "city": {"type": "string", "description": "The city in which the chess club is located."}, "event": {"type": "string", "description": "The event hosted by the club.", "default": "null"}}, "required": ["name", "city"]}}], "human_eval_answer": "[\"route_planner.calculate_route(start='New York', destination='Boston', method='fastest')\", \"chess_club_details.find(name='Knight Gambit', city='Boston')\", \"route_planner.calculate_route(start='Boston', destination='Philadelphia', method='fastest')\", \"chess_club_details.find(name='Rook Corner', city='Philadelphia')\", \"route_planner.calculate_route(start='Philadelphia', destination='New York', method='shortest')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please tell me the selling price of the video game 'The Legend of Zelda: Breath of the Wild' on the Nintendo Switch platform in the United States, and also let me know if the game 'Super Mario Odyssey' is currently on sale on the same platform and region? Additionally, could you fetch the currency used in the United States on the PlayStation platform, and also tell me the selling price of 'God of War' on the PlayStation platform in the United Kingdom?\"", "function": [{"name": "video_games.store_price", "description": "Fetches the selling price of a specified game in a particular gaming platform store and in a specific region.", "parameters": {"type": "object", "properties": {"game_title": {"type": "string", "description": "The title of the video game"}, "platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan", "optional": "True"}}}}, {"name": "video_games.on_sale", "description": "Checks if a particular game is currently on sale in a specific gaming platform store and in a specific region.", "parameters": {"type": "object", "properties": {"game_title": {"type": "string", "description": "The title of the video game"}, "platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan", "optional": "True"}}}}, {"name": "video_games.store_currency", "description": "Fetches the currency used in a specific region in a gaming platform store.", "parameters": {"type": "object", "properties": {"platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan", "optional": "True"}}}}], "human_eval_answer": "[\"video_games.store_price(game_title='The Legend of Zelda: Breath of the Wild', platform='Nintendo Switch', region='United States')\", \"video_games.on_sale(game_title='Super Mario Odyssey', platform='Nintendo Switch', region='United States')\", \"video_games.store_currency(platform='PlayStation', region='United States')\", \"video_games.store_price(game_title='God of War', platform='PlayStation', region='United Kingdom')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with some gaming information? First, I want to know about the rewards I can get from playing 'Call of Duty' on my 'Playstation'. Second, I am curious about the scores and rankings on level 3 of 'FIFA' on 'Xbox'. Third, I would like to know all the missions for 'Assassin Creed'. Lastly, I want to know the rewards for the 'Master' trophy level in 'Fortnite' on my 'PC'.\"", "function": [{"name": "game_rewards.get", "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "mission": {"type": "string", "description": "The mission for which you want to know the rewards.", "optional": true}, "trophy": {"type": "string", "description": "The trophy level for which you want to know the rewards.", "optional": true}}, "required": ["game", "platform"]}}, {"name": "game_scores.get", "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "level": {"type": "integer", "description": "The level of the game for which you want to retrieve the scores."}, "player": {"type": "string", "description": "The name of the player for whom you want to retrieve scores.", "optional": true}}, "required": ["game", "platform", "level"]}}, {"name": "game_missions.list", "description": "List all missions for a certain game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}}, "required": ["game"]}}], "human_eval_answer": "[\"game_rewards.get(game='Call of Duty', platform='Playstation')\", \"game_scores.get(game='FIFA', platform='Xbox', level=3)\", \"game_missions.list(game='Assassin Creed')\", \"game_rewards.get(game='Fortnite', platform='PC', trophy='Master')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan a trip? I would like to first find the shortest path from my home in New York City to the Metropolitan Museum of Art by walking. Then, I want to estimate how long it will take to walk this route. After visiting the museum, I plan to bike to Central Park. Could you find the shortest path for this bike trip? And finally, I would like to know how long it would take to bike this route.\"", "function": [{"name": "maps.shortest_path", "description": "Find the shortest path from one location to another by using a specific mode of transportation.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The name or coordinates of the start location."}, "end_location": {"type": "string", "description": "The name or coordinates of the end location."}, "mode": {"type": "string", "description": "The mode of transportation (walk, bike, transit, drive).", "default": "walk"}}, "required": ["start_location", "end_location"]}}, {"name": "maps.route_times", "description": "Estimates the time it will take to travel from one location to another by a specific mode of transportation.", "parameters": {"type": "object", "properties": {"route": {"type": "string", "description": "The string representation of the route."}, "mode": {"type": "string", "description": "The mode of transportation (walk, bike, transit, drive).", "default": "walk"}}, "required": ["route"]}}], "human_eval_answer": "[\"maps.shortest_path(start_location='New York City', end_location='Metropolitan Museum of Art', mode='walk')\", \"maps.route_times(route='New York City to Metropolitan Museum of Art', mode='walk')\", \"maps.shortest_path(start_location='Metropolitan Museum of Art', end_location='Central Park', mode='bike')\", \"maps.route_times(route='Metropolitan Museum of Art to Central Park', mode='bike')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are working on a programming project and you encounter the following tasks. First, you need to solve a quadratic equation where the coefficient of x^2 is 5, the coefficient of x is 6, and the constant term is 1. After that, you need to convert an RGB color code to a hexadecimal color code. The RGB values are Red: 255, Green: 160, and Blue: 0. Finally, you have a string 'Hello, World!' that needs to be reversed. Can you perform these tasks using the appropriate functions?\"", "function": [{"name": "solve.quadratic_equation", "description": "Solve a quadratic equation with given coefficients a, b, and c.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "Coefficient of x^2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, {"name": "convert.rgb_to_hex", "description": "Converts RGB values to Hexadecimal color code.", "parameters": {"type": "object", "properties": {"r": {"type": "integer", "description": "The Red component."}, "g": {"type": "integer", "description": "The Green component."}, "b": {"type": "integer", "description": "The Blue component."}}, "required": ["r", "g", "b"]}}, {"name": "perform.string_reverse", "description": "Reverses a given string.", "parameters": {"type": "object", "properties": {"input_string": {"type": "string", "description": "The string to be reversed."}}, "required": ["input_string"]}}], "human_eval_answer": "[\"solve.quadratic_equation(a=5, b=6, c=1)\", \"convert.rgb_to_hex(r=255, g=160, b=0)\", \"perform.string_reverse(input_string='Hello, World!')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a math problem? I have two functions, the first one is '4x+7' and the second one is '2x+5'. I need to find the intersection points of these two functions. After that, I have another function '3x+9'. I need to find the zero points of this function. Can you solve these for me?\"", "function": [{"name": "functions.intersect", "description": "Locate the intersection points of two functions.", "parameters": {"type": "object", "properties": {"function1": {"type": "string", "description": "First function given as a string with x as the variable, e.g. 3x+2"}, "function2": {"type": "string", "description": "Second function given as a string with x as the variable, e.g. 2x+3"}}, "required": ["function1", "function2"]}}, {"name": "functions.zero", "description": "Find the zero points of a function.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "Function given as a string with x as the variable, e.g. 3x+2"}}, "required": ["function"]}}], "human_eval_answer": "[\"functions.intersect(function1='4x+7', function2='2x+5')\", \"functions.zero(function='3x+9')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"In a park, there is a rectangular playground with a length of 50 meters and a width of 30 meters. Next to it, there is a square sandbox with a side length of 5 meters. A circular fountain with a radius of 3 meters is located at the center of the park. Can you calculate the area and perimeter of the playground, the area and perimeter of the sandbox, and the area and circumference of the fountain?\"", "function": [{"name": "geometry_rectangle.calculate", "description": "Calculates the area and perimeter of a rectangle given the width and length.", "parameters": {"type": "object", "properties": {"width": {"type": "integer", "description": "The width of the rectangle."}, "length": {"type": "integer", "description": "The length of the rectangle."}}, "required": ["width", "length"]}}, {"name": "geometry_square.calculate", "description": "Calculates the area and perimeter of a square given the side length.", "parameters": {"type": "object", "properties": {"side": {"type": "integer", "description": "The length of a side of the square."}}, "required": ["side"]}}, {"name": "geometry_circle.calculate", "description": "Calculates the area and circumference of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}], "human_eval_answer": "[\"geometry_rectangle.calculate(width=30, length=50)\", \"geometry_square.calculate(side=5)\", \"geometry_circle.calculate(radius=3)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a sculptor working on a large project. You have two different types of materials available to you, each with a different density. The first material has a density of 5.2 g/cm^3 and the second material has a density of 7.8 g/cm^3. You are planning to create two identical cones, each with a base radius of 10 cm and a height of 30 cm. The first cone will be made from the first material and the second cone will be made from the second material. Can you calculate the volume of each cone, rounding off to 2 decimal places, and then calculate the mass of each cone using their respective densities?\"", "function": [{"name": "geometry.calculate_cone_volume", "description": "Calculate the volume of a cone given the radius and height.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "Radius of the cone base."}, "height": {"type": "number", "description": "Height of the cone."}, "round_off": {"type": "integer", "description": "Number of decimal places to round off the answer."}}, "required": ["radius", "height"]}}, {"name": "physics.calculate_cone_mass", "description": "Calculate the mass of a cone given the radius, height, and density.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "Radius of the cone base."}, "height": {"type": "number", "description": "Height of the cone."}, "density": {"type": "number", "description": "Density of the material the cone is made of."}}, "required": ["radius", "height", "density"]}}], "human_eval_answer": "[\"geometry.calculate_cone_volume(radius=10, height=30, round_off=2)\", \"physics.calculate_cone_mass(radius=10, height=30, density=5.2)\", \"geometry.calculate_cone_volume(radius=10, height=30, round_off=2)\", \"physics.calculate_cone_mass(radius=10, height=30, density=7.8)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with my calculus homework? I have two problems that I'm stuck on. The first one is to calculate the definite integral of the function 3x^2 - 2x + 1 from x = 1 to x = 4. The second problem is to calculate the derivative of the function 2x^3 - 3x^2 + 4x - 5 at x = 2. And for extra credit, I need to find the second order derivative of the same function at x = 2. Can you solve these for me?\"", "function": [{"name": "calculate_integral", "description": "Calculate the definite integral of a single-variable function.", "parameters": {"type": "object", "properties": {"func": {"type": "string", "description": "The function to be integrated."}, "a": {"type": "integer", "description": "The lower bound of the integration."}, "b": {"type": "integer", "description": "The upper bound of the integration."}}, "required": ["func", "a", "b"]}}, {"name": "calculate_derivative", "description": "Calculate the derivative of a single-variable function.", "parameters": {"type": "object", "properties": {"func": {"type": "string", "description": "The function to be differentiated."}, "x_value": {"type": "integer", "description": "The x-value at which the derivative should be calculated."}, "order": {"type": "integer", "description": "The order of the derivative (optional). Default is 1st order.", "default": 1}}, "required": ["func", "x_value"]}}], "human_eval_answer": "[\"calculate_integral(func='3*x**2 - 2*x + 1', a=1, b=4)\", \"calculate_derivative(func='2*x**3 - 3*x**2 + 4*x - 5', x_value=2)\", \"calculate_derivative(func='2*x**3 - 3*x**2 + 4*x - 5', x_value=2, order=2)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a math teacher preparing for a class. You want to create a challenging problem for your students that involves multiple steps. You decide to create a problem that involves finding the least common multiple (LCM) and the greatest common divisor (GCD) of two numbers, and then calculating the square root of these results. You choose the numbers 36 and 48 for the LCM and GCD calculations. For the square root calculations, you want the results to be accurate to 3 decimal places. What are the square roots of the LCM and GCD of 36 and 48, accurate to 3 decimal places?\"", "function": [{"name": "math.lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}, {"name": "math.gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}, {"name": "math.sqrt", "description": "Calculates the square root of a number.", "parameters": {"type": "object", "properties": {"num": {"type": "number", "description": "The number."}, "accuracy": {"type": "number", "description": "The number of decimal places in the result.", "optional": true}}, "required": ["num"]}}], "human_eval_answer": "[\"math.lcm(num1=36, num2=48)\", \"math.gcd(num1=36, num2=48)\", \"math.sqrt(num=math.lcm(num1=36, num2=48), accuracy=3)\", \"math.sqrt(num=math.gcd(num1=36, num2=48), accuracy=3)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me with a couple of calculations? First, I need to find the greatest common divisor of 56 and 98 using the Euclidean algorithm. After that, I would like to know the greatest common divisor of 81 and 27, but this time using the binary algorithm. Once we have those, I need to calculate the least common multiple of 15 and 25 using the standard method. And finally, could you find the least common multiple of 21 and 14 using the reduced method?\"", "function": [{"name": "calculate_gcd", "description": "Calculate the greatest common divisor (gcd) between two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number to calculate gcd for."}, "num2": {"type": "integer", "description": "Second number to calculate gcd for."}, "algorithm": {"type": "string", "description": "The specific algorithm to use in the calculation. Supported values: 'euclidean', 'binary'"}}, "required": ["num1", "num2"]}}, {"name": "calculate_lcm", "description": "Calculate the least common multiple (lcm) between two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number to calculate lcm for."}, "num2": {"type": "integer", "description": "Second number to calculate lcm for."}, "method": {"type": "string", "description": "The specific method to use in the calculation. Supported values: 'standard', 'reduced'"}}, "required": ["num1", "num2"]}}], "human_eval_answer": "[\"calculate_gcd(num1=56, num2=98, algorithm='euclidean')\", \"calculate_gcd(num1=81, num2=27, algorithm='binary')\", \"calculate_lcm(num1=15, num2=25, method='standard')\", \"calculate_lcm(num1=21, num2=14, method='reduced')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"A car starts from rest and travels a distance of 120 meters in 10 seconds. What is the speed of the car at the end of this time period? After reaching this speed, the car continues to accelerate for another 5 seconds until it reaches a final speed. The final speed is twice the speed calculated in the first part. What is the acceleration of the car in this second phase?\"", "function": [{"name": "kinematics.calculate_speed_from_rest", "description": "Calculates the speed of an object that starts from rest under a constant acceleration over a specified distance.", "parameters": {"type": "object", "properties": {"distance": {"type": "float", "description": "The distance in meters the object has traveled."}, "time": {"type": "float", "description": "The time in seconds it took the object to travel."}, "initial_speed": {"type": "float", "description": "The initial speed of the object.", "default": 0}}, "required": ["distance", "time"]}}, {"name": "kinematics.calculate_acceleration", "description": "Calculates the acceleration of an object under given conditions.", "parameters": {"type": "object", "properties": {"initial_speed": {"type": "float", "description": "The initial speed of the object."}, "final_speed": {"type": "float", "description": "The final speed of the object."}, "time": {"type": "float", "description": "The time in seconds it took the object to reach the final speed."}, "distance": {"type": "float", "description": "The distance in meters the object has traveled.", "default": 0}}, "required": ["initial_speed", "final_speed", "time"]}}], "human_eval_answer": "[\"kinematics.calculate_speed_from_rest(distance=120, time=10)\", \"kinematics.calculate_acceleration(initial_speed=12, final_speed=24, time=5)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"A car is initially at rest and then starts moving with a constant acceleration of 3 m/s^2. After 5 seconds, what is its final velocity? Now, imagine a wave with a frequency of 50 Hz and a wavelength of 3 meters. What is the velocity of this wave? Going back to the car, if it continues to move with the same acceleration for another 7 seconds, what is the total distance it has traveled from the start?\"", "function": [{"name": "kinematics.final_velocity", "description": "Find the final velocity of an object moving under constant acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "time": {"type": "number", "description": "The time in seconds the object has been moving."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"}}, "required": ["initial_velocity", "time"]}}, {"name": "physics.wave_velocity", "description": "Calculate the velocity of a wave based on its frequency and wavelength.", "parameters": {"type": "object", "properties": {"frequency": {"type": "number", "description": "The frequency of the wave in Hz."}, "wavelength": {"type": "number", "description": "The wavelength of the wave in m."}}, "required": ["frequency", "wavelength"]}}, {"name": "kinematics.distance", "description": "Find the distance traveled by an object moving under constant acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "time": {"type": "number", "description": "The time in seconds the object has been moving."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"}}, "required": ["initial_velocity", "time"]}}], "human_eval_answer": "[\"kinematics.final_velocity(initial_velocity=0, time=5, acceleration=3)\", \"physics.wave_velocity(frequency=50, wavelength=3)\", \"kinematics.distance(initial_velocity=0, time=12, acceleration=3)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me find a book in the library? I am looking for a book named 'To Kill a Mockingbird' in the city of New York. I would like to know if it's available. Also, I am interested in the genre of 'Fiction'. Once you find it, can you reserve it for me? The book id is '123ABC' and the branch id is 'XYZ789'. I plan to return it by '2022-12-31'.\"", "function": [{"name": "library.search_book", "description": "Searches for a book in the library within the specified city.", "parameters": {"type": "object", "properties": {"book_name": {"type": "string", "description": "The name of the book to search for."}, "city": {"type": "string", "description": "The city to search within."}, "availability": {"type": "boolean", "description": "If true, search for available copies. If false or omitted, search for any copy regardless of availability."}, "genre": {"type": "string", "description": "The genre of the book to filter search (optional)."}}, "required": ["book_name", "city"]}}, {"name": "library.reserve_book", "description": "Reserves a book in the library if available.", "parameters": {"type": "object", "properties": {"book_id": {"type": "string", "description": "The id of the book to reserve."}, "branch_id": {"type": "string", "description": "The id of the library branch to reserve from."}, "return_date": {"type": "string", "description": "The date the book is to be returned (optional)."}}, "required": ["book_id", "branch_id"]}}], "human_eval_answer": "[\"library.search_book(book_name='To Kill a Mockingbird', city='New York', availability=True, genre='Fiction')\", \"library.reserve_book(book_id='123ABC', branch_id='XYZ789', return_date='2022-12-31')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me plan my day? I need to go from my home at 123 Main Street to my office at 456 Park Avenue, and I don't want to spend more than $30 on the ride. After work, I need to order groceries from the Whole Foods at 789 Broadway. The items I need are milk, bread, eggs, and apples. I don't want to spend more than $10 on delivery. Then, I need to get a ride from my office to my friend's house at 321 Elm Street, and I don't want to spend more than $20 on that ride. Finally, I need to get a ride from my friend's house back to my home, and I don't want to spend more than $25 on that ride. Can you help me with all of this?\"", "function": [{"name": "ride_hailing.get_rides", "description": "Find ride from source to destination with an optional cost limit", "parameters": {"type": "object", "properties": {"source": {"type": "string", "description": "The starting point of the journey"}, "destination": {"type": "string", "description": "The endpoint of the journey"}, "max_cost": {"type": "number", "description": "The maximum cost of the ride. It is optional"}}, "required": ["source", "destination"]}}, {"name": "grocery_delivery.order", "description": "Order grocery items from a specific location with optional delivery price limit", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location of the grocery store"}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order"}, "max_delivery_cost": {"type": "number", "description": "The maximum delivery cost. It is optional"}}, "required": ["location", "items"]}}], "human_eval_answer": "[\"ride_hailing.get_rides(source='123 Main Street', destination='456 Park Avenue', max_cost=30)\", \"grocery_delivery.order(location='789 Broadway', items=['milk', 'bread', 'eggs', 'apples'], max_delivery_cost=10)\", \"ride_hailing.get_rides(source='456 Park Avenue', destination='321 Elm Street', max_cost=20)\", \"ride_hailing.get_rides(source='321 Elm Street', destination='123 Main Street', max_cost=25)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a chemist working in a lab. You have two samples of the same gas. The first sample has a quantity of 5 moles and is at a temperature of 300 Kelvin. The second sample has a quantity of 3 moles and is at a temperature of 500 Kelvin. You decide to mix these two samples together. What would be the final temperature of the mixture? \n\nLater, you obtain another gas sample with a quantity of 4 moles. You know that the molar mass of this gas is 16 g/mol. Can you calculate the mass of this gas sample?\"", "function": [{"name": "calculate_final_temperature", "description": "Calculate the final temperature when different quantities of the same gas at different temperatures are mixed.", "parameters": {"type": "object", "properties": {"quantity1": {"type": "number", "description": "The quantity of the first sample of gas."}, "temperature1": {"type": "number", "description": "The temperature of the first sample of gas."}, "quantity2": {"type": "number", "description": "The quantity of the second sample of gas."}, "temperature2": {"type": "number", "description": "The temperature of the second sample of gas."}}, "required": ["quantity1", "temperature1", "quantity2", "temperature2"]}}, {"name": "calculate_mass", "description": "Calculate the mass of a gas given its quantity and molar mass.", "parameters": {"type": "object", "properties": {"quantity": {"type": "number", "description": "The quantity of the gas."}, "molar_mass": {"type": "number", "description": "The molar mass of the gas."}}, "required": ["quantity", "molar_mass"]}}], "human_eval_answer": "[\"calculate_final_temperature(quantity1=5, temperature1=300, quantity2=3, temperature2=500)\", \"calculate_mass(quantity=4, molar_mass=16)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a scientist studying the energy production of a certain type of bacteria. You have a sample of this bacteria that has consumed 5 moles of glucose (C6H12O6) and you know that the energy produced from glucose is typically 2800 kJ/mol. You also know that the bacteria's conversion efficiency, or the percentage of energy from glucose that is converted into biomass, is 10%. \n\nFirst, calculate the total energy produced by the bacteria from consuming the glucose. \n\nSecond, calculate the amount of biomass produced by the bacteria given the energy produced and the conversion efficiency. \n\nNow, imagine you are using this bacteria in a bioreactor to power a small machine. The machine needs to move a distance of 2 meters and you want to calculate the work done by the machine. \n\nThird, calculate the work done by the machine given the total energy produced by the bacteria and the distance the machine needs to move.\"", "function": [{"name": "biological.calc_energy", "description": "Calculate energy from amount of substance based on its molecular composition.", "parameters": {"type": "object", "properties": {"mols": {"type": "number", "description": "Amount of substance in moles."}, "substance": {"type": "string", "description": "The chemical formula of the substance."}, "joules_per_mol": {"type": "number", "description": "The energy produced or required for the reaction, default value for glucose is 2800 kJ/mol", "default": 2800}}, "required": ["mols", "substance"]}}, {"name": "biological.calc_biomass", "description": "Calculate the biomass from the energy given the energy conversion efficiency.", "parameters": {"type": "object", "properties": {"energy": {"type": "number", "description": "The total energy produced."}, "efficiency": {"type": "number", "description": "The conversion efficiency, default value is 10%.", "default": 0.1}}, "required": ["energy"]}}, {"name": "physical.calc_work", "description": "Calculate the work from energy.", "parameters": {"type": "object", "properties": {"energy": {"type": "number", "description": "The total energy produced."}, "distance": {"type": "number", "description": "The distance over which the work is done."}}, "required": ["energy", "distance"]}}], "human_eval_answer": "[\"biological.calc_energy(mols=5, substance='C6H12O6', joules_per_mol=2800)\", \"biological.calc_biomass(energy=14000, efficiency=0.1)\", \"physical.calc_work(energy=1400, distance=2)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are planning a trip to Mars. You weigh 75 kilograms on Earth and you are curious about how much you would weigh on Mars. After your trip to Mars, you plan to visit Japan. You have 5000 US dollars and you want to know how much it would be in Japanese Yen. During your stay in Japan, you come across a beautiful antique vase that is 24 inches tall, but you are more familiar with measurements in centimeters. How tall is the vase in centimeters?\"", "function": [{"name": "calculate.weight_in_space", "description": "Calculate your weight on different planets given your weight on earth", "parameters": {"type": "object", "properties": {"weight_earth_kg": {"type": "number", "description": "Your weight on Earth in Kilograms."}, "planet": {"type": "string", "description": "The planet you want to know your weight on."}}, "required": ["weight_earth_kg", "planet"]}}, {"name": "currency_conversion", "description": "Convert a value from one currency to another.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "unit_conversion.convert", "description": "Convert a value from one unit to another.", "parameters": {"type": "object", "properties": {"value": {"type": "number", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}}, "required": ["value", "from_unit", "to_unit"]}}], "human_eval_answer": "[\"calculate.weight_in_space(weight_earth_kg=75, planet='Mars')\", \"currency_conversion(amount=5000, from_currency='USD', to_currency='JPY')\", \"unit_conversion.convert(value=24, from_unit='inches', to_unit='centimeters')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you tell me the estimated date of the Jurassic geological era and calculate how many years ago it was? Also, could you provide the date of the signing of the Magna Carta and calculate how many years ago that event took place?\"", "function": [{"name": "geology.get_era", "description": "Get the estimated date of a geological era.", "parameters": {"type": "object", "properties": {"era_name": {"type": "string", "description": "The name of the geological era. e.g Ice age"}, "calculate_years_ago": {"type": "boolean", "description": "True if years ago is to be calculated. False by default"}}, "required": ["era_name"]}}, {"name": "history.get_event_date", "description": "Get the date of an historical event.", "parameters": {"type": "object", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "calculate_years_ago": {"type": "boolean", "description": "True if years ago is to be calculated. False by default"}}, "required": ["event_name"]}}], "human_eval_answer": "[\"geology.get_era(era_name='Jurassic', calculate_years_ago=True)\", \"history.get_event_date(event_name='signing of the Magna Carta', calculate_years_ago=True)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Given the list of words ['apple', 'banana', 'cherry', 'date', 'elderberry'], can you first use the 'sort_list' function to sort this list in descending order? Then, using the 'filter_list' function, can you filter out the fruits that start with the letter 'b'? After that, consider the list of numbers [5, 10, 15, 20, 25]. Can you use the 'sum_elements' function to find the total sum of these numbers? Finally, use the 'sort_list' function again to sort the numbers [35, 10, 25, 5, 15] in ascending order?\"", "function": [{"name": "sort_list", "description": "Sort the elements of a list in ascending or descending order", "parameters": {"type": "object", "properties": {"elements": {"type": "array", "items": {"type": "integer"}, "description": "The list of elements to sort."}, "order": {"type": "string", "description": "The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order.", "default": "asc"}}, "required": ["elements"]}}, {"name": "filter_list", "description": "Filters elements of a list based on a given condition", "parameters": {"type": "object", "properties": {"elements": {"type": "array", "items": {"type": "string"}, "description": "The list of elements to filter."}, "condition": {"type": "string", "description": "The condition to filter the elements on."}}, "required": ["elements", "condition"]}}, {"name": "sum_elements", "description": "Add all elements of a numeric list", "parameters": {"type": "object", "properties": {"elements": {"type": "array", "items": {"type": "integer"}, "description": "The list of numeric elements to add."}}, "required": ["elements"]}}], "human_eval_answer": "[\"sort_list(elements=['apple', 'banana', 'cherry', 'date', 'elderberry'], order='desc')\", \"filter_list(elements=['apple', 'banana', 'cherry', 'date', 'elderberry'], condition='b')\", \"sum_elements(elements=[5, 10, 15, 20, 25])\", \"sort_list(elements=[35, 10, 25, 5, 15], order='asc')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with some calculations? First, I have two vectors, [1, 2, 3] and [4, 5, 6], and I need to calculate the cosine similarity between them. I want the result to be rounded off to 2 decimal places. Then, I have two arrays of numbers, [7, 8, 9] and [10, 11, 12], and I need to calculate the Pearson correlation coefficient between them. After that, I have another two arrays of numbers, [13, 14, 15] and [16, 17, 18], and I need to calculate the Spearman correlation coefficient between them. Lastly, I have two more vectors, [19, 20, 21] and [22, 23, 24], and I need to calculate the cosine similarity between them, but this time I want the result to be rounded off to 3 decimal places.\"", "function": [{"name": "cosine_similarity.calculate", "description": "Calculate the cosine similarity between two vectors.", "parameters": {"type": "object", "properties": {"vector1": {"type": "array", "items": {"type": "integer"}, "description": "The first vector for calculating cosine similarity."}, "vector2": {"type": "array", "items": {"type": "integer"}, "description": "The second vector for calculating cosine similarity."}, "rounding": {"type": "integer", "description": "Optional: The number of decimals to round off the result."}}, "required": ["vector1", "vector2"]}}, {"name": "correlation.calculate", "description": "Calculate the correlation coefficient between two arrays of numbers.", "parameters": {"type": "object", "properties": {"array1": {"type": "array", "items": {"type": "integer"}, "description": "The first array of numbers."}, "array2": {"type": "array", "items": {"type": "integer"}, "description": "The second array of numbers."}, "type": {"type": "string", "enum": ["pearson", "spearman"], "description": "Optional: The type of correlation coefficient to calculate. Default is 'pearson'."}}, "required": ["array1", "array2"]}}], "human_eval_answer": "[\"cosine_similarity.calculate(vector1=[1, 2, 3], vector2=[4, 5, 6], rounding=2)\", \"correlation.calculate(array1=[7, 8, 9], array2=[10, 11, 12], type='pearson')\", \"correlation.calculate(array1=[13, 14, 15], array2=[16, 17, 18], type='spearman')\", \"cosine_similarity.calculate(vector1=[19, 20, 21], vector2=[22, 23, 24], rounding=3)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me find a pet-friendly library with a cafe inside in New York City, NY and then a store in the same city that has disabled access and operates 24 hours?\"", "function": [{"name": "library.find_nearby", "description": "Locate nearby libraries based on specific preferences such as being pet-friendly and having disabled access facilities.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city, for example, New York City, NY"}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["Pet-friendly", "Disabled Access", "24 hours", "Cafe Inside"]}, "description": "Your preferences for the library."}}, "required": ["location", "preferences"]}}, {"name": "store.find_nearby", "description": "Locate nearby stores based on specific preferences such as being pet-friendly and having disabled access facilities.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city, for example, New York City, NY"}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["Pet-friendly", "Disabled Access", "24 hours", "Cafe Inside"]}, "description": "Your preferences for the store."}}, "required": ["location", "preferences"]}}], "human_eval_answer": "[\"library.find_nearby(location='New York City, NY', preferences=['Pet-friendly', 'Cafe Inside'])\", \"store.find_nearby(location='New York City, NY', preferences=['Disabled Access', '24 hours'])\"]", "question_type": "parallel_multiple_function"}
{"question": "\"John has decided to invest his savings. He has $5000 that he wants to invest for a period of 5 years. He is considering two options. The first option is a simple interest scheme that offers an annual interest rate of 4%. The second option is a compound interest scheme that offers an annual interest rate of 3.5% and compounds interest annually. He also came across a third option where he can invest an initial amount of $3000 at an annual interest rate of 5% for 6 years with interest compounded twice a year. Can you help him calculate the returns for each of these options using the calc_Simple_Interest, calc_Compound_Interest, and future_value functions respectively?\"", "function": [{"name": "calc_Compound_Interest", "description": "Compute compound interest.", "parameters": {"type": "object", "properties": {"principle_amount": {"type": "number", "description": "The principle amount that is invested."}, "duration": {"type": "number", "description": "Duration of time period in years."}, "annual_rate": {"type": "number", "description": "Interest rate in percentage."}, "compound_freq": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per unit time."}}, "required": ["principle_amount", "duration", "annual_rate"]}}, {"name": "calc_Simple_Interest", "description": "Compute simple interest.", "parameters": {"type": "object", "properties": {"principle_amount": {"type": "number", "description": "The principle amount that is invested."}, "duration": {"type": "number", "description": "Duration of time period in years."}, "annual_rate": {"type": "number", "description": "Interest rate in percentage."}}, "required": ["principle_amount", "duration", "annual_rate"]}}, {"name": "future_value", "description": "Calculates the future value of an investment given an interest rate and time period.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial investment amount."}, "interest_rate": {"type": "number", "description": "The annual interest rate (as a decimal)."}, "time": {"type": "integer", "description": "The number of time periods the money is invested for."}, "num_compoundings": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per time period."}}, "required": ["initial_investment", "interest_rate", "time"]}}], "human_eval_answer": "[\"calc_Simple_Interest(principle_amount=5000, duration=5, annual_rate=0.04)\", \"calc_Compound_Interest(principle_amount=5000, duration=5, annual_rate=0.035, compound_freq=1)\", \"future_value(initial_investment=3000, interest_rate=0.05, time=6, num_compoundings=2)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a two-step conversion? First, I have 5000 Japanese Yen that I would like to convert into US Dollars. After that, I have a measurement of 15 kilometers that I would like to convert into miles. Can you tell me how much I would have in US Dollars and how many miles I would have?\"", "function": [{"name": "currency_conversion", "description": "Convert a value from one currency to another.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "unit_conversion", "description": "Convert a value from one unit to another.", "parameters": {"type": "object", "properties": {"value": {"type": "number", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}}, "required": ["value", "from_unit", "to_unit"]}}], "human_eval_answer": "[\"currency_conversion(amount=5000, from_currency='Japanese Yen', to_currency='US Dollars')\", \"unit_conversion(value=15, from_unit='kilometers', to_unit='miles')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please provide me with the historical dividend data for Microsoft for the past 5 years on a quarterly basis, then the same data but on an annual basis? After that, could you retrieve the stock market data for Microsoft for the past 60 days and then for the past 120 days?\"", "function": [{"name": "corporate_finance.dividend_data", "description": "Get historical dividend data of a specific company within a particular duration.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that you want to get the dividend data for."}, "years": {"type": "integer", "description": "Number of past years for which to retrieve the data."}, "frequency": {"type": "string", "enum": ["quarterly", "annually"], "description": "The frequency of the dividend payment."}}, "required": ["company", "years"]}}, {"name": "stock_market_data", "description": "Retrieve stock market data for a specific company and time frame.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that you want to get the stock market data for."}, "days": {"type": "integer", "description": "Number of past days for which to retrieve the data."}}, "required": ["company", "days"]}}], "human_eval_answer": "[\"corporate_finance.dividend_data(company='Microsoft', years=5, frequency='quarterly')\", \"corporate_finance.dividend_data(company='Microsoft', years=5, frequency='annually')\", \"stock_market_data(company='Microsoft', days=60)\", \"stock_market_data(company='Microsoft', days=120)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me what the stock price prediction for Apple Inc. is for the next 30 days using the ARIMA model, and then provide the stock forecast for Microsoft Corporation for the next 45 days using the LSTM model? After that, could you provide the weather forecast for New York City for the next 7 days, and then give the weather forecast for Los Angeles for the next 14 days?\"", "function": [{"name": "stock_forecast", "description": "Predict the future stock price for a specific company and time frame.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company that you want to get the stock price prediction for."}, "days": {"type": "integer", "description": "Number of future days for which to predict the stock price."}, "model": {"type": "string", "description": "The model to use for prediction."}}, "required": ["company", "days"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}], "human_eval_answer": "[\"stock_forecast(company='Apple Inc.', days=30, model='ARIMA')\", \"stock_forecast(company='Microsoft Corporation', days=45, model='LSTM')\", \"weather_forecast(location='New York City', days=7)\", \"weather_forecast(location='Los Angeles', days=14)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please provide me with the following financial data for Microsoft and Apple over the past 30 days? First, I would like to know the average closing price of Microsoft's stocks using data from Yahoo Finance. Second, I need to know the total revenue of Apple using data from Google Finance. Third, I am interested in the total volume of stocks traded for both Microsoft and Apple, again using data from Yahoo Finance. Could you please calculate these for me?\"", "function": [{"name": "avg_closing_price", "description": "Calculate the average closing price of a specific company over a given period of time", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "Name of the company to get data for"}, "days": {"type": "integer", "description": "Number of past days to calculate average closing price for"}, "data_source": {"type": "string", "description": "Source to fetch the stock data. default is 'yahoo finance'"}}, "required": ["company", "days"]}}, {"name": "total_revenue", "description": "Calculate the total revenue of a company over a specific period of time", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "Name of the company to get data for"}, "days": {"type": "integer", "description": "Number of past days to calculate total revenue for"}, "data_source": {"type": "string", "description": "Source to fetch the financial data. default is 'google finance'"}}, "required": ["company", "days"]}}, {"name": "volume_traded", "description": "Calculate the total volume of stocks traded over a certain period of time", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "Name of the company to get data for"}, "days": {"type": "integer", "description": "Number of past days to calculate volume traded for"}, "data_source": {"type": "string", "description": "Source to fetch the financial data. default is 'yahoo finance'"}}, "required": ["company", "days"]}}], "human_eval_answer": "[\"avg_closing_price(company='Microsoft', days=30, data_source='yahoo finance')\", \"total_revenue(company='Apple', days=30, data_source='google finance')\", \"volume_traded(company='Microsoft', days=30, data_source='yahoo finance')\", \"volume_traded(company='Apple', days=30, data_source='yahoo finance')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"John has $5000 that he wants to invest. He is considering two options. The first option is a savings account that compounds interest quarterly at an annual rate of 4% for 5 years. The second option is a bond that offers simple interest at an annual rate of 3.5% for 5 years. How much would John have at the end of 5 years for both options?\"", "function": [{"name": "financial.compound_interest", "description": "Calculates compound interest.", "parameters": {"type": "object", "properties": {"principle": {"type": "number", "description": "The initial amount of money that is being compounded."}, "rate": {"type": "number", "description": "The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05."}, "time": {"type": "number", "description": "The amount of time, in years, that the money is to be compounded for."}, "n": {"type": "number", "description": "The number of times interest applied per time period."}}, "required": ["principle", "rate", "time", "n"]}}, {"name": "financial.simple_interest", "description": "Calculates simple interest.", "parameters": {"type": "object", "properties": {"principle": {"type": "number", "description": "The initial amount of money that interest is being calculated for."}, "rate": {"type": "number", "description": "The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05."}, "time": {"type": "number", "description": "The amount of time, in years, that the money is to be compounded for."}}, "required": ["principle", "rate", "time"]}}], "human_eval_answer": "[\"financial.compound_interest(principle=5000, rate=0.04, time=5, n=4)\", \"financial.simple_interest(principle=5000, rate=0.035, time=5)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me find a divorce lawyer in New York, NY and then a criminal lawyer in Los Angeles, CA? After that, I need to find a cardiologist in Chicago, IL and an orthopedic doctor in Houston, TX.\"", "function": [{"name": "lawyer.search", "description": "Search for a lawyer based on area of expertise and location", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "expertise": {"type": "string", "description": "Area of legal expertise. For example, 'Divorce', 'Criminal', 'Business'."}}, "required": ["location", "expertise"]}}, {"name": "doctor.search", "description": "Search for a doctor based on area of expertise and location", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "specialization": {"type": "string", "description": "Medical specialization. For example, 'Cardiology', 'Orthopedics', 'Gynecology'."}}, "required": ["location", "specialization"]}}], "human_eval_answer": "[\"lawyer.search(location='New York, NY', expertise='Divorce')\", \"lawyer.search(location='Los Angeles, CA', expertise='Criminal')\", \"doctor.search(location='Chicago, IL', specialization='Cardiology')\", \"doctor.search(location='Houston, TX', specialization='Orthopedics')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you provide me with a 5-day air quality forecast for New York, a 7-day weather forecast for Los Angeles, news articles on 'global warming' for the past 3 days, and a 2-day air quality forecast for Beijing?\"", "function": [{"name": "air_quality_forecast", "description": "Retrieve an air quality forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality forecast for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "news", "description": "Retrieve news articles for a specific topic.", "parameters": {"type": "object", "properties": {"topic": {"type": "string", "description": "The topic that you want to get the news for."}, "days": {"type": "integer", "description": "Number of past days for which to retrieve the news."}}, "required": ["topic", "days"]}}], "human_eval_answer": "[\"air_quality_forecast(location='New York', days=5)\", \"weather_forecast(location='Los Angeles', days=7)\", \"news(topic='global warming', days=3)\", \"air_quality_forecast(location='Beijing', days=2)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan a trip? I need to know the distance in kilometers from New York to London using the 'geodistance.find' function, then I want to know the time difference between New York and London using the 'timezones.get_difference' function. After that, I want to find flights from New York to London on the date of 'next friday' using the 'flights.search' function. Finally, I want to know the distance in miles from London to Paris using the 'geodistance.find' function again.\"", "function": [{"name": "geodistance.find", "description": "Find the distance between two cities on the globe.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "The originating city for the distance calculation."}, "destination": {"type": "string", "description": "The destination city for the distance calculation."}, "unit": {"type": "string", "default": "miles", "description": "The unit of measure for the distance calculation."}}, "required": ["origin", "destination"]}}, {"name": "timezones.get_difference", "description": "Find the time difference between two cities.", "parameters": {"type": "object", "properties": {"city1": {"type": "string", "description": "The first city."}, "city2": {"type": "string", "description": "The second city."}}, "required": ["city1", "city2"]}}, {"name": "flights.search", "description": "Find flights between two cities.", "parameters": {"type": "object", "properties": {"from_city": {"type": "string", "description": "The city to depart from."}, "to_city": {"type": "string", "description": "The city to arrive at."}, "date": {"type": "string", "default": "next monday", "description": "The date to fly."}}, "required": ["from_city", "to_city"]}}], "human_eval_answer": "[\"geodistance.find(origin='New York', destination='London', unit='kilometers')\", \"timezones.get_difference(city1='New York', city2='London')\", \"flights.search(from_city='New York', to_city='London', date='next friday')\", \"geodistance.find(origin='London', destination='Paris', unit='miles')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan my upcoming trip? I need to know the estimated traffic from my home in San Francisco to my office in Palo Alto on a typical weekday. Also, I'm curious about the distance between these two locations. Furthermore, I'm planning a weekend getaway to Los Angeles, so I'd like to know the traffic estimate from Palo Alto to Los Angeles for the coming weekend. Lastly, could you provide me with a 5-day weather forecast for Los Angeles?\"", "function": [{"name": "traffic_estimate", "description": "Estimate traffic from one location to another for a specific time period.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "Starting location for the journey."}, "end_location": {"type": "string", "description": "Ending location for the journey."}, "time_period": {"type": "string", "description": "Specify a time frame to estimate the traffic, 'now' for current, 'weekend' for the coming weekend."}}, "required": ["start_location", "end_location"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "calculate_distance", "description": "Calculate distance between two locations.", "parameters": {"type": "object", "properties": {"start_point": {"type": "string", "description": "Starting point of the journey."}, "end_point": {"type": "string", "description": "Ending point of the journey."}}, "required": ["start_point", "end_point"]}}], "human_eval_answer": "[\"traffic_estimate(start_location='San Francisco', end_location='Palo Alto', time_period='now')\", \"calculate_distance(start_point='San Francisco', end_point='Palo Alto')\", \"traffic_estimate(start_location='Palo Alto', end_location='Los Angeles', time_period='weekend')\", \"weather_forecast(location='Los Angeles', days=5)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me find a book? I'm not sure of the title, but I know it's a mystery novel. I'd like to search in the library in New York City first, then I'd like to check Google Books and Open Library. Can you assist with these searches?\"", "function": [{"name": "library.search_books", "description": "Search for a book in a given library with optional parameters", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Name or city of library"}, "genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book"}}, "required": ["location", "genre"]}}, {"name": "google.books_search", "description": "Search for a book in the Google Books library with optional parameters", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book"}}, "required": ["genre"]}}, {"name": "openlibrary.books_search", "description": "Search for a book in the Open Library with optional parameters", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book"}}, "required": ["genre"]}}], "human_eval_answer": "[\"library.search_books(location='New York City', genre='mystery')\", \"google.books_search(genre='mystery')\", \"openlibrary.books_search(genre='mystery')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please analyze my personality based on the five-factor model and the Myers-Briggs Type Indicator (MBTI)? For the five-factor model, consider that I am quite talkative, I don't get nervous easily, I have many artistic interests, I am not lazy, and I am quite forgiving. For the MBTI, my preferences are more towards feeling than thinking, I am more extroverted than introverted, I lean more towards perceiving than judging, and I prefer intuition over sensing.\"", "function": [{"name": "five_factor_model.analyse", "description": "Analyse personality based on the five-factor model, also known as the Big Five, which measures openness, conscientiousness, extraversion, agreeableness, and neuroticism.", "parameters": {"type": "object", "properties": {"talkative": {"type": "boolean", "description": "Indicates if the user is talkative."}, "nervous": {"type": "boolean", "description": "Indicates if the user gets nervous easily."}, "artistic_interests": {"type": "boolean", "description": "Indicates if the user has many artistic interests."}, "lazy": {"type": "boolean", "description": "Indicates if the user tends to be lazy."}, "forgiving": {"type": "boolean", "description": "Indicates if the user is forgiving."}}, "required": ["talkative", "nervous", "artistic_interests", "lazy", "forgiving"]}}, {"name": "MBTI.analyse", "description": "Analyse personality based on the Myers-Briggs Type Indicator (MBTI) which sorts for preferences and generates a 4-letter personality type.", "parameters": {"type": "object", "properties": {"thinking_vs_feeling": {"type": "string", "description": "Preference of user between thinking and feeling."}, "introverted_vs_extroverted": {"type": "string", "description": "Preference of user between introverted and extroverted."}, "judging_vs_perceiving": {"type": "string", "description": "Preference of user between judging and perceiving."}, "sensing_vs_intuition": {"type": "string", "description": "Preference of user between sensing and intuition."}}, "required": ["thinking_vs_feeling", "introverted_vs_extroverted", "judging_vs_perceiving", "sensing_vs_intuition"]}}], "human_eval_answer": "[\"five_factor_model.analyse(talkative=True, nervous=False, artistic_interests=True, lazy=False, forgiving=True)\", \"MBTI.analyse(thinking_vs_feeling='feeling', introverted_vs_extroverted='extroverted', judging_vs_perceiving='perceiving', sensing_vs_intuition='intuition')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me about the monarchs of France during the 17th century, major wars that took place in England during the 18th century, and the prominent art movements in Italy during the 19th century?\"", "function": [{"name": "european_history.get_monarchs", "description": "Provides a list of monarchs based on the specified country and century.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Country name."}, "century": {"type": "integer", "description": "Century as an integer. For example, for the 1700s, input '18'."}}, "required": ["country", "century"]}}, {"name": "european_history.get_events", "description": "Provides a list of major historical events based on the specified country and century.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Country name."}, "century": {"type": "integer", "description": "Century as an integer. For example, for the 1700s, input '18'."}, "event_type": {"type": "string", "description": "Type of the event such as 'war', 'invention', 'revolution' etc. This field is optional"}}, "required": ["country", "century"]}}, {"name": "european_history.get_culture", "description": "Provides information on cultural trends, art movements, philosophical ideas based on the specified country and century.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "Country name."}, "century": {"type": "integer", "description": "Century as an integer. For example, for the 1700s, input '18'."}, "aspect": {"type": "string", "description": "Aspect of culture such as 'literature', 'art', 'philosophy' etc. This field is optional"}}, "required": ["country", "century"]}}], "human_eval_answer": "[\"european_history.get_monarchs(country='France', century=17)\", \"european_history.get_events(country='England', century=18, event_type='war')\", \"european_history.get_culture(country='Italy', century=19, aspect='art')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"What was the population of California in 1980 and 1990 according to the 'us_history.population_by_state_year' function, and what was the Real GDP of California in those same years according to the 'us_economy.gdp_by_state_year' function with the adjustment set to 'Real'?\"", "function": [{"name": "us_history.population_by_state_year", "description": "Retrieve historical population data for a specific U.S. state and year.", "parameters": {"type": "object", "properties": {"state": {"type": "string", "description": "The U.S. state for which to retrieve the population."}, "year": {"type": "integer", "description": "The year for which to retrieve the population."}}, "required": ["state", "year"]}}, {"name": "us_economy.gdp_by_state_year", "description": "Retrieve historical GDP data for a specific U.S. state and year.", "parameters": {"type": "object", "properties": {"state": {"type": "string", "description": "The U.S. state for which to retrieve the GDP."}, "year": {"type": "integer", "description": "The year for which to retrieve the GDP."}, "adjustment": {"type": "string", "description": "The type of adjustment for inflation, 'Real' or 'Nominal'. Optional, 'Nominal' by default.", "enum": ["Real", "Nominal"]}}, "required": ["state", "year"]}}], "human_eval_answer": "[\"us_history.population_by_state_year(state='California', year=1980)\", \"us_history.population_by_state_year(state='California', year=1990)\", \"us_economy.gdp_by_state_year(state='California', year=1980, adjustment='Real')\", \"us_economy.gdp_by_state_year(state='California', year=1990, adjustment='Real')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please provide me with the origin and founder information of Buddhism, and then do the same for Hinduism? After that, could you also tell me about the core beliefs and practices of both these religions?\"", "function": [{"name": "religion.get_origin", "description": "Retrieves the origin and founder information of a specified religion.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the founder and origin."}}, "required": ["religion"]}}, {"name": "religion.get_core_beliefs", "description": "Retrieves the core beliefs and practices of a specified religion.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the core beliefs and practices."}}, "required": ["religion"]}}], "human_eval_answer": "[\"religion.get_origin(religion='Buddhism')\", \"religion.get_origin(religion='Hinduism')\", \"religion.get_core_beliefs(religion='Buddhism')\", \"religion.get_core_beliefs(religion='Hinduism')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me find the price of the artwork named 'Starry Night' by the artist 'Vincent Van Gogh' on the 'Sotheby' auction platform, and then fetch the price of another artwork called 'The Scream' by 'Edvard Munch' on the 'Christie' platform? After that, I would like to search for a book titled 'To Kill a Mockingbird' by the author 'Harper Lee' in the 'New York Public Library', and then look for another book named '1984' by 'George Orwell' in the 'British Library'.\"", "function": [{"name": "art_auction.fetch_artwork_price", "description": "Fetch the price of a specific artwork on the auction platform.", "parameters": {"type": "object", "properties": {"artwork_name": {"type": "string", "description": "The name of the artwork to be searched."}, "artist": {"type": "string", "description": "The artist's name to ensure the precise artwork is fetched."}, "platform": {"type": "string", "description": "The platform where the artwork's price should be fetched from.", "default": "all"}}, "required": ["artwork_name", "artist"]}}, {"name": "library.search_book", "description": "Search for a specific book in the library.", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "The title of the book to be searched."}, "author": {"type": "string", "description": "The author of the book to ensure the precise book is fetched."}, "platform": {"type": "string", "description": "The library where the book should be fetched from.", "default": "all"}}, "required": ["title", "author"]}}], "human_eval_answer": "[\"art_auction.fetch_artwork_price(artwork_name='Starry Night', artist='Vincent Van Gogh', platform='Sotheby')\", \"art_auction.fetch_artwork_price(artwork_name='The Scream', artist='Edvard Munch', platform='Christie')\", \"library.search_book(title='To Kill a Mockingbird', author='Harper Lee', platform='New York Public Library')\", \"library.search_book(title='1984', author='George Orwell', platform='British Library')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me with some information? I am planning to renovate my house and need to know the most popular paint color for the living room over the past month. Also, I am planning a trip to Seattle in the next 5 days, so I would like to know the weather forecast for that period. Lastly, I am considering moving to San Francisco, CA and would like to know the average house price there over the last quarter.\"", "function": [{"name": "paint_color.trends", "description": "Find the most popular paint color for a specific area in the home.", "parameters": {"type": "object", "properties": {"room": {"type": "string", "description": "Type of the room e.g. Living room, Bathroom etc."}, "period": {"type": "string", "enum": ["Daily", "Weekly", "Monthly"], "description": "The period over which to check the paint color trend."}}, "required": ["room"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "house_price_trends", "description": "Find the average house price in a specific area.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "City and state, e.g. New York, NY."}, "period": {"type": "string", "enum": ["Quarterly", "Yearly"], "description": "The period over which to check the price trend."}}, "required": ["location"]}}], "human_eval_answer": "[\"paint_color.trends(room='Living room', period='Monthly')\", \"weather_forecast(location='Seattle', days=5)\", \"house_price_trends(location='San Francisco, CA', period='Quarterly')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me order a custom sculpture of a horse made from Marble that is 20 inches in size, then another sculpture of a dog made from Wood that is 15 inches in size, followed by a custom painting of a sunset with the main color being Red that is 30 inches in size, and finally a painting of a cityscape with the main color being Blue that is 25 inches in size?\"", "function": [{"name": "sculpture.create_custom", "description": "Order a custom sculpture with your preferred material.", "parameters": {"type": "object", "properties": {"item": {"type": "string", "description": "The subject of the sculpture, e.g. horse"}, "material": {"type": "string", "enum": ["Bronze", "Marble", "Terracotta", "Wood", "Stone"], "description": "Preferred material for the sculpture."}, "size": {"type": "integer", "description": "The desired size for the sculpture in inches. This parameter is optional"}}, "required": ["item", "material"]}}, {"name": "painting.create_custom", "description": "Order a custom painting with your preferred color.", "parameters": {"type": "object", "properties": {"subject": {"type": "string", "description": "The subject of the painting, e.g. horse"}, "color": {"type": "string", "enum": ["Red", "Blue", "Green", "Yellow", "Black"], "description": "Preferred main color for the painting."}, "size": {"type": "integer", "description": "The desired size for the painting in inches. This parameter is optional"}}, "required": ["subject", "color"]}}], "human_eval_answer": "[\"sculpture.create_custom(item='horse', material='Marble', size=20)\", \"sculpture.create_custom(item='dog', material='Wood', size=15)\", \"painting.create_custom(subject='sunset', color='Red', size=30)\", \"painting.create_custom(subject='cityscape', color='Blue', size=25)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan my trip to New York? I would like to visit a modern art installation, a park with a playground and a picnic area, and a popular monument. Could you find these for me?\"", "function": [{"name": "artwork_search.find", "description": "Search for artworks based on type and location.", "parameters": {"type": "object", "properties": {"type": {"type": "string", "description": "Type of the artwork. E.g., painting, sculpture, installation."}, "location": {"type": "string", "description": "Location or city where the artwork is."}, "era": {"type": "string", "description": "Time period of the artwork, can be 'contemporary', 'modern', 'renaissance', etc.", "optional": "True"}}, "required": ["type", "location"]}}, {"name": "tourist_attraction.find", "description": "Search for tourist attractions based on type and location.", "parameters": {"type": "object", "properties": {"attractionType": {"type": "string", "description": "Type of the attraction. E.g., monument, museum, park."}, "location": {"type": "string", "description": "Location or city where the attraction is."}}, "required": ["attractionType", "location"]}}, {"name": "park_search.find", "description": "Search for parks based on facilities and location.", "parameters": {"type": "object", "properties": {"facilities": {"type": "array", "items": {"type": "string"}, "description": "List of facilities in the park."}, "location": {"type": "string", "description": "Location or city where the park is."}}, "required": ["facilities", "location"]}}], "human_eval_answer": "[\"artwork_search.find(type='installation', location='New York', era='modern')\", \"park_search.find(facilities=['playground', 'picnic area'], location='New York')\", \"tourist_attraction.find(attractionType='monument', location='New York')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you provide me with the exhibition information for the Louvre museum for the next 3 months and then tell me about the best Italian and Chinese restaurants in the area of Paris?\"", "function": [{"name": "exhibition_info", "description": "Get exhibition information for a specific museum.", "parameters": {"type": "object", "properties": {"museum_name": {"type": "string", "description": "Name of the museum for which to find exhibitions."}, "month": {"type": "integer", "description": "Number of upcoming months for which to retrieve exhibition details."}}, "required": ["museum_name"]}}, {"name": "restaurant_info", "description": "Get restaurant information for a specific area.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location for which to find restaurants."}, "food_type": {"type": "string", "description": "Type of cuisine for which to find restaurants.", "enum": ["Italian", "Chinese", "Mexican", "American"]}}, "required": ["location"]}}], "human_eval_answer": "[\"exhibition_info(museum_name='Louvre', month=3)\", \"restaurant_info(location='Paris', food_type='Italian')\", \"restaurant_info(location='Paris', food_type='Chinese')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me book a ticket for a concert of Taylor Swift in New York with a VIP Seating add-on, then book another ticket for a concert of Ed Sheeran in Los Angeles with a Backstage Pass and Parking Pass add-ons, and finally book a ticket for the Coachella festival in Indio with a Camping Pass and Parking Pass add-ons?\"", "function": [{"name": "concert.book_ticket", "description": "Book a ticket for a concert at a specific location with various add-ons like backstage pass.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "Name of the artist for the concert."}, "location": {"type": "string", "description": "City where the concert will take place."}, "add_ons": {"type": "array", "items": {"type": "string", "enum": ["Backstage Pass", "VIP Seating", "Parking Pass"]}, "description": "Add-ons for the concert."}}, "required": ["artist", "location"]}}, {"name": "festival.book_ticket", "description": "Book a ticket for a festival at a specific location with various add-ons like camping access.", "parameters": {"type": "object", "properties": {"festival": {"type": "string", "description": "Name of the festival."}, "location": {"type": "string", "description": "City where the festival will take place."}, "add_ons": {"type": "array", "items": {"type": "string", "enum": ["Camping Pass", "VIP Seating", "Parking Pass"]}, "description": "Add-ons for the festival."}}, "required": ["festival", "location"]}}], "human_eval_answer": "[\"concert.book_ticket(artist='Taylor Swift', location='New York', add_ons=['VIP Seating'])\", \"concert.book_ticket(artist='Ed Sheeran', location='Los Angeles', add_ons=['Backstage Pass', 'Parking Pass'])\", \"festival.book_ticket(festival='Coachella', location='Indio', add_ons=['Camping Pass', 'Parking Pass'])\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me create a piece of music in D Minor with a tempo of 120 beats per minute and then generate an audio signal with a frequency of 440 Hz and an amplitude of 0.5? After that, I would like to generate another piece of music in E Major with a tempo of 90 beats per minute and a time signature of 3/4. Finally, generate another audio signal with a frequency of 300 Hz, an amplitude of 0.7, and a duration of 5 seconds.\"", "function": [{"name": "music.generate", "description": "Generate a piece of music given a key, tempo, and time signature.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key of the piece, e.g., C Major."}, "tempo": {"type": "integer", "description": "Tempo of the piece in beats per minute."}, "time_signature": {"type": "string", "description": "Time signature of the piece, e.g., 4/4.", "optional": true}}, "required": ["key", "tempo"]}}, {"name": "audio.generate", "description": "Generate an audio signal given a frequency, amplitude, and duration.", "parameters": {"type": "object", "properties": {"frequency": {"type": "number", "description": "Frequency of the audio signal in Hz."}, "amplitude": {"type": "number", "description": "Amplitude of the audio signal."}, "duration": {"type": "number", "description": "Duration of the audio signal in seconds.", "optional": true}}, "required": ["frequency", "amplitude"]}}], "human_eval_answer": "[\"music.generate(key='D Minor', tempo=120)\", \"audio.generate(frequency=440, amplitude=0.5)\", \"music.generate(key='E Major', tempo=90, time_signature='0.75')\", \"audio.generate(frequency=300, amplitude=0.7, duration=5)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me how many all-time goals Cristiano Ronaldo scored for Manchester United in the Premier League, then compare that with the top scorer of Manchester United in the same competition, and finally, tell me who was the top scorer of the Premier League in the 2019-2020 season?\"", "function": [{"name": "player_stats.get_all_time_goals", "description": "Fetch all-time goals scored by a particular football player for a specified team.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The name of the football player."}, "team_name": {"type": "string", "description": "The name of the team for which player has played."}, "competition": {"type": "string", "description": "Competition for which to fetch stats (optional)."}}, "required": ["player_name", "team_name"]}}, {"name": "team_stats.get_top_scorer", "description": "Fetch the top scorer of a specified football team.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the football team."}, "competition": {"type": "string", "description": "Competition for which to fetch stats (optional)."}}, "required": ["team_name"]}}, {"name": "league_stats.get_top_scorer", "description": "Fetch the top scorer of a specified football league.", "parameters": {"type": "object", "properties": {"league_name": {"type": "string", "description": "The name of the football league."}, "season": {"type": "string", "description": "Season for which to fetch stats (optional)."}}, "required": ["league_name"]}}], "human_eval_answer": "[\"player_stats.get_all_time_goals(player_name='Cristiano Ronaldo', team_name='Manchester United', competition='Premier League')\", \"team_stats.get_top_scorer(team_name='Manchester United', competition='Premier League')\", \"league_stats.get_top_scorer(league_name='Premier League', season='2019-2020')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me the scores for the Manchester United soccer team in the English Premier League for the last 5 rounds and also the scores for the Los Angeles Lakers basketball team in the NBA for the last 7 rounds?\"", "function": [{"name": "soccer_scores.get_scores", "description": "Retrieve soccer scores for a specific team and league within a certain range of rounds.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The soccer team whose scores are to be retrieved."}, "league": {"type": "string", "description": "The league in which the team competes."}, "rounds": {"type": "integer", "description": "Number of past rounds for which to retrieve the scores."}}, "required": ["team", "league", "rounds"]}}, {"name": "basketball_scores.get_scores", "description": "Retrieve basketball scores for a specific team and league within a certain range of rounds.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The basketball team whose scores are to be retrieved."}, "league": {"type": "string", "description": "The league in which the team competes."}, "rounds": {"type": "integer", "description": "Number of past rounds for which to retrieve the scores."}}, "required": ["team", "league", "rounds"]}}], "human_eval_answer": "[\"soccer_scores.get_scores(team='Manchester United', league='English Premier League', rounds=5)\", \"basketball_scores.get_scores(team='Los Angeles Lakers', league='NBA', rounds=7)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"I'm planning a game night and I need some board game recommendations. I have a group of 5 friends coming over, so we'll be 6 players in total. We all enjoy strategy games but we're all beginners, so nothing too complex. Can you recommend some games from BoardGameGeek that fit this criteria? Also, I have another group of 4 friends who love party games. We're not beginners but we're not advanced players either, so something in the middle would be great. Can you recommend some games from BoardGameGeek for this group as well? Lastly, I'm also considering buying some games from Amazon Game Store. I have a budget of $20-$30. Can you recommend some strategy games for 6 players and party games for 4 players within this price range?\"", "function": [{"name": "BoardGameGeek.recommend", "description": "Generate game recommendation from BoardGameGeek store based on number of players and category.", "parameters": {"type": "object", "properties": {"numPlayers": {"type": "integer", "description": "The number of players who will play the game."}, "category": {"type": "string", "description": "The preferred category of board game. E.g. strategy, family, party etc."}, "difficulty": {"type": "string", "description": "Preferred difficulty level. E.g. beginner, intermediate, advanced etc. This is an optional parameter."}}, "required": ["numPlayers", "category"]}}, {"name": "AmazonGameStore.recommend", "description": "Generate game recommendation from Amazon Game Store based on number of players and category.", "parameters": {"type": "object", "properties": {"numOfPlayers": {"type": "integer", "description": "The number of players who will play the game."}, "category": {"type": "string", "description": "The preferred category of board game. E.g. strategy, family, party etc."}, "priceRange": {"type": "string", "description": "The price range you are willing to pay for the board game. E.g. $10-$20, $20-$30 etc. This is an optional parameter."}}, "required": ["numOfPlayers", "category"]}}], "human_eval_answer": "[\"BoardGameGeek.recommend(numPlayers=6, category='strategy', difficulty='beginner')\", \"BoardGameGeek.recommend(numPlayers=4, category='party', difficulty='intermediate')\", \"AmazonGameStore.recommend(numOfPlayers=6, category='strategy', priceRange='$20-$30')\", \"AmazonGameStore.recommend(numOfPlayers=4, category='party', priceRange='$20-$30')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please find the latest updates for the game 'Call of Duty' on the 'Playstation' platform for the 'European' region, then find the current price for the same game on the 'Xbox' platform, and finally find reviews for the game 'FIFA 21' from the 'American' region?\"", "function": [{"name": "games.update.find", "description": "Find the latest updates or patches for a specific game on a specified gaming platform.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform, e.g. Xbox, Playstation, PC."}, "region": {"type": "string", "description": "The region of the update (optional, default is 'global')"}}, "required": ["game", "platform"]}}, {"name": "games.price.find", "description": "Find the current price for a specific game on a specified gaming platform.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform, e.g. Xbox, Playstation, PC."}}, "required": ["game", "platform"]}}, {"name": "games.reviews.find", "description": "Find reviews for a specific game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game."}, "region": {"type": "string", "description": "The region where the reviews are coming from (optional, default is 'global')"}}, "required": ["game"]}}], "human_eval_answer": "[\"games.update.find(game='Call of Duty', platform='Playstation', region='European')\", \"games.price.find(game='Call of Duty', platform='Xbox')\", \"games.reviews.find(game='FIFA 21', region='American')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me how many active players were engaged with the video game 'Call of Duty: Modern Warfare' in the year 2019 on the 'Playstation' platform, and then compare that with the number of active players for the same game in the year 2020 on the 'PC' platform? Also, could you provide the sales figures for 'Call of Duty: Modern Warfare' for the year 2019 on the 'Playstation' platform and then for the year 2020 on the 'PC' platform?\"", "function": [{"name": "video_games.get_player_count", "description": "Retrieves the number of active players for a specified video game and year.", "parameters": {"type": "object", "properties": {"game_title": {"type": "string", "description": "The title of the video game."}, "year": {"type": "integer", "description": "The year in question."}, "platform": {"type": "string", "optional": true, "description": "The gaming platform (e.g. 'PC', 'Xbox', 'Playstation')."}}, "required": ["game_title", "year"]}}, {"name": "video_games.get_sales", "description": "Retrieves the sales figures for a specified video game and year.", "parameters": {"type": "object", "properties": {"game_title": {"type": "string", "description": "The title of the video game."}, "year": {"type": "integer", "description": "The year in question."}, "platform": {"type": "string", "optional": true, "description": "The gaming platform (e.g. 'PC', 'Xbox', 'Playstation')."}}, "required": ["game_title", "year"]}}], "human_eval_answer": "[\"video_games.get_player_count(game_title='Call of Duty: Modern Warfare', year=2019, platform='Playstation')\", \"video_games.get_player_count(game_title='Call of Duty: Modern Warfare', year=2020, platform='PC')\", \"video_games.get_sales(game_title='Call of Duty: Modern Warfare', year=2019, platform='Playstation')\", \"video_games.get_sales(game_title='Call of Duty: Modern Warfare', year=2020, platform='PC')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan my meals for the day? I want to start with a breakfast recipe using eggs, milk, and bread, and it should not exceed 300 calories. Then, for lunch, I want to try a new restaurant that serves dishes with chicken, tomatoes, and lettuce, and the dishes should not be more than 500 calories. In the evening, I have a recipe for dinner that uses beef, but I want to replace the beef with tofu and keep the total calories under 600. Can you assist me with these?\"", "function": [{"name": "recipe_search", "description": "Searches for recipes based on a list of ingredients and a maximum caloric value.", "parameters": {"type": "object", "properties": {"ingredients": {"type": "array", "items": {"type": "string"}, "description": "A list of ingredients you want to use in the recipe."}, "calories": {"type": "number", "description": "The maximum number of calories for the recipe."}, "meal": {"type": "string", "description": "Type of the meal for the recipe, it's optional and could be breakfast, lunch or dinner."}}, "required": ["ingredients", "calories"]}}, {"name": "restaurant_search", "description": "Searches for restaurants based on a list of preferred ingredients and maximum calorie count.", "parameters": {"type": "object", "properties": {"ingredients": {"type": "array", "items": {"type": "string"}, "description": "A list of ingredients you prefer in the restaurant's dishes."}, "calories": {"type": "number", "description": "The maximum calorie count you prefer for the restaurant's dishes."}, "meal": {"type": "string", "description": "Type of the meal for the restaurant's dishes, it's optional and could be breakfast, lunch or dinner."}}, "required": ["ingredients", "calories"]}}, {"name": "ingredient_replace", "description": "Replaces an ingredient in a recipe with a substitute, keeping the calories below a certain number.", "parameters": {"type": "object", "properties": {"original_ingredient": {"type": "string", "description": "The ingredient in the recipe to replace."}, "replacement_ingredient": {"type": "string", "description": "The substitute ingredient to replace the original one."}, "calories": {"type": "number", "description": "The maximum number of calories for the recipe after replacement."}}, "required": ["original_ingredient", "replacement_ingredient", "calories"]}}], "human_eval_answer": "[\"recipe_search({'ingredients': ['eggs', 'milk', 'bread'], 'calories': 300, 'meal': 'breakfast'})\", \"restaurant_search({'ingredients': ['chicken', 'tomatoes', 'lettuce'], 'calories': 500, 'meal': 'lunch'})\", \"ingredient_replace({'original_ingredient': 'beef', 'replacement_ingredient': 'tofu', 'calories': 600})\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan a day out in Seattle, WA for my group of 10 friends? We are food lovers and would like to try some Seafood and Italian cuisine for lunch. Later in the evening, we are interested in attending a Concert or a Sports event. Could you find suitable restaurants and events for us?\"", "function": [{"name": "restaurant.find_group", "description": "Find restaurants suitable for groups based on specified criteria such as location and cuisine.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "array", "items": {"type": "string", "enum": ["Seafood", "Italian", "Indian", "Chinese"]}, "description": "Preferred cuisine at the restaurant."}, "group_size": {"type": "integer", "description": "Size of the group that the restaurant should accommodate."}}, "required": ["location", "group_size"]}}, {"name": "events.find_event", "description": "Find events suitable for groups based on specified criteria such as location and event type.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["Concert", "Sports", "Exhibition", "Festival"]}, "description": "Type of event."}, "group_size": {"type": "integer", "description": "Size of the group that the event should accommodate."}}, "required": ["location", "group_size"]}}], "human_eval_answer": "[\"restaurant.find_group(location='Seattle, WA', cuisine=['Seafood', 'Italian'], group_size=10)\", \"events.find_event(location='Seattle, WA', event_type=['Concert', 'Sports'], group_size=10)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me find a recipe that uses chicken as the main ingredient and doesn't require more than 5 ingredients? After that, could you also find a restaurant that serves Italian cuisine and falls within a mid-range price? And finally, could you find another recipe that uses beef as the main ingredient and requires no more than 7 ingredients?\"", "function": [{"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "object", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}, {"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "object", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']."}}, "required": ["cuisine"]}}], "human_eval_answer": "[\"recipe.find(mainIngredient='chicken', ingredientLimit=5)\", \"restaurant.find(cuisine='Italian', price=['mid'])\", \"recipe.find(mainIngredient='beef', ingredientLimit=7)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan my trip? I need to book a hotel room in Paris for 5 nights. I prefer a deluxe room and would like to add breakfast and spa services. After that, I need to rent a car in Paris for 7 days. I prefer a SUV and I will pick it up from the airport. Then, I need to book another hotel room in Rome for 3 nights. I prefer a suite and would like to add airport transfer service. Lastly, I need to rent a car in Rome for 5 days. I prefer a compact car and I will pick it up from the hotel.\"", "function": [{"name": "hotel.book", "description": "Book a hotel room given the location, room type, and number of nights and additional services", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of the hotel."}, "roomType": {"type": "string", "description": "Type of the room to be booked."}, "nights": {"type": "integer", "description": "Number of nights to book the room for."}, "additional_services": {"type": "array", "items": {"type": "string", "description": "Additonal services that can be booked."}, "description": "Additional services to be added."}}, "required": ["location", "roomType", "nights"]}}, {"name": "car.rental", "description": "Rent a car at the specified location for a specific number of days", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of the car rental."}, "days": {"type": "integer", "description": "Number of days for which to rent the car."}, "car_type": {"type": "string", "description": "Type of the car to rent."}, "pick_up": {"type": "string", "description": "Location of where to pick up the car."}}, "required": ["location", "days", "car_type"]}}], "human_eval_answer": "[\"hotel.book(location='Paris', roomType='deluxe', nights=5, additional_services=['breakfast', 'spa services'])\", \"car.rental(location='Paris', days=7, car_type='SUV', pick_up='airport')\", \"hotel.book(location='Rome', roomType='suite', nights=3, additional_services=['airport transfer service'])\", \"car.rental(location='Rome', days=5, car_type='compact', pick_up='hotel')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me plan my vacation? I need to know the total cost. First, I'm considering staying at the Hilton New York for 5 nights in a deluxe room. Could you tell me how much that would cost? Second, I'm thinking of renting a sedan from Enterprise for 10 days. How much would that be? Lastly, I'm planning to fly with Delta Airlines in business class. There will be 3 of us. Can you tell me the total flight cost?\"", "function": [{"name": "hotel_room_pricing.get", "description": "Get pricing for a specific type of hotel room for specified number of nights.", "parameters": {"type": "object", "properties": {"hotelName": {"type": "string", "description": "The name of the hotel e.g. Hilton New York"}, "roomType": {"type": "string", "description": "Type of the room to be booked."}, "nights": {"type": "integer", "description": "Number of nights to book the room for."}}, "required": ["hotelName", "roomType", "nights"]}}, {"name": "car_rental_pricing.get", "description": "Get pricing for a specific type of rental car for a specified number of days.", "parameters": {"type": "object", "properties": {"rentalCompany": {"type": "string", "description": "The name of the rental company."}, "carType": {"type": "string", "description": "Type of the car to be rented."}, "days": {"type": "integer", "description": "Number of days to rent the car."}}, "required": ["rentalCompany", "carType", "days"]}}, {"name": "flight_ticket_pricing.get", "description": "Get pricing for a specific type of flight ticket for specified number of passengers.", "parameters": {"type": "object", "properties": {"airline": {"type": "string", "description": "The name of the airline."}, "flightClass": {"type": "string", "description": "Class of the flight."}, "passengers": {"type": "integer", "description": "Number of passengers."}}, "required": ["airline", "flightClass", "passengers"]}}], "human_eval_answer": "[\"hotel_room_pricing.get(hotelName='Hilton New York', roomType='deluxe', nights=5)\", \"car_rental_pricing.get(rentalCompany='Enterprise', carType='sedan', days=10)\", \"flight_ticket_pricing.get(airline='Delta Airlines', flightClass='business', passengers=3)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a couple of conversions? First, I have 5000 Euros that I want to convert into US Dollars using the latest exchange rate. Then, I have another 3000 Euros that I want to convert into British Pounds, but this time, I want to use the last known exchange rate. After that, I have a distance of 100 kilometers that I want to convert into miles. Lastly, I have a weight of 75 kilograms that I want to convert into pounds. Can you do these conversions for me?\"", "function": [{"name": "currency_exchange.convert", "description": "Converts a value from one currency to another using the latest exchange rate.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}, "live_conversion": {"type": "boolean", "description": "If true, use the latest exchange rate for conversion, else use the last known rate."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "unit_conversion.convert", "description": "Converts a value from one unit to another.", "parameters": {"type": "object", "properties": {"value": {"type": "number", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}}, "required": ["value", "from_unit", "to_unit"]}}], "human_eval_answer": "[\"currency_exchange.convert(amount=5000, from_currency='Euros', to_currency='US Dollars', live_conversion=True)\", \"currency_exchange.convert(amount=3000, from_currency='Euros', to_currency='British Pounds', live_conversion=False)\", \"unit_conversion.convert(value=100, from_unit='kilometers', to_unit='miles')\", \"unit_conversion.convert(value=75, from_unit='kilograms', to_unit='pounds')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with the following tasks? First, I want to know the future value of my investment in the stock with the ticker symbol 'AAPL'. I have invested $5000 in it and I am expecting an annual return of 7% (0.07). I plan to hold this investment for 10 years. Second, I am interested in getting detailed information about the company 'Microsoft'. I want this information from the 'NASDAQ' stock market. Lastly, I have a quadratic equation with coefficients a=5, b=-20, and c=15. Could you solve this equation for me and provide the roots?\"", "function": [{"name": "portfolio_future_value", "description": "Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.", "parameters": {"type": "object", "properties": {"stock": {"type": "string", "description": "The ticker symbol of the stock."}, "invested_amount": {"type": "number", "description": "The invested amount in USD."}, "expected_annual_return": {"type": "number", "description": "The expected annual return on investment as a decimal. E.g. 5% = 0.05"}, "years": {"type": "integer", "description": "The number of years for which the investment is made."}}, "required": ["stock", "invested_amount", "expected_annual_return", "years"]}}, {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}, {"name": "solve_quadratic_equation", "api_call": "root = solve_quadratic_equation(a, b, c)", "description": "Function solves the quadratic equation and returns its roots.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of x squared"}, "b": {"type": "number", "description": "Coefficient of x"}, "c": {"type": "number", "description": "Constant term in the quadratic equation"}}, "required": ["a", "b", "c"]}}], "human_eval_answer": "[\"portfolio_future_value(stock='AAPL', invested_amount=5000, expected_annual_return=0.07, years=10)\", \"get_stock_info(company_name='Microsoft', detail_level='detailed', market='NASDAQ')\", \"solve_quadratic_equation(a=5, b=-20, c=15)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me with a couple of calculations? First, I have a circle with a radius of 5.6 feet and I need to know its area. Second, I'm working on a project where I need to plot a sine wave. The range I'm interested in is from 0 to 3.14 radians. The frequency of the wave should be 2 Hz. Also, I want the amplitude of the wave to be 1.5 and the phase shift to be 0.5 radians. Could you calculate the area and plot the sine wave for me?\"", "function": [{"name": "geometry.area_circle", "description": "Calculate the area of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "units": {"type": "string", "description": "The units in which the radius is measured (defaults to meters).", "default": "meters"}}, "required": ["radius"]}}, {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "object", "properties": {"start_range": {"type": "number", "description": "Start of the range in radians."}, "end_range": {"type": "number", "description": "End of the range in radians."}, "frequency": {"type": "number", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "number", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "number", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}], "human_eval_answer": "[\"geometry.area_circle(radius=5.6, units='feet')\", \"plot_sine_wave(start_range=0, end_range=3.14, frequency=2, amplitude=1.5, phase_shift=0.5)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you first calculate the derivative of the function '3x^2 + 2x - 1' at the value of 2 where 'x' is the function variable, then calculate the derivative of the function '5y^3 - 4y + 2' at the value of 3 where 'y' is the function variable, and finally retrieve the strengths and weaknesses of the personality type 'INTJ'?\"", "function": [{"name": "calculus.derivative", "description": "Compute the derivative of a function at a specific value.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "value": {"type": "integer", "description": "The value where the derivative needs to be calculated at."}, "function_variable": {"type": "string", "description": "The variable present in the function, for instance x or y, etc."}}, "required": ["function", "value"]}}, {"name": "get_personality_traits", "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.", "parameters": {"type": "object", "properties": {"type": {"type": "string", "description": "The personality type."}, "traits": {"type": "array", "items": {"type": "string", "enum": ["strengths", "weaknesses"]}, "description": "List of traits to be retrieved, default is ['strengths', 'weaknesses']."}}, "required": ["type"]}}], "human_eval_answer": "[\"calculus.derivative(function='3x^2 + 2x - 1', value=2, function_variable='x')\", \"calculus.derivative(function='5y^3 - 4y + 2', value=3, function_variable='y')\", \"get_personality_traits(type='INTJ', traits=['strengths', 'weaknesses'])\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a music producer and you are working on a new song. You want to generate a music scale progression in the key of 'D' with a tempo of 120 BPM, where each note lasts for 2 beats. You are considering using a 'minor' scale type for this progression. After creating this, you decide to take a break and solve a math problem. You want to find the highest common factor of the numbers 456 and 123. Can you generate the music scale progression and solve the math problem?\"", "function": [{"name": "music_generator.generate_scale_progression", "description": "Generate a music scale progression in a specific key with a given tempo and duration.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key in which to generate the scale progression."}, "tempo": {"type": "integer", "description": "The tempo of the scale progression in BPM."}, "duration": {"type": "integer", "description": "The duration of each note in beats."}, "scale_type": {"type": "string", "default": "major", "description": "The type of scale to generate. Defaults to 'major'."}}, "required": ["key", "tempo", "duration"]}}, {"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "object", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}], "human_eval_answer": "[\"music_generator.generate_scale_progression(key='D', tempo=120, duration=2, scale_type='minor')\", \"math.hcf(number1=456, number2=123)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me with two tasks? First, I'm interested in the field of constitutional law in the United Kingdom and I would like to know the top 5 landmark cases in this field. Second, I have two numbers, 36 and 48, and I need to find out their greatest common divisor. Can you assist with these?\"", "function": [{"name": "get_top_cases", "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.", "parameters": {"type": "object", "properties": {"field_of_law": {"type": "string", "description": "The specific field of law e.g., constitutional law, criminal law, etc."}, "top_number": {"type": "integer", "description": "The number of top cases to retrieve."}, "country": {"type": "string", "description": "The country where the law cases should be retrieved from. Default is US."}}, "required": ["field_of_law", "top_number"]}}, {"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}], "human_eval_answer": "[\"get_top_cases(field_of_law='constitutional law', top_number=5, country='United Kingdom')\", \"math.gcd(num1=36, num2=48)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you're a musician who also loves to play poker with friends. One day, you decided to host a poker game at your house. You invited three friends named John, Sarah, and Mike. In the game of Texas Holdem, John had the cards 2 of hearts, 3 of diamonds, 4 of spades, 5 of clubs, and 6 of diamonds. Sarah had the cards 3 of hearts, 4 of diamonds, 5 of spades, 6 of clubs, and 7 of diamonds. Mike had the cards 4 of hearts, 5 of diamonds, 6 of spades, 7 of clubs, and 8 of diamonds. Who won the game? \n\nAfter the game, you all decided to play some music. You picked up your guitar and started to play a song in the key of C. However, you forgot the notes in the C major scale. Could you tell me what they are? \n\nLater, you decided to do a physics experiment. You launched a small object with an initial velocity of 10 m/s. After 5 seconds, you noticed that the object had stopped accelerating. How far did the object travel during this time?\"", "function": [{"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}, {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "object", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "object", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "time": {"type": "number", "description": "The time in seconds that the object has been in motion."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2.", "default": 0}}, "required": ["initial_velocity", "time"]}}], "human_eval_answer": "[\"poker_game_winner(players=['John', 'Sarah', 'Mike'], cards={'John': ['2 of hearts', '3 of diamonds', '4 of spades', '5 of clubs', '6 of diamonds'], 'Sarah': ['3 of hearts', '4 of diamonds', '5 of spades', '6 of clubs', '7 of diamonds'], 'Mike': ['4 of hearts', '5 of diamonds', '6 of spades', '7 of clubs', '8 of diamonds']})\", \"musical_scale(key='C')\", \"calculate_displacement(initial_velocity=10, time=5)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a few things? First, I'm interested in a court case with the docket number 12345 that was registered in Dallas, TX. Could you retrieve the details about this case for me? I don't need the full text of the case ruling. Second, I'm curious about the current classical chess rating of a player named Magnus Carlsen. Could you fetch that for me? Third, I'm trying to remember the date of the historical event known as the Battle of Gettysburg. Do you know when that took place? Lastly, I'm working on a physics problem and need to calculate the final speed of an object. The object was dropped from a height of 100 meters with an initial velocity of 0 m/s. The gravitational acceleration is 9.8 m/s^2. Can you help me calculate the final speed?\"", "function": [{"name": "court_case.search", "description": "Retrieves details about a court case using its docket number and location.", "parameters": {"type": "object", "properties": {"docket_number": {"type": "string", "description": "The docket number for the case."}, "location": {"type": "string", "description": "The location where the case is registered, in the format: city, state, e.g., Dallas, TX."}, "full_text": {"type": "boolean", "default": "false", "description": "Option to return the full text of the case ruling."}}, "required": ["docket_number", "location"]}}, {"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Defaults to global if not specified"}}, "required": ["event"]}}, {"name": "calculate_final_speed", "description": "Calculate the final speed of an object dropped from a certain height without air resistance.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "height": {"type": "number", "description": "The height from which the object is dropped."}, "gravity": {"type": "number", "description": "The gravitational acceleration. Default is 9.8 m/s^2."}}, "required": ["initial_velocity", "height"]}}], "human_eval_answer": "[\"court_case.search(docket_number='12345', location='Dallas, TX', full_text=false)\", \"chess.rating(player_name='Magnus Carlsen', variant='classical')\", \"get_event_date(event='Battle of Gettysburg')\", \"calculate_final_speed(initial_velocity=0, height=100, gravity=9.8)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me the function of the molecule ATP in the organelle mitochondria with a specific function, then calculate the shortest driving distance from New York to Los Angeles in miles, after that, can you tell me who is credited for the discovery of the theory of relativity, and finally, can you tell me the current retail price of a Fender Stratocaster in sunburst finish?\"", "function": [{"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "object", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}, {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "Starting point of the journey."}, "destination": {"type": "string", "description": "End point of the journey."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is kilometers)."}}, "required": ["origin", "destination"]}}, {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}, {"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "object", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}], "human_eval_answer": "[\"cell_biology.function_lookup(molecule='ATP', organelle='mitochondria', specific_function=True)\", \"get_shortest_driving_distance(origin='New York', destination='Los Angeles', unit='miles')\", \"get_scientist_for_discovery(discovery='theory of relativity')\", \"instrument_price.get(brand='Fender', model='Stratocaster', finish='sunburst')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a few tasks? Firstly, I am working on a physics experiment and I need to calculate the magnetic field at the center of a circular loop. The loop carries a current of 5 Amperes and has a radius of 0.02 meters. Secondly, I am planning to attend a concert of my favorite artist, Taylor Swift, in New York. I need to book 3 tickets for the concert. Lastly, I am doing a research on Apple Inc. and I need to find the details of lawsuits involving Apple from the year 2010. Specifically, I am interested in lawsuits related to 'Patent' issues. Could you assist me with these?\"", "function": [{"name": "calculate_magnetic_field", "description": "Calculate the magnetic field produced at the center of a circular loop carrying current.", "parameters": {"type": "object", "properties": {"current": {"type": "number", "description": "The current through the circular loop in Amperes."}, "radius": {"type": "number", "description": "The radius of the circular loop in meters."}, "permeability": {"type": "number", "description": "The magnetic permeability. Default is permeability in free space."}}, "required": ["current", "radius"]}}, {"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}, {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter."}}, "required": ["company_name", "year"]}}], "human_eval_answer": "[\"calculate_magnetic_field(current=5, radius=0.02)\", \"concert_booking.book_ticket(artist='Taylor Swift', city='New York', num_tickets=3)\", \"lawsuit_details.find(company_name='Apple Inc.', year=2010, case_type='Patent')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a teacher preparing for a science and art themed day at school. You have planned a series of activities for your students. First, you want to divide your class of 30 students into smaller groups for a group dynamics activity. You know that 15 of your students are extroverts and 15 are introverts. Can you analyze the social dynamics and interactions within these groups based on these personality traits and group size? \n\nNext, you plan an art activity where students will mix two primary paint colors. You have chosen blue and yellow for this activity. Can you predict the resulting color if the lightness level is adjusted to 70%? \n\nThen, you plan a cooking activity where students will convert cooking measurements. You have a recipe that calls for 2 cups of flour, but your measuring cup is in milliliters. Can you convert this measurement from cups to milliliters for flour? \n\nFinally, you plan a physics experiment where students will calculate the electric field strength at a certain distance from a point charge. You have a charge of 0.000001 Coulombs and want to calculate the electric field strength 0.02 meters away from the charge in a vacuum. Can you calculate this for me?\"", "function": [{"name": "group_dynamics.pattern", "description": "Examine the social dynamics and interactions within a group based on the personality traits and group size.", "parameters": {"type": "object", "properties": {"total": {"type": "integer", "description": "The total group size."}, "extroverts": {"type": "integer", "description": "The number of extroverted members in the group."}, "introverts": {"type": "integer", "description": "The number of introverted members in the group."}}, "required": ["total", "extroverts", "introverts"]}}, {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "object", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}, {"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "object", "properties": {"quantity": {"type": "number", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}, {"name": "calculate_electric_field_strength", "description": "Calculate the electric field strength at a certain distance from a point charge.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge in Coulombs."}, "distance": {"type": "number", "description": "The distance from the charge in meters."}, "medium": {"type": "string", "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."}}, "required": ["charge", "distance"]}}], "human_eval_answer": "[\"group_dynamics.pattern(total=30, extroverts=15, introverts=15)\", \"mix_paint_color(color1='blue', color2='yellow', lightness=70)\", \"cooking_conversion.convert(quantity=2, from_unit='cups', to_unit='milliliters', item='flour')\", \"calculate_electric_field_strength(charge=0.000001, distance=0.02, medium='vacuum')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a scientist working in a lab. You have a substance with a mass of 10 kilograms and a volume of 2 cubic meters. You want to calculate the density of this substance in kg/m\u00b3. After your experiment, you want to relax by doing some painting. You decide to mix two primary colors, red and blue. However, you want the resulting color to have a lightness level of 70%. Later, you have another substance with a mass of 5 kilograms and a volume of 1 cubic meter. You want to calculate the density of this substance as well, but this time in g/cm\u00b3. Finally, you decide to mix another set of primary colors, yellow and blue, but you want the resulting color to have a lightness level of 30%. Can you calculate the densities and mix the paint colors accordingly?\"", "function": [{"name": "calculate_density", "description": "Calculate the density of a substance based on its mass and volume.", "parameters": {"type": "object", "properties": {"mass": {"type": "number", "description": "The mass of the substance in kilograms."}, "volume": {"type": "number", "description": "The volume of the substance in cubic meters."}, "unit": {"type": "string", "description": "The unit of density. Default is kg/m\u00b3"}}, "required": ["mass", "volume"]}}, {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "object", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}], "human_eval_answer": "[\"calculate_density(mass=10, volume=2, unit='kg/m\\u00b3')\", \"mix_paint_color(color1='red', color2='blue', lightness=70)\", \"calculate_density(mass=5, volume=1, unit='g/cm\\u00b3')\", \"mix_paint_color(color1='yellow', color2='blue', lightness=30)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a few things? First, I'm studying genetics and I came across a SNP mutation with the ID 'rs123456'. I'm not sure what type of mutation it is. Could you find out for me? The species is 'Homo sapiens'. Second, I'm planning to visit New York, NY next month and I'm interested in attending an art exhibition, particularly one that displays sculptures. Could you find the most popular ones for me? I would prefer exhibitions with high user ratings. Lastly, I'm also studying cell biology and I need to know the list of proteins in the 'nucleus' cell compartment. Could you get that for me? And please include a brief description of each protein.\"", "function": [{"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "object", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}, {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold."}}, "required": ["location", "art_form"]}}, {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "object", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}], "human_eval_answer": "[\"mutation_type.find(snp_id='rs123456', species='Homo sapiens')\", \"find_exhibition(location='New York, NY', art_form='sculpture', month='next', user_ratings='high')\", \"cellbio.get_proteins(cell_compartment='nucleus', include_description=true)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"In the game 'Animal Crossing', I am interested in collecting bugs during the 'Summer' season. Could you help me find out what bugs are available during this time? Also, in the same game, I would like to know what fish can be collected in the 'Winter' season. On a completely different note, I am studying genetics and I came across a SNP mutation with the ID 'rs53576'. Can you tell me what type of mutation this is in the species 'Homo sapiens'? Lastly, I also found another SNP mutation with the ID 'rs1800497'. Could you help me find out what type of mutation this is in the species 'Mus musculus'?\"", "function": [{"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}, {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "object", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}], "human_eval_answer": "[\"get_collectables_in_season(game_name='Animal Crossing', season='Summer', item_type='bug')\", \"get_collectables_in_season(game_name='Animal Crossing', season='Winter', item_type='fish')\", \"mutation_type.find(snp_id='rs53576', species='Homo sapiens')\", \"mutation_type.find(snp_id='rs1800497', species='Mus musculus')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a few tasks? First, I need to calculate the factorial of 7. Then, I'm looking to buy a flute. I prefer the brand 'Yamaha' and I want it to have an 'open hole' and a 'silver headjoint'. Lastly, I'm doing a genetics study and I need to calculate the frequency of the 'AA' genotype in a population where the frequency of the dominant allele is 0.6. Can you assist me with these?\"", "function": [{"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "object", "properties": {"number": {"type": "number", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}, {"name": "find_flute", "description": "Locate a flute for sale based on specific requirements.", "parameters": {"type": "object", "properties": {"brand": {"type": "string", "description": "The brand of the flute. Example, 'Yamaha'"}, "specs": {"type": "array", "items": {"type": "string", "enum": ["open hole", "C foot", "silver headjoint"]}, "description": "The specifications of the flute desired."}}, "required": ["brand", "specs"]}}, {"name": "calculate_genotype_frequency", "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.", "parameters": {"type": "object", "properties": {"allele_frequency": {"type": "number", "description": "The frequency of the dominant allele in the population."}, "genotype": {"type": "string", "description": "The genotype which frequency is needed, default is homozygous dominant. ", "enum": ["AA", "Aa", "aa"]}}, "required": ["allele_frequency", "genotype"]}}], "human_eval_answer": "[\"math.factorial(number=7)\", \"find_flute(brand='Yamaha', specs=['open hole', 'silver headjoint'])\", \"calculate_genotype_frequency(allele_frequency=0.6, genotype='AA')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me the name of the scientist who is credited for the discovery of the theory of relativity? Also, I would like to know the predicted forest growth in Amazon rainforest over the next 10 years, considering the impact of human activities. After that, could you also provide the forecast for the same location but this time without considering human impact? Lastly, I'm curious about the scientist who discovered the DNA double helix structure.\"", "function": [{"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}, {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}], "human_eval_answer": "[\"get_scientist_for_discovery(discovery='theory of relativity')\", \"forest_growth_forecast(location='Amazon rainforest', years=10, include_human_impact=true)\", \"forest_growth_forecast(location='Amazon rainforest', years=10, include_human_impact=false)\", \"get_scientist_for_discovery(discovery='DNA double helix structure')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a few tasks? First, I am playing a game where I need to calculate the evolutionary fitness of a creature. The creature has three traits with values 0.7, 0.8, and 0.9, and the contributions of these traits to the overall fitness are 0.3, 0.4, and 0.3 respectively. Could you calculate the fitness for me using the 'calculate_fitness' function? \n\nSecond, I am looking for a lawyer in New York, NY who specializes in Civil and Divorce cases and charges less than $300 per hour. Could you use the 'lawyer.find_nearby' function to find one for me? \n\nThird, I am curious about the current classical chess rating of a player named Magnus Carlsen. Could you fetch that for me using the 'chess.rating' function? \n\nLastly, I am planning to go shopping at Walmart. I want to purchase 'Milk', 'Bread', and 'Eggs' from the nearest Walmart in Los Angeles, CA. The pack sizes I am looking for are 1, 2, and 12 respectively. Could you check the availability for me using the 'walmart.purchase' function?\"", "function": [{"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "object", "properties": {"trait_values": {"type": "array", "items": {"type": "number"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "number"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}, {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer", "maximum": 400}}, "required": ["city", "specialty", "fee"]}}, {"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "object", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list."}}, "required": ["loc", "product_list"]}}], "human_eval_answer": "[\"calculate_fitness(trait_values=[0.7, 0.8, 0.9], trait_contributions=[0.3, 0.4, 0.3])\", \"lawyer.find_nearby(city='New York, NY', specialty=['Civil', 'Divorce'], fee=300)\", \"chess.rating(player_name='Magnus Carlsen', variant='classical')\", \"walmart.purchase(loc='Los Angeles, CA', product_list=['Milk', 'Bread', 'Eggs'], pack_size=[1, 2, 12])\"]", "question_type": "parallel_multiple_function"}
{"question": "You are an art curator and a part-time biologist. You have a painting in your collection that is currently 24x36 inches, painted with acrylic and has a dominant color of blue. You want to modify the painting's size to 30x40 inches, change the medium to oil, and the dominant color to red. After this, you want to predict the evolutionary rate of the African elephant species for the next 100 years using the Darwin model. \n\nLater in the day, you are planning a game of poker with friends and you want to calculate the probability of getting a royal flush. In a deck of 52 cards, there are 4 possible outcomes that result in a royal flush. You want the result to be rounded to 3 decimal places. \n\nWhat would be the new attributes of the painting, the predicted evolutionary rate of the African elephant, and the probability of getting a royal flush in your poker game?", "function": [{"name": "modify_painting", "description": "Modify an existing painting's attributes such as size, medium, and color.", "parameters": {"type": "object", "properties": {"size": {"type": "string", "description": "The size of the painting in inches, width by height."}, "medium": {"type": "string", "description": "The medium of the painting, such as oil, acrylic, etc."}, "dominant_color": {"type": "string", "description": "The dominant color of the painting."}}, "required": ["size", "medium"]}}, {"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}, {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "object", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}], "human_eval_answer": "[\"modify_painting(size='30x40', medium='oil', dominant_color='red')\", \"prediction.evolution(species='African elephant', years=100, model='Darwin')\", \"calculate_probability(total_outcomes=52, favorable_outcomes=4, round_to=3)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan a day out? I want to start by having lunch at a restaurant in San Francisco that serves Italian food. I would like to see 5 options and I am a vegan. After lunch, I want to catch a match of the Golden State Warriors. Can you tell me their next 3 match schedules in the NBA? Later in the evening, I am thinking of buying some stocks. Can you provide me a detailed information about the Apple Inc. stocks in the NASDAQ market? And finally, I am thinking of buying a guitar. I have a budget of $500. Can you find me a Fender guitar within my budget?\"", "function": [{"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The specific location or area."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free.", "default": "None"}}, "required": ["location", "food_type", "number"]}}, {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter."}}, "required": ["team_name", "num_matches"]}}, {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}, {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "object", "properties": {"budget": {"type": "number", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter."}}, "required": ["budget", "type"]}}], "human_eval_answer": "[\"find_restaurants(location='San Francisco', food_type='Italian', number=5, dietary_requirements=['vegan'])\", \"sports.match_schedule(team_name='Golden State Warriors', num_matches=3, league='NBA')\", \"get_stock_info(company_name='Apple Inc.', detail_level='detailed', market='NASDAQ')\", \"find_instrument(budget=500, type='guitar', make='Fender')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me the net worth of the famous footballer Lionel Messi in Euros? After that, I would like to know the net worth of the basketball player LeBron James in British Pounds. Also, I'm curious about the Body Mass Index (BMI) of a person who weighs 85 kilograms and is 180 centimeters tall using the metric system. Lastly, could you calculate the BMI of another person who weighs 200 pounds and is 6 feet 2 inches tall using the imperial system?\"", "function": [{"name": "celebrity_net_worth.get", "description": "Get the total net worth of a sports celebrity based on most recent data.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The full name of the sports celebrity."}, "currency": {"type": "string", "description": "The currency in which the net worth will be returned. Default is 'USD'."}}, "required": ["name", "currency"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) of a person.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "Weight of the person in kilograms."}, "height": {"type": "number", "description": "Height of the person in centimeters."}, "unit": {"type": "string", "description": "Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'."}}, "required": ["weight", "height"]}}], "human_eval_answer": "[\"celebrity_net_worth.get(name='Lionel Messi', currency='EUR')\", \"celebrity_net_worth.get(name='LeBron James', currency='GBP')\", \"calculate_bmi(weight=85, height=180, unit='metric')\", \"calculate_bmi(weight=200, height=74, unit='imperial')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a few tasks? First, I need to book a hotel room in Paris for 5 nights starting from 20th June. I prefer a deluxe room and would like the hotel to have a gym and offer free breakfast. Secondly, I am curious about the last match played by the soccer club 'Manchester United'. Could you fetch the details for me? Also, include the match statistics. Lastly, I recently measured my weight and height. I weigh 75 kilograms and my height is 1.8 meters. Could you calculate my Body Mass Index (BMI)?\"", "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel."}}, "required": ["location", "room_type", "duration", "start_date"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}, {"name": "calculate_BMI", "description": "Calculate the Body Mass Index (BMI) given a person's weight and height.", "parameters": {"type": "object", "properties": {"weight_kg": {"type": "number", "description": "The weight of the person in kilograms."}, "height_m": {"type": "number", "description": "The height of the person in meters."}}, "required": ["weight_kg", "height_m"]}}], "human_eval_answer": "[\"hotel_booking(location='Paris', room_type='deluxe', duration=5, start_date='20th June', preferences=['gym', 'free_breakfast'])\", \"soccer.get_last_match(team_name='Manchester United', include_stats=True)\", \"calculate_BMI(weight_kg=75, height_m=1.8)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a few things? First, I'm interested in finding out all the movies that actor Leonardo DiCaprio starred in the year 2010, specifically in the Drama category. Second, I'd like to know about any lawsuits filed against the company 'Apple Inc.' in the location 'California' in the year 2015, and I'm particularly interested in civil cases. Lastly, I need to book a direct flight from 'New York' to 'London' on the date '2022-12-25', and I prefer the time to be around '10:00 AM'. Can you assist me with these?\"", "function": [{"name": "imdb.find_movies_by_actor", "description": "Searches the database to find all movies by a specific actor within a certain year.", "parameters": {"type": "object", "properties": {"actor_name": {"type": "string", "description": "The name of the actor."}, "year": {"type": "integer", "description": "The specific year to search in."}, "category": {"type": "string", "description": "The category of the film (e.g. Drama, Comedy, etc). This parameter is optional."}}, "required": ["actor_name", "year"]}}, {"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types."}}, "required": ["company_name", "location", "year"]}}, {"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "object", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false"}}, "required": ["departure_location", "destination_location", "date"]}}], "human_eval_answer": "[\"imdb.find_movies_by_actor(actor_name='Leonardo DiCaprio', year=2010, category='Drama')\", \"lawsuits_search(company_name='Apple Inc.', location='California', year=2015, case_type='civil')\", \"flight.book(departure_location='New York', destination_location='London', date='2022-12-25', time='10:00 AM', direct_flight=True)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are planning a vacation to Paris, France. You want to stay at the 'Hotel Le Bristol Paris' in a suite room for 10 days starting from 12-01-2022. You also have a preference for a city view from your room. How would you book this hotel? After booking, you want to know how much 1000 US dollars would be in Euros. Can you find out the latest exchange rate? On your way to the hotel, you want to stop by a Safeway store in Palo Alto, CA to pick up some items. You need to order 2 bottles of water, 3 apples, and 1 loaf of bread. How would you place this order? Lastly, you are curious about the universe and want to know how long it would take for light to travel from Earth to Proxima Centauri, which is approximately 4.24 light years away, considering the speed of light in vacuum is 299792458 m/s. Can you calculate this?\"", "function": [{"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}, {"name": "latest_exchange_rate", "description": "Retrieve the latest exchange rate between two specified currencies.", "parameters": {"type": "object", "properties": {"source_currency": {"type": "string", "description": "The currency you are converting from."}, "target_currency": {"type": "string", "description": "The currency you are converting to."}, "amount": {"type": "number", "description": "The amount to be converted. If omitted, exchange rate of 1 unit source currency is given"}}, "required": ["source_currency", "target_currency"]}}, {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}, {"name": "light_travel_time", "description": "Calculate the time taken for light to travel from a celestial body to another.", "parameters": {"type": "object", "properties": {"distance_in_light_years": {"type": "number", "description": "The distance between the two celestial bodies in light years."}, "speed_of_light": {"type": "number", "description": "The speed of light in vacuum, in m/s. Default value is 299792458 m/s."}}, "required": ["distance_in_light_years"]}}], "human_eval_answer": "[\"book_hotel(hotel_name='Hotel Le Bristol Paris', location='Paris, France', room_type='suite', start_date='12-01-2022', stay_duration=10, view='city view')\", \"latest_exchange_rate(source_currency='USD', target_currency='EUR', amount=1000)\", \"safeway.order(location='Palo Alto, CA', items=['water', 'apples', 'bread'], quantity=[2, 3, 1])\", \"light_travel_time(distance_in_light_years=4.24, speed_of_light=299792458)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a few things? First, I'm trying to calculate the area of a triangle that has a base of 12 meters and a height of 15 meters. I would like the result in square meters. Second, I'm curious about the inventor and year of invention of the 'Telephone'. Could you find that for me? Lastly, I'm planning a road trip and need directions from 'New York City' to 'Los Angeles'. I would like to avoid 'tolls' and 'highways'. Can you provide the best route for me?\"", "function": [{"name": "geometry.area_triangle", "description": "Calculate the area of a triangle.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle from the base."}, "unit": {"type": "string", "description": "The measurement unit for the area. Defaults to square meters."}}, "required": ["base", "height"]}}, {"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "object", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}, {"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "object", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid."}}, "required": ["start", "end"]}}], "human_eval_answer": "[\"geometry.area_triangle(base=12, height=15, unit='square meters')\", \"science_history.get_invention(invention_name='Telephone', want_year=True)\", \"map_service.get_directions(start='New York City', end='Los Angeles', avoid=['tolls', 'highways'])\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me plan a trip? I want to go to Paris for 7 days with a daily budget of $200, and I prefer exploring urban areas. Also, I'm trying to cook a dish called 'Chicken Alfredo', but I'm not sure if it fits my diet. Could you find a recipe for 'Chicken Alfredo' that has less than 800 calories? Additionally, I have a cooking measurement problem. I have a recipe that calls for 2 cups of flour, but I only have a scale. Can you convert 2 cups of flour into grams for me? Lastly, I'm doing a research project and need to run a linear regression model. The predictor variables are 'age', 'income', and 'education level', and the target variable is 'job satisfaction'. Could you also standardize the predictors for me?\"", "function": [{"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "object", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}, {"name": "travel_itinerary_generator", "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.", "parameters": {"type": "object", "properties": {"destination": {"type": "string", "description": "Destination city of the trip."}, "days": {"type": "integer", "description": "Number of days for the trip."}, "daily_budget": {"type": "number", "description": "The maximum daily budget for the trip."}, "exploration_type": {"type": "string", "enum": ["nature", "urban", "history", "culture"], "description": "The preferred exploration type.", "default": "urban"}}, "required": ["destination", "days", "daily_budget"]}}, {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "object", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}, {"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "object", "properties": {"quantity": {"type": "number", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}], "human_eval_answer": "[\"travel_itinerary_generator(destination='Paris', days=7, daily_budget=200, exploration_type='urban')\", \"find_recipe(recipeName='Chicken Alfredo', maxCalories=800)\", \"cooking_conversion.convert(quantity=2, from_unit='cups', to_unit='grams', item='flour')\", \"run_linear_regression(predictors=['age', 'income', 'education level'], target='job satisfaction', standardize=True)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are considering to buy a house in San Francisco, California. The house was built in 1985, has an area of 2000 square feet and contains 4 rooms. You want to predict the price of this house. After buying the house, you also want to know about any lawsuits involving the previous owner, Mr. John Doe, in the county of San Francisco. Additionally, you are curious about the probability of winning a lottery where the total number of possible outcomes is 1000 and the number of favorable outcomes is 5. You want the result to be rounded to 3 decimal places. Can you provide the predicted house price, the lawsuits involving Mr. John Doe in San Francisco county, and the probability of winning the lottery?\"", "function": [{"name": "predict_house_price", "description": "Predict house price based on area, number of rooms and year of construction.", "parameters": {"type": "object", "properties": {"area": {"type": "integer", "description": "Area of the house in square feet."}, "rooms": {"type": "integer", "description": "Number of rooms in the house."}, "year": {"type": "integer", "description": "Year when the house was constructed."}, "location": {"type": "string", "description": "The location or city of the house."}}, "required": ["area", "rooms", "year", "location"]}}, {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "object", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}, {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "object", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}], "human_eval_answer": "[\"predict_house_price(area=2000, rooms=4, year=1985, location='San Francisco')\", \"lawsuit_search(entity='John Doe', county='San Francisco')\", \"calculate_probability(total_outcomes=1000, favorable_outcomes=5, round_to=3)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a few calculations? First, I need to calculate the power of 7 raised to 3. Then, I want to know the probability of drawing a red card from a standard deck of 52 playing cards, round the answer to 3 decimal places. After that, I have a DNA molecule with the ID 'XYZ123' in a public database, can you retrieve its sequence in 'genbank' format? Also, include 5 base pairs upstream the DNA sequence. Lastly, calculate the power of 2 raised to 5, but this time with a modulus of 3.\"", "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The base number."}, "exponent": {"type": "number", "description": "The exponent."}, "mod": {"type": "number", "description": "The modulus. Default is None. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}, {"name": "probabilities.calculate_single", "description": "Calculate the probability of an event.", "parameters": {"type": "object", "properties": {"total_outcomes": {"type": "integer", "description": "The total number of outcomes."}, "event_outcomes": {"type": "integer", "description": "The number of outcomes where the event occurs."}, "round": {"type": "integer", "description": "Round the answer to a specified number of decimal places. Defaults to 2."}}, "required": ["total_outcomes", "event_outcomes"]}}, {"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "object", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}], "human_eval_answer": "[\"math.power(base=7, exponent=3)\", \"probabilities.calculate_single(total_outcomes=52, event_outcomes=26, round=3)\", \"fetch_DNA_sequence(DNA_id='XYZ123', format='genbank', upstream=5)\", \"math.power(base=2, exponent=5, mod=3)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me with the following tasks? First, I have two groups of data points: group1 consists of [12, 15, 18, 22, 25] and group2 consists of [20, 23, 26, 29, 32]. I want to run a two-sample t-test on these groups with the assumption that they have equal variance. Second, I'm currently in Boston, MA and I'm craving for some Sushi. Could you find the closest sushi restaurant that has a Patio and Wi-Fi? Lastly, I've recently taken up painting as a hobby and I'm curious about the common personality traits associated with it. Could you retrieve the top 5 personality traits of people who enjoy painting?\"", "function": [{"name": "run_two_sample_ttest", "description": "Runs a two sample t-test for two given data groups.", "parameters": {"type": "object", "properties": {"group1": {"type": "array", "items": {"type": "integer"}, "description": "First group of data points."}, "group2": {"type": "array", "items": {"type": "integer"}, "description": "Second group of data points."}, "equal_variance": {"type": "boolean", "description": "Assumption about whether the two samples have equal variance.", "default": true}}, "required": ["group1", "group2"]}}, {"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant."}}, "required": ["location", "cuisine"]}}, {"name": "get_personality_traits", "description": "Retrieve the common personality traits of people based on their hobbies or activities.", "parameters": {"type": "object", "properties": {"hobby": {"type": "string", "description": "The hobby or activity of interest."}, "trait_count": {"type": "integer", "description": "The number of top traits to return, default is 5"}}, "required": ["hobby"]}}], "human_eval_answer": "[\"run_two_sample_ttest(group1=[12, 15, 18, 22, 25], group2=[20, 23, 26, 29, 32], equal_variance=True)\", \"restaurant_search.find_closest(location='Boston, MA', cuisine='Sushi', amenities=['Patio', 'Wi-Fi'])\", \"get_personality_traits(hobby='painting', trait_count=5)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a few calculations and searches? First, I'd like to calculate the area of a triangle with a base of 15 meters and a height of 20 meters, and I'd like the result in square meters. Then, I have two datasets that I'd like to compare statistically. The first dataset consists of the numbers 12, 15, 18, 20, 22, and 25, and the second dataset consists of the numbers 14, 16, 19, 21, 23, and 26. I'd like to perform a t-test with a significance level of 0.05. After that, I'm interested in finding upcoming rock concerts in Los Angeles, CA for the next 14 days. Lastly, I'd like to calculate the area of another triangle, this time with a base of 10 meters and a height of 30 meters, and again, I'd like the result in square meters.\"", "function": [{"name": "geometry.area_triangle", "description": "Calculate the area of a triangle.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle from the base."}, "unit": {"type": "string", "description": "The measurement unit for the area. Defaults to square meters."}}, "required": ["base", "height"]}}, {"name": "t_test", "description": "Perform a statistical t-test to check if the means of two independent datasets are statistically different.", "parameters": {"type": "object", "properties": {"dataset_A": {"type": "array", "items": {"type": "integer"}, "description": "Dataset A for comparison."}, "dataset_B": {"type": "array", "items": {"type": "integer"}, "description": "Dataset B for comparison."}, "alpha": {"type": "float", "description": "Significance level for the test. Default is 0.05."}}, "required": ["dataset_A", "dataset_B"]}}, {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}], "human_eval_answer": "[\"geometry.area_triangle(base=15, height=20, unit='square meters')\", \"t_test(dataset_A=[12, 15, 18, 20, 22, 25], dataset_B=[14, 16, 19, 21, 23, 26], alpha=0.05)\", \"event_finder.find_upcoming(location='Los Angeles, CA', genre='rock', days_ahead=14)\", \"geometry.area_triangle(base=10, height=30, unit='square meters')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a few tasks? First, I'm interested in a company's financials. I'd like to know the quarterly dividend per share for a company that has a total dividend payout of $1,000,000 and 500,000 outstanding shares. Second, I'm a big fan of the Beatles and I'd like to know the lyrics of their song 'Hey Jude'. Third, I'm planning to watch a movie tonight and I'm considering 'The Godfather'. Could you provide a brief about this movie and also include additional information like Director, Cast, Awards etc.? Lastly, I'm doing a painting and I'd like to mix the colors red and blue, and I want the resulting color to have a lightness level of 70%.\"", "function": [{"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "object", "properties": {"total_payout": {"type": "number", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}, {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "object", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}, {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "object", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}], "human_eval_answer": "[\"finance.calculate_quarterly_dividend_per_share(total_payout=1000000, outstanding_shares=500000)\", \"get_song_lyrics(song_title='Hey Jude', artist_name='The Beatles')\", \"movie_details.brief(title='The Godfather', extra_info=true)\", \"mix_paint_color(color1='red', color2='blue', lightness=70)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a few things? First, I'd like to calculate the return on equity for a company that had a net income of $2 million, total shareholder's equity of $10 million, and paid dividends amounting to $500,000. Then, I'm trying to find the lyrics to the song 'Bohemian Rhapsody' by the artist 'Queen', and I need them in English. After that, I'm interested in finding a historical law case related to 'fraud' that took place between the years 1990 and 2000. Lastly, I'm looking for a public library in 'Boston, MA' that has both a 'Reading Room' and 'Wi-Fi' facilities. Can you assist with these?\"", "function": [{"name": "calculate_return_on_equity", "description": "Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.", "parameters": {"type": "object", "properties": {"net_income": {"type": "number", "description": "The company's net income."}, "shareholder_equity": {"type": "number", "description": "The company's total shareholder's equity."}, "dividends_paid": {"type": "number", "description": "The total dividends paid by the company. Optional. If not given, assumes it's 0."}}, "required": ["net_income", "shareholder_equity"]}}, {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "object", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, {"name": "law_case_search.find_historical", "description": "Search for a historical law case based on specific criteria like the subject and year.", "parameters": {"type": "object", "properties": {"subject": {"type": "string", "description": "The subject matter of the case, e.g., 'fraud'"}, "from_year": {"type": "integer", "description": "The start year for the range of the case. The case should happen after this year."}, "to_year": {"type": "integer", "description": "The end year for the range of the case. The case should happen before this year."}}, "required": ["subject", "from_year", "to_year"]}}, {"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}], "human_eval_answer": "[\"calculate_return_on_equity(net_income=2000000, shareholder_equity=10000000, dividends_paid=500000)\", \"get_song_lyrics(song_title='Bohemian Rhapsody', artist_name='Queen', lang='English')\", \"law_case_search.find_historical(subject='fraud', from_year=1990, to_year=2000)\", \"public_library.find_nearby(location='Boston, MA', facilities=['Reading Room', 'Wi-Fi'])\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with two tasks? First, I want to calculate the compound interest on an investment I made. I invested $5000 with an annual interest rate of 5%. The interest is compounded quarterly and I plan to keep the money invested for 7 years. Secondly, I heard some rumors about a company named 'Tech Corp' and I want to check if there were any lawsuits filed against them in 'San Francisco' in the year 2018. Can you find this information for me?\"", "function": [{"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "number", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "number", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}, {"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types."}}, "required": ["company_name", "location", "year"]}}], "human_eval_answer": "[\"compound_interest(principal=5000, annual_rate=0.05, compounding_freq='quarterly', time_in_years=7)\", \"lawsuits_search(company_name='Tech Corp', location='San Francisco', year=2018)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a few calculations? First, I'm curious about the current classical chess rating of a player named Magnus Carlsen. Second, I have a quadratic equation that I'm struggling with, it's 2x\u00b2 - 3x + 1 = 0, could you find the roots for me? Lastly, I made an investment 5 years ago. The initial value was $5000 and now it's worth $8000. Could you calculate the Compound Annual Growth Rate (CAGR) for me?\"", "function": [{"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, {"name": "solve_quadratic", "description": "Find the roots of a quadratic equation. Returns both roots.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "Coefficient of x\u00b2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, {"name": "calculate_cagr", "description": "Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.", "parameters": {"type": "object", "properties": {"initial_value": {"type": "number", "description": "The initial investment value."}, "final_value": {"type": "number", "description": "The final investment value."}, "period_in_years": {"type": "integer", "description": "The period of the investment in years."}}, "required": ["initial_value", "final_value", "period_in_years"]}}], "human_eval_answer": "[\"chess.rating(player_name='Magnus Carlsen', variant='classical')\", \"solve_quadratic(a=2, b=-3, c=1)\", \"calculate_cagr(initial_value=5000, final_value=8000, period_in_years=5)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are planning your finances and you want to calculate the future value of your investments. You have an initial investment of $5000, an annual rate of return of 7%, and you plan to invest for 10 years. Additionally, you will be making regular contributions of $200. After calculating the future value, you want to visualize your annual returns over the past 10 years. The returns are as follows: [7, 8, 9, 6, 7, 8, 10, 9, 8, 7] and you want to create a histogram with 5 bins to better understand the distribution of returns. Later, you decide to take a break and engage in some art. You want to mix two primary paint colors, blue and yellow, and adjust the resulting color's lightness level to 70%. Can you calculate the future value of your investment, create the histogram, and mix the paint colors accordingly?\"", "function": [{"name": "finance.calculate_future_value", "description": "Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial investment amount."}, "rate_of_return": {"type": "number", "description": "The annual rate of return."}, "years": {"type": "integer", "description": "The time frame of the investment in years."}, "contribution": {"type": "number", "description": "Optional: Additional regular contributions. Default is 0."}}, "required": ["initial_investment", "rate_of_return", "years"]}}, {"name": "create_histogram", "description": "Create a histogram based on provided data.", "parameters": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "number"}, "description": "The data for which histogram needs to be plotted."}, "bins": {"type": "number", "description": "The number of equal-width bins in the range. Default is 10."}}, "required": ["data", "bins"]}}, {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "object", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}], "human_eval_answer": "[\"finance.calculate_future_value(initial_investment=5000, rate_of_return=0.07, years=10, contribution=200)\", \"create_histogram(data=[7, 8, 9, 6, 7, 8, 10, 9, 8, 7], bins=5)\", \"mix_paint_color(color1='blue', color2='yellow', lightness=70)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"John is planning to invest in a mutual fund. He has $5000 to start with and the fund he is interested in has an annual yield rate of 7%. He plans to keep his money in the fund for 10 years. After 10 years, he wants to use part of his investment returns to build a circular garden in his backyard. The radius of the garden will be 5 meters. Can you help him calculate how much money he will have in his mutual fund after 10 years and what will be the area of his circular garden?\"", "function": [{"name": "geometry.calculate_area_circle", "description": "Calculate the area of a circle given its radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "unit": {"type": "string", "description": "The measurement unit of the radius (optional parameter, default is 'units')."}}, "required": ["radius"]}}, {"name": "calculate_mutual_fund_balance", "description": "Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.", "parameters": {"type": "object", "properties": {"investment_amount": {"type": "number", "description": "The initial total amount invested in the fund."}, "annual_yield": {"type": "number", "description": "The annual yield rate of the fund."}, "years": {"type": "integer", "description": "The period of time for the fund to mature."}}, "required": ["investment_amount", "annual_yield", "years"]}}], "human_eval_answer": "[\"calculate_mutual_fund_balance(investment_amount=5000, annual_yield=0.07, years=10)\", \"geometry.calculate_area_circle(radius=5)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"John is a lawyer who is working on a case with docket number '12345' in the 'Supreme Court'. He needs to retrieve the details of the 'accused' from this case. After his work, he plans to help his son with his homework. His son is learning about triangles and he needs to calculate the area of a triangle with a base of 10 units and a height of 5 units. The unit of measure is 'square meters'. Later, John has to go back to his work and retrieve the 'verdict' details of another case with docket number '67890' in the 'High Court'. Can you assist John with these tasks?\"", "function": [{"name": "calculate_triangle_area", "description": "Calculate the area of a triangle given its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle."}, "unit": {"type": "string", "description": "The unit of measure (defaults to 'units' if not specified)"}}, "required": ["base", "height"]}}, {"name": "get_case_info", "description": "Retrieve case details using a specific case docket number and court location.", "parameters": {"type": "object", "properties": {"docket": {"type": "string", "description": "Docket number for the specific court case."}, "court": {"type": "string", "description": "Court in which the case was heard."}, "info_type": {"type": "string", "description": "Specify the information type needed for the case. i.e., victim, accused, verdict etc."}}, "required": ["docket", "court", "info_type"]}}], "human_eval_answer": "[\"calculate_triangle_area(base=10, height=5, unit='square meters')\", \"get_case_info(docket='12345', court='Supreme Court', info_type='accused')\", \"get_case_info(docket='67890', court='High Court', info_type='verdict')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan my week? I'm interested in attending a jazz event in San Francisco, CA within the next 5 days. Also, I heard about a lawsuit involving Apple Inc. that was filed in California after January 1, 2020, can you find the status of that for me? Lastly, I need to do some shopping at Walmart, can you tell me the total price for 2 bottles of olive oil, 3 bags of rice, and 4 cans of beans at the Walmart in San Jose, CA?\"", "function": [{"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}, {"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed."}, "location": {"type": "string", "description": "Location where the lawsuit was filed."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}, {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "object", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional)."}}, "required": ["items", "quantities"]}}], "human_eval_answer": "[\"event_finder.find_upcoming(location='San Francisco, CA', genre='jazz', days_ahead=5)\", \"lawsuit_search(company='Apple Inc.', start_date='2020-01-01', location='California')\", \"walmart.check_price(items=['olive oil', 'rice', 'beans'], quantities=[2, 3, 4], store_location='San Jose, CA')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me with the following tasks? First, I would like to know the elevation and area of the Yellowstone National Park. Second, I am considering investing $5000 in a stock that has an expected annual growth rate of 7%. I plan to hold the stock for 10 years and I would like to know the projected return of this investment, taking into account potential dividends. Third, I need to fetch detailed information about a legal case with the ID 'LC12345'. Lastly, I would also like to know the location and the year when the Yosemite National Park was established.\"", "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "object", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}, {"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "object", "properties": {"investment_amount": {"type": "number", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "number", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}, {"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "object", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. Default is false."}}, "required": ["case_id", "details"]}}], "human_eval_answer": "[\"park_information(park_name='Yellowstone National Park', information=['Elevation', 'Area'])\", \"calculate_stock_return(investment_amount=5000, annual_growth_rate=0.07, holding_period=10, dividends=True)\", \"legal_case.fetch(case_id='LC12345', details=True)\", \"park_information(park_name='Yosemite National Park', information=['Location', 'Established Year'])\"]", "question_type": "parallel_multiple_function"}
{"question": "\"In the game 'Animal Crossing' during the 'Summer' season, can you find out what types of 'fish' are collectable? After that, can you tell me the highest score achieved by any player in the game 'Fortnite' on 'Playstation' platform in the 'Asia' region? Then, I would like to know the details of lawsuits involving the company 'Apple Inc.' in the year 2018. Lastly, could you calculate the binomial probability for 10 trials, with 3 successes and a probability of success of 0.7 on an individual trial?\"", "function": [{"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}, {"name": "game_score.highest", "description": "Retrieve the highest score achieved by any player in a specific game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the online game."}, "platform": {"type": "string", "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"}, "region": {"type": "string", "description": "The geographic region of the player. Defaults to 'Global'"}}, "required": ["game", "platform"]}}, {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter."}}, "required": ["company_name", "year"]}}, {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "object", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}], "human_eval_answer": "[\"get_collectables_in_season({'game_name': 'Animal Crossing', 'season': 'Summer', 'item_type': 'fish'})\", \"game_score.highest({'game': 'Fortnite', 'platform': 'Playstation', 'region': 'Asia'})\", \"lawsuit_details.find({'company_name': 'Apple Inc.', 'year': 2018})\", \"calculate_binomial_probability({'number_of_trials': 10, 'number_of_successes': 3, 'probability_of_success': 0.7})\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a two-part request? First, I'd like to know if there were any lawsuits filed against the company 'TechCorp' in the location 'San Francisco' in the year 2018, specifically civil cases. Secondly, I'm planning a trip and need to check the availability of Hilton hotels in 'New York City' for the check-in date '2022-10-15' and check-out date '2022-10-20' for 2 adults. Could you assist me with these?\"", "function": [{"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types."}}, "required": ["company_name", "location", "year"]}}, {"name": "hilton_hotel.check_availability", "description": "Check hotel availability for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to check hotel availability."}, "check_in_date": {"type": "string", "description": "The check-in date in the format YYYY-MM-DD."}, "check_out_date": {"type": "string", "description": "The check-out date in the format YYYY-MM-DD."}, "no_of_adults": {"type": "integer", "description": "The number of adults for the hotel booking."}, "hotel_chain": {"type": "string", "description": "The hotel chain where you want to book the hotel.", "default": "Hilton"}}, "required": ["location", "check_in_date", "check_out_date", "no_of_adults"]}}], "human_eval_answer": "[\"lawsuits_search(company_name='TechCorp', location='San Francisco', year=2018, case_type='civil')\", \"hilton_hotel.check_availability(location='New York City', check_in_date='2022-10-15', check_out_date='2022-10-20', no_of_adults=2)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please tell me the latest game score, individual player stats, and team stats for the basketball team 'Los Angeles Lakers' in the 'NBA' league? Also, I would like to know the same information but this time for the football team 'Manchester United' in the 'Premier League'. Additionally, could you provide me with a 5-day humidity forecast for New York, ensuring that the minimum humidity level is 60%? Lastly, I would also like to know the humidity forecast for the next 7 days in London, but without any minimum humidity level filter.\"", "function": [{"name": "get_team_score", "description": "Retrieves the latest game score, individual player stats, and team stats for a specified sports team.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The league that the team is part of."}, "include_player_stats": {"type": "boolean", "default": false, "description": "Indicates if individual player statistics should be included in the result. Default is false."}}, "required": ["team_name", "league"]}}, {"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Optional parameter."}}, "required": ["location", "days"]}}], "human_eval_answer": "[\"get_team_score(team_name='Los Angeles Lakers', league='NBA', include_player_stats=True)\", \"get_team_score(team_name='Manchester United', league='Premier League', include_player_stats=True)\", \"weather.humidity_forecast(location='New York', days=5, min_humidity=60)\", \"weather.humidity_forecast(location='London', days=7)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are playing a role-playing game and you want to create a new player profile. You decided to name your character 'DragonSlayer' and choose 'Warrior' as your class. You also want to start at level 5. After setting up your profile, you want to take a break and find a nearby concert to attend. You are currently in 'New York, NY' and you want to find a concert that plays 'Rock' music. Later in the evening, you decide to play a game of poker with a standard deck of 52 cards and a hand size of 5. What is the probability of getting a full house? The next day, you decide to go on a hike and you want to calculate the slope gradient between two geographical coordinates. The first point is [40.7128, -74.0060] (New York, NY) and the second point is [34.0522, -118.2437] (Los Angeles, CA). You want the slope gradient in 'degree'. Can you provide the information for all these scenarios?\"", "function": [{"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "class_type": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "class"]}}, {"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "genre": {"type": "string", "description": "Genre of music to be played at the concert."}}, "required": ["location", "genre"]}}, {"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "object", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, {"name": "calculate_slope_gradient", "description": "Calculate the slope gradient between two geographical coordinates.", "parameters": {"type": "object", "properties": {"point1": {"type": "array", "items": {"type": "number"}, "description": "The geographic coordinates for the first point [Latitude, Longitude]."}, "point2": {"type": "array", "items": {"type": "number"}, "description": "The geographic coordinates for the second point [Latitude, Longitude]."}, "unit": {"type": "string", "enum": ["degree", "percent", "ratio"], "description": "The unit for the slope gradient. Default is 'degree'."}}, "required": ["point1", "point2"]}}], "human_eval_answer": "[\"create_player_profile(player_name='DragonSlayer', class_type='Warrior', starting_level=5)\", \"concert.find_nearby(location='New York, NY', genre='Rock')\", \"poker_probability.full_house(deck_size=52, hand_size=5)\", \"calculate_slope_gradient(point1=[40.7128, -74.0060], point2=[34.0522, -118.2437], unit='degree')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please tell me the ranking of the New York Yankees in the Major League Baseball for the 2019 season, then check the ranking of the Los Angeles Lakers in the National Basketball Association for the 2020 season, and finally, could you provide the air quality index for Los Angeles on December 25, 2020 and for New York on January 1, 2021?\"", "function": [{"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season."}}, "required": ["team", "league"]}}, {"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date you want to get the air quality index for. Default is today."}}, "required": ["location", "date"]}}], "human_eval_answer": "[\"sports_ranking(team='New York Yankees', league='Major League Baseball', season=2019)\", \"sports_ranking(team='Los Angeles Lakers', league='National Basketball Association', season=2020)\", \"air_quality(location='Los Angeles', date='2020-12-25')\", \"air_quality(location='New York', date='2021-01-01')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with the following tasks? First, I want to find the closest high-rated grocery stores from my location at '123 Main Street, New York' that have 'milk', 'bread', and 'eggs' in stock. The store should have a minimum rating of 4.5. Second, I am interested in knowing more about the sculpture titled 'The Thinker' made by the artist 'Auguste Rodin'. I specifically want to know about its 'material'. Lastly, I drove my car, which uses 'diesel' as fuel and has a fuel efficiency of 25 miles per gallon, for a total distance of 12000 miles last year. Can you calculate the annual carbon dioxide emissions produced by my vehicle? Also, consider a 2% decrease in fuel efficiency per year.\"", "function": [{"name": "grocery_store.find_best", "description": "Find the closest high-rated grocery stores based on certain product availability.", "parameters": {"type": "object", "properties": {"my_location": {"type": "string", "description": "The current location of the user."}, "rating": {"type": "float", "description": "The minimum required store rating."}, "products": {"type": "array", "items": {"type": "string"}, "description": "Required products in a list."}}, "required": ["my_location", "products"]}}, {"name": "sculpture.get_details", "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "The artist who made the sculpture."}, "title": {"type": "string", "description": "The title of the sculpture."}, "detail": {"type": "string", "description": "The specific detail wanted about the sculpture. Default is 'general information'."}}, "required": ["artist", "title"]}}, {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "number", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "number", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}], "human_eval_answer": "[\"grocery_store.find_best(my_location='123 Main Street, New York', rating=4.5, products=['milk', 'bread', 'eggs'])\", \"sculpture.get_details(artist='Auguste Rodin', title='The Thinker', detail='material')\", \"calculate_emissions(distance=12000, fuel_type='diesel', fuel_efficiency=25, efficiency_reduction=2)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me find a Thai restaurant in New York, NY within a 10-mile radius, and then find an Italian restaurant in the same location within the same distance? After that, could you provide the precipitation statistics for the Amazon rainforest for the past year and then for the past five years?\"", "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "number", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}, {"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}], "human_eval_answer": "[\"restaurant.find_nearby(location='New York, NY', cuisine='Thai', max_distance=10)\", \"restaurant.find_nearby(location='New York, NY', cuisine='Italian', max_distance=10)\", \"ecology_data.precipitation_stats(location='Amazon rainforest', time_frame='year')\", \"ecology_data.precipitation_stats(location='Amazon rainforest', time_frame='five_years')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a few tasks? First, I need to convert 5000 Euros to US dollars. After that, I would like to know the population of turtles in Galapagos Islands in the year 2018, and also include the species information. Then, I need to plan a trip from New York to Los Angeles, but I want to avoid tolls and ferries. Finally, I need to convert 3000 British Pounds to Japanese Yen.\"", "function": [{"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. (optional)"}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false. (optional)"}}, "required": ["location"]}}, {"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "object", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid."}}, "required": ["start", "end"]}}], "human_eval_answer": "[\"convert_currency(base_currency='EUR', target_currency='USD', amount=5000)\", \"ecology.get_turtle_population(location='Galapagos Islands', year=2018, species=true)\", \"map_service.get_directions(start='New York', end='Los Angeles', avoid=['tolls', 'ferries'])\", \"convert_currency(base_currency='GBP', target_currency='JPY', amount=3000)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please first use the 'get_current_time' function to find out the current time in Tokyo, Japan, in the 'Asia/Tokyo' timezone? Then, could you use the same function again to find out the current time in New York, United States, in the 'America/New_York' timezone? After that, could you use the 'get_stock_info' function to retrieve a detailed information about the stock of the company 'Microsoft' in the 'NASDAQ' market? Finally, could you use the same function again to retrieve a summary information about the stock of the company 'Apple' in the 'NASDAQ' market?\"", "function": [{"name": "get_current_time", "description": "Retrieve the current time in a specific time zone.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the city."}, "country": {"type": "string", "description": "The name of the country."}, "timezone": {"type": "string", "description": "The optional timezone to get current time."}}, "required": ["location", "country"]}}, {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}], "human_eval_answer": "[\"get_current_time(location='Tokyo', country='Japan', timezone='Asia/Tokyo')\", \"get_current_time(location='New York', country='United States', timezone='America/New_York')\", \"get_stock_info(company_name='Microsoft', detail_level='detailed', market='NASDAQ')\", \"get_stock_info(company_name='Apple', detail_level='summary', market='NASDAQ')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a few tasks? First, I'd like to book a hotel room at the 'Hilton' in 'Los Angeles, CA' from '2022-05-01' to '2022-05-10' and I need '2' rooms. Second, I'm curious about the time difference between 'New York, NY' and 'Los Angeles, CA'. Third, I've been trying to keep track of my health and I'd like to calculate my Body Mass Index (BMI). I weigh '75' kilograms and I'm '180' centimeters tall, and I'd like to use the 'metric' system. Lastly, I've written a piece of text in 'English' and I'd like to perform a sentiment analysis on it. The text is 'I had a wonderful day at the beach. The weather was perfect and I enjoyed a delicious ice cream.' Can you assist me with these?\"", "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "object", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}], "human_eval_answer": "[\"hotel_booking(hotel_name='Hilton', location='Los Angeles, CA', start_date='2022-05-01', end_date='2022-05-10', rooms=2)\", \"get_time_difference(place1='New York, NY', place2='Los Angeles, CA')\", \"calculate_bmi(weight=75, height=180, system='metric')\", \"sentiment_analysis(text='I had a wonderful day at the beach. The weather was perfect and I enjoyed a delicious ice cream.', language='English')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you first find out the key historical events related to 'War' and 'Economy' that took place in France between the years 1800 and 1900? After that, could you please tell me the current market value of the sculpture 'The Thinker' created by the artist 'Auguste Rodin'? Lastly, I would also like to know the market value of the sculpture 'The Kiss', also created by 'Auguste Rodin', in the year 1882.\"", "function": [{"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. If none is provided, all types will be considered."}}, "required": ["country", "start_year", "end_year"]}}, {"name": "get_sculpture_value", "description": "Retrieve the current market value of a particular sculpture by a specific artist.", "parameters": {"type": "object", "properties": {"sculpture": {"type": "string", "description": "The name of the sculpture."}, "artist": {"type": "string", "description": "The name of the artist who created the sculpture."}, "year": {"type": "integer", "description": "The year the sculpture was created. This is optional and is not required for all sculptures."}}, "required": ["sculpture", "artist"]}}], "human_eval_answer": "[\"history.get_key_events(country='France', start_year=1800, end_year=1900, event_type=['War', 'Economy'])\", \"get_sculpture_value(sculpture='The Thinker', artist='Auguste Rodin')\", \"get_sculpture_value(sculpture='The Kiss', artist='Auguste Rodin', year=1882)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a few things? First, I'm planning a trip and I'm interested in mountains. I'm currently in Tokyo and I want to find the 5 tallest mountains within a 200 kilometer radius of my location. Second, I'm working on a physics problem and I need to calculate the entropy change for an isothermal and reversible process. The initial temperature is 300 Kelvin, the final temperature is 350 Kelvin, and the heat capacity is 1.5 J/K. Lastly, I'm curious about a historical event. Can you tell me the date of the 'Battle of Waterloo'? I believe it took place in Belgium.\"", "function": [{"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "number", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "number", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}, {"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "object", "properties": {"initial_temp": {"type": "number", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "number", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "number", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}, {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Defaults to global if not specified"}}, "required": ["event"]}}], "human_eval_answer": "[\"locate_tallest_mountains(location='Tokyo', radius=200, amount=5)\", \"calculate_entropy_change(initial_temp=300, final_temp=350, heat_capacity=1.5)\", \"get_event_date(event='Battle of Waterloo', location='Belgium')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with a few things? First, I need to update my user information in the CustomerInfo database. My user ID is 12345, and I want to change my name to John Doe and my email to johndoe@example.com. Second, I'm curious about the last match played by the soccer club Manchester United, and I'd like to know the match statistics as well. Third, I'm doing a history project and need to know who the U.S. president was in the year 1980, and I'd like the full name with middle initial if applicable. Lastly, I'm playing a card game and need to find the Ace of Spades in a standard 52 card deck. Can you assist with these?\"", "function": [{"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "object", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "object", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}, {"name": "US_president.in_year", "description": "Retrieve the name of the U.S. president in a given year.", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year in question."}, "full_name": {"type": "boolean", "default": true, "description": "Option to return full name with middle initial, if applicable."}}, "required": ["year"]}}, {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "object", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "object", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}}, "required": ["rank", "suit"]}}], "human_eval_answer": "[\"update_user_info(user_id=12345, update_info={'name': 'John Doe', 'email': 'johndoe@example.com'}, database='CustomerInfo')\", \"soccer.get_last_match(team_name='Manchester United', include_stats=True)\", \"US_president.in_year(year=1980, full_name=True)\", \"find_card_in_deck(rank='Ace', suit='Spades')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me who discovered the Higgs Boson and provide additional details about them, such as their birth date and nationality? Also, I am a 180 lbs, 5'11\" tall individual who is moderately active, can you predict my likelihood of having type 2 diabetes? Lastly, I am planning to visit the Louvre museum in Paris, can you tell me its working hours on Monday?\"", "function": [{"name": "get_discoverer", "description": "Get the person or team who made a particular scientific discovery", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The discovery for which the discoverer's information is needed."}, "detail": {"type": "boolean", "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."}}, "required": ["discovery", "detail"]}}, {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "Weight of the person in lbs."}, "height": {"type": "number", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}, {"name": "museum_working_hours.get", "description": "Get the working hours of a museum in a specific location.", "parameters": {"type": "object", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The location of the museum."}, "day": {"type": "string", "description": "Specific day of the week. Optional parameter"}}, "required": ["museum", "location"]}}], "human_eval_answer": "[\"get_discoverer(discovery='Higgs Boson', detail=true)\", \"diabetes_prediction(weight=180, height=71, activity_level='moderately active')\", \"museum_working_hours.get(museum='Louvre', location='Paris', day='Monday')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a few tasks? First, I need to find the greatest common divisor of two numbers, let's say 48 and 36. Second, I'm curious about a historical event. I want to know about the contribution made by Albert Einstein on the date of 1905-05-14 in the field of Physics. Lastly, I'm working on a music project and need to calculate the duration between two notes. The first note has a frequency of 440 Hz and the second note has a frequency of 880 Hz. The tempo of the music is 100 beats per minute. Could you provide me with the results of these calculations?\"", "function": [{"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}, {"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "object", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields."}}, "required": ["scientist", "date"]}}, {"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "object", "properties": {"first_note_frequency": {"type": "number", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "number", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "number", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}], "human_eval_answer": "[\"math.gcd(num1=48, num2=36)\", \"historical_contrib.get_contrib(scientist='Albert Einstein', date='1905-05-14', category='Physics')\", \"music.calculate_note_duration(first_note_frequency=440, second_note_frequency=880, tempo=100)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are a musician who also loves to paint and is interested in probability. You are planning to paint a wall in your house that is 12 feet in length and 8 feet in height. You have chosen a specific paint brand that can cover 350 square feet with one gallon of paint. How many gallons of paint would you need? After painting, you want to compose a song. You are thinking of composing it in the key of 'D'. What would be the musical scale for this key if you choose a 'minor' scale type? Also, you are curious about the binomial distribution. If you were to conduct 20 independent experiments with a success probability of 0.6, what is the probability of having exactly 10 successes?\"", "function": [{"name": "prob_dist.binomial", "description": "Compute the probability of having 'success' outcome from binomial distribution.", "parameters": {"type": "object", "properties": {"trials": {"type": "integer", "description": "The number of independent experiments."}, "successes": {"type": "integer", "description": "The number of success events."}, "p": {"type": "number", "description": "The probability of success on any given trial, defaults to 0.5"}}, "required": ["trials", "successes"]}}, {"name": "calculate_paint_needed", "description": "Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.", "parameters": {"type": "object", "properties": {"coverage_rate": {"type": "integer", "description": "The area in square feet that one gallon of paint can cover."}, "length": {"type": "integer", "description": "Length of the wall to be painted in feet."}, "height": {"type": "integer", "description": "Height of the wall to be painted in feet."}}, "required": ["coverage_rate", "length", "height"]}}, {"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}], "human_eval_answer": "[\"calculate_paint_needed(coverage_rate=350, length=12, height=8)\", \"musical_scale(key='D', scale_type='minor')\", \"prob_dist.binomial(trials=20, successes=10, p=0.6)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you first calculate the probability of drawing a heart from a deck of 52 cards where there are 13 hearts, and then calculate the probability of drawing a queen from the same deck where there are 4 queens? After that, could you retrieve the most recent artwork by the artist named 'Pablo Picasso' with a detailed description? Finally, could you locate the most popular sculpture exhibitions in New York, NY that are happening in the month of December and have high user ratings?\"", "function": [{"name": "card_game_probability.calculate", "description": "Calculate the probability of drawing a certain card or suit from a deck of cards.", "parameters": {"type": "object", "properties": {"total_cards": {"type": "integer", "description": "Total number of cards in the deck."}, "desired_cards": {"type": "integer", "description": "Number of cards in the deck that satisfy the conditions."}, "cards_drawn": {"type": "integer", "default": 1, "description": "Number of cards drawn from the deck."}}, "required": ["total_cards", "desired_cards"]}}, {"name": "get_sculpture_info", "description": "Retrieves the most recent artwork by a specified artist with its detailed description.", "parameters": {"type": "object", "properties": {"artist_name": {"type": "string", "description": "The name of the artist."}, "year": {"type": "integer", "description": "Year of the sculpture. This is optional."}, "detail": {"type": "boolean", "description": "If True, it provides detailed description of the sculpture. Defaults to False."}}, "required": ["artist_name"]}}, {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold."}}, "required": ["location", "art_form"]}}], "human_eval_answer": "[\"card_game_probability.calculate(total_cards=52, desired_cards=13)\", \"card_game_probability.calculate(total_cards=52, desired_cards=4)\", \"get_sculpture_info(artist_name='Pablo Picasso', detail=True)\", \"find_exhibition(location='New York, NY', art_form='sculpture', month='December', user_ratings='high')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you first analyze the structure of a building with the building_id 'B1234' for floors 1, 2, 3, and 4 using the 'dynamic' mode of analysis? Then, could you retrieve the player statistics for 'Michael Jordan' for the year 1996? After that, can you analyze the structure of another building with the building_id 'B5678' for floors 5, 6, 7, and 8 using the 'static' mode of analysis? Finally, could you retrieve the player statistics for 'LeBron James' for the year 2018, specifically for his time with the 'Los Angeles Lakers' team?\"", "function": [{"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "object", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}, {"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional)."}}, "required": ["player_name", "year"]}}], "human_eval_answer": "[\"analyze_structure(building_id='B1234', floors=[1, 2, 3, 4], mode='dynamic')\", \"player_statistic(player_name='Michael Jordan', year=1996)\", \"analyze_structure(building_id='B5678', floors=[5, 6, 7, 8], mode='static')\", \"player_statistic(player_name='LeBron James', year=2018, team_name='Los Angeles Lakers')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you first fetch the top 10 popular artworks at the Metropolitan Museum of Art sorted by popularity and then fetch the top 5 artworks sorted chronologically? After that, could you search for ongoing lawsuits related to Google that were filed in California starting from January 1, 2020? Lastly, could you also find any settled lawsuits related to Microsoft that were filed in New York starting from January 1, 2018?\"", "function": [{"name": "metropolitan_museum.get_top_artworks", "description": "Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number of artworks to fetch"}, "sort_by": {"type": "string", "description": "The criteria to sort the results on.", "enum": ["popularity", "chronological", "alphabetical"]}}, "required": ["number"]}}, {"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed."}, "location": {"type": "string", "description": "Location where the lawsuit was filed."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}], "human_eval_answer": "[\"metropolitan_museum.get_top_artworks(number=10, sort_by='popularity')\", \"metropolitan_museum.get_top_artworks(number=5, sort_by='chronological')\", \"lawsuit_search(company='Google', start_date='2020-01-01', location='California', status='ongoing')\", \"lawsuit_search(company='Microsoft', start_date='2018-01-01', location='New York', status='settled')\"]", "question_type": "parallel_multiple_function"}
{"question": "\" I'm trying to figure out the RGB values of the color 'Cerulean' based on the 'pantone' standard. Secondly, I'm interested in buying a used 'Fender Stratocaster' guitar in 'Good' condition, being sold in 'Los Angeles'. Could you find out the price for me? Lastly, I'm organizing a chess tournament in 'New York' and I'm looking for top players to invite. Could you find the top 15 players with a minimum rating of 2200 for me?\"", "function": [{"name": "identify_color_rgb", "description": "This function identifies the RGB values of a named color.", "parameters": {"type": "object", "properties": {"color_name": {"type": "string", "description": "Name of the color."}, "standard": {"type": "string", "description": "The color standard (e.g. basic, pantone). Default is 'basic'"}}, "required": ["color_name"]}}, {"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "object", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}, {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}], "human_eval_answer": "[\"identify_color_rgb(color_name='Cerulean', standard='pantone')\", \"guitar_price.find(model='Fender Stratocaster', condition='Good', location='Los Angeles')\", \"board_game.chess.get_top_players(location='New York', minimum_rating=2200, number_of_players=15)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me with the following tasks? First, I would like to know the top 5 defence ranking NBA teams from the 2018 season. Second, I have a list of numbers [23, 45, 12, 89, 34, 67, 29] that I need to be sorted in descending order. Lastly, I am curious about the Compound Annual Growth Rate (CAGR) of an investment I made. The initial investment value was $5000, the final investment value turned out to be $15000, and the period of the investment was 7 years. Could you calculate this for me?\"", "function": [{"name": "get_defense_ranking", "description": "Retrieve the defence ranking of NBA teams in a specified season.", "parameters": {"type": "object", "properties": {"season": {"type": "integer", "description": "The NBA season to get defence ranking from."}, "top": {"type": "integer", "default": 1, "description": "Number of top teams in defence ranking to fetch."}}, "required": ["season"]}}, {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "object", "properties": {"list": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting. If not specified, it will default to ascending."}}, "required": ["list", "order"]}}, {"name": "calculate_cagr", "description": "Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.", "parameters": {"type": "object", "properties": {"initial_value": {"type": "number", "description": "The initial investment value."}, "final_value": {"type": "number", "description": "The final investment value."}, "period_in_years": {"type": "integer", "description": "The period of the investment in years."}}, "required": ["initial_value", "final_value", "period_in_years"]}}], "human_eval_answer": "[\"get_defense_ranking(season=2018, top=5)\", \"array_sort(list=[23, 45, 12, 89, 34, 67, 29], order='descending')\", \"calculate_cagr(initial_value=5000, final_value=15000, period_in_years=7)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a few calculations and searches? First, I'm studying probability and I'd like to calculate the binomial probability for a scenario where I have 20 trials, and I'm interested in 5 successful outcomes. Let's assume the probability of success on any given trial is 0.25. Secondly, I'm a big fan of basketball and I'm curious to know who the top female player is currently. Thirdly, I'm planning to buy a guitar and my budget is $500. I prefer a Fender make. Lastly, I'm working on a physics problem where I need to calculate the electromagnetic force between two charges. The first charge is 2 coulombs, the second charge is 3 coulombs and they are placed 0.5 meters apart. Could you help me with these?\"", "function": [{"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "object", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}, {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "object", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}, {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "object", "properties": {"budget": {"type": "number", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter."}}, "required": ["budget", "type"]}}, {"name": "electromagnetic_force", "description": "Calculate the electromagnetic force between two charges placed at a certain distance.", "parameters": {"type": "object", "properties": {"charge1": {"type": "number", "description": "The magnitude of the first charge in coulombs."}, "charge2": {"type": "number", "description": "The magnitude of the second charge in coulombs."}, "distance": {"type": "number", "description": "The distance between the two charges in meters."}, "medium_permittivity": {"type": "number", "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity)."}}, "required": ["charge1", "charge2", "distance"]}}], "human_eval_answer": "[\"calculate_binomial_probability(number_of_trials=20, number_of_successes=5, probability_of_success=0.25)\", \"sports_ranking.get_top_player(sport='basketball', gender='female')\", \"find_instrument(budget=500, type='guitar', make='Fender')\", \"electromagnetic_force(charge1=2, charge2=3, distance=0.5)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan a trip? I want to start by finding a vegan restaurant in San Francisco, CA that operates until at least 22:00. Then, I want to book a hotel in the same city. I prefer a deluxe room for 3 nights starting from July 1st, and I would like the hotel to be pet-friendly and have a gym. After that, I want to find the schedule of the Golden State Warriors for the next 5 games in the NBA. Lastly, I have a deck of cards and I want to find the Queen of Hearts in it.\"", "function": [{"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format."}}, "required": ["location"]}}, {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "object", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "object", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}}, "required": ["rank", "suit"]}}, {"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}, {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel."}}, "required": ["location", "room_type", "duration", "start_date"]}}], "human_eval_answer": "[\"vegan_restaurant.find_nearby(location='San Francisco, CA', operating_hours=22)\", \"hotel_booking(location='San Francisco, CA', room_type='deluxe', duration=3, start_date='July 1st', preferences=['pet_friendly', 'gym'])\", \"sports_team.get_schedule(team_name='Golden State Warriors', num_of_games=5, league='NBA')\", \"find_card_in_deck(rank='Queen', suit='Hearts')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me with the following tasks? First, I need to know the travel distance and estimated travel time from my home in New York to my office in Boston, considering the current traffic conditions. Second, I am interested in finding out the top 5 chess players in San Francisco with a minimum rating of 2500. Lastly, I am working on a project and need to retrieve the historical GDP data for Japan from the year 2000 to 2020. Can you assist me with these?\"", "function": [{"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}, {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, {"name": "get_historical_GDP", "description": "Retrieve historical GDP data for a specific country and time range.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country for which the historical GDP data is required."}, "start_year": {"type": "integer", "description": "Starting year of the period for which GDP data is required."}, "end_year": {"type": "integer", "description": "Ending year of the period for which GDP data is required."}}, "required": ["country", "start_year", "end_year"]}}], "human_eval_answer": "[\"maps.get_distance_duration(start_location='New York', end_location='Boston', traffic=true)\", \"board_game.chess.get_top_players(location='San Francisco', minimum_rating=2500, number_of_players=5)\", \"get_historical_GDP(country='Japan', start_year=2000, end_year=2020)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Imagine you are planning a cozy evening at home. You want to play a card game with a deck of cards, but you are not sure if the 'King of Hearts' is in the deck. Can you check if it's there? Later, you plan to cook a recipe that requires 2 cups of sugar, but you only have a tablespoon to measure. How many tablespoons are equivalent to 2 cups? Also, you have 100 Euros in your wallet, and you want to know how much it would be in US dollars. Can you convert it? Finally, you are thinking about adding some new plants to your garden. You live in San Francisco and are interested in nurseries that provide 'Annual' and 'Tree' type plants. Can you find some local nurseries?\"", "function": [{"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "object", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "object", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}}, "required": ["rank", "suit"]}}, {"name": "currency_exchange.convert", "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "number", "description": "The amount in base currency to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "object", "properties": {"value": {"type": "number", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 0."}}, "required": ["value", "from_unit", "to_unit"]}}, {"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}], "human_eval_answer": "[\"find_card_in_deck(rank='King', suit='Hearts')\", \"recipe.unit_conversion(value=2, from_unit='cup', to_unit='tablespoon')\", \"currency_exchange.convert(base_currency='Euros', target_currency='US dollars', amount=100)\", \"local_nursery.find(location='San Francisco', plant_types=['Annual', 'Tree'])\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me plan a dinner? I am looking for a vegan main course recipe that can be prepared within 45 minutes. After dinner, we are planning to play a poker game, could you tell me the probability of getting a full house with a deck of 52 cards and a hand size of 5? Also, I am new to Denver, CO and would like to know the nearby hospitals within a radius of 10 kms, specifically those with an Emergency department.\"", "function": [{"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "object", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "number", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}, {"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "object", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, {"name": "hospital.locate", "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Denver, CO"}, "radius": {"type": "integer", "description": "The radius within which you want to find the hospital in kms."}, "department": {"type": "string", "description": "Specific department within the hospital", "enum": ["General Medicine", "Emergency", "Pediatrics", "Cardiology", "Orthopedics"]}}, "required": ["location", "radius"]}}], "human_eval_answer": "[\"find_recipe(dietary_restrictions='vegan', recipe_type='main course', time=45)\", \"poker_probability.full_house(deck_size=52, hand_size=5)\", \"hospital.locate(location='Denver, CO', radius=10, department='Emergency')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you tell me the name of the scientist who is credited for the discovery of 'Relativity Theory'? After that, I want to book a direct flight from 'Los Angeles' to 'New York' on the date '2022-12-25' at '10:00 AM'. Also, I am interested in knowing the player statistics for the video game 'Call of Duty' for the username 'gamer123' on the 'PlayStation' platform. Lastly, can you find me upcoming 'rock' genre events in 'San Francisco, CA' for the next 14 days?\"", "function": [{"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}, {"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "object", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false"}}, "required": ["departure_location", "destination_location", "date"]}}, {"name": "game_stats.fetch_player_statistics", "description": "Fetch player statistics for a specific video game for a given user.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the video game."}, "username": {"type": "string", "description": "The username of the player."}, "platform": {"type": "string", "description": "The platform user is playing on.", "default": "PC"}}, "required": ["game", "username"]}}, {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}], "human_eval_answer": "[\"get_scientist_for_discovery(discovery='Relativity Theory')\", \"flight.book(departure_location='Los Angeles', destination_location='New York', date='2022-12-25', time='10:00 AM', direct_flight=True)\", \"game_stats.fetch_player_statistics(game='Call of Duty', username='gamer123', platform='PlayStation')\", \"event_finder.find_upcoming(location='San Francisco, CA', genre='rock', days_ahead=14)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me with a few tasks? First, I would like to visualize a sine wave with a frequency of 5 Hz, starting from 0 radians and ending at 10 radians, with an amplitude of 2 and a phase shift of 1 radian. Secondly, I have a dataset that I would like to train a Random Forest Model on. The dataset has 1000 rows and 20 columns, and I would like to set the number of trees in the forest to 200 and the maximum depth of the tree to 10. Thirdly, I am interested in the last match played by the soccer club 'Manchester United', and I would like to include match statistics like possession, shots on target etc. Lastly, I am curious about the dimensions of the 'Empire State Building', and I would like the dimensions in feet. Could you assist me with these?\"", "function": [{"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "object", "properties": {"start_range": {"type": "number", "description": "Start of the range in radians."}, "end_range": {"type": "number", "description": "End of the range in radians."}, "frequency": {"type": "number", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "number", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "number", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}, {"name": "random_forest.train", "description": "Train a Random Forest Model on given data", "parameters": {"type": "object", "properties": {"n_estimators": {"type": "integer", "description": "The number of trees in the forest."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree."}, "data": {"type": "Dataframe", "description": "The training data for the model."}}, "required": ["n_estimators", "max_depth", "data"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}, {"name": "building.get_dimensions", "description": "Retrieve the dimensions of a specific building based on its name.", "parameters": {"type": "object", "properties": {"building_name": {"type": "string", "description": "The name of the building."}, "unit": {"type": "string", "description": "The unit in which you want the dimensions. Default is meter.", "enum": ["meter", "feet"]}}, "required": ["building_name", "unit"]}}], "human_eval_answer": "[\"plot_sine_wave(start_range=0, end_range=10, frequency=5, amplitude=2, phase_shift=1)\", \"random_forest.train(n_estimators=200, max_depth=10, data='dataset')\", \"soccer.get_last_match(team_name='Manchester United', include_stats=True)\", \"building.get_dimensions(building_name='Empire State Building', unit='feet')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me find a multiplayer game that is compatible with my Windows 10 system, has a minimum rating of 4.0, and falls under the 'Action' genre? After that, I need to calculate the area under the curve for the mathematical function 'x^2' within the interval [0, 5] using the 'trapezoidal' method. Then, I want to know the geographic distance in kilometers from 'Los Angeles' to 'New York'. Lastly, I need to send an email to 'john.doe@example.com' with the subject 'Meeting Reminder', the body saying 'Do not forget about our meeting tomorrow at 10 AM', and carbon copy it to 'jane.doe@example.com'.\"", "function": [{"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "object", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "number", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}, {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "number"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}, {"name": "geo_distance.calculate", "description": "Calculate the geographic distance between two given locations.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting location for the distance calculation."}, "end_location": {"type": "string", "description": "The destination location for the distance calculation."}, "units": {"type": "string", "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."}}, "required": ["start_location", "end_location"]}}, {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "object", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy."}}, "required": ["to", "subject", "body"]}}], "human_eval_answer": "[\"multiplayer_game_finder(platform='Windows 10', rating=4.0, genre='Action')\", \"calculate_area_under_curve(function='x^2', interval=[0, 5], method='trapezoidal')\", \"geo_distance.calculate(start_location='Los Angeles', end_location='New York', units='kilometers')\", \"send_email(to='john.doe@example.com', subject='Meeting Reminder', body='Do not forget about our meeting tomorrow at 10 AM', cc='jane.doe@example.com')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you please help me with some information? First, I would like to know the amount of calories in the 'Chicken Alfredo' recipe from the 'AllRecipes' website for dinner. Second, I am interested in the current stock prices of 'Apple', 'Microsoft', and 'Tesla'. Lastly, I want to know the FIFA ranking of the 'Brazil' men's soccer team in 2018.\"", "function": [{"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "object", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner')"}}, "required": ["website", "recipe"]}}, {"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "object", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}], "human_eval_answer": "[\"recipe_info.get_calories(website='AllRecipes', recipe='Chicken Alfredo', optional_meal_time='Dinner')\", \"get_stock_price(company_names=['Apple', 'Microsoft', 'Tesla'])\", \"get_team_ranking(team_name='Brazil', year=2018, gender='men')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Could you help me plan a dinner party? I need to find a Vegetarian recipe that uses potatoes, carrots, and onions and serves 4 people. Also, I'm hosting this party in New York and I would like to know the detailed weather forecast for the next 12 hours, including precipitation details. Lastly, my friend is joining from Tokyo and I need to know the time difference between New York and Tokyo to schedule the party at a convenient time for both of us.\"", "function": [{"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "object", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}, {"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "duration": {"type": "integer", "description": "Duration in hours for the detailed forecast."}, "include_precipitation": {"type": "boolean", "description": "Whether to include precipitation data in the forecast."}}, "required": ["location", "duration"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "object", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}], "human_eval_answer": "[\"recipe_search(dietary_restriction='Vegetarian', ingredients=['potatoes', 'carrots', 'onions'], servings=4)\", \"detailed_weather_forecast(location='New York', duration=12, include_precipitation=True)\", \"get_time_difference(place1='New York', place2='Tokyo')\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you first find me a vegan, main course recipe that can be prepared within 30 minutes? After that, could you please retrieve the details of the scientific discovery of Gravity using the most accepted method? Once done, I would also like to know about the discovery of the Higgs Boson particle using the same method. Lastly, could you find me a gluten-free dessert recipe that can be prepared within 45 minutes?\"", "function": [{"name": "science_history.get_discovery_details", "description": "Retrieve the details of a scientific discovery based on the discovery name.", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The name of the discovery, e.g. Gravity"}, "method_used": {"type": "string", "description": "The method used for the discovery, default value is 'default' which gives the most accepted method."}}, "required": ["discovery"]}}, {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "object", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "number", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}], "human_eval_answer": "[\"find_recipe(dietary_restrictions='vegan', recipe_type='main course', time=30)\", \"science_history.get_discovery_details(discovery='Gravity', method_used='default')\", \"science_history.get_discovery_details(discovery='Higgs Boson', method_used='default')\", \"find_recipe(dietary_restrictions='gluten free', recipe_type='dessert', time=45)\"]", "question_type": "parallel_multiple_function"}
{"question": "\"Can you help me with two things? First, I am currently in New York and it's 2pm here. I have a meeting scheduled with a client in London and another one in Tokyo. I need to know what time it will be in both these cities when it's 2pm in New York. Second, I am considering switching to solar energy for my home in California and I want to understand the potential greenhouse gas emissions I could save. I plan to use it for 12 months. Can you calculate the emission savings for me?\"", "function": [{"name": "timezone.convert", "description": "Convert time from one time zone to another.", "parameters": {"type": "object", "properties": {"time": {"type": "string", "description": "The local time you want to convert, e.g. 3pm"}, "from_timezone": {"type": "string", "description": "The time zone you want to convert from."}, "to_timezone": {"type": "string", "description": "The time zone you want to convert to."}}, "required": ["time", "from_timezone", "to_timezone"]}}, {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "object", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy."}}, "required": ["energy_type", "usage_duration"]}}], "human_eval_answer": "[\"timezone.convert(time='2pm', from_timezone='New York', to_timezone='London')\", \"timezone.convert(time='2pm', from_timezone='New York', to_timezone='Tokyo')\", \"calculate_emission_savings(energy_type='solar', usage_duration=12, region='California')\"]", "question_type": "parallel_multiple_function"}
{"question": "Calculate the area of a triangle given the base is 10 meters and height is 5 meters.", "function": {"name": "determine_body_mass_index", "description": "Calculate body mass index given weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "Weight of the individual in kilograms."}, "height": {"type": "number", "description": "Height of the individual in meters."}}, "required": ["weight", "height"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Solve the quadratic equation with coefficients a = 1, b = 2, and c = 3.", "function": {"name": "math.sum", "description": "Compute the sum of all numbers in a list.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers to be added up."}, "decimal_places": {"type": "integer", "description": "The number of decimal places to round to. Default is 2."}}, "required": ["numbers"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Solve for the roots of the equation 3x^2 - 2x - 5.", "function": {"name": "distance_calculator.calculate", "description": "Calculate the distance between two geographical coordinates.", "parameters": {"type": "object", "properties": {"coordinate_1": {"type": "array", "items": {"type": "number"}, "description": "The first coordinate, a pair of latitude and longitude."}, "coordinate_2": {"type": "array", "items": {"type": "number"}, "description": "The second coordinate, a pair of latitude and longitude."}}, "required": ["coordinate_1", "coordinate_2"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the slope of the line which is perpendicular to the line with the equation y = 3x + 2?", "function": {"name": "find_critical_points", "description": "Finds the critical points of the function.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to find the critical points for."}, "variable": {"type": "string", "description": "The variable in the function."}, "range": {"type": "array", "items": {"type": "number"}, "description": "The range to consider for finding critical points. Optional."}}, "required": ["function", "variable"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the roots of linear equation bx + c = 0?", "function": {"name": "find_roots", "description": "Find the roots of a quadratic equation ax^2 + bx + c = 0.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of x^2."}, "b": {"type": "number", "description": "Coefficient of x."}, "c": {"type": "number", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the perimeter of a rectangle with length 5 meters and width 4 meters?", "function": {"name": "solve_quadratic_equation", "description": "Solves a quadratic equation and returns the possible solutions.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of the x-squared term in the quadratic equation."}, "b": {"type": "number", "description": "Coefficient of the x term in the quadratic equation."}, "c": {"type": "number", "description": "Constant term in the quadratic equation."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the area of a rectangle that has width of 5m and length of 7m?", "function": {"name": "draw_circle", "description": "Draw a circle based on the radius provided.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "unit": {"type": "string", "description": "The unit of measurement for the radius. e.g. 'm' for meters, 'cm' for centimeters"}}, "required": ["radius", "unit"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the area under the curve of the function f(x) = 3x^2 from x = 1 to x = 5?", "function": {"name": "math.integral_calculator", "description": "Calculate the definite integral of a mathematical function over a specific interval.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The mathematical function whose integral needs to be calculated."}, "lower_bound": {"type": "number", "description": "The lower limit of the definite integral."}, "upper_bound": {"type": "number", "description": "The upper limit of the definite integral."}}, "required": ["function", "lower_bound", "upper_bound"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the integral of x^3 from 1 to 5", "function": {"name": "str_to_int", "description": "Converts string value to integer.", "parameters": {"type": "object", "properties": {"value": {"type": "string", "description": "String value to be converted to integer"}}, "required": ["value"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the definite integral of f(x)=x^2 from x=1 to x=3.", "function": {"name": "CalculateTax", "description": "Calculate the income tax based on the annual income, tax rate, and other deductions.", "parameters": {"type": "object", "properties": {"annual_income": {"type": "number", "description": "The annual income of the person."}, "tax_rate": {"type": "number", "description": "The tax rate."}, "other_deductions": {"type": "number", "description": "Any other deductions."}}, "required": ["annual_income", "tax_rate", "other_deductions"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Compute the derivative of the function '2x' within the at 1.", "function": {"name": "calculus.compute_definite_integral", "description": "Compute the definite integral of a function within a given interval.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to be integrated."}, "interval": {"type": "array", "items": {"type": "integer"}, "description": "The interval within which the definite integral needs to be computed."}, "num_of_partitions": {"type": "integer", "description": "The number of partitions for approximation. Default is 1000."}}, "required": ["function", "interval"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the closest integer to 30?", "function": {"name": "get_closest_prime", "description": "Retrieve the closest prime number that is lesser than a given number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number which will serve as the upper limit to find the closest prime."}, "skip": {"type": "integer", "description": "Number of closest prime to skip. Default is 0."}}, "required": ["number", "skip"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the fastest route from New York to Boston.", "function": {"name": "prime_numbers_in_range", "description": "Find all the prime numbers within a certain numeric range.", "parameters": {"type": "object", "properties": {"start": {"type": "number", "description": "The start of the numeric range."}, "end": {"type": "number", "description": "The end of the numeric range."}, "return_format": {"type": "string", "enum": ["array", "string"], "description": "The format in which the prime numbers should be returned."}}, "required": ["start", "end"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate the prime factors of 100.", "function": {"name": "calculate_compound_interest", "description": "Calculate the compound interest for a given principal amount, rate, time and compounding frequency.", "parameters": {"type": "object", "properties": {"principal_amount": {"type": "number", "description": "The initial amount of money that is loaned or invested."}, "annual_interest_rate": {"type": "number", "description": "The annual interest rate as a decimal number. For example, an interest rate of 5% would be entered as 0.05."}, "compounding_periods_per_year": {"type": "integer", "description": "The number of times that interest is compounded per year."}, "years": {"type": "number", "description": "The number of years the money is invested for."}}, "required": ["principal_amount", "annual_interest_rate", "compounding_periods_per_year", "years"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the acceleration a ball will reach if it's thrown straight upwards with a velocity of 5 m/s?", "function": {"name": "calculate_maximum_height", "description": "Calculate the maximum height an object will reach if it's thrown straight upwards with an initial velocity, ignoring air resistance.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity in meters per second."}, "gravity": {"type": "number", "description": "The acceleration due to gravity in meters per second squared, default value is 9.8."}}, "required": ["initial_velocity"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are the latest movie releases?", "function": {"name": "calculate_velocity", "description": "Calculate the final velocity of an object in motion given its initial velocity, acceleration and time.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2."}, "time": {"type": "number", "description": "The time for which the object is in motion in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How far will a car travel in time 't' when launched with velocity 'v' at an angle 'theta'?", "function": {"name": "calculate_projectile_range", "description": "Calculate the range of a projectile launched at an angle with initial velocity, using the kinematic equation.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity at which projectile is launched."}, "angle": {"type": "number", "description": "The angle at which projectile is launched. This should be in degrees."}, "time": {"type": "number", "description": "The time in seconds after which the range is to be calculated."}}, "required": ["initial_velocity", "angle"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the time right now?", "function": {"name": "calculate_time", "description": "Calculates the time taken to cover a distance at a certain speed.", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance to be covered in meters."}, "speed": {"type": "number", "description": "The speed at which the object is moving in m/s."}, "round_to_nearest_second": {"type": "boolean", "description": "Optional parameter to round the time to the nearest second.", "default": false}}, "required": ["distance", "speed"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How do I find the angle of the force for a given momentum?", "function": {"name": "calculate_vector_angle", "description": "Calculate the angle of a vector based on its X and Y components.", "parameters": {"type": "object", "properties": {"X_component": {"type": "number", "description": "The X component of the vector."}, "Y_component": {"type": "number", "description": "The Y component of the vector."}, "use_degrees": {"type": "boolean", "description": "If true, the result will be in degrees. If false, the result will be in radians. Default is false."}}, "required": ["X_component", "Y_component"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the volume of a cone with base radius 3 cm and height 5 cm.", "function": {"name": "investment_calculator.calculate_return", "description": "Calculate the return of an investment after a specific duration.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial investment amount."}, "annual_rate": {"type": "number", "description": "The annual rate of return."}, "years": {"type": "number", "description": "The duration of the investment in years."}}, "required": ["initial_investment", "annual_rate", "years"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the duration of flight between Los Angeles and Miami.", "function": {"name": "currency_converter", "description": "Converts a value from one currency to another.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The base currency you want to convert from."}, "target_currency": {"type": "string", "description": "The target currency you want to convert to."}, "amount": {"type": "number", "description": "The amount of money you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the magnetic field at a point 4m away from a wire carrying a current of 2A?", "function": {"name": "calculate_wave_amplitude", "description": "Calculate the amplitude of an electromagnetic wave based on its maximum electric field strength.", "parameters": {"type": "object", "properties": {"max_electric_field_strength": {"type": "number", "description": "The maximum electric field strength of the electromagnetic wave."}, "c": {"type": "number", "description": "The speed of light in vacuum, usually denoted as 'c'. Default is 3 * 10^8 m/s"}, "wave_frequency": {"type": "number", "description": "The frequency of the electromagnetic wave. Default is 1 Hz"}}, "required": ["max_electric_field_strength"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the magnetic field at a point located at distance 'r' from a wire carrying current 'I'?", "function": {"name": "magnetic_field_intensity", "description": "Calculates the magnetic field intensity at a point located at a given distance from a current carrying wire", "parameters": {"type": "object", "properties": {"current": {"type": "number", "description": "The current flowing through the wire in Amperes."}, "distance": {"type": "number", "description": "The distance from the wire at which magnetic field intensity is required, in meters."}, "permeability": {"type": "number", "description": "The permeability of free space, optional, default value is 4*pi*10^-7."}}, "required": ["current", "distance"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the mass of an electron?", "function": {"name": "calculate_magnetic_field", "description": "Calculate the magnetic field at a certain distance from a straight wire carrying current using Ampere\u2019s Law.", "parameters": {"type": "object", "properties": {"current": {"type": "number", "description": "The current flowing through the wire in amperes."}, "distance": {"type": "number", "description": "The distance from the wire at which to calculate the magnetic field in meters."}, "permeability": {"type": "number", "description": "The permeability of free space. The default value is 4\u03c0 \u00d7 10^\u22127 N/A^2."}}, "required": ["current", "distance"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the mass of an electron?", "function": {"name": "calculate_current", "description": "Calculate the electric current by giving the voltage and resistance.", "parameters": {"type": "object", "properties": {"voltage": {"type": "number", "description": "The electric voltage in volts."}, "resistance": {"type": "number", "description": "The electrical resistance in ohms."}, "frequency": {"type": "number", "description": "The frequency of the current, default is 50Hz."}}, "required": ["voltage", "resistance"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the freezing point point of water at a pressure of 10 kPa?", "function": {"name": "thermodynamics.calculate_boiling_point", "description": "Calculate the boiling point of a given substance at a specific pressure.", "parameters": {"type": "object", "properties": {"substance": {"type": "string", "description": "The substance for which to calculate the boiling point."}, "pressure": {"type": "number", "description": "The pressure at which to calculate the boiling point."}, "unit": {"type": "string", "description": "The unit of the pressure. Default is 'kPa'."}}, "required": ["substance", "pressure"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How much gas is generated from heating a 2 m\u00b3 closed chamber with air at a temperature of 25\u00b0C to 100\u00b0C?", "function": {"name": "thermodynamics.calc_gas_pressure", "description": "Calculate gas pressure in a closed chamber due to heating", "parameters": {"type": "object", "properties": {"volume": {"type": "number", "description": "The volume of the chamber in cubic meters."}, "initial_temperature": {"type": "number", "description": "The initial temperature of the gas in degree Celsius."}, "final_temperature": {"type": "number", "description": "The final temperature of the gas in degree Celsius."}, "initial_pressure": {"type": "number", "description": "The initial pressure of the gas in Pascal. Default is standard atmospheric pressure."}}, "required": ["volume", "initial_temperature", "final_temperature"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What will be the energy needed to increase the temperature of 3 kg of water by 4 degrees Celsius?", "function": {"name": "calculate_heat", "description": "Calculate the heat required to raise the temperature of a substance using its specific heat.", "parameters": {"type": "object", "properties": {"mass": {"type": "number", "description": "The mass of the substance in kilograms."}, "specific_heat": {"type": "number", "description": "The specific heat of the substance in J/kg.\u00b0C. For water, it is 4.184 J/kg.\u00b0C"}, "change_in_temp": {"type": "number", "description": "The change in temperature in degrees Celsius."}}, "required": ["mass", "specific_heat", "change_in_temp"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How many sides does a hexagon have?", "function": {"name": "calculate_boiling_point", "description": "Calculate the boiling point of a given substance at a given pressure.", "parameters": {"type": "object", "properties": {"substance": {"type": "string", "description": "The chemical name of the substance."}, "pressure": {"type": "number", "description": "The external pressure. Default is 1 atm (atmospheric pressure)."}}, "required": ["substance", "pressure"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Identify the number of the mitochondria in a cell.", "function": {"name": "get_cell_function", "description": "Get the information about cell functions based on its part.", "parameters": {"type": "object", "properties": {"cell_part": {"type": "string", "description": "The part of the cell, e.g. mitochondria"}, "detail_level": {"type": "string", "enum": ["basic", "detailed"], "description": "The level of detail for the cell function information."}}, "required": ["cell_part", "detail_level"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the name of a type of cell that has multiple nuclei?", "function": {"name": "bloodcell_classification", "description": "Identify and categorize different types of blood cells based on given attributes.", "parameters": {"type": "object", "properties": {"cell_shape": {"type": "string", "description": "The shape of the cell, e.g. round, oval."}, "cell_size": {"type": "string", "description": "The size of the cell, e.g. large, medium, small."}, "cell_function": {"type": "string", "description": "The function of the cell, e.g. carrying oxygen, fighting infection.", "optional": true}}, "required": ["cell_shape", "cell_size"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the favorite restaurant in London.", "function": {"name": "cell.divide", "description": "Simulate the division of a cell into two daughter cells.", "parameters": {"type": "object", "properties": {"cell_id": {"type": "string", "description": "The unique ID of the parent cell."}, "method": {"type": "string", "description": "The method of cell division, i.e., 'mitosis' or 'meiosis'."}, "times": {"type": "integer", "description": "The number of times the cell will divide. Defaults to 1 if not provided."}}, "required": ["cell_id", "method"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Identify the type of blood cells responsible for clotting.", "function": {"name": "cellBiology.getCellType", "description": "This function will return the type of the cell based on it's characteristics.", "parameters": {"type": "object", "properties": {"nucleus_count": {"type": "integer", "description": "The number of nucleus in the cell."}, "organism_type": {"type": "string", "description": "The type of organism the cell belongs to."}, "membrane_type": {"type": "string", "description": "Type of membrane in the cell, default value is 'Phospholipid bi-layer'", "default": "Phospholipid bi-layer"}}, "required": ["nucleus_count", "organism_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Identify the genetic code sequence \"ATCG\".", "function": {"name": "identify_species", "description": "Identifies the species of an organism based on its genetic code sequence.", "parameters": {"type": "object", "properties": {"sequence": {"type": "string", "description": "A genetic code sequence."}, "database": {"type": "string", "description": "The genetic database to refer to while identifying species.", "default": "GenBank"}}, "required": ["sequence"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the dominant genetic trait of a Lion?", "function": {"name": "genetics.get_variant_frequency", "description": "Retrieve the frequency of a gene variant in a specific population.", "parameters": {"type": "object", "properties": {"variant_id": {"type": "string", "description": "The id of the gene variant."}, "population": {"type": "string", "description": "The population to retrieve the frequency for."}}, "required": ["variant_id", "population"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the mating process of Lions?", "function": {"name": "get_genetic_traits", "description": "Retrieve the dominant and recessive genetic traits for a given species.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species to retrieve the genetic traits for."}, "dominant_trait": {"type": "string", "description": "The dominant trait for the species."}, "recessive_trait": {"type": "string", "description": "The recessive trait for the species."}}, "required": ["species", "dominant_trait", "recessive_trait"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the frequency of gene variant rs7412 in the European population?", "function": {"name": "get_dominant_trait", "description": "Calculate the dominant genetic trait of an organism based on its genetic makeup.", "parameters": {"type": "object", "properties": {"allele1": {"type": "string", "description": "The first allele of the organism."}, "allele2": {"type": "string", "description": "The second allele of the organism."}, "inheritance_pattern": {"type": "string", "description": "The type of inheritance pattern (could be dominant, recessive, or co-dominant). Default is 'dominant'."}}, "required": ["allele1", "allele2"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find a picnic spot in Miami.", "function": {"name": "local_fauna", "description": "Get information about fauna in a specified region.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The region or area to find information about."}, "species_type": {"type": "string", "description": "Type of species e.g birds, mammals etc. for detailed information."}, "migration_season": {"type": "string", "description": "Season when fauna migrate e.g spring, winter, none. Default is none."}}, "required": ["location", "species_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find me a documentary about global warming.", "function": {"name": "retrieve_scientific_paper", "description": "Fetches the details of scientific research paper based on its topic.", "parameters": {"type": "object", "properties": {"topic": {"type": "string", "description": "Topic of the research paper"}, "year": {"type": "string", "description": "Year of publishing of the research paper. If not specified, fetches the most recent paper"}, "author": {"type": "string", "description": "Author of the research paper. If not specified, fetches the paper with most citations"}}, "required": ["topic", "year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How to increase the population of deer in a forest?", "function": {"name": "calculate_population_growth", "description": "Calculate the population growth of an animal based on the current population, birth rate and death rate.", "parameters": {"type": "object", "properties": {"current_population": {"type": "number", "description": "The current population of the animal."}, "birth_rate": {"type": "number", "description": "The birth rate of the animal."}, "death_rate": {"type": "number", "description": "The death rate of the animal."}}, "required": ["current_population", "birth_rate", "death_rate"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How is the air quality in Los Angeles right now?", "function": {"name": "plant_biomass", "description": "Calculate the biomass of a plant species in a given area.", "parameters": {"type": "object", "properties": {"species_name": {"type": "string", "description": "The name of the plant species."}, "area": {"type": "number", "description": "The area of the forest in square kilometers."}, "density": {"type": "number", "description": "The density of the plant species in the area. Default is average global density."}}, "required": ["species_name", "area"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the common ancestor of lion and zebra?", "function": {"name": "calculate_fibonacci_sequence", "description": "Calculates fibonacci sequence up to a specified limit.", "parameters": {"type": "object", "properties": {"limit": {"type": "integer", "description": "The upper limit of the fibonacci sequence to be calculated."}, "show_sequence": {"type": "boolean", "description": "Optional parameter to decide whether to print the fibonacci sequence or not. Default is False."}}, "required": ["limit"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the evolutionary history of pandas?", "function": {"name": "calculate_biodiversity_index", "description": "Calculate the biodiversity index of a specific environment or biome using species richness and species evenness.", "parameters": {"type": "object", "properties": {"species_richness": {"type": "integer", "description": "The number of different species in a specific environment."}, "species_evenness": {"type": "number", "description": "The relative abundance of the different species in an environment."}, "region": {"type": "string", "description": "The specific environment or biome to be measured.", "enum": ["Tropical Rainforest", "Desert", "Tundra", "Grassland", "Ocean"]}}, "required": ["species_richness", "species_evenness"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How can I apply Evolutionary Algorithm in game Artificial Intelligence?", "function": {"name": "evolve_creatures", "description": "Apply the Evolutionary Algorithm to improve the creatures in a simulation over generations.", "parameters": {"type": "object", "properties": {"population_size": {"type": "integer", "description": "The initial size of the creature population."}, "mutation_rate": {"type": "float", "description": "The probability of mutation in each generation."}, "generations": {"type": "integer", "description": "The number of generations to run the simulation."}, "fitness_goal": {"type": "integer", "description": "The fitness goal that the creatures should strive for. This is an optional parameter."}}, "required": ["population_size", "mutation_rate", "generations"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the gene sequence for evolutionary changes in whales?", "function": {"name": "gene_sequencer", "description": "Generate possible gene sequences to see evolutionary changes", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species whose gene sequence you want to create."}, "mutation_rate": {"type": "number", "description": "The rate at which mutation occurs, ranging from 0-1."}, "evolution_duration": {"type": "number", "description": "The duration for which evolution occurs, in years."}, "mutation_factors": {"type": "array", "items": {"type": "string", "enum": ["genetic_drift", "natural_selection", "non-random_mating", "gene_flow", "mutation"]}, "description": "Factors contributing to mutation. Optional."}}, "required": ["species", "mutation_rate", "evolution_duration"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate the sine of 45 degree.", "function": {"name": "create_polygon", "description": "Create a polygon shape with given vertices.", "parameters": {"type": "object", "properties": {"vertices": {"type": "array", "description": "List of vertices (x, y) to define the shape."}, "is_closed": {"type": "boolean", "description": "Whether to close the shape or not, i.e., connect the last vertex with the first vertex."}, "stroke_width": {"type": "integer", "description": "Stroke width of the shape outline."}}, "required": ["vertices", "is_closed"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Give me the price of a Tesla model S in India.", "function": {"name": "get_exchange_rate", "description": "Retrieve the current exchange rate between two currencies.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The base currency."}, "target_currency": {"type": "string", "description": "The target currency."}}, "required": ["base_currency", "target_currency"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are the ingredients for lasagna?", "function": {"name": "flight_schedule.get_timings", "description": "Get the departure and arrival times for flights between two airports.", "parameters": {"type": "object", "properties": {"from_airport": {"type": "string", "description": "The code for the departure airport."}, "to_airport": {"type": "string", "description": "The code for the destination airport."}, "date": {"type": "string", "description": "The departure date."}}, "required": ["from_airport", "to_airport"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the current Gini Coefficient of USA?", "function": {"name": "finance.fetchGDP", "description": "Fetch the GDP of the given country in the given year.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The name of the country to get the GDP of."}, "year": {"type": "integer", "description": "The year to get the GDP of."}, "format": {"type": "string", "description": "The format to return the data in. Default is 'USD'.", "enum": ["USD", "EUR", "GBP"]}}, "required": ["country", "year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the time difference between Los Angeles and Berlin?", "function": {"name": "get_co-ordinate", "description": "Fetch geographical coordinates of a particular location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city name you want coordinates for."}}, "required": ["location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Give me a selection of horror movies to watch on a Friday night.", "function": {"name": "convert_celsius_to_fahrenheit", "description": "Convert a temperature from Celsius to Fahrenheit.", "parameters": {"type": "object", "properties": {"celsius": {"type": "number", "description": "The temperature in Celsius to be converted."}, "precision": {"type": "integer", "description": "The decimal precision for the conversion result.", "default": 2}}, "required": ["celsius"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate the fibonacci of number 20.", "function": {"name": "cryptocurrency_price", "description": "Get the current price of a specific cryptocurrency.", "parameters": {"type": "object", "properties": {"currency": {"type": "string", "description": "The symbol of the cryptocurrency."}, "vs_currency": {"type": "string", "description": "The target currency to represent the price."}, "include_market_cap": {"type": "boolean", "default": "false", "description": "Optional field to include market capitalization."}}, "required": ["currency", "vs_currency"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Convert the sentence 'Hello, how are you?' from English to French.", "function": {"name": "compress_file", "description": "Compresses a given file into a zip archive.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The path of the file to compress."}, "archive_name": {"type": "string", "description": "The name of the resulting archive."}, "compression_level": {"type": "integer", "description": "The level of compression to apply (from 0 to 9). Default is 5."}}, "required": ["file_path", "archive_name"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the world series in 2018?", "function": {"name": "database_query.run", "description": "Run a query on a SQL database.", "parameters": {"type": "object", "properties": {"database": {"type": "string", "description": "The name of the database."}, "query": {"type": "string", "description": "The SQL query to run."}, "connect_credentials": {"type": "object", "items": {"type": "string"}, "description": "Optional field. A dictionary of credentials to connect to the database if needed.", "default": {}}}, "required": ["database", "query"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the highest grossing movie of all time?", "function": {"name": "movies.search", "description": "Search movies based on a set of specified criteria.", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "The title of the movie."}, "year": {"type": "integer", "description": "The release year of the movie."}, "genre": {"type": "string", "description": "The genre of the movie."}}, "required": ["title", "year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Which online bookstore sells 'To Kill a Mockingbird'?", "function": {"name": "add_product_to_cart", "description": "This function allows users to add a product to their cart.", "parameters": {"type": "object", "properties": {"product_id": {"type": "integer", "description": "The ID of the product"}, "quantity": {"type": "integer", "description": "The number of this product to add to the cart"}, "cart_id": {"type": "integer", "description": "The ID of the cart, if no ID is given a new cart is created"}}, "required": ["product_id", "quantity"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the current bitcoin price?", "function": {"name": "database_connect.select", "description": "Retrieve specific records from a given database and table.", "parameters": {"type": "object", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table in the database."}, "condition": {"type": "string", "description": "SQL condition to select specific records.", "default": "none"}}, "required": ["database_name", "table_name"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How to solve the quadratic equation with coefficients 2, 3 and 4?", "function": {"name": "genetic_algorithm.optimize", "description": "Apply the genetic algorithm to optimize a function with multiple variables.", "parameters": {"type": "object", "properties": {"function": {"type": "function", "description": "The function to be optimized."}, "constraints": {"type": "array", "items": {"type": "string", "description": "A list of constraints for the variables in the function."}}, "population_size": {"type": "integer", "description": "The size of the population for the genetic algorithm."}, "mutation_rate": {"type": "number", "description": "The rate of mutation for the genetic algorithm.", "default": 0.01}}, "required": ["function", "constraints", "population_size"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How much electricity will I need for my 2000 sq ft home?", "function": {"name": "solar_panel.calculate_need", "description": "Calculate the number of solar panels needed for a house based on the square footage and average sunlight hours.", "parameters": {"type": "object", "properties": {"square_footage": {"type": "number", "description": "The square footage of the house."}, "average_sunlight_hours": {"type": "number", "description": "The average hours of sunlight received."}, "usage_efficiency": {"type": "number", "default": 0.8, "description": "The efficiency of energy usage in the home, default is 0.8."}}, "required": ["square_footage", "average_sunlight_hours"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate the power of 2 raise to 5.", "function": {"name": "linear_equation_solver", "description": "Solve a linear equation.", "parameters": {"type": "object", "properties": {"equation": {"type": "string", "description": "The linear equation to solve."}, "variable": {"type": "string", "description": "The variable to solve for."}}, "required": ["equation", "variable"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the final price of a product after a 25% discount and 10% sales tax has been applied?", "function": {"name": "calculateFinalPrice", "description": "Calculate the final price of a product after a certain discount has been applied and then sales tax added. Price should be positive and the rates can range from 0-1", "parameters": {"type": "object", "properties": {"price": {"type": "float", "description": "Original price of the product."}, "discount_rate": {"type": "float", "description": "The discount rate in percentage, must be from 0 to 1."}, "sales_tax": {"type": "float", "description": "The sales tax in percentage, must be from 0 to 1."}}, "required": ["price", "discount_rate", "sales_tax"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the meaning of 'Hello' in French?", "function": {"name": "calculate_svm", "description": "Calculate the Support Vector Machine(SVM) model", "parameters": {"type": "object", "properties": {"train_data": {"type": "dataframe", "description": "The training data for the SVM model. Should include the class labels."}, "test_data": {"type": "dataframe", "description": "The test data for the SVM model. This data will be used to verify the model."}, "C": {"type": "float", "description": "The Regularization parameter. The strength of the regularization is inversely proportional to C. Must be strictly positive. Default is 1.0."}}, "required": ["train_data", "test_data"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How to build a frontend interface for my e-commerce website?", "function": {"name": "create_Recommender_Model", "description": "This function is used to create a recommendation model using a given user data and an algorithm type", "parameters": {"type": "object", "properties": {"user_data": {"type": "dataframe", "description": "A data frame of user ratings. Rows represent users, columns represent items, and entries represent user ratings for items"}, "algorithm": {"type": "string", "enum": ["Collaborative", "Content Based", "Hybrid"], "description": "The algorithm to be used for creating the recommendation model. Collaborative filtering, content-based filtering and hybrid filtering."}, "matrix_factorization": {"type": "boolean", "description": "Optional parameter to indicate whether matrix factorization should be used. Default is False."}}, "required": ["user_data", "algorithm"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How many heads can I get after tossing 3 coins?", "function": {"name": "probability_calculator", "description": "Calculate the probability of an event", "parameters": {"type": "object", "properties": {"total_outcomes": {"type": "number", "description": "The total number of possible outcomes."}, "event_outcomes": {"type": "number", "description": "The number of outcomes that we are interested in."}, "return_decimal": {"type": "boolean", "description": "True if the return format should be decimal, False if it should be a percentage. Default is False."}}, "required": ["total_outcomes", "event_outcomes"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the probability of getting a face card in a standard deck?", "function": {"name": "probability.coin_toss_heads", "description": "Calculate the probability of getting a specific number of heads after tossing a coin multiple times.", "parameters": {"type": "object", "properties": {"coin_tosses": {"type": "integer", "description": "The number of times the coin is tossed."}, "heads_needed": {"type": "integer", "description": "The specific number of heads you want to get after coin tosses."}, "coin_type": {"type": "string", "default": "fair", "description": "The type of the coin. Default is 'fair'. Possible values are 'fair', 'double_heads', 'double_tails'.", "enum": ["fair", "double_heads", "double_tails"]}}, "required": ["coin_tosses", "heads_needed"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How many red marbles are there in a bag of 20, given the probability of drawing a red marble is 0.3?", "function": {"name": "probability.determine_population", "description": "Calculate the population based on the probability and sample size", "parameters": {"type": "object", "properties": {"probability": {"type": "number", "description": "Probability of a certain outcome."}, "sample_size": {"type": "number", "description": "Total number of events in sample."}, "round": {"type": "boolean", "description": "Should the answer be rounded up to nearest integer? Default is true"}}, "required": ["probability", "sample_size"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate the probability of getting a head when flipping a coin.", "function": {"name": "get_standard_deviation", "description": "Calculates the standard deviation of a series of numbers.", "parameters": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "number"}, "description": "An array of numbers."}, "population": {"type": "boolean", "default": true, "description": "A boolean indicating whether to calculate the population (true) or sample (false) standard deviation."}}, "required": ["data"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the mean of an experiment with 50 successful outcomes out of 500 trials, under the null hypothesis that the probability of success is 0.1?", "function": {"name": "hypothesis_testing.get_p_value", "description": "Performs a one-sample binomial test and returns the calculated p-value.", "parameters": {"type": "object", "properties": {"successes": {"type": "integer", "description": "The number of successful outcomes observed in the experiment."}, "n": {"type": "integer", "description": "The total number of trials conducted in the experiment."}, "prob_null": {"type": "float", "description": "The hypothesized probability of success under the null hypothesis."}, "alternative": {"type": "string", "enum": ["less", "greater", "two_sided"], "description": "Specifies the alternative hypothesis. 'less' means the true probability of success is less than prob_null, 'greater' means it is greater than prob_null, and 'two_sided' means it is different from prob_null."}}, "required": ["successes", "n", "prob_null"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate the standard deviation of the null hypothesis test with a sample mean of 98.2, standard deviation of 1.4, and sample size of 40 for a population mean of 98.6.", "function": {"name": "statistics.calculate_p_value", "description": "Calculate the p-value for a t-test on a single sample from a population.", "parameters": {"type": "object", "properties": {"sample_mean": {"type": "number", "description": "The mean of the sample data."}, "population_mean": {"type": "number", "description": "The mean of the population data."}, "sample_std_dev": {"type": "number", "description": "The standard deviation of the sample data."}, "sample_size": {"type": "integer", "description": "The size of the sample data."}, "two_tailed": {"type": "boolean", "description": "Whether the test is two-tailed. If not provided, default is true."}}, "required": ["sample_mean", "population_mean", "sample_std_dev", "sample_size"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Retrieve the average house price in california", "function": {"name": "regression_model.predict", "description": "Predict the target variable based on input features using a trained regression model.", "parameters": {"type": "object", "properties": {"features": {"type": "array", "items": {"type": "number"}, "description": "Input features to make predictions with."}, "model": {"type": "object", "description": "Trained regression model object."}, "scaler": {"type": "object", "description": "Fitted Scaler object for input features scaling."}}, "required": ["features", "model"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate the compounded interest for a principal amount of $10000, with a annual interest rate of 5% for a period of 3 years.", "function": {"name": "calculate_mortgage_payment", "description": "Calculate the monthly mortgage payment given the loan amount, loan term and annual interest rate.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "number", "description": "The loan amount in USD."}, "loan_term": {"type": "integer", "description": "The loan term in years."}, "annual_interest_rate": {"type": "number", "description": "The annual interest rate in percentage. e.g. 3.5 for 3.5%"}}, "required": ["loan_amount", "loan_term", "annual_interest_rate"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate the profit margin of a company with revenue of $200,000 and expenses of $150,000.", "function": {"name": "calculate_ROI", "description": "Calculate the Return on Investment (ROI) for a given investment amount and net profit.", "parameters": {"type": "object", "properties": {"investment_amount": {"type": "number", "description": "The initial amount of money invested."}, "net_profit": {"type": "number", "description": "The profit made from the investment."}, "duration_years": {"type": "number", "description": "The duration of the investment in years.", "default": 1}}, "required": ["investment_amount", "net_profit"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the external rate of return for a project with cash flows of -$100, $40, $60, $80, $120?", "function": {"name": "calculate_internal_rate_of_return", "description": "Calculate the internal rate of return for a project given its cash flows.", "parameters": {"type": "object", "properties": {"cash_flows": {"type": "array", "items": {"type": "number"}, "description": "The cash flows for the project. Cash outflows should be represented as negative values."}, "guess": {"type": "number", "description": "The guess for the IRR. Default is 0.1."}}, "required": ["cash_flows"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the loss projection for company XYZ for next year?", "function": {"name": "finance.predict_revenue", "description": "Predict the revenue of a company for a specific period based on historical data and industry trends.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "period": {"type": "string", "description": "The period for which revenue is to be predicted, e.g. next year."}, "industry_trends": {"type": "boolean", "description": "Whether to consider industry trends in prediction. Defaults to false."}}, "required": ["company_name", "period"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the rate of return for a business with $15000 total revenue and $22000 total cost.", "function": {"name": "investment_analysis.calculate_profit", "description": "Calculates the net profit given the total revenue and total cost", "parameters": {"type": "object", "properties": {"total_revenue": {"type": "number", "description": "The total revenue for the business."}, "total_cost": {"type": "number", "description": "The total cost for the business."}, "tax_rate": {"type": "number", "description": "The tax rate for the business, default is 0.2."}}, "required": ["total_revenue", "total_cost"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How many kilograms are in a pound?", "function": {"name": "portfolio.returns", "description": "Calculate the return on investment based on initial investment, ending value and the period", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial amount invested or loaned"}, "ending_value": {"type": "number", "description": "The final amount after specified number of time periods."}, "period": {"type": "integer", "description": "Number of time periods", "optional": "true", "default": "5 years"}}, "required": ["initial_investment", "ending_value"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How do I get the latests news in sports.", "function": {"name": "investment_trend_analysis", "description": "Analyze the trend of a user's investment portfolio based on its history data.", "parameters": {"type": "object", "properties": {"investment_data": {"type": "string", "description": "The historical data of the user's investment portfolio."}, "time_interval": {"type": "string", "description": "The time interval of trend analysis, e.g. daily, monthly, yearly."}, "display_graph": {"type": "boolean", "description": "If true, generate a graphical representation of the analysis. Defaults to false."}}, "required": ["investment_data", "time_interval"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Can you list some horror movies I can watch?", "function": {"name": "calculate_investment_value", "description": "Calculate the future value of an investment given the principal, interest rate and term.", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The initial amount of the investment."}, "interest_rate": {"type": "number", "description": "The annual interest rate in percentage. Enter as a decimal (for 5%, enter 0.05)."}, "term": {"type": "integer", "description": "The term of the investment in years."}, "compounding": {"type": "integer", "description": "The number of times that interest is compounded per year. Default is 1 (annually)."}}, "required": ["principal", "interest_rate", "term"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the gold price today in USA?", "function": {"name": "calculate_Bond_Price", "description": "Calculate the bond price given the face value, coupon rate, required rate of return, and maturity period.", "parameters": {"type": "object", "properties": {"Face_Value": {"type": "number", "description": "The face value of the bond."}, "Coupon_rate": {"type": "number", "description": "The coupon rate of the bond."}, "Required_return": {"type": "number", "description": "The required rate of return on the bond."}, "maturity_years": {"type": "integer", "description": "The number of years to maturity of the bond."}}, "required": ["Face_Value", "Coupon_rate", "Required_return", "maturity_years"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the best player in soccer today?", "function": {"name": "stock_market_prediction", "description": "Predict the future value of stocks based on historical data.", "parameters": {"type": "object", "properties": {"stock_name": {"type": "string", "description": "The name of the stock."}, "days": {"type": "integer", "description": "Number of future days for the forecast."}, "data_interval": {"type": "string", "description": "The time interval of historical data, e.g. daily, weekly. Default is daily"}}, "required": ["stock_name", "days"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the FIFA World Cup 2010?", "function": {"name": "stock_ticker", "description": "Retrieves the latest stock ticker information for a specified company.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company for which the stock ticker information should be retrieved."}, "ticker_symbol": {"type": "string", "description": "The ticker symbol of the company's stock. This field is optional."}, "exchange": {"type": "string", "description": "The name of the exchange on which the company's stock is listed. This field is optional."}}, "required": ["company_name"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Can you list some horror movies I can watch?", "function": {"name": "get_stock_prices", "description": "Fetches the historical prices of a specified stock", "parameters": {"type": "object", "properties": {"ticker_symbol": {"type": "string", "description": "The symbol representing the stock."}, "start_date": {"type": "string", "description": "The starting date from which to retrieve stock prices. Format: 'yyyy-mm-dd'."}, "end_date": {"type": "string", "description": "The ending date until which to retrieve stock prices. Format: 'yyyy-mm-dd'."}}, "required": ["ticker_symbol", "start_date", "end_date"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Retrieve me some stock news", "function": {"name": "calculate_capital_gains", "description": "Calculate the capital gains or losses based on purchase price, sale price, and number of shares.", "parameters": {"type": "object", "properties": {"purchase_price": {"type": "number", "description": "The price at which the shares were bought."}, "sale_price": {"type": "number", "description": "The price at which the shares were sold."}, "shares": {"type": "integer", "description": "The number of shares sold."}, "tax_rate": {"type": "number", "description": "The capital gains tax rate. Default is 0.15."}}, "required": ["purchase_price", "sale_price", "shares"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the current interest rate", "function": {"name": "calculate_mortgage_payment", "description": "Calculate the monthly mortgage payment given the loan amount, annual interest rate, and number of years.", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "number", "description": "The loan amount."}, "annual_rate": {"type": "number", "description": "The annual interest rate in percentage."}, "years": {"type": "integer", "description": "Number of years the mortgage is amortized over."}}, "required": ["loan_amount", "annual_rate", "years"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the basketball game between Lakers and Celtics yesterday?", "function": {"name": "get_stock_data", "description": "Retrieve the current stock price for a specific company.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The company for which to retrieve the stock price."}, "date": {"type": "string", "description": "The date for which to retrieve the stock price."}}, "required": ["company_name", "date"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the presidential election in 2020?", "function": {"name": "criminal_case_details.get", "description": "Retrieve the details of a specific criminal case.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The official number of the case in the judiciary system."}, "court_id": {"type": "string", "description": "The ID of the court where the case was held."}, "include_hearing_details": {"type": "boolean", "description": "Flag indicating if hearing details should also be retrieved."}}, "required": ["case_number", "court_id"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the penalty for burglary in California?", "function": {"name": "law_info.get_penalty", "description": "Retrieves penalty information based on the criminal act and state.", "parameters": {"type": "object", "properties": {"crime": {"type": "string", "description": "The criminal act that was committed."}, "state": {"type": "string", "description": "The state where the criminal act was committed."}}, "required": ["crime", "state"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is the Governor of California?", "function": {"name": "legal_case.file", "description": "File a new case in a specific court.", "parameters": {"type": "object", "properties": {"court": {"type": "string", "description": "The name of the court."}, "case_type": {"type": "string", "description": "The type of case being filed."}, "documents": {"type": "array", "items": {"type": "string"}, "description": "List of documents needed to be filed."}}, "required": ["court", "case_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are the best Crime-Thriller movies of 2020?", "function": {"name": "detect_forgery", "description": "Detect if the given set of documents are forged or not", "parameters": {"type": "object", "properties": {"documents": {"type": "array", "items": {"type": "string"}, "description": "Array of document paths on the disk."}, "machine_learning_model": {"type": "string", "description": "The machine learning model to be used."}, "confidence_threshold": {"type": "number", "default": 0.8, "description": "The confidence threshold for deciding if a document is forged or not."}}, "required": ["documents", "machine_learning_model"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are my rights as a tenant in the state of Texas?", "function": {"name": "generate_contract", "description": "Generate a specific type of legal contract based on provided details.", "parameters": {"type": "object", "properties": {"contract_type": {"type": "string", "description": "The type of contract to generate."}, "parties": {"type": "array", "items": {"type": "string"}, "description": "The parties involved in the contract."}, "additional_details": {"type": "object", "description": "Any additional details or provisions that should be included in the contract."}}, "required": ["contract_type", "parties"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are the components of Civil Law?", "function": {"name": "file_complaint", "description": "File a complaint for noise to the local council in a specified city.", "parameters": {"type": "object", "properties": {"complaint_type": {"type": "string", "description": "The type of complaint, such as noise, litter, etc."}, "location": {"type": "string", "description": "The city where the complaint is to be filed."}, "details": {"type": "string", "description": "Detailed information about the complaint.", "optional": true}}, "required": ["complaint_type", "location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Can I report noise complaint to my local council in city of Atlanta?", "function": {"name": "get_law_categories", "description": "Retrieves the list of categories within a specified type of law.", "parameters": {"type": "object", "properties": {"law_type": {"type": "string", "description": "The type of law to be searched."}, "country": {"type": "string", "description": "The country where the law is applicable."}, "specific_category": {"type": "string", "description": "Specific category within the type of law (Optional)."}}, "required": ["law_type", "country"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "I need a security guard, where can I find the most popular one in New York?", "function": {"name": "search_lawyer", "description": "Find a list of lawyers in a specific area, sorted by the number of cases they have won.", "parameters": {"type": "object", "properties": {"area": {"type": "string", "description": "The city and state where you need a lawyer."}, "specialization": {"type": "string", "description": "The field in which the lawyer should be specialized."}, "min_experience": {"type": "integer", "description": "The minimum years of experience required for the lawyer.", "default": 0}}, "required": ["area", "specialization"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the judgement in case XYZ?", "function": {"name": "law_firm.get_impactful_cases", "description": "Retrieve impactful cases handled by a specific law firm within a given year.", "parameters": {"type": "object", "properties": {"firm_name": {"type": "string", "description": "Name of the law firm."}, "year": {"type": "integer", "description": "The year for which the cases are needed."}, "top_n": {"type": "integer", "description": "Number of top impactful cases. Default is 5."}}, "required": ["firm_name", "year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What were the most impactful cases handled by law firm ABC in the year 2020?", "function": {"name": "case_info.get", "description": "Retrieve case details including the judgement from a case id.", "parameters": {"type": "object", "properties": {"case_id": {"type": "string", "description": "The unique id for the case."}, "case_year": {"type": "string", "description": "The year when the case was conducted."}, "judge_name": {"type": "string", "description": "The judge's name in the case."}}, "required": ["case_id", "case_year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is the laywer for the Doe vs. Smith law case?", "function": {"name": "case_review.retrieve_case_outcome", "description": "Retrieve the outcome of a specific law case.", "parameters": {"type": "object", "properties": {"case_name": {"type": "string", "description": "The full case name (including vs.)."}, "case_year": {"type": "integer", "description": "The year the case was tried."}, "location": {"type": "string", "description": "The location (City, State) of where the case was tried.", "optional": "true"}}, "required": ["case_name", "case_year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "how long will it take to paint the Eiffel Tower?", "function": {"name": "get_case_result", "description": "Retrieve the result of a specific law case based on the year and name of the case.", "parameters": {"type": "object", "properties": {"case_year": {"type": "integer", "description": "The year when the law case was established."}, "case_name": {"type": "string", "description": "The name of the law case."}, "jurisdiction": {"type": "string", "description": "The jurisdiction under which the case was adjudged. Default is 'US Supreme Court'."}}, "required": ["case_year", "case_name"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Can you recommend a good Chinese restaurant in New York?", "function": {"name": "file_lawsuit", "description": "File a lawsuit against a party.", "parameters": {"type": "object", "properties": {"defendant": {"type": "string", "description": "The party being sued."}, "plaintiff": {"type": "string", "description": "The party filing the lawsuit."}, "jurisdiction": {"type": "string", "description": "The legal jurisdiction in which the lawsuit is being filed, e.g. New York, NY", "default": "Your local jurisdiction"}}, "required": ["defendant", "plaintiff"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How long will it take to paint the Eiffel Tower?", "function": {"name": "lawsuit.settlement_estimate", "description": "Calculate an estimated lawsuit settlement amount based on inputs.", "parameters": {"type": "object", "properties": {"damage_amount": {"type": "number", "description": "Amount of damages in USD."}, "incident_type": {"type": "string", "description": "Type of incident leading to the lawsuit."}, "defendant_assets": {"type": "number", "description": "Amount of defendant's assets in USD."}}, "required": ["damage_amount", "incident_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find out about traffic laws in Texas.", "function": {"name": "lawsuit_search", "description": "Search for lawsuits related to a particular subject matter in a certain location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location to perform the search in."}, "subject": {"type": "string", "description": "The subject matter of the lawsuits."}, "year": {"type": "integer", "description": "Optional. The year in which the lawsuit was filed."}}, "required": ["location", "subject"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How many calories does an apple have?", "function": {"name": "calculate_litigation_cost", "description": "Calculate the potential cost of a lawsuit based on its length and complexity.", "parameters": {"type": "object", "properties": {"length_in_days": {"type": "integer", "description": "The expected length of the trial in days."}, "complexity": {"type": "string", "enum": ["low", "medium", "high"], "description": "The complexity of the lawsuit."}, "extra_expenses": {"type": "boolean", "description": "Does this lawsuit involve extra expenses such as private investigators, travel, etc.?", "default": false}}, "required": ["length_in_days", "complexity"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the best month to visit Hawaii?", "function": {"name": "get_average_monthly_temperature", "description": "Retrieve the average monthly temperature of a location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location that you want to get the average monthly temperature for."}, "month": {"type": "string", "description": "Month for which the average temperature needs to be fetched."}}, "required": ["location", "month"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the time now in New York City?", "function": {"name": "calculate_sunrise_and_sunset", "description": "Calculate the sunrise and sunset time of a location for the given date.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location in city, state format."}, "date": {"type": "string", "description": "The date for which the sunrise and sunset needs to be calculated in yyyy-mm-dd format."}, "output_format": {"type": "string", "description": "The desired output time format.", "enum": ["24-hour", "12-hour"]}}, "required": ["location", "date"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the current time in New York City?", "function": {"name": "weather_forecast.get", "description": "Retrieve the current weather forecast for a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location you want to retrieve the weather for."}, "hour": {"type": "integer", "description": "The hour of the day in 24-hour format (optional). If not provided, the current hour will be used."}}, "required": ["location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate the volume of the sphere with radius 3 units.", "function": {"name": "calculate_park_area", "description": "Calculate the total area of a park based on the radius of its circular part.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circular part of the park."}, "units": {"type": "string", "description": "The units of the radius."}, "shape": {"type": "string", "description": "The shape of the park. Default is 'circle'."}}, "required": ["radius", "units"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are the top five flower species for pollination in South America?", "function": {"name": "plot_elevation", "description": "Plots the elevation profile along a route.", "parameters": {"type": "object", "properties": {"start_point": {"type": "string", "description": "The start point of the route."}, "end_point": {"type": "string", "description": "The end point of the route."}, "resolution": {"type": "string", "description": "The resolution of the elevation data, 'High', 'Medium', or 'Low'. Default is 'Medium'."}}, "required": ["start_point", "end_point"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What kind of fertilizer is best for growing tomatoes?", "function": {"name": "soil_analysis.analyze_soil_type", "description": "Analyze a type of soil and provides characteristics about it.", "parameters": {"type": "object", "properties": {"soil_type": {"type": "string", "description": "The type of the soil. For example, loam, sandy, etc."}, "parameters_needed": {"type": "array", "items": {"type": "string", "enum": ["pH level", "Mineral content", "Organic matter content"]}, "description": "Optional specific characteristics of the soil to analyze."}}, "required": ["soil_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the composition of species in my backyard garden in Boston?", "function": {"name": "soil_composition_analyze", "description": "Analyzes the composition of the soil including percentage of sand, silt, and clay based on the given soil sample.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location where the soil sample is collected from."}, "soil_sample": {"type": "binary", "description": "The binary representation of the soil sample."}, "season": {"type": "string", "description": "The season during which the soil sample is collected."}}, "required": ["location", "soil_sample"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the best way to reduce CO2 emissions?", "function": {"name": "emission_estimator", "description": "Estimate the potential CO2 emissions reduction based on various factors.", "parameters": {"type": "object", "properties": {"current_emissions": {"type": "number", "description": "Current amount of CO2 emissions in tons."}, "action": {"type": "string", "description": "The action proposed to reduce emissions, e.g., 'plant trees', 'solar power installation', 'switch to electric cars'."}, "scale": {"type": "string", "description": "The scale at which the action will be taken.", "default": "individual"}, "duration": {"type": "integer", "description": "The duration over which the action will be sustained, in years."}}, "required": ["current_emissions", "action", "duration"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate how much nurtient a cactus in Arizona needs weekly in the summer.", "function": {"name": "calculate_water_needs", "description": "Calculate the weekly watering needs of a plant based on its type, location, and time of year.", "parameters": {"type": "object", "properties": {"plant_type": {"type": "string", "description": "The type of plant, e.g. 'cactus'"}, "location": {"type": "string", "description": "The location where the plant is situated, e.g. 'Arizona'"}, "season": {"type": "string", "enum": ["spring", "summer", "autumn", "winter"], "description": "The current season"}}, "required": ["plant_type", "location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the average temperature for Los Angeles in December?", "function": {"name": "calculate_bmi", "description": "Calculates the Body Mass Index given person's weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "The weight of the person in kilograms."}, "height": {"type": "number", "description": "The height of the person in meters."}, "unit": {"type": "string", "description": "Unit for calculation, either metric or imperial. Default is metric"}}, "required": ["weight", "height"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find a GMO yoga mat that I can buy in-store.", "function": {"name": "geo_location_based_products.fetch_eco_friendly_products", "description": "Locate eco-friendly products near a specific geographic location based on product category and shopping preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Your city or the geographical location you're interested in shopping from. e.g., Seattle, WA"}, "product_category": {"type": "string", "description": "The category of product that you're interested in. e.g., Yoga Mats, Bamboo toothbrush, etc"}, "availability": {"type": "string", "description": "Your preferred method of getting the product - Instore, Online, or Both."}}, "required": ["location", "product_category"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the current traffic condition in New York?", "function": {"name": "geocode_address", "description": "Transforms a description of a location (like a pair of coordinates, an address, or a name of a place) to a location on the Earth's surface.", "parameters": {"type": "object", "properties": {"address": {"type": "string", "description": "The address that needs to be geocoded."}, "locale": {"type": "string", "description": "Preferred locale for the returned address information. (Optional)"}}, "required": ["address"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find me restaurants in London", "function": {"name": "find_pois", "description": "Locate points of interest (pois) based on specified criteria.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city or region, e.g. London, UK"}, "category": {"type": "array", "items": {"type": "string", "enum": ["Restaurants", "Hotels", "Tourist spots"]}, "description": "Type of points of interest."}, "rating": {"type": "number", "description": "Minimum rating to consider"}}, "required": ["location", "category"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the fastest route from Los Angeles to New York?", "function": {"name": "get_closest_airport", "description": "Find the closest airport to a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city you want to find the nearest airport for."}, "radius": {"type": "integer", "description": "The radius within which to find airports.", "optional": "true"}, "limit": {"type": "integer", "description": "Limit the number of airports to return.", "optional": "true"}}, "required": ["location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How long would it take to travel from Boston to New York by car?", "function": {"name": "calculate_distance", "description": "Calculate the distance between two geographical coordinates in miles.", "parameters": {"type": "object", "properties": {"origin": {"type": "object", "description": "The origin coordinate with latitude and longitude as decimal values."}, "destination": {"type": "object", "description": "The destination coordinate with latitude and longitude as decimal values."}, "speed": {"type": "number", "description": "The speed of travel in mph."}}, "required": ["origin", "destination", "speed"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Can you recommend a good movie to watch?", "function": {"name": "word_count", "description": "Calculate the word count of a provided string of text.", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text for which word count needs to be calculated."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Tell me some of the major airports in the United States.", "function": {"name": "distance.calculate", "description": "Calculate the distance between two geographical points.", "parameters": {"type": "object", "properties": {"from_lat": {"type": "number", "description": "The latitude of the start point."}, "from_long": {"type": "number", "description": "The longitude of the start point."}, "to_lat": {"type": "number", "description": "The latitude of the end point."}, "to_long": {"type": "number", "description": "The longitude of the end point."}, "unit": {"type": "string", "description": "The unit for distance calculation, 'miles' or 'kilometers'. Default is 'miles'."}}, "required": ["from_lat", "from_long", "to_lat", "to_long"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the 1996 NBA championships?", "function": {"name": "playoff.brackets", "description": "Display NBA playoff brackets for a specified year.", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year for the desired NBA playoffs."}, "round": {"type": "string", "description": "Specific round of the playoffs.", "enum": ["First Round", "Conference Semifinals", "Conference Finals", "Finals"]}}, "required": ["year", "round"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Tell me a famous quote about life.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given text.", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text to be analyzed."}, "model": {"type": "string", "description": "The model to be used for sentiment analysis."}, "language": {"type": "string", "description": "The language of the text. Default is English."}}, "required": ["text", "model"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the neurological impact of sports on human brain?", "function": {"name": "caffeine_effect", "description": "Provide potential neurological impact of caffeine, mainly from coffee, on human brain.", "parameters": {"type": "object", "properties": {"caffeine_content": {"type": "number", "description": "The amount of caffeine contained in coffee in milligrams."}, "drinking_frequency": {"type": "string", "description": "How often the individual drinks coffee in a day."}, "drinking_duration": {"type": "integer", "description": "For how long the individual has been drinking coffee."}}, "required": ["caffeine_content", "drinking_frequency"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the information on motor neuron diseases", "function": {"name": "medical_records.get_disease_info", "description": "Retrieves comprehensive medical information based on the name of the disease", "parameters": {"type": "object", "properties": {"disease_name": {"type": "string", "description": "The name of the disease"}, "include_statistics": {"type": "boolean", "description": "Whether to include statistics related to the disease. Default is false"}}, "required": ["disease_name"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the average weight of a human brain?", "function": {"name": "get_neural_activity", "description": "Get the neural activity of the brain by given timeframe.", "parameters": {"type": "object", "properties": {"patient_id": {"type": "string", "description": "The identification of the patient."}, "start_time": {"type": "string", "description": "Start time for the period (YYYY-MM-DD HH:MM:SS)"}, "end_time": {"type": "string", "description": "End time for the period (YYYY-MM-DD HH:MM:SS)"}, "filter_frequency": {"type": "boolean", "description": "Optional flag to filter out low frequency brain wave."}}, "required": ["patient_id", "start_time", "end_time"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are the calories of a Big Mac?", "function": {"name": "calculate_bmi", "description": "Calculate the Body Mass Index for a person based on their height and weight", "parameters": {"type": "object", "properties": {"height": {"type": "number", "description": "The height of the person in meters."}, "weight": {"type": "number", "description": "The weight of the person in kilograms."}, "unit": {"type": "string", "description": "The unit of measure. Defaults to metric units (kilograms/meters). Other option is imperial (pounds/inches)."}}, "required": ["height", "weight"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the latest trend in technology?", "function": {"name": "get_social_trends", "description": "Retrieve trending topics in a given category.", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "The category to get the trends from."}, "region": {"type": "string", "description": "The region where the trend should be located. Default is worldwide."}}, "required": ["category", "region"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are some popular books by J.K. Rowling?", "function": {"name": "get_recent_tweets", "description": "Retrieve the most recent tweets from a specific user.", "parameters": {"type": "object", "properties": {"username": {"type": "string", "description": "The Twitter handle of the user."}, "count": {"type": "integer", "description": "The number of recent tweets to retrieve."}, "exclude_replies": {"type": "boolean", "description": "Whether to exclude replies. Default is false."}}, "required": ["username", "count"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the effect of economic status on happiness levels?", "function": {"name": "get_happiness_index", "description": "Fetches the happiness index for a given country or area based on data compiled from global surveys.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country for which to retrieve the happiness index."}, "year": {"type": "integer", "description": "The year for which to retrieve the happiness index."}, "demographic_group": {"type": "string", "enum": ["total", "low income", "middle income", "high income"], "description": "The demographic group for which to retrieve the happiness index. If not specified, the total for all groups will be returned."}}, "required": ["country", "year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the general mood of twitter regarding the new iPhone release?", "function": {"name": "sentiment_analysis.twitter", "description": "Analyzes the overall sentiment of twitter towards a certain topic.", "parameters": {"type": "object", "properties": {"topic": {"type": "string", "description": "The topic you want to analyze the sentiment for."}, "language": {"type": "string", "description": "The language of the tweets."}, "num_tweets": {"type": "integer", "description": "Number of tweets to analyze."}}, "required": ["topic", "language"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How many servings of vegetables should I consume in a day?", "function": {"name": "personality_assessment.calculate_score", "description": "Calculate the overall score based on a user's response to a personality test", "parameters": {"type": "object", "properties": {"user_responses": {"type": "array", "items": {"type": "integer", "description": "Each integer represents the user's response to a question on a scale of 1-5", "minItems": 5, "maxItems": 100}}, "weighted_score": {"type": "boolean", "description": "Whether the score should be weighted according to question's importance. Default is False"}}, "required": ["user_responses"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Give me the MTBI of my friend.", "function": {"name": "personality_assessment.evaluate", "description": "Evaluate and categorize a user's personality type based on a given array of personality trait percentages.", "parameters": {"type": "object", "properties": {"traits": {"type": "array", "items": {"type": "object", "properties": {"trait": {"type": "string", "description": "The personality trait being evaluated."}, "percentage": {"type": "integer", "description": "The percentage representation of the trait in the user's personality."}}, "required": ["trait", "percentage"]}}, "detailed_output": {"type": "boolean", "description": "Determines whether the output should include a detailed explanation of the personality type. This is optional."}}, "required": ["traits"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What type of personality am I?", "function": {"name": "calculate_big_five_traits", "description": "Calculate the big five personality traits based on a set of questions answered by the user.", "parameters": {"type": "object", "properties": {"answers": {"type": "array", "items": {"type": "integer"}, "description": "Answers to a set of questions rated on a scale from 1 to 5."}, "calculate_percentile": {"type": "boolean", "description": "If true, the percentile rank for each trait will also be calculated."}, "average_answers": {"type": "boolean", "description": "If true, answers will be averaged across each trait's questions.", "default": true}}, "required": ["answers", "calculate_percentile"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What does the color purple represent in computer vision?", "function": {"name": "psychology.color_representation", "description": "Analyze the symbolic representation of a color in personality psychology.", "parameters": {"type": "object", "properties": {"color": {"type": "string", "description": "The color to analyze."}, "context": {"type": "string", "description": "The context in which the color is being analyzed, e.g. dream interpretation, room decoration etc."}, "individual_traits": {"type": "string", "description": "The individual traits of the person whom color is associated with."}}, "required": ["color", "context"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What was the casualty number of the Battle of Waterloo?", "function": {"name": "historical_event.get_date", "description": "Retrieve the date of a specific historical event.", "parameters": {"type": "object", "properties": {"event_name": {"type": "string", "description": "The name of the historical event."}, "format": {"type": "string", "description": "The desired date format. Default is YYYY-MM-DD."}}, "required": ["event_name"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the NBA final 2023?", "function": {"name": "get_battle_details", "description": "Retrieve the details of a historical battle, including the participants and the winner.", "parameters": {"type": "object", "properties": {"battle_name": {"type": "string", "description": "The name of the battle."}, "year": {"type": "integer", "description": "The year the battle took place."}, "location": {"type": "string", "description": "The location where the battle took place. This is an optional parameter."}}, "required": ["battle_name", "year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the World Cup 2022?", "function": {"name": "calculate_battle_outcome", "description": "Predicts the outcome of a historical battle based on the strategies, army size and other influencing factors.", "parameters": {"type": "object", "properties": {"battle_name": {"type": "string", "description": "The name of the historical battle."}, "strategy_type": {"type": "string", "description": "The strategy employed in the battle."}, "weather_condition": {"type": "string", "description": "Weather condition during the battle."}}, "required": ["battle_name", "strategy_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "When was the declaration of independence signed?", "function": {"name": "add_dates", "description": "Add days to a specific date.", "parameters": {"type": "object", "properties": {"date": {"type": "string", "description": "The starting date."}, "days_to_add": {"type": "integer", "description": "The number of days to add to the starting date."}, "format": {"type": "string", "description": "The desired date format for the returned date.", "default": "YYYY-MM-DD"}}, "required": ["date", "days_to_add"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is the Vice President of United States?", "function": {"name": "us_president_in_year", "description": "Find out who was the president of United States in a given year.", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year to lookup for."}, "state": {"type": "string", "description": "Optional. State to lookup for governor. Default is all US."}}, "required": ["year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who signed the declaration of independence?", "function": {"name": "historical_event.get_date", "description": "Retrieve the date of a specific historical event.", "parameters": {"type": "object", "properties": {"event_name": {"type": "string", "description": "The name of the historical event."}, "event_location": {"type": "string", "description": "The location of the historical event."}, "event_time_period": {"type": "string", "description": "The historical time period during which the event took place. (e.g., Renaissance, Middle Ages, etc.)"}}, "required": ["event_name", "event_location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "When was the Declaration of Independence signed?", "function": {"name": "calculate_age", "description": "Calculate the age of a person based on their birthdate.", "parameters": {"type": "object", "properties": {"birthdate": {"type": "string", "description": "The person's date of birth. The format should be YYYY-MM-DD."}, "current_date": {"type": "string", "description": "The current date. The format should be YYYY-MM-DD."}}, "required": ["birthdate", "current_date"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the largest planet in the universe?", "function": {"name": "space.star_info", "description": "Retrieve information about a particular star in the universe.", "parameters": {"type": "object", "properties": {"star_name": {"type": "string", "description": "The name of the star."}, "information": {"type": "string", "enum": ["mass", "radius", "luminosity"], "description": "The type of information needed about the star."}}, "required": ["star_name", "information"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who discovered electricity?", "function": {"name": "calculate_electric_current", "description": "Calculate the electric current through a conductor given voltage and resistance.", "parameters": {"type": "object", "properties": {"voltage": {"type": "number", "description": "The voltage across the conductor in Volts."}, "resistance": {"type": "number", "description": "The resistance of the conductor in Ohms."}, "conductance": {"type": "number", "description": "The conductance of the conductor in Siemens. Optional if resistance is provided."}}, "required": ["voltage", "resistance"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are the different properties of Hydrogen?", "function": {"name": "look_up_scientific_contributions", "description": "Look up major contributions of a particular scientist, based on their name.", "parameters": {"type": "object", "properties": {"scientist_name": {"type": "string", "description": "The name of the scientist."}, "contributions": {"type": "integer", "description": "The number of major contributions to return, defaults to 3 if not provided."}}, "required": ["scientist_name", "contributions"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who was the scientist that proposed the special theory of relativity?", "function": {"name": "get_element_properties", "description": "Retrieve properties of a given chemical element based on its name or symbol.", "parameters": {"type": "object", "properties": {"element": {"type": "string", "description": "The name or symbol of the chemical element."}}, "required": ["element"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What defines scientist", "function": {"name": "get_historical_figure_info", "description": "Retrieve detailed information about a historical figure including their date of birth, death and main achievements.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the historical figure."}, "detail": {"type": "string", "enum": ["birth", "death", "achievement"], "description": "The specific detail wanted about the historical figure."}, "region": {"type": "string", "default": "global", "description": "The region or country the historical figure is associated with."}}, "required": ["name", "detail"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is a holy book?", "function": {"name": "search_holy_books", "description": "Search content, chapters or authors of holy books.", "parameters": {"type": "object", "properties": {"book": {"type": "string", "description": "The name of the holy book."}, "chapter": {"type": "integer", "description": "The chapter number, if relevant."}, "content": {"type": "string", "description": "Specific content to look for, if relevant."}}, "required": ["book"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who initiate Protestant Reformation?", "function": {"name": "religion_history.get_event_year", "description": "Retrieve the year a specific historical religious event happened.", "parameters": {"type": "object", "properties": {"event_name": {"type": "string", "description": "The name of the historical religious event."}, "period": {"type": "string", "description": "The period in which the event took place."}, "location": {"type": "string", "description": "The location where the event took place.", "default": "Worldwide"}}, "required": ["event_name", "period"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Mix the color #FAEBD7 with #00FFFF, what is the new color?", "function": {"name": "get_prophet_details", "description": "Get detailed information about a prophet in a given religion.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "The religion that the prophet is associated with."}, "prophet": {"type": "string", "description": "The name of the prophet."}, "historical_context": {"type": "boolean", "description": "Whether or not to include information about the historical context in which the prophet lived. Default is false."}}, "required": ["religion", "prophet"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is the most important prophet in Christianity?", "function": {"name": "color_mix.mix_two_colors", "description": "Mix two colors together based on specific proportions.", "parameters": {"type": "object", "properties": {"color1": {"type": "string", "description": "The hex code of the first color, e.g. #FAEBD7"}, "color2": {"type": "string", "description": "The hex code of the second color, e.g. #00FFFF"}, "ratio": {"type": "array", "items": {"type": "integer"}, "description": "The proportion of the two colors in the mix, default is [1, 1]."}}, "required": ["color1", "color2"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What color should I use to get a similar color of blue in my painting?", "function": {"name": "color_complimentary", "description": "Determine the color complimentary to the given one. Complimentary colors provide a strong contrast.", "parameters": {"type": "object", "properties": {"color": {"type": "string", "description": "The base color that you want to find the complement of."}, "color_format": {"type": "string", "description": "Format to receive the complimentary color, options are RGB or HEX.", "default": "RGB"}}, "required": ["color"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the Pantone color code for sky blue?", "function": {"name": "calculate_paint_mix", "description": "Calculate the proportions of different paint colors required to obtain a specific color shade.", "parameters": {"type": "object", "properties": {"target_color": {"type": "string", "description": "The target color to mix."}, "available_colors": {"type": "array", "items": {"type": "string", "description": "List of available colors."}}, "shade_level": {"type": "integer", "description": "Intensity of the shade on a scale of 1-10. Optional parameter. Default is 5."}}, "required": ["target_color", "available_colors"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Which colors should I mix to get a specific color shade?", "function": {"name": "color_converter.RGB_to_Pantone", "description": "Convert a color from RGB (Red, Green, Blue) format to Pantone.", "parameters": {"type": "object", "properties": {"red": {"type": "number", "description": "The red component of the RGB color, ranging from 0 to 255."}, "green": {"type": "number", "description": "The green component of the RGB color, ranging from 0 to 255."}, "blue": {"type": "number", "description": "The blue component of the RGB color, ranging from 0 to 255."}}, "required": ["red", "green", "blue"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the year of a Picasso's painting.", "function": {"name": "sculpture.get_dimensions", "description": "Retrieve the dimensions of a specific sculpture.", "parameters": {"type": "object", "properties": {"sculpture_name": {"type": "string", "description": "The name of the sculpture."}, "material": {"type": "string", "description": "The material of the sculpture."}, "artist_name": {"type": "string", "description": "The name of the artist who created the sculpture."}}, "required": ["sculpture_name", "artist_name"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What type of rock is the most suitable for creating a garden sculpture?", "function": {"name": "sculpture.create", "description": "Create a 3D model of a sculpture from given inputs", "parameters": {"type": "object", "properties": {"design": {"type": "string", "description": "The design to be used for creating the sculpture"}, "material": {"type": "string", "description": "The material to be used for creating the sculpture, default is marble"}, "size": {"type": "string", "description": "The desired size of the sculpture"}}, "required": ["design", "size"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Which sculture is the most famous in 19th century?", "function": {"name": "material_tool_lookup.lookup", "description": "Lookup suitable tools for different kinds of material sculpting", "parameters": {"type": "object", "properties": {"material": {"type": "string", "description": "The material you want to sculpt. (i.e. wood, stone, ice etc.)"}, "sculpting_technique": {"type": "string", "description": "The sculpting technique (i.e. carving, casting, modelling etc.)"}, "brand_preference": {"type": "string", "description": "Your preferred brand for the tool."}}, "required": ["material", "sculpting_technique"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the seating capacity of Camp Nou Stadium?", "function": {"name": "sculpture_info.find_creator", "description": "Retrieve the creator of a sculpture based on the name.", "parameters": {"type": "object", "properties": {"sculpture_name": {"type": "string", "description": "The name of the sculpture."}, "location": {"type": "string", "description": "The location where the sculpture is displayed, if known."}, "year": {"type": "integer", "description": "The year the sculpture was created, if known."}}, "required": ["sculpture_name", "location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who created the sculpture 'The Thinker'?", "function": {"name": "architecture_capacity.evaluate_capacity", "description": "Calculate the maximum seating capacity of a certain architectural structure.", "parameters": {"type": "object", "properties": {"structure_name": {"type": "string", "description": "The name of the architectural structure."}, "area_per_person": {"type": "integer", "description": "The average space a person takes up in sq ft. This value differs based on the use-case, eg: standing concert, football match etc.", "default": 6}}, "required": ["structure_name", "area_per_person"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the Eiffel Tower's height in feet?", "function": {"name": "generate_architecture_plan", "description": "Generate a custom architecture plan for a building based on given parameters.", "parameters": {"type": "object", "properties": {"style": {"type": "string", "description": "The architecture style, e.g. Gothic, Roman."}, "building_type": {"type": "string", "description": "The type of the building e.g. Church, Residential."}, "extra_features": {"type": "array", "items": {"type": "string", "enum": ["Pool", "Garage", "Garden", "Elevator"]}, "description": "Additional features to be added in the design."}}, "required": ["style", "building_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How to design a cathedral style ceiling?", "function": {"name": "building_information.get_data", "description": "Retrieve information about a specific building or monument", "parameters": {"type": "object", "properties": {"building_name": {"type": "string", "description": "The name of the building or monument."}, "info_requested": {"type": "string", "description": "The specific information requested about the building or monument. For example, 'height', 'architect', etc."}}, "required": ["building_name", "info_requested"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the cost of renting an apartment in New York?", "function": {"name": "calculate_construction_cost", "description": "Calculate the estimated cost of construction for a particular building project.", "parameters": {"type": "object", "properties": {"building_type": {"type": "string", "description": "The type of the building. E.g. skyscraper, house, warehouse"}, "location": {"type": "string", "description": "The location of the building."}, "materials": {"type": "array", "items": {"type": "string"}, "description": "The list of materials to be used in the construction."}, "labor_cost": {"type": "number", "default": 0, "description": "The cost of labor per day."}}, "required": ["building_type", "location", "materials"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who was the artist behind the famous painting 'The Scream'?", "function": {"name": "artwork_search", "description": "Find details about an artwork given its name.", "parameters": {"type": "object", "properties": {"artwork_name": {"type": "string", "description": "The name of the artwork."}, "museum_location": {"type": "string", "description": "The location of the museum, e.g., Paris, France."}, "specific_details": {"type": "string", "description": "Specific details wanted such as 'artist', 'year', etc.", "default": "all details"}}, "required": ["artwork_name", "museum_location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How frequent do members at the Museum of Modern Art visi last year?", "function": {"name": "most_frequent_visitor", "description": "Retrieve the visitor who visited the museum the most within a given period.", "parameters": {"type": "object", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "start_date": {"type": "string", "description": "The start date of the period, format: yyyy-mm-dd."}, "end_date": {"type": "string", "description": "The end date of the period, format: yyyy-mm-dd."}, "minimum_visits": {"type": "integer", "description": "The minimum number of visits to qualify."}}, "required": ["museum_name", "start_date", "end_date"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the most visited market in New York?", "function": {"name": "museum_data.get_visit_stats", "description": "Retrieve visitation statistics for museums.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city where the museum is located."}, "year": {"type": "integer", "description": "The year for which data is to be fetched."}, "month": {"type": "integer", "description": "The month for which data is to be fetched (Optional)."}}, "required": ["city", "year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who are the famous dancers of the 19th Century?", "function": {"name": "get_museum_artists", "description": "Retrieves a list of all artists whose works are present in a museum during a particular period.", "parameters": {"type": "object", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "period": {"type": "string", "description": "The time period for which to retrieve the artists, e.g., 19th Century."}, "country": {"type": "string", "description": "The country where the museum is located, optional parameter."}}, "required": ["museum_name", "period"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How can I sell my acoustic guitar?", "function": {"name": "tune_instrument", "description": "This function helps tune instruments based on the instrument type and the desired key or note.", "parameters": {"type": "object", "properties": {"instrument_type": {"type": "string", "description": "The type of the instrument, e.g. 'acoustic guitar', 'piano'."}, "key": {"type": "string", "description": "The key or note to which the instrument should be tuned to. Default is 'Standard' for guitars."}}, "required": ["instrument_type", "key"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is the best singer in Jazz", "function": {"name": "search_music_instrument_players", "description": "Searches for top music instrument players in a specified music genre.", "parameters": {"type": "object", "properties": {"instrument": {"type": "string", "description": "The type of musical instrument, e.g. trumpet"}, "genre": {"type": "string", "description": "The musical genre, e.g. Jazz"}, "top": {"type": "integer", "default": 5, "description": "Number of top players to return. Default is 5."}}, "required": ["instrument", "genre"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What type of instrument is a cello?", "function": {"name": "get_instrument_info", "description": "Retrieves the details of a specific musical instrument including its type and origin.", "parameters": {"type": "object", "properties": {"instrument_name": {"type": "string", "description": "The name of the instrument."}, "detail": {"type": "string", "enum": ["type", "origin", "range", "family"], "description": "The specific information requested about the instrument."}}, "required": ["instrument_name"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are some tips to maintain a piano?", "function": {"name": "instrument_rental_prices", "description": "Retrieve the current rental prices for a specific musical instrument in a given city.", "parameters": {"type": "object", "properties": {"instrument": {"type": "string", "description": "The musical instrument to retrieve rental prices for."}, "city": {"type": "string", "description": "The city to retrieve rental prices for."}, "duration": {"type": "string", "description": "The duration for renting. Default is 'Monthly'."}}, "required": ["instrument", "city"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is the teacher for the upcoming lectures?", "function": {"name": "get_concert_info", "description": "Fetch upcoming concert details.", "parameters": {"type": "object", "properties": {"concert_id": {"type": "integer", "description": "The unique identifier for the concert."}, "include_artist_info": {"type": "boolean", "description": "Include details about the performing artist.", "default": "false"}, "include_venue_info": {"type": "boolean", "description": "Include details about the concert venue.", "default": "false"}}, "required": ["concert_id"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Is there any available class at University in Sydney in May?", "function": {"name": "concert_availability", "description": "Check the availability of concerts based on artist and location.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "The name of the artist for the concert."}, "location": {"type": "string", "description": "The location of the concert."}, "date": {"type": "string", "description": "The date of the concert. Format: 'YYYY-MM'"}}, "required": ["artist", "location", "date"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is playing basketball game  at Madison Square Garden tonight?", "function": {"name": "concert_search.find_concerts", "description": "Locate concerts at a specific venue on a specific date.", "parameters": {"type": "object", "properties": {"venue": {"type": "string", "description": "The name of the concert venue."}, "date": {"type": "string", "description": "The date of the concert in YYYY-MM-DD format."}, "artist": {"type": "string", "description": "The name of the artist or band, if looking for a specific performer. This parameter is optional.", "optional": "yes"}}, "required": ["venue", "date"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who was the most famous composers in United States.", "function": {"name": "music_theory.create_chord_progression", "description": "Creates a chord progression based on given musical key.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The musical key for the chord progression."}, "progression_pattern": {"type": "array", "items": {"type": "string"}, "description": "The chord progression pattern."}}, "required": ["key", "progression_pattern"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who establish laws and orders in Ancient Greek.", "function": {"name": "music.search_composer", "description": "Search the composer of a specific musical piece", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "The title of the musical piece."}, "epoch": {"type": "string", "description": "The historical period or style of the musical piece."}, "performer": {"type": "string", "description": "The performer of the musical piece"}}, "required": ["title", "epoch"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who write Don Quixote?", "function": {"name": "music_composer.composition_info", "description": "Retrieve information about a music composition including its composer, period and genre.", "parameters": {"type": "object", "properties": {"composition_name": {"type": "string", "description": "The name of the music composition."}, "need_detailed_info": {"type": "boolean", "description": "If set to True, retrieve detailed information about the composition such as year composed, duration, key, etc. Default is False"}}, "required": ["composition_name", "need_detailed_info"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are the primary triads in the key of C major?", "function": {"name": "music_analysis.find_common_chords", "description": "Find the most common chords in a specific genre of music.", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "The genre of music to analyze."}, "num_chords": {"type": "integer", "description": "The number of top common chords to return.", "optional": true}}, "required": ["genre", "num_chords"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are the most common chords in a pop song?", "function": {"name": "music_theory.primary_triads", "description": "Get the primary triads for a given key signature.", "parameters": {"type": "object", "properties": {"key_signature": {"type": "string", "description": "The key signature to calculate the primary triads for."}, "include_inversions": {"type": "boolean", "description": "Whether or not to include inversions in the returned triads."}}, "required": ["key_signature", "include_inversions"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who was the composer of Moonlight Sonata?", "function": {"name": "music_theory.get_blues_scale", "description": "Generates the blues scale in a given key.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The root note or key of the blues scale."}, "show_intervals": {"type": "boolean", "description": "Flag to show the intervals of the scale. Default is false."}}, "required": ["key"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the pattern of the blues scale in the key of A?", "function": {"name": "find_composer", "description": "Find the composer of a piece of music based on the name of the piece.", "parameters": {"type": "object", "properties": {"piece_name": {"type": "string", "description": "The name of the music piece."}, "year_composed": {"type": "integer", "description": "The year the music piece was composed.", "default": "optional"}}, "required": ["piece_name"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the Grammy Award for Best Album in 2017?", "function": {"name": "get_song_chord_progression", "description": "Retrieve the chord progression for a specific song.", "parameters": {"type": "object", "properties": {"song_name": {"type": "string", "description": "The name of the song."}, "artist_name": {"type": "string", "description": "The name of the artist/band."}, "capo_position": {"type": "integer", "description": "The capo position on the guitar, if applicable. Defaults to 0 (no capo)."}}, "required": ["song_name", "artist_name"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is the most assist player in Premier League?", "function": {"name": "sports_analysis.get_top_scorer", "description": "Retrieves the player with most goals in a specific football league", "parameters": {"type": "object", "properties": {"league": {"type": "string", "description": "The football league name. Eg. Premier League"}, "season": {"type": "string", "description": "The season in format yyyy/yyyy. Eg. 2020/2021"}, "team": {"type": "string", "description": "Optionally the specific team to consider. Eg. Liverpool"}}, "required": ["league", "season"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who played for Clippers in NBA", "function": {"name": "get_game_results", "description": "Retrieve game results between two teams on a specific date.", "parameters": {"type": "object", "properties": {"team_1": {"type": "string", "description": "The first team's name."}, "team_2": {"type": "string", "description": "The second team's name."}, "date": {"type": "string", "description": "The date of the game in the format YYYY-MM-DD."}, "venue": {"type": "string", "description": "The venue of the match."}}, "required": ["team_1", "team_2", "date"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who are in the cricket matches scheduled for today?", "function": {"name": "sports_analyzer.get_schedule", "description": "Retrieve the schedule of cricket matches for a specific date.", "parameters": {"type": "object", "properties": {"date": {"type": "string", "description": "The date for which to get the schedule of matches."}, "sport": {"type": "string", "description": "The type of sport. Default is cricket."}, "country": {"type": "string", "description": "The country for which to get the schedule. If not provided, all countries will be included."}}, "required": ["date", "sport"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who played in La Liga?", "function": {"name": "soccer_stats.get_last_match_result", "description": "Retrieve the results of the most recent match between two football teams.", "parameters": {"type": "object", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The football season in question (Optional)."}}, "required": ["team1", "team2"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How many championships did Michael Jordan win in his NBA career?", "function": {"name": "get_nba_player_stats", "description": "Retrieves statistics of an NBA player's career, including points, assists, rebounds, steals, blocks and number of championships won.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The name of the NBA player."}, "stat_type": {"type": "string", "enum": ["points", "assists", "rebounds", "steals", "blocks", "championships"], "description": "Type of statistics to retrieve."}}, "required": ["player_name", "stat_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who was the winner of Wimbledon Men's Singles in 2021?", "function": {"name": "find_top_sports_celebrity", "description": "Fetches information about a top sports celebrity including basic information, match records, endorsements and net worth.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "Name of the celebrity."}, "year": {"type": "integer", "description": "The year in which the celebrity rose to fame or importance."}, "sports_type": {"type": "string", "description": "The type of sport the celebrity is known for, e.g. Tennis, Basketball, Football.", "default": "All"}}, "required": ["name", "year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the NBA Most Valuable Player in 2020?", "function": {"name": "sports_stats.get_player_stats", "description": "Retrieve statistics of a specific player for a given season and league.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The name of the player."}, "season": {"type": "string", "description": "The season of the statistics, e.g. '2020-2021'."}, "league": {"type": "string", "description": "The league of the player's sport, e.g. 'NBA'."}}, "required": ["player_name", "season"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the assist average of basketball player LeBron James?", "function": {"name": "player_stats.average_scoring", "description": "Retrieve average scoring details of a specific basketball player.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "season": {"type": "string", "description": "The specific season to get statistics for."}, "league": {"type": "string", "default": "NBA", "description": "The league the player belongs to."}}, "required": ["player_name", "season"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the ranking of a football team?", "function": {"name": "sports_ranking.get_MVP", "description": "Retrieve the most valuable player of a particular sport season", "parameters": {"type": "object", "properties": {"season": {"type": "string", "description": "The season to look for MVP."}, "sport_type": {"type": "string", "description": "The type of sport to look for MVP."}, "team": {"type": "string", "description": "Specific team to look for MVP, Default is all teams"}}, "required": ["season", "sport_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the most valuable player in last season's basketball game?", "function": {"name": "sports_ranking.get_team_ranking", "description": "Retrieve the ranking of a specific team in a particular sport league.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the team."}, "sport_league": {"type": "string", "description": "The league that the team is in."}, "season": {"type": "integer", "optional": "true", "description": "The season for which the ranking is requested. If not provided, the most recent season is considered."}}, "required": ["team_name", "sport_league"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the championship of the World Series in 2020?", "function": {"name": "sports.ranking.get_champion", "description": "Retrieve the champion of a specific sports event for a given year.", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The sports event."}, "year": {"type": "integer", "description": "The year of the sports event."}}, "required": ["event", "year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is Lebron James?", "function": {"name": "sports_ranking.get_top_ranked", "description": "Get the current top ranked athlete for a specific sport.", "parameters": {"type": "object", "properties": {"sport": {"type": "string", "description": "The sport to get the ranking for."}, "gender": {"type": "string", "description": "The gender category."}, "year": {"type": "integer", "description": "The year for which the ranking is required.", "default": "The current year"}}, "required": ["sport", "gender"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is currently the top ranked tennis player?", "function": {"name": "sports_team.standing", "description": "Retrieve the current standing/ranking of a sports team in its respective league.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season_year": {"type": "integer", "optional": true, "description": "The season year for which the standing is needed. If not provided, current year is assumed."}}, "required": ["team_name", "league"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the last world cup in football?", "function": {"name": "get_match_stats", "description": "Retrieve the match statistics of a particular team in a specified sports tournament.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the team."}, "tournament": {"type": "string", "description": "The name of the sports tournament."}, "year": {"type": "integer", "description": "The year in which the tournament took place. (Optional)"}}, "required": ["team_name", "tournament"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the roster of Manchester United?", "function": {"name": "sports_team.get_top_scorer", "description": "Retrieve the top scorer of a sports team in a specific season.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the sports team."}, "season": {"type": "string", "description": "The season of interest, e.g. 2020-2021 NBA season."}, "league": {"type": "string", "description": "The league the team is part of. Default is 'NBA'."}}, "required": ["team", "season"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is the top scorer for Los Angeles Lakers?", "function": {"name": "get_sport_team_details", "description": "Retrieve information about a sports team including roster, previous results, upcoming matches, etc.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the team."}, "details": {"type": "array", "items": {"type": "string", "enum": ["roster", "results", "upcoming_matches"]}, "description": "Specific details about the team you want to retrieve."}}, "required": ["team_name", "details"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the best chess move for white player in this position?", "function": {"name": "fetch_game_stats", "description": "Fetch board game statistics like top players, winning scores and game histories", "parameters": {"type": "object", "properties": {"game_type": {"type": "string", "description": "The type of the board game."}, "year": {"type": "integer", "description": "The year when the game was played."}, "location": {"type": "string", "description": "The location where the game was played. This is an optional parameter."}}, "required": ["game_type", "year"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the chess tournament in 2015?", "function": {"name": "game.board_analyser", "description": "Analyse a given board position of the game and suggest the optimal next move", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the game. In this case, chess"}, "player": {"type": "string", "description": "The current player whose turn is to move."}, "position": {"type": "string", "description": "The current state of the board in FEN (Forsyth\u2013Edwards Notation) format."}, "difficulty": {"type": "string", "default": "medium", "description": "The level of difficulty for the suggested move. Options include 'easy', 'medium', 'hard'."}}, "required": ["game", "player", "position"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the total number of possible arrangements in a chess game?", "function": {"name": "boardgame.calculate_score", "description": "Calculate final scores for a board game given a list of player actions.", "parameters": {"type": "object", "properties": {"player_actions": {"type": "array", "items": {"type": "object", "properties": {"player_id": {"type": "integer", "description": "Unique identifier for each player."}, "action": {"type": "string", "description": "Action performed by the player. Possible values are: 'buy property', 'sell property', 'pass go', 'pay fine'."}, "property_id": {"type": "integer", "description": "Unique identifier for each property in the game."}}, "required": ["player_id", "action"]}, "description": "A list of player actions."}, "initial_scores": {"type": "object", "properties": {"player_id": {"type": "integer", "description": "Unique identifier for each player."}, "score": {"type": "integer", "description": "Initial score of the player. Defaults to 0 if not provided."}}, "description": "Initial scores for each player."}}}, "required": ["player_actions"]}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the game of Monopoly last night?", "function": {"name": "board_game.possible_moves", "description": "Calculate the total possible moves for a specific board game based on the current state of the game.", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "current_state": {"type": "string", "description": "The current state of the board game, including pieces on the board and their positions."}, "include_repetitions": {"type": "boolean", "description": "Include repetitive moves in the count or not. Default is false."}}, "required": ["game_name", "current_state"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are the rules of the game 'Uno'?", "function": {"name": "cards.shuffle_deck", "description": "Shuffles a deck of cards.", "parameters": {"type": "object", "properties": {"deck": {"type": "string", "description": "The deck of cards to be shuffled."}, "times": {"type": "integer", "description": "The number of times to shuffle the deck."}, "deck_type": {"type": "string", "description": "The type of card deck. E.g. 'Poker', 'Uno'. Default is 'Poker'."}}, "required": ["deck", "times"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who has the highest number of hearts in a game of poker?", "function": {"name": "play_poker", "description": "Deal the hand of poker.", "parameters": {"type": "object", "properties": {"number_of_players": {"type": "integer", "description": "The number of players."}, "cards_per_player": {"type": "integer", "description": "The number of cards to be dealt to each player."}, "game_type": {"type": "string", "description": "Type of the poker game. Defaults to 'Texas Holdem'"}}, "required": ["number_of_players", "cards_per_player"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the rule for 'Ace' in Blackjack?", "function": {"name": "get_highest_card_holder", "description": "Fetches the player with the highest number of a specified suit in a game of poker.", "parameters": {"type": "object", "properties": {"game_id": {"type": "string", "description": "The ID of the game."}, "suit": {"type": "string", "description": "The type of card suit to search for (hearts, diamonds, clubs, spades)."}}, "required": ["game_id", "suit"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find me an ice cream store", "function": {"name": "game_guide", "description": "A video game guide which provides guidance and tips for completing levels, solving puzzles or defeating bosses.", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "level": {"type": "integer", "description": "The level number of the game."}, "type": {"type": "string", "enum": ["puzzle", "boss", "traps", "missions"], "description": "The type of help you're seeking. Defaults to all types."}}, "required": ["game_name", "level"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who won the world series game?", "function": {"name": "game_score.calculate", "description": "Calculate the final game score based on the total points earned by each team.", "parameters": {"type": "object", "properties": {"team1_points": {"type": "integer", "description": "The total points earned by team 1."}, "team2_points": {"type": "integer", "description": "The total points earned by team 2."}, "game_rounds": {"type": "integer", "default": "3", "description": "The total game rounds. Defaults to 3 if not provided."}}, "required": ["team1_points", "team2_points"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the rank for player A in the game Halo?", "function": {"name": "get_player_score", "description": "Retrieve a player's score from a specific game", "parameters": {"type": "object", "properties": {"player": {"type": "string", "description": "The name of the player"}, "game": {"type": "string", "description": "The game that the player is participating in"}}, "required": ["player", "game"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Create a jigsaw puzzle", "function": {"name": "game_functions.solve_jigsaw", "description": "Generate solution for a given jigsaw puzzle image.", "parameters": {"type": "object", "properties": {"puzzle_image": {"type": "file", "description": "The image file of the jigsaw puzzle."}, "pieces_count": {"type": "integer", "description": "Number of pieces in the jigsaw puzzle."}, "solve_method": {"type": "string", "default": "brute_force", "enum": ["brute_force", "genetic_algorithm"], "description": "Method to be used to solve the puzzle. Default is brute_force."}}, "required": ["puzzle_image", "pieces_count"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Who is the author of the book 'Pride and Prejudice'?", "function": {"name": "calculate_score", "description": "Calculate the score in a video game based on the number of enemies defeated, coins collected, and power-ups acquired.", "parameters": {"type": "object", "properties": {"enemies_defeated": {"type": "integer", "description": "The number of enemies the player has defeated."}, "coins_collected": {"type": "integer", "description": "The number of coins the player has collected."}, "power_ups": {"type": "integer", "description": "The number of power-ups the player has acquired."}}, "required": ["enemies_defeated", "coins_collected"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the best character to use against a dragon in DragonSlayer game.", "function": {"name": "game.find_best_weapon", "description": "Finds the best weapon in the inventory to use against a particular enemy type based on the player's level and the enemy's strength and weaknesses.", "parameters": {"type": "object", "properties": {"player_level": {"type": "integer", "description": "The player's current level."}, "enemy_type": {"type": "string", "description": "The type of enemy the player is facing."}, "inventory": {"type": "array", "items": {"type": "string"}, "description": "List of weapons currently in player's inventory."}}, "required": ["player_level", "enemy_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the lowest score in the Flappy Bird game?", "function": {"name": "game_tracker.high_score", "description": "Retrieves the highest score recorded in the specified game.", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "The name of the game to get the high score for."}, "username": {"type": "string", "description": "The username of the player. (optional)"}, "platform": {"type": "string", "description": "The platform where the game was played, i.e PC, Xbox, Playstation, Mobile."}}, "required": ["game_name", "platform"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the shortest path in a game from 'Point A' to 'Point B'", "function": {"name": "calculate_taxi_fare", "description": "Calculate the taxi fare for a specific distance and time", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance travelled in miles."}, "wait_time": {"type": "number", "description": "The waiting time in minutes."}, "surge": {"type": "boolean", "description": "Whether there's a surge pricing. Default is false"}}, "required": ["distance", "wait_time"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How to build a new PC?", "function": {"name": "fetch_recipe", "description": "Retrieve a specific cooking recipe based on user query.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The user's query for a recipe."}, "numberOfResults": {"type": "integer", "description": "Number of recipes the user wants to retrieve. Default is 1."}, "includeIngredients": {"type": "array", "items": {"type": "string"}, "description": "An array of ingredients to include in the search. Optional."}}, "required": ["query", "numberOfResults"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Which place in Paris that is most famous?", "function": {"name": "recipe_based_restaurants", "description": "Search for the restaurants based on the specific dishes.", "parameters": {"type": "object", "properties": {"recipe_name": {"type": "string", "description": "The name of the dish."}, "location": {"type": "string", "description": "The city where to look for the restaurants."}, "price_range": {"type": "array", "items": {"type": "integer", "enum": ["$", "$$", "$$$", "$$$$"]}, "description": "The desired price range."}, "preferred_rating": {"type": "integer", "description": "The minimum restaurant rating.", "default": 3}}, "required": ["recipe_name", "location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the recipe to cook five chicken", "function": {"name": "recipe_calculator.calculate_time", "description": "Calculates the time to cook a recipe based on weight and per unit time.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "The weight of the item to be cooked."}, "per_unit_time": {"type": "integer", "description": "The time required to cook per unit weight."}, "unit_of_time": {"type": "string", "description": "Unit of time, such as minutes or hours. Default is minutes."}}, "required": ["weight", "per_unit_time"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the best way to boil an egg?", "function": {"name": "get_cooking_time", "description": "Calculate the optimal boiling time for a recipe ingredient based on its type and size.", "parameters": {"type": "object", "properties": {"ingredient_type": {"type": "string", "description": "The type of ingredient to be cooked."}, "ingredient_size": {"type": "string", "description": "The size of the ingredient."}, "cooking_method": {"type": "string", "description": "The method of cooking to be used.", "enum": ["boiling", "steaming", "roasting", "grilling"]}}, "required": ["ingredient_type", "ingredient_size"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Where is a good place for pizza in Boston?", "function": {"name": "restaurant_finder", "description": "Find restaurants based on specified cuisine and location.", "parameters": {"type": "object", "properties": {"cuisine": {"type": "string", "description": "The cuisine the user wants to search."}, "location": {"type": "string", "description": "The location in which the user wants to search for restaurants."}, "rating": {"type": "integer", "default": 3, "description": "Minimum acceptable restaurant rating."}}, "required": ["cuisine", "location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the best Sushi restaurant in Los Angeles.", "function": {"name": "calculate_tip", "description": "Calculate the total tip amount for a given total bill and tip percentage.", "parameters": {"type": "object", "properties": {"bill_total": {"type": "number", "description": "The total bill amount."}, "tip_percentage": {"type": "number", "description": "The tip percentage."}, "split": {"type": "integer", "description": "Number of people the tip is split between. Default is 1."}}, "required": ["bill_total", "tip_percentage"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How long will it take to travel from San Francisco to Los Angeles by car?", "function": {"name": "calculate_tip", "description": "Calculate the tip amount for a restaurant bill.", "parameters": {"type": "object", "properties": {"bill_amount": {"type": "number", "description": "The total restaurant bill amount."}, "tip_percentage": {"type": "number", "description": "The tip percentage as a decimal."}, "split_bill": {"type": "integer", "description": "The number of people to split the bill with. This parameter is optional."}}, "required": ["bill_amount", "tip_percentage"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Where is the closest Italian restaurant?", "function": {"name": "convert_currency", "description": "Converts a given amount of money from one currency to another", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money to convert"}, "from_currency": {"type": "string", "description": "The current currency of the money"}, "to_currency": {"type": "string", "description": "The desired currency of the money"}}, "required": ["amount", "from_currency", "to_currency"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Can you write a book?", "function": {"name": "cook_recipe.create", "description": "Creates a detailed recipe based on a list of ingredients and cooking instructions.", "parameters": {"type": "object", "properties": {"ingredients": {"type": "array", "items": {"type": "string"}, "description": "A list of ingredients."}, "instructions": {"type": "array", "items": {"type": "string"}, "description": "A list of step-by-step cooking instructions."}, "prep_time": {"type": "number", "description": "The preparation time in minutes, optional and default to 30."}}, "required": ["ingredients", "instructions"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Can you tell me a machine to bake a chocolate cake?", "function": {"name": "prepare_food.get_recipe", "description": "Retrieve a recipe based on specific ingredients and type of food.", "parameters": {"type": "object", "properties": {"ingredients": {"type": "array", "items": {"type": "string"}, "description": "List of ingredients for the recipe."}, "food_type": {"type": "string", "description": "The type of food for the recipe."}, "serving_size": {"type": "integer", "description": "The number of servings the recipe should cater to. Default is 1."}}, "required": ["ingredients", "food_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the recipe for lasagna?", "function": {"name": "get_calories_in_recipe", "description": "Calculate the total calories in a given recipe based on the ingredients.", "parameters": {"type": "object", "properties": {"ingredients": {"type": "array", "items": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the ingredient."}, "quantity": {"type": "integer", "description": "The quantity of the ingredient."}, "unit": {"type": "string", "description": "The unit of the ingredient (e.g., 'cup', 'oz')."}}, "required": ["name", "quantity", "unit"]}}, "servings": {"type": "integer", "description": "The number of servings the recipe makes (optional)."}}, "required": ["ingredients"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What should be the ingredient  for baking chocolate cake?", "function": {"name": "recipe.getTemperature", "description": "Get the cooking temperature for a specific recipe.", "parameters": {"type": "object", "properties": {"dish_name": {"type": "string", "description": "The name of the dish."}, "oven_type": {"type": "string", "description": "The type of oven. e.g. Conventional, Convection"}, "pre_heating": {"type": "boolean", "description": "Is pre-heating needed or not.", "default": "false"}}, "required": ["dish_name", "oven_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are some recommended exercises for legs?", "function": {"name": "grocery.get_food_list", "description": "Get a list of groceries suitable for a specific dietary goal.", "parameters": {"type": "object", "properties": {"goal": {"type": "string", "description": "The dietary goal, e.g. weight loss, muscle gain"}, "budget": {"type": "number", "description": "The available budget for grocery shopping."}, "preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-Free"]}, "description": "Food preference or dietary restrictions."}}, "required": ["goal", "budget"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "How many calories are in a tomato?", "function": {"name": "grocery_store.item_details", "description": "Retrieve detailed information about a specific grocery item.", "parameters": {"type": "object", "properties": {"item_name": {"type": "string", "description": "The name of the grocery item."}, "store_location": {"type": "string", "description": "The city or area where the grocery store is located."}, "details_level": {"type": "string", "enum": ["simple", "detailed"], "description": "Level of details required, 'simple' gives basic details, while 'detailed' provides comprehensive info about the item."}}, "required": ["item_name", "store_location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find a bakery that sells sourdough bread in Chicago.", "function": {"name": "grocery_shop.find_specific_product", "description": "Locate nearby grocery shops that sell a specific product based on city and product name.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city where the user wants to find the product"}, "product": {"type": "string", "description": "The specific product that the user is looking for"}, "show_closed": {"type": "boolean", "description": "Flag to decide if show shops that are currently closed. Defaults to False."}}, "required": ["city", "product"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find a pet store near Los Angeles, CA", "function": {"name": "grocery_store.locate_nearby", "description": "Find grocery stores nearby a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g., Los Angeles, CA"}, "store_type": {"type": "array", "items": {"type": "string", "enum": ["Supermarket", "Convenience Store", "Discount Store"]}, "description": "Type of the grocery store."}, "is_24_hours": {"type": "boolean", "description": "Whether the grocery store is open 24 hours."}}, "required": ["location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's the population in New York right now?", "function": {"name": "time_converter", "description": "Converts the local time of user's region to the target region's local time.", "parameters": {"type": "object", "properties": {"user_timezone": {"type": "string", "description": "The timezone of the user in string format. Example: 'Pacific Time (US & Canada)'"}, "target_timezone": {"type": "string", "description": "The target timezone in string format where user wants to know the local time. Example: 'Eastern Time (US & Canada)'"}, "time": {"type": "string", "description": "The local time of user's timezone in string format (24 hr format). Optional parameter. Example: '15:30:00'"}}, "required": ["user_timezone", "target_timezone"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's timezone is it in London?", "function": {"name": "get_local_time", "description": "Retrieve the current local time in a specified time zone.", "parameters": {"type": "object", "properties": {"timezone": {"type": "string", "description": "The timezone for which local time needs to be calculated."}, "date_format": {"type": "string", "description": "The format in which the date and time should be returned. Default is 'YYYY-MM-DD HH:mm:ss'."}}, "required": ["timezone", "date_format"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "When will be sunset in Beijing today?", "function": {"name": "calculate_sunrise", "description": "Calculate the time of sunrise for a specific date and location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location for which sunrise time needs to be calculated."}, "date": {"type": "string", "description": "The date for which sunrise time needs to be calculated in YYYY-MM-DD format. If not provided, current date is considered."}, "format": {"type": "string", "description": "Format in which the time should be returned. If not provided, default format 'HH:MM' is considered."}}, "required": ["location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the current time in Sydney, Australia?", "function": {"name": "get_local_time", "description": "Retrieve the local time for a specific city.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city to get the local time for."}, "format": {"type": "string", "description": "The format of the time to be retrieved, either 12 hours or 24 hours.", "enum": ["12", "24"]}, "timezone": {"type": "string", "description": "The timezone of the location. If left blank, the function will default to the city's local timezone."}}, "required": ["location"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What are some popular sushi restaurants in Tokyo?", "function": {"name": "book_hotel", "description": "Book a hotel room in a specified location for certain dates.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the hotel is located."}, "check_in_date": {"type": "date", "description": "The date when the guest will check into the hotel."}, "check_out_date": {"type": "date", "description": "The date when the guest will check out from the hotel."}, "room_type": {"type": "string", "optional": true, "description": "The type of room the guest would prefer."}}, "required": ["location", "check_in_date", "check_out_date"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find a pet-friendly train station in Miami", "function": {"name": "find_hotel", "description": "Search for hotels based on specific criteria like price range and pet policy.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "max_price_per_night": {"type": "number", "description": "The maximum amount you are willing to pay per night."}, "pet_friendly": {"type": "boolean", "description": "Whether the hotel should allow pets. Defaults to false."}}, "required": ["location", "max_price_per_night"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find a Thai restaurant in Chicago with vegetarian options.", "function": {"name": "hotel_booking.check_availability", "description": "Check room availability in a hotel based on certain criteria such as location and dates.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city where the hotel is located."}, "check_in_date": {"type": "string", "description": "The check-in date."}, "check_out_date": {"type": "string", "description": "The check-out date."}, "room_type": {"type": "string", "description": "The type of room."}}, "required": ["hotel_name", "location", "check_in_date", "check_out_date"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find a hotel in New York that provides breakfast and has a fitness centre.", "function": {"name": "hotel_search.find_hotels", "description": "Search for hotels based on location and amenities.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Breakfast", "Fitness Centre", "Free Wi-Fi", "Parking"]}, "description": "Preferred amenities in the hotel."}}, "required": ["location", "amenities"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the equivalent of $20 in British Pounds?", "function": {"name": "weather_in_location", "description": "Retrieve the current weather conditions in a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location where to retrieve the weather conditions."}, "unit": {"type": "string", "enum": ["C", "F"], "description": "The unit to use for the temperature, either Celsius (C) or Fahrenheit (F)."}}, "required": ["location", "unit"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What's 10inch in meter", "function": {"name": "convert_currency", "description": "Convert a amount from one currency to another at the current exchange rate.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount of money you want to convert."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the best movie in 2020?", "function": {"name": "currency_exchange.calculate", "description": "Calculate the exchanged amount of money based on the exchange rate.", "parameters": {"type": "object", "properties": {"base_amount": {"type": "number", "description": "The amount of money to be exchanged."}, "base_currency": {"type": "string", "description": "The current currency of the money."}, "target_currency": {"type": "string", "description": "The currency to be converted to."}}, "required": ["base_amount", "base_currency", "target_currency"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "What is the quickest way to get to Tokyo from London by plane?", "function": {"name": "get_flight_duration", "description": "Retrieves the quickest flight duration between two cities.", "parameters": {"type": "object", "properties": {"start_city": {"type": "string", "description": "The city you are starting your journey from."}, "destination_city": {"type": "string", "description": "The city you wish to travel to."}, "flight_type": {"type": "string", "description": "The type of flight you want to find duration for. Choices include: non-stop, direct, and multi-stop."}}, "required": ["start_city", "destination_city", "flight_type"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Where is the nearest pharmacy in Los Angeles?", "function": {"name": "get_route_to_location", "description": "Calculates a route to a specified location based on the starting point and desired method of transportation.", "parameters": {"type": "object", "properties": {"start_point": {"type": "string", "description": "The starting location for the route."}, "end_point": {"type": "string", "description": "The desired destination of the route."}, "transport_method": {"type": "string", "description": "The method of transportation. Options include 'Driving', 'Walking', 'Cycling', and 'Public Transport'", "default": "Driving"}}, "required": ["start_point", "end_point"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Calculate the hypotenuse for a right-angled triangle where other sides are 5 and 6", "function": {"name": "map_coordinates.distance_calculate", "description": "Calculate the straight-line distance between two points given their longitude and latitude.", "parameters": {"type": "object", "properties": {"pointA": {"type": "object", "properties": {"latitude": {"type": "number", "description": "Latitude of Point A. (Range from -90 to 90)"}, "longitude": {"type": "number", "description": "Longitude of Point A. (Range from -180 to 180)"}}, "required": ["latitude", "longitude"]}, "pointB": {"type": "object", "properties": {"latitude": {"type": "number", "description": "Latitude of Point B. (Range from -90 to 90)"}, "longitude": {"type": "number", "description": "Longitude of Point B. (Range from -180 to 180)"}}, "required": ["latitude", "longitude"]}}, "required": ["pointA", "pointB"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Find the distance in kilometers from San Francisco to Los Angeles.", "function": {"name": "get_date", "description": "Get the time difference between two geographical locations.", "parameters": {"type": "object", "properties": {"location_1": {"type": "string", "description": "location for first city."}, "location_2": {"type": "string", "description": "location for first city."}, "unit": {"type": "string", "enum": ["miles", "kilometers"], "description": "The unit of measure for the distance. Default is miles."}}, "required": ["location_1", "location_2"]}}, "human_eval_answer": "No function is called.", "question_type": "relevance"}
{"question": "Can you provide me with the timezone information for the GPS coordinates of the Eiffel Tower (having latitude of 48.8584 and longitude of 2.2945), ensuring the response data is in a compact format, using my API key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and the host 'timezone-by-location.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 48.8584, 'lon': 2.2945, 'c': 1})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Convert any GPS Lat/Lon location into its timezone", "default": "https://timezone-by-location.p.rapidapi.com/timezone"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the position for which the timezone is being requested."}, "lon": {"type": "number", "description": "Longitude of the position for which the timezone is being requested."}, "c": {"type": "number", "description": "Optional. Return compact JSON. Useful for reducing the size of the response data."}, "s": {"type": "number", "description": "Optional. Additional parameter, specifics not provided."}}, "type": "object", "required": ["lat", "lon"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "What is the correct way to use the requests.get function to find the timezone for a specific GPS location at latitude 40.7128 and longitude -74.0060, incorporating my RapidAPI credentials with key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and host 'timezone-by-location.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.7128, 'lon': -74.0060})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Convert any GPS Lat/Lon location into its timezone", "default": "https://timezone-by-location.p.rapidapi.com/timezone"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the position for which the timezone is being requested."}, "lon": {"type": "number", "description": "Longitude of the position for which the timezone is being requested."}, "c": {"type": "number", "description": "Optional. Return compact JSON. Useful for reducing the size of the response data."}, "s": {"type": "number", "description": "Optional. Additional parameter, specifics not provided."}}, "type": "object", "required": ["lat", "lon"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm currently at the GPS coordinates 40.712776, -74.005974, and I need to find out the timezone here for a scheduling app I'm developing. Can you provide me with the appropriate requests.get call using a compact JSON response from the RapidAPI service, specifying my API key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and host 'timezone-by-location.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.712776, 'lon': -74.005974, 'c': 1})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Convert any GPS Lat/Lon location into its timezone", "default": "https://timezone-by-location.p.rapidapi.com/timezone"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the position for which the timezone is being requested."}, "lon": {"type": "number", "description": "Longitude of the position for which the timezone is being requested."}, "c": {"type": "number", "description": "Optional. Return compact JSON. Useful for reducing the size of the response data."}, "s": {"type": "number", "description": "Optional. Additional parameter, specifics not provided."}}, "type": "object", "required": ["lat", "lon"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "What is the correct way to use requests.get to find the timezone of a specific GPS location with latitude 40.712776 and longitude -74.005974, using RapidAPI with my API key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and host 'timezone-by-location.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.712776, 'lon': -74.005974})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Convert any GPS Lat/Lon location into its timezone", "default": "https://timezone-by-location.p.rapidapi.com/timezone"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the position for which the timezone is being requested."}, "lon": {"type": "number", "description": "Longitude of the position for which the timezone is being requested."}, "c": {"type": "number", "description": "Optional. Return compact JSON. Useful for reducing the size of the response data."}, "s": {"type": "number", "description": "Optional. Additional parameter, specifics not provided."}}, "type": "object", "required": ["lat", "lon"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a trip and need to schedule calls across different time zones. How can I find out the timezone for a location with latitude 40.7128 and longitude -74.0060, and get a compact version of the response to save on data usage while using my mobile network, with API key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and host 'timezone-by-location.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.7128, 'lon': -74.0060, 'c': 1})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Convert any GPS Lat/Lon location into its timezone", "default": "https://timezone-by-location.p.rapidapi.com/timezone"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the position for which the timezone is being requested."}, "lon": {"type": "number", "description": "Longitude of the position for which the timezone is being requested."}, "c": {"type": "number", "description": "Optional. Return compact JSON. Useful for reducing the size of the response data."}, "s": {"type": "number", "description": "Optional. Additional parameter, specifics not provided."}}, "type": "object", "required": ["lat", "lon"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "How to convert the GPS coordinates of the Eiffel Tower (latitude 48.8584, longitude 2.2945) into its respective timezone, using my API key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' with the host 'timezone-by-location.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 48.8584, 'lon': 2.2945})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Convert any GPS Lat/Lon location into its timezone", "default": "https://timezone-by-location.p.rapidapi.com/timezone"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the position for which the timezone is being requested."}, "lon": {"type": "number", "description": "Longitude of the position for which the timezone is being requested."}, "c": {"type": "number", "description": "Optional. Return compact JSON. Useful for reducing the size of the response data."}, "s": {"type": "number", "description": "Optional. Additional parameter, specifics not provided."}}, "type": "object", "required": ["lat", "lon"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "While I'm working on a dashboard to display real-time COVID-19 statistics for Uganda, including total cases, recoveries, and deaths, I realized I need to use the API Sports COVID-19 API for accurate data. Given that I have my API key as '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and the host as 'covid-193.p.rapidapi.com', how can I fetch the latest statistics ensuring the request times out if it takes longer than 10 seconds? Also, how can I make sure the response is not streamed?", "human_eval_answer": "requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=10, params={'country': 'Uganda'}, stream=False)", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get statistics for all countries about COVID-19", "default": "https://covid-193.p.rapidapi.com/statistics"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"country": {"type": "string", "description": "Name of the country to retrieve data for. Use '[All]' to indicate a global history request."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "In the context of developing an application to track COVID-19 trends, I require to obtain statistics for France, including case numbers and vaccination rates. Considering my API key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and host 'covid-193.p.rapidapi.com', how can I perform this request ensuring it times out after 25 seconds if the server doesn't respond? Additionally, is there a way to filter the data by specific dates or is it aggregated?", "human_eval_answer": "requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=25, params={'country': 'France'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get statistics for all countries about COVID-19", "default": "https://covid-193.p.rapidapi.com/statistics"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"country": {"type": "string", "description": "Name of the country to retrieve data for. Use '[All]' to indicate a global history request."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm integrating a feature into our health app that allows users to see current COVID-19 statistics for Japan, focusing on total cases, recoveries, and deaths. My access credentials are '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' for the API key and 'covid-193.p.rapidapi.com' for the host. How can I fetch this data using the requests.get function, and should I consider any specific headers or parameters to ensure accuracy and timeliness of the data?", "human_eval_answer": "requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params={'country': 'Japan'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get statistics for all countries about COVID-19", "default": "https://covid-193.p.rapidapi.com/statistics"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"country": {"type": "string", "description": "Name of the country to retrieve data for. Use '[All]' to indicate a global history request."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "As I'm drafting a report on the impact of COVID-19 in UK, using dynamic data visualizations, I need to fetch the latest statistics using my RapidAPI credentials ('8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' as the API key and 'covid-193.p.rapidapi.com' as the host). How can I ensure the request has a timeout of 10 seconds, and how do I ensure the response is efficiently handled without being streamed?", "human_eval_answer": "requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=10, params={'country': 'UK'}, stream=False)", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get statistics for all countries about COVID-19", "default": "https://covid-193.p.rapidapi.com/statistics"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"country": {"type": "string", "description": "Name of the country to retrieve data for. Use '[All]' to indicate a global history request."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "For a comprehensive analysis on the current state of COVID-19 in Iran that I'm conducting for an upcoming health conference, I require the use of my RapidAPI credentials, which are '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' for the API key and 'covid-193.p.rapidapi.com' for the host. How do I fetch the current COVID-19 statistics, including any parameters that might improve the precision of the data fetched?", "human_eval_answer": "requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params={'country': 'Iran'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get statistics for all countries about COVID-19", "default": "https://covid-193.p.rapidapi.com/statistics"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"country": {"type": "string", "description": "Name of the country to retrieve data for. Use '[All]' to indicate a global history request."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "While updating a public health website with interactive maps showcasing COVID-19 statistics by country, I need to fetch the latest data for India using the API-Sports endpoint. My credentials include an API key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and host 'covid-193.p.rapidapi.com'. How can I retrieve the data, and is there specific formatting I should apply to the request for optimal data representation?", "human_eval_answer": "requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params={'country': 'India'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get statistics for all countries about COVID-19", "default": "https://covid-193.p.rapidapi.com/statistics"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"country": {"type": "string", "description": "Name of the country to retrieve data for. Use '[All]' to indicate a global history request."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "In a project aimed at providing near real-time dashboards for COVID-19 statistics across European countries, starting with China, I need to ensure the data retrieval process is optimized for speed to maintain data freshness. Using '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' as my RapidAPI key and 'covid-193.p.rapidapi.com' as the host, how do I configure the request to not exceed 5 seconds, and what other request optimization techniques can be applied to ensure the fastest possible data retrieval?", "human_eval_answer": "requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=5, params={'country': 'China'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get statistics for all countries about COVID-19", "default": "https://covid-193.p.rapidapi.com/statistics"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"country": {"type": "string", "description": "Name of the country to retrieve data for. Use '[All]' to indicate a global history request."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Can you show me how to fetch the latest exchange rates for Euros against all other currencies using my API key `4d4f464ee553f8065dbd95cb`?", "human_eval_answer": "requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API", "default": "https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I need to fetch the latest currency exchange rates using my API key '4d4f464ee553f8065dbd95cb' with the Euro (EUR) as my base currency. How can I do this using a GET request?", "human_eval_answer": "requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API", "default": "https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "What is the proper requests.get call to fetch the latest USD to EUR exchange rates using my API key `4d4f464ee553f8065dbd95cb`?", "human_eval_answer": "requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API", "default": "https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I need to fetch the latest currency exchange rates for Euros (EUR) as my base currency from my favorite exchange rate service. I've already got an API key which is `4d4f464ee553f8065dbd95cb`. How should I structure my GET request to obtain this information?", "human_eval_answer": "requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API", "default": "https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I need to update my financial models with the latest exchange rates. Can you help me fetch the latest rates using my Exchange Rate API key '4d4f464ee553f8065dbd95cb' for the base currency 'EUR'?", "human_eval_answer": "requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API", "default": "https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm currently building a financial dashboard and I need to display the latest exchange rates. My base currency is the Euro (EUR). Can you show me how to fetch the latest exchange rates from the Exchange Rate API using my personal API key '4d4f464ee553f8065dbd95cb'?", "human_eval_answer": "requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API", "default": "https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "What is the correct way to use the requests.get function to obtain the latest exchange rates for Euros against all other currencies using my Exchange Rate API key 4d4f464ee553f8065dbd95cb?", "human_eval_answer": "requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API", "default": "https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I need to fetch the latest currency exchange rates where my base currency is Euro (EUR), and I have an API key '4d4f464ee553f8065dbd95cb'. What would be the Python requests.get call for this operation?", "human_eval_answer": "requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API", "default": "https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Can you fetch the most recent exchange rates where the Euro (EUR) is set as the base currency using my API key '4d4f464ee553f8065dbd95cb'?", "human_eval_answer": "requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API", "default": "https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I need to get the latest currency exchange rates using my API key `4d4f464ee553f8065dbd95cb` with Euros as the base currency. Can you construct the appropriate GET request for this action?", "human_eval_answer": "requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "To retrieve the latest exchange rates for your chosen base currency against all other currencies supported by the API, substitute `YOUR-API-KEY` with your actual API key and `base_currency` with the ISO 4217 code of your desired base currency. Then, send a GET request to the provided endpoint. This guide helps in using the Standard endpoint of the Exchange Rate API", "default": "https://v6.exchangerate-api.com/v6/{YOUR-API-KEY}/latest/{base_currency}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm looking to get the latest information on the Meta stock from Yahoo Finance API. Could you fetch me the tickers, and make sure to use my RapidAPI credentials, which are '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' for the API key and 'yahoo-finance15.p.rapidapi.com' for the host?", "human_eval_answer": "requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Meta'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get tickers for any stock company, ETF, mutual fund, crypto and more", "default": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"search": {"type": "string", "description": "Search query for stock name"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm trying to find the ticker information for Tesla on the stock market, and I'm using the Yahoo Finance API through RapidAPI. My API key is '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', and the host is 'yahoo-finance15.p.rapidapi.com'. How should I set up the GET request with the necessary headers and search parameters?", "human_eval_answer": "requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get tickers for any stock company, ETF, mutual fund, crypto and more", "default": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"search": {"type": "string", "description": "Search query for stock name"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm interested in finding the latest tickers for Tesla stocks. Could you fetch that for me from the finance market API if I provide you with my RapidAPI key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and the host 'yahoo-finance15.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get tickers for any stock company, ETF, mutual fund, crypto and more", "default": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"search": {"type": "string", "description": "Search query for stock name"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm trying to find information on Apple stocks, can you help me fetch the tickers using my RapidAPI credentials? My key is '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and the host is 'yahoo-finance15.p.rapidapi.com'.", "human_eval_answer": "requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Apple'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get tickers for any stock company, ETF, mutual fund, crypto and more", "default": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"search": {"type": "string", "description": "Search query for stock name"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm looking to get the latest tickers for Tesla stocks. Could you please make a GET request to the appropriate financial data API with my RapidAPI key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and the host 'yahoo-finance15.p.rapidapi.com'? Also, include the search query 'Tesla'.", "human_eval_answer": "requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get tickers for any stock company, ETF, mutual fund, crypto and more", "default": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"search": {"type": "string", "description": "Search query for stock name"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm looking to invest and need to do some research on Tesla's stock ticker. Could you help me find it using RapidAPI with my credentials '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' for the API key and 'yahoo-finance15.p.rapidapi.com' for the host?", "human_eval_answer": "requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Get tickers for any stock company, ETF, mutual fund, crypto and more", "default": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"search": {"type": "string", "description": "Search query for stock name"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Can you show me how to make a GET request to find the geolocation details of an IP address, but I'm only interested in the query, status, and country fields. Also, I need the response in French.", "human_eval_answer": "requests.get(url='http://ip-api.com/json', params={'fields': 'query,status,country', 'lang': 'fr'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "This schema defines the parameters for querying the IP-API service.", "default": "http://ip-api.com/json"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"fields": {"type": "string", "description": "Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. "}, "lang": {"type": "string", "description": "Specify the language for the response. The API will default to English ('en') if this parameter is not provided."}, "callback": {"type": "string", "description": "The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I need to check the geolocation of my server and want the response in French. Can you fetch this information for me?", "human_eval_answer": "requests.get(url='http://ip-api.com/json', params={'lang': 'fr'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "This schema defines the parameters for querying the IP-API service.", "default": "http://ip-api.com/json"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"fields": {"type": "string", "description": "Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. "}, "lang": {"type": "string", "description": "Specify the language for the response. The API will default to English ('en') if this parameter is not provided."}, "callback": {"type": "string", "description": "The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Can you help me get the geolocation data for a specific IP address using the IP-API service, but I only want to receive the country, city, and timezone information in French?", "human_eval_answer": "requests.get(url='http://ip-api.com/json', params={'fields': 'country,city,timezone', 'lang': 'fr'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "This schema defines the parameters for querying the IP-API service.", "default": "http://ip-api.com/json"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"fields": {"type": "string", "description": "Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. "}, "lang": {"type": "string", "description": "Specify the language for the response. The API will default to English ('en') if this parameter is not provided."}, "callback": {"type": "string", "description": "The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Can you show me how to get a response from the IP-API service only in Spanish and include the city, country, and ISP information?", "human_eval_answer": "requests.get(url='http://ip-api.com/json', params={'fields': 'city,country,isp', 'lang': 'es'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "This schema defines the parameters for querying the IP-API service.", "default": "http://ip-api.com/json"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"fields": {"type": "string", "description": "Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. "}, "lang": {"type": "string", "description": "Specify the language for the response. The API will default to English ('en') if this parameter is not provided."}, "callback": {"type": "string", "description": "The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "If I need to check the geolocation data for my IP address in German, but I only want to get the query, status, and country fields, how should I make a GET request to the IP-API service?", "human_eval_answer": "requests.get(url='http://ip-api.com/json', params={'fields': 'query,status,country', 'lang': 'de'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "This schema defines the parameters for querying the IP-API service.", "default": "http://ip-api.com/json"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"fields": {"type": "string", "description": "Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. "}, "lang": {"type": "string", "description": "Specify the language for the response. The API will default to English ('en') if this parameter is not provided."}, "callback": {"type": "string", "description": "The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Can you show me how to make a GET request to the IP-API service for a JSON response with only the query and country fields in Spanish?", "human_eval_answer": "requests.get(url='http://ip-api.com/json', params={'fields': 'query,country', 'lang': 'es'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "This schema defines the parameters for querying the IP-API service.", "default": "http://ip-api.com/json"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"fields": {"type": "string", "description": "Specify the response fields using strings, separated by commas. Supported ones are status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query. "}, "lang": {"type": "string", "description": "Specify the language for the response. The API will default to English ('en') if this parameter is not provided."}, "callback": {"type": "string", "description": "The name of the callback function for a JSONP response. Omit this parameter for a standard JSON response."}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I need to convert the address '5331 Rexford Court, Montgomery AL 36116' to coordinates for a mapping project I'm working on. Can you fetch the latitude and longitude using the Geocoding API? My API key is '65fe68824e7f3760331092odq60ce8c'. I would prefer the response in 'geojson' format.", "human_eval_answer": "requests.get(url='https://geocode.maps.co/search', params={'q': '5331 Rexford Court, Montgomery AL 36116', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates", "default": "https://geocode.maps.co/search"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the location to reverse geocode."}, "lon": {"type": "number", "description": "Longitude of the location to reverse geocode."}, "api_key": {"type": "string", "description": "Your API key for authentication."}, "format": {"type": "string", "description": "The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'."}}, "type": "object", "required": ["lat", "lon", "api_key"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I need to convert an address into coordinates for my GPS system. The location is '886 Cannery Row, Monterey, CA'. I have an API key '65fe68824e7f3760331092odq60ce8c' for the Geocoding service. Could you provide me with the Python request to get the latitude and longitude in JSON format?", "human_eval_answer": "requests.get(url='https://geocode.maps.co/search', params={'q': '886 Cannery Row, Monterey, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates", "default": "https://geocode.maps.co/search"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the location to reverse geocode."}, "lon": {"type": "number", "description": "Longitude of the location to reverse geocode."}, "api_key": {"type": "string", "description": "Your API key for authentication."}, "format": {"type": "string", "description": "The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'."}}, "type": "object", "required": ["lat", "lon", "api_key"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I have an address '1600 Amphitheatre Parkway, Mountain View, CA' that I need to convert into latitude and longitude coordinates for my geospatial analysis project. Can you show me how to make a request to the Geocoding API using my API key '65fe68824e7f3760331092odq60ce8c' and ensure the response is in JSON format?", "human_eval_answer": "requests.get(url='https://geocode.maps.co/search', params={'q': '1600 Amphitheatre Parkway, Mountain View, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates", "default": "https://geocode.maps.co/search"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the location to reverse geocode."}, "lon": {"type": "number", "description": "Longitude of the location to reverse geocode."}, "api_key": {"type": "string", "description": "Your API key for authentication."}, "format": {"type": "string", "description": "The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'."}}, "type": "object", "required": ["lat", "lon", "api_key"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm working on a location-based app and need to convert the address '450 Jane Stanford Way Stanford, CA 94305\u20132004' into latitude and longitude coordinates using the Geocoding API. I have an API key '65fe68824e7f3760331092odq60ce8c'. Could you show me how to make the GET request for this in JSON format?", "human_eval_answer": "requests.get(url='https://geocode.maps.co/search', params={'q': '450 Jane Stanford Way Stanford, CA 94305\u20132004, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates", "default": "https://geocode.maps.co/search"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the location to reverse geocode."}, "lon": {"type": "number", "description": "Longitude of the location to reverse geocode."}, "api_key": {"type": "string", "description": "Your API key for authentication."}, "format": {"type": "string", "description": "The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'."}}, "type": "object", "required": ["lat", "lon", "api_key"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Can you provide the latitude and longitude coordinates for latitude 37.4224764 and longitude -122.0842499 using the Geocoding API, and I have the API key '65fe68824e7f3760331092odq60ce8c'? Also, can I get the response in the 'geojson' format?", "human_eval_answer": "requests.get(url='https://geocode.maps.co/reverse', params={'lat': 37.4224764, 'lon': -122.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses", "default": "https://geocode.maps.co/reverse"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the location to reverse geocode."}, "lon": {"type": "number", "description": "Longitude of the location to reverse geocode."}, "api_key": {"type": "string", "description": "Your API key for authentication."}, "format": {"type": "string", "description": "The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'."}}, "type": "object", "required": ["lat", "lon", "api_key"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I need to convert the (63.65687, 117.05229) somewhere in Mountain View, CA' to location name. I have an API key '65fe68824e7f3760331092odq60ce8c'. Could you provide me with the proper requests.get call in Python using the Geocoding API?", "human_eval_answer": "requests.get(url='https://geocode.maps.co/reverse', params={'lat': 63.65687, 'lon': 117.05229, 'api_key': '65fe68824e7f3760331092odq60ce8c'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses", "default": "https://geocode.maps.co/reverse"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the location to reverse geocode."}, "lon": {"type": "number", "description": "Longitude of the location to reverse geocode."}, "api_key": {"type": "string", "description": "Your API key for authentication."}, "format": {"type": "string", "description": "The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'."}}, "type": "object", "required": ["lat", "lon", "api_key"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Use my API key '65fe68824e7f3760331092odq60ce8c', can you convert the address 'Soda Hall, Berkeley, CA' to latitude and longitude coordinates using our Geocoding API, and also make sure to return the results in GeoJSON format?", "human_eval_answer": "requests.get(url='https://geocode.maps.co/search', params={'q': 'Soda Hall, Berkeley, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Geocoding API converting a human-readable address into a pair of latitude and longitude coordinates", "default": "https://geocode.maps.co/search"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the location to reverse geocode."}, "lon": {"type": "number", "description": "Longitude of the location to reverse geocode."}, "api_key": {"type": "string", "description": "Your API key for authentication."}, "format": {"type": "string", "description": "The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'."}}, "type": "object", "required": ["lat", "lon", "api_key"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Can you show me how to convert the address lat of 39.4224764 and lon of -112.0842499 into geographic coordinates using my API key '65fe68824e7f3760331092odq60ce8c', specifically requesting the response in the 'geojson' format?", "human_eval_answer": "requests.get(url='https://geocode.maps.co/reverse', params={'lat': 39.4224764, 'lon': -112.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses", "default": "https://geocode.maps.co/reverse"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the location to reverse geocode."}, "lon": {"type": "number", "description": "Longitude of the location to reverse geocode."}, "api_key": {"type": "string", "description": "Your API key for authentication."}, "format": {"type": "string", "description": "The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'."}}, "type": "object", "required": ["lat", "lon", "api_key"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Can you find the address for the coordinates 40.748817, -73.985428 using the Geocoding API, and ensure the response is in geojson format? I'll be using my key '65fe68824e7f3760331092odq60ce8c' for this request.", "human_eval_answer": "requests.get(url='https://geocode.maps.co/reverse', params={'lat': 40.748817, 'lon': -73.985428, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses", "default": "https://geocode.maps.co/reverse"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the location to reverse geocode."}, "lon": {"type": "number", "description": "Longitude of the location to reverse geocode."}, "api_key": {"type": "string", "description": "Your API key for authentication."}, "format": {"type": "string", "description": "The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'."}}, "type": "object", "required": ["lat", "lon", "api_key"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I need to convert the latitude 48.8584 and longitude 2.2945 to an address, I know it's somewhere famous in France. How do I make a GET request to the Geocoding API using my API key '65fe68824e7f3760331092odq60ce8c' to get this information in JSON format?", "human_eval_answer": "requests.get(url='https://geocode.maps.co/reverse', params={'lat': 48.8584, 'lon': 2.2945, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Geocoding API converting a a pair of latitude and longitude coordinates to human readable addresses", "default": "https://geocode.maps.co/reverse"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"lat": {"type": "number", "description": "Latitude of the location to reverse geocode."}, "lon": {"type": "number", "description": "Longitude of the location to reverse geocode."}, "api_key": {"type": "string", "description": "Your API key for authentication."}, "format": {"type": "string", "description": "The desired response format. Options include 'xml', 'json', 'jsonv2', 'geojson', 'geocodejson'. Default is 'json'."}}, "type": "object", "required": ["lat", "lon", "api_key"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I am planning a hiking trip next weekend and I need to prepare for the weather conditions. Can you fetch me a 7-day forecast including temperature_2m_max, temperature_2m_min, 10 minute max wind speed, and sum of daily precipitation for the coordinates 35.6895 N, 139.6917 E? Please ensure the temperature is in Fahrenheit.", "human_eval_answer": "requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'timezone': 'auto'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude", "default": "https://api.open-meteo.com/v1/forecast"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"latitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id."}, "longitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated."}, "elevation": {"type": "string", "description": "The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated."}, "hourly": {"type": "array", "items": {"type": "string"}, "description": "A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm"}, "daily": {"type": "array", "items": {"type": "string"}, "description": "A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max"}, "temperature_unit": {"type": "string", "description": "If fahrenheit is set, all temperature values are converted to Fahrenheit.", "default": "celsius"}, "wind_speed_unit": {"type": "string", "description": "Other wind speed units: ms, mph, and kn.", "default": "kmh"}, "precipitation_unit": {"type": "string", "description": "Other precipitation amount units: inch.", "default": "mm"}, "timeformat": {"type": "string", "description": "If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.", "default": "iso8601"}, "timezone": {"type": "string", "description": "If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.", "default": "GMT"}, "past_days": {"type": "integer", "description": "If past_days is set, yesterday or the day before yesterday data are also returned.", "default": 0}, "forecast_days": {"type": "integer", "description": "Per default, only 7 days are returned. Up to 16 days of forecast are possible.", "default": 7}, "forecast_hours": {"type": "integer", "description": "Similar to forecast_days, the number of timesteps of hourly data can be controlled."}, "forecast_minutely_15": {"type": "integer", "description": "The number of timesteps of 15-minutely data can be controlled."}, "past_hours": {"type": "integer", "description": "the number of timesteps of hourly data controlled"}, "past_minutely_15": {"type": "integer", "description": "the number of timesteps of 15 minute data controlled"}, "start_date": {"type": "string", "description": "The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30)."}, "end_date": {"type": "string", "description": ""}, "start_hour": {"type": "string", "description": "The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00)."}, "end_hour": {"type": "string", "description": ""}, "start_minutely_15": {"type": "string", "description": ""}, "end_minutely_15": {"type": "string", "description": ""}, "models": {"type": "array", "items": {"type": "string"}, "description": "A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined."}, "cell_selection": {"type": "string", "description": "Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell."}, "apikey": {"type": "string", "description": "Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information."}}, "type": "object", "required": ["latitude", "longitude"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a camping trip and I need to know the weather forecast. Can you fetch me the weather data for the campsite located at latitude 35.68 and longitude -121.34 for the next 10 days including daily temperature and precipitation forecasts? Also, I prefer the temperature 2 minute max in Fahrenheit and sum of precipitation in inches.", "human_eval_answer": "requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '35.68', 'longitude': '-121.34', 'forecast_days': 10, 'daily': ['temperature_2m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'precipitation_unit': 'inch'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude", "default": "https://api.open-meteo.com/v1/forecast"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"latitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id."}, "longitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated."}, "elevation": {"type": "string", "description": "The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated."}, "hourly": {"type": "array", "items": {"type": "string"}, "description": "A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm"}, "daily": {"type": "array", "items": {"type": "string"}, "description": "A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max"}, "temperature_unit": {"type": "string", "description": "If fahrenheit is set, all temperature values are converted to Fahrenheit.", "default": "celsius"}, "wind_speed_unit": {"type": "string", "description": "Other wind speed units: ms, mph, and kn.", "default": "kmh"}, "precipitation_unit": {"type": "string", "description": "Other precipitation amount units: inch.", "default": "mm"}, "timeformat": {"type": "string", "description": "If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.", "default": "iso8601"}, "timezone": {"type": "string", "description": "If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.", "default": "GMT"}, "past_days": {"type": "integer", "description": "If past_days is set, yesterday or the day before yesterday data are also returned.", "default": 0}, "forecast_days": {"type": "integer", "description": "Per default, only 7 days are returned. Up to 16 days of forecast are possible.", "default": 7}, "forecast_hours": {"type": "integer", "description": "Similar to forecast_days, the number of timesteps of hourly data can be controlled."}, "forecast_minutely_15": {"type": "integer", "description": "The number of timesteps of 15-minutely data can be controlled."}, "past_hours": {"type": "integer", "description": "the number of timesteps of hourly data controlled"}, "past_minutely_15": {"type": "integer", "description": "the number of timesteps of 15 minute data controlled"}, "start_date": {"type": "string", "description": "The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30)."}, "end_date": {"type": "string", "description": ""}, "start_hour": {"type": "string", "description": "The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00)."}, "end_hour": {"type": "string", "description": ""}, "start_minutely_15": {"type": "string", "description": ""}, "end_minutely_15": {"type": "string", "description": ""}, "models": {"type": "array", "items": {"type": "string"}, "description": "A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined."}, "cell_selection": {"type": "string", "description": "Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell."}, "apikey": {"type": "string", "description": "Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information."}}, "type": "object", "required": ["latitude", "longitude"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a hike next weekend and need to prepare for the weather. Can you fetch me a 7-day weather forecast including temperature 2 minute max, wind speed, and mean probability of precipitation for the coordinates 35.6895N, 139.6917 E, with temperatures in Celsius, wind speed 10 minute max in km/h, and precipitation in mm?", "human_eval_answer": "requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'wind_speed_10m_max', 'precipitation_probability_mean'], 'temperature_unit': 'celsius', 'wind_speed_unit': 'kmh', 'precipitation_unit': 'mm'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude", "default": "https://api.open-meteo.com/v1/forecast"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"latitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id."}, "longitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated."}, "elevation": {"type": "string", "description": "The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated."}, "hourly": {"type": "array", "items": {"type": "string"}, "description": "A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm"}, "daily": {"type": "array", "items": {"type": "string"}, "description": "A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max"}, "temperature_unit": {"type": "string", "description": "If fahrenheit is set, all temperature values are converted to Fahrenheit.", "default": "celsius"}, "wind_speed_unit": {"type": "string", "description": "Other wind speed units: ms, mph, and kn.", "default": "kmh"}, "precipitation_unit": {"type": "string", "description": "Other precipitation amount units: inch.", "default": "mm"}, "timeformat": {"type": "string", "description": "If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.", "default": "iso8601"}, "timezone": {"type": "string", "description": "If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.", "default": "GMT"}, "past_days": {"type": "integer", "description": "If past_days is set, yesterday or the day before yesterday data are also returned.", "default": 0}, "forecast_days": {"type": "integer", "description": "Per default, only 7 days are returned. Up to 16 days of forecast are possible.", "default": 7}, "forecast_hours": {"type": "integer", "description": "Similar to forecast_days, the number of timesteps of hourly data can be controlled."}, "forecast_minutely_15": {"type": "integer", "description": "The number of timesteps of 15-minutely data can be controlled."}, "past_hours": {"type": "integer", "description": "the number of timesteps of hourly data controlled"}, "past_minutely_15": {"type": "integer", "description": "the number of timesteps of 15 minute data controlled"}, "start_date": {"type": "string", "description": "The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30)."}, "end_date": {"type": "string", "description": ""}, "start_hour": {"type": "string", "description": "The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00)."}, "end_hour": {"type": "string", "description": ""}, "start_minutely_15": {"type": "string", "description": ""}, "end_minutely_15": {"type": "string", "description": ""}, "models": {"type": "array", "items": {"type": "string"}, "description": "A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined."}, "cell_selection": {"type": "string", "description": "Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell."}, "apikey": {"type": "string", "description": "Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information."}}, "type": "object", "required": ["latitude", "longitude"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a hiking trip next week and I need to prepare for the weather conditions. Can you fetch me a 7-day weather forecast for the coordinates 47.8095,13.0550, including daily temperature highs and lows, wind speed, and sum of precipitation? I prefer the temperature in Fahrenheit and wind speed in mph. Also, could you ensure that the timestamps are in local time for the 'Europe/Vienna' timezone?", "human_eval_answer": "requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '47.8095', 'longitude': '13.0550', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'timezone': 'Europe/Vienna', 'forecast_days': 7})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude", "default": "https://api.open-meteo.com/v1/forecast"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"latitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id."}, "longitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated."}, "elevation": {"type": "string", "description": "The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated."}, "hourly": {"type": "array", "items": {"type": "string"}, "description": "A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm"}, "daily": {"type": "array", "items": {"type": "string"}, "description": "A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max"}, "temperature_unit": {"type": "string", "description": "If fahrenheit is set, all temperature values are converted to Fahrenheit.", "default": "celsius"}, "wind_speed_unit": {"type": "string", "description": "Other wind speed units: ms, mph, and kn.", "default": "kmh"}, "precipitation_unit": {"type": "string", "description": "Other precipitation amount units: inch.", "default": "mm"}, "timeformat": {"type": "string", "description": "If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.", "default": "iso8601"}, "timezone": {"type": "string", "description": "If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.", "default": "GMT"}, "past_days": {"type": "integer", "description": "If past_days is set, yesterday or the day before yesterday data are also returned.", "default": 0}, "forecast_days": {"type": "integer", "description": "Per default, only 7 days are returned. Up to 16 days of forecast are possible.", "default": 7}, "forecast_hours": {"type": "integer", "description": "Similar to forecast_days, the number of timesteps of hourly data can be controlled."}, "forecast_minutely_15": {"type": "integer", "description": "The number of timesteps of 15-minutely data can be controlled."}, "past_hours": {"type": "integer", "description": "the number of timesteps of hourly data controlled"}, "past_minutely_15": {"type": "integer", "description": "the number of timesteps of 15 minute data controlled"}, "start_date": {"type": "string", "description": "The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30)."}, "end_date": {"type": "string", "description": ""}, "start_hour": {"type": "string", "description": "The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00)."}, "end_hour": {"type": "string", "description": ""}, "start_minutely_15": {"type": "string", "description": ""}, "end_minutely_15": {"type": "string", "description": ""}, "models": {"type": "array", "items": {"type": "string"}, "description": "A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined."}, "cell_selection": {"type": "string", "description": "Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell."}, "apikey": {"type": "string", "description": "Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information."}}, "type": "object", "required": ["latitude", "longitude"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a hiking trip next weekend to the Rockies and I need an extended 10-day weather forecast. How can I get the weather data including temperature highs and lows, wind speed, and sum of precipitation for the coordinates 39.113014, -105.358887 with temperatures in Fahrenheit, wind speed in mph, and the local timezone?", "human_eval_answer": "requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '39.113014', 'longitude': '-105.358887', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'mm', 'timezone': 'auto', 'forecast_days': 10})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude", "default": "https://api.open-meteo.com/v1/forecast"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"latitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id."}, "longitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated."}, "elevation": {"type": "string", "description": "The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated."}, "hourly": {"type": "array", "items": {"type": "string"}, "description": "A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm"}, "daily": {"type": "array", "items": {"type": "string"}, "description": "A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max"}, "temperature_unit": {"type": "string", "description": "If fahrenheit is set, all temperature values are converted to Fahrenheit.", "default": "celsius"}, "wind_speed_unit": {"type": "string", "description": "Other wind speed units: ms, mph, and kn.", "default": "kmh"}, "precipitation_unit": {"type": "string", "description": "Other precipitation amount units: inch.", "default": "mm"}, "timeformat": {"type": "string", "description": "If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.", "default": "iso8601"}, "timezone": {"type": "string", "description": "If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.", "default": "GMT"}, "past_days": {"type": "integer", "description": "If past_days is set, yesterday or the day before yesterday data are also returned.", "default": 0}, "forecast_days": {"type": "integer", "description": "Per default, only 7 days are returned. Up to 16 days of forecast are possible.", "default": 7}, "forecast_hours": {"type": "integer", "description": "Similar to forecast_days, the number of timesteps of hourly data can be controlled."}, "forecast_minutely_15": {"type": "integer", "description": "The number of timesteps of 15-minutely data can be controlled."}, "past_hours": {"type": "integer", "description": "the number of timesteps of hourly data controlled"}, "past_minutely_15": {"type": "integer", "description": "the number of timesteps of 15 minute data controlled"}, "start_date": {"type": "string", "description": "The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30)."}, "end_date": {"type": "string", "description": ""}, "start_hour": {"type": "string", "description": "The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00)."}, "end_hour": {"type": "string", "description": ""}, "start_minutely_15": {"type": "string", "description": ""}, "end_minutely_15": {"type": "string", "description": ""}, "models": {"type": "array", "items": {"type": "string"}, "description": "A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined."}, "cell_selection": {"type": "string", "description": "Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell."}, "apikey": {"type": "string", "description": "Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information."}}, "type": "object", "required": ["latitude", "longitude"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a hiking trip for next weekend and I need to check the weather forecast for the Yosemite National Park area. Can you fetch me the weather data for the coordinates 37.8651 N, 119.5383 W, including the hourly forecast for temperature, wind speed, and precipitation for the next 10 days? Also, I prefer the temperature in Fahrenheit, wind speed in mph, and precipitation in inches. Oh, and since I'll be in the local time zone, please adjust the timestamps accordingly.", "human_eval_answer": "requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '37.8651', 'longitude': '-119.5383', 'hourly': ['temperature', 'windspeed', 'precipitation'], 'forecast_days': 10, 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'inch', 'timezone': 'auto'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude", "default": "https://api.open-meteo.com/v1/forecast"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"latitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id."}, "longitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated."}, "elevation": {"type": "string", "description": "The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated."}, "hourly": {"type": "array", "items": {"type": "string"}, "description": "A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm"}, "daily": {"type": "array", "items": {"type": "string"}, "description": "A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max"}, "temperature_unit": {"type": "string", "description": "If fahrenheit is set, all temperature values are converted to Fahrenheit.", "default": "celsius"}, "wind_speed_unit": {"type": "string", "description": "Other wind speed units: ms, mph, and kn.", "default": "kmh"}, "precipitation_unit": {"type": "string", "description": "Other precipitation amount units: inch.", "default": "mm"}, "timeformat": {"type": "string", "description": "If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.", "default": "iso8601"}, "timezone": {"type": "string", "description": "If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.", "default": "GMT"}, "past_days": {"type": "integer", "description": "If past_days is set, yesterday or the day before yesterday data are also returned.", "default": 0}, "forecast_days": {"type": "integer", "description": "Per default, only 7 days are returned. Up to 16 days of forecast are possible.", "default": 7}, "forecast_hours": {"type": "integer", "description": "Similar to forecast_days, the number of timesteps of hourly data can be controlled."}, "forecast_minutely_15": {"type": "integer", "description": "The number of timesteps of 15-minutely data can be controlled."}, "past_hours": {"type": "integer", "description": "the number of timesteps of hourly data controlled"}, "past_minutely_15": {"type": "integer", "description": "the number of timesteps of 15 minute data controlled"}, "start_date": {"type": "string", "description": "The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30)."}, "end_date": {"type": "string", "description": ""}, "start_hour": {"type": "string", "description": "The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00)."}, "end_hour": {"type": "string", "description": ""}, "start_minutely_15": {"type": "string", "description": ""}, "end_minutely_15": {"type": "string", "description": ""}, "models": {"type": "array", "items": {"type": "string"}, "description": "A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined."}, "cell_selection": {"type": "string", "description": "Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell."}, "apikey": {"type": "string", "description": "Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information."}}, "type": "object", "required": ["latitude", "longitude"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a week-long hiking trip in the Swiss Alps and I need to check the weather forecast for two specific locations. The coordinates are latitude 46.0207, 46.4836 and longitude 7.7491, 9.8355. I would like to have the daily temperature in Fahrenheit, wind speed in mph, and precipitation in inches. My trip starts on April 15th and ends on April 21st, and I need the forecast to be aligned with the local time zone. Can you fetch this information for me?", "human_eval_answer": "requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '46.0207,46.4836', 'longitude': '7.7491,9.8355', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'inch', 'timezone': 'auto', 'start_date': '2023-04-15', 'end_date': '2023-04-21'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude", "default": "https://api.open-meteo.com/v1/forecast"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"latitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id."}, "longitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated."}, "elevation": {"type": "string", "description": "The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated."}, "hourly": {"type": "array", "items": {"type": "string"}, "description": "A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm"}, "daily": {"type": "array", "items": {"type": "string"}, "description": "A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max"}, "temperature_unit": {"type": "string", "description": "If fahrenheit is set, all temperature values are converted to Fahrenheit.", "default": "celsius"}, "wind_speed_unit": {"type": "string", "description": "Other wind speed units: ms, mph, and kn.", "default": "kmh"}, "precipitation_unit": {"type": "string", "description": "Other precipitation amount units: inch.", "default": "mm"}, "timeformat": {"type": "string", "description": "If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.", "default": "iso8601"}, "timezone": {"type": "string", "description": "If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.", "default": "GMT"}, "past_days": {"type": "integer", "description": "If past_days is set, yesterday or the day before yesterday data are also returned.", "default": 0}, "forecast_days": {"type": "integer", "description": "Per default, only 7 days are returned. Up to 16 days of forecast are possible.", "default": 7}, "forecast_hours": {"type": "integer", "description": "Similar to forecast_days, the number of timesteps of hourly data can be controlled."}, "forecast_minutely_15": {"type": "integer", "description": "The number of timesteps of 15-minutely data can be controlled."}, "past_hours": {"type": "integer", "description": "the number of timesteps of hourly data controlled"}, "past_minutely_15": {"type": "integer", "description": "the number of timesteps of 15 minute data controlled"}, "start_date": {"type": "string", "description": "The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30)."}, "end_date": {"type": "string", "description": ""}, "start_hour": {"type": "string", "description": "The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00)."}, "end_hour": {"type": "string", "description": ""}, "start_minutely_15": {"type": "string", "description": ""}, "end_minutely_15": {"type": "string", "description": ""}, "models": {"type": "array", "items": {"type": "string"}, "description": "A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined."}, "cell_selection": {"type": "string", "description": "Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell."}, "apikey": {"type": "string", "description": "Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information."}}, "type": "object", "required": ["latitude", "longitude"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a hiking trip next weekend and would like to know the weather forecast for the upcoming 10 days for the peak of Mount Adams. The coordinates are 46.2028 N, 121.4905 W, and the elevation is around 3743 meters. I'm particularly interested in the daily temperature highs and lows, as well as any precipitation predictions sums. Can you help me fetch this data?", "human_eval_answer": "requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '46.2028', 'longitude': '-121.4905', 'elevation': '3743', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum'], 'forecast_days': 10})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The API endpoint for fetching weather data from the Open-Meteo API for the given latitude and longitude", "default": "https://api.open-meteo.com/v1/forecast"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"latitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g., &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id."}, "longitude": {"type": "string", "description": "Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated."}, "elevation": {"type": "string", "description": "The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated."}, "hourly": {"type": "array", "items": {"type": "string"}, "description": "A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameters in the URL can be used. Support parameters: temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,pressure_msl,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,shortwave_radiation,direct_radiation,direct_normal_irradiance,diffuse_radiation,global_tilted_irradiance,vapour_pressure_deficit,cape,evapotranspiration,et0_fao_evapotranspiration,precipitation,snowfall,precipitation_probability,rain,showers,weather_code,snow_depth,freezing_level_height,visibility,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_to_1cm,soil_moisture_1_to_3cm,soil_moisture_3_to_9cm,soil_moisture_9_to_27cm,soil_moisture_27_to_81cm"}, "daily": {"type": "array", "items": {"type": "string"}, "description": "A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameters in the URL can be used. If daily weather variables are specified, parameter timezone is required. Possible values supported temperature_2m_max, temperature_2m_min, apparent_temperature_max, apparent_temperature_min, precipitation_sum, rain_sum, showers_sum, snowfall_sum, precipitation_hours, ,precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean, weather_code,sunrise,sunset,sunshine_duration, daylight_duration, wind_speed_10m_max, wind_gusts_10m_max, wind_direction_10m_dominant,shortwave_radiation_sum,et0_fao_evapotranspiration,uv_index_maxuv_index_clear_sky_max"}, "temperature_unit": {"type": "string", "description": "If fahrenheit is set, all temperature values are converted to Fahrenheit.", "default": "celsius"}, "wind_speed_unit": {"type": "string", "description": "Other wind speed units: ms, mph, and kn.", "default": "kmh"}, "precipitation_unit": {"type": "string", "description": "Other precipitation amount units: inch.", "default": "mm"}, "timeformat": {"type": "string", "description": "If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.", "default": "iso8601"}, "timezone": {"type": "string", "description": "If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.", "default": "GMT"}, "past_days": {"type": "integer", "description": "If past_days is set, yesterday or the day before yesterday data are also returned.", "default": 0}, "forecast_days": {"type": "integer", "description": "Per default, only 7 days are returned. Up to 16 days of forecast are possible.", "default": 7}, "forecast_hours": {"type": "integer", "description": "Similar to forecast_days, the number of timesteps of hourly data can be controlled."}, "forecast_minutely_15": {"type": "integer", "description": "The number of timesteps of 15-minutely data can be controlled."}, "past_hours": {"type": "integer", "description": "the number of timesteps of hourly data controlled"}, "past_minutely_15": {"type": "integer", "description": "the number of timesteps of 15 minute data controlled"}, "start_date": {"type": "string", "description": "The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30)."}, "end_date": {"type": "string", "description": ""}, "start_hour": {"type": "string", "description": "The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date and time (e.g. 2022-06-30T12:00)."}, "end_hour": {"type": "string", "description": ""}, "start_minutely_15": {"type": "string", "description": ""}, "end_minutely_15": {"type": "string", "description": ""}, "models": {"type": "array", "items": {"type": "string"}, "description": "A list of string, manually select one or more weather models. Per default, the best suitable weather models will be combined."}, "cell_selection": {"type": "string", "description": "Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell."}, "apikey": {"type": "string", "description": "Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information."}}, "type": "object", "required": ["latitude", "longitude"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "What's the correct way to use requests.get to find the meaning of the slang 'yeet', if I have the RapidAPI key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and I know that the required host for the API service is 'mashape-community-urban-dictionary.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'yeet'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Urban Dictionary is the dictionary you write.", "default": "https://mashape-community-urban-dictionary.p.rapidapi.com/define"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"term": {"type": "string", "description": "The search term or query parameter required by the API."}}, "type": "object", "required": ["term"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "What would be the Python code to find the definitions of 'artwash' with my RapidAPI key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and specific host 'mashape-community-urban-dictionary.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'artwash'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Urban Dictionary is the dictionary you write.", "default": "https://mashape-community-urban-dictionary.p.rapidapi.com/define"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"term": {"type": "string", "description": "The search term or query parameter required by the API."}}, "type": "object", "required": ["term"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm trying to find the slang definition of 'lit'. Could you show me the correct requests.get call if I have the API key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and the host is 'mashape-community-urban-dictionary.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'lit'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Urban Dictionary is the dictionary you write.", "default": "https://mashape-community-urban-dictionary.p.rapidapi.com/define"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"term": {"type": "string", "description": "The search term or query parameter required by the API."}}, "type": "object", "required": ["term"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm looking to understand the slang 'bet' better. Could you fetch the definitions from an online slang dictionary using my API key '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c' and the host 'mashape-community-urban-dictionary.p.rapidapi.com'?", "human_eval_answer": "requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'bet'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Urban Dictionary is the dictionary you write.", "default": "https://mashape-community-urban-dictionary.p.rapidapi.com/define"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"term": {"type": "string", "description": "The search term or query parameter required by the API."}}, "type": "object", "required": ["term"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm looking to find the definition of 'swole' on Urban Dictionary using RapidAPI. Could you provide me with the correct requests.get call using my API key `8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c` and Urban Dictionary's host `mashape-community-urban-dictionary.p.rapidapi.com`?", "human_eval_answer": "requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'swole'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Urban Dictionary is the dictionary you write.", "default": "https://mashape-community-urban-dictionary.p.rapidapi.com/define"}, "headers": {"properties": {"X-RapidAPI-Key": {"type": "string", "description": "The API key for authenticating requests to RapidAPI."}, "X-RapidAPI-Host": {"type": "string", "description": "The host domain for the RapidAPI service being accessed."}}, "type": "object", "required": ["X-RapidAPI-Key", "X-RapidAPI-Host"]}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"term": {"type": "string", "description": "The search term or query parameter required by the API."}}, "type": "object", "required": ["term"]}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I want to find out the age rating for the movie 'Barbie' released in 2023. I have an API key '8b5a9d56' for the OMDB API. How can I get this information?", "human_eval_answer": "requests.get(url='http://www.omdbapi.com/', params={'t': 'Barbie', 'y': '2023', 'apikey': '8b5a9d56'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Fetches the age rating of a movie from the OMDB API.", "default": "http://www.omdbapi.com/"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"i": {"type": "string", "description": "A valid IMDb ID (e.g., tt1285016)."}, "t": {"type": "string", "description": "Movie title to search for."}, "type": {"type": "string", "description": "Type of result to return. Valid options are 'movie', 'series', and 'episode'."}, "y": {"type": "string", "description": "Year of release."}, "plot": {"type": "string", "description": "Return short or full plot. Default is 'short'."}, "r": {"type": "string", "description": "The data type to return. Default is 'json'."}, "callback": {"type": "string", "description": "JSONP callback name."}, "v": {"type": "integer", "description": "API version (reserved for future use). Default is 1."}, "apikey": {"type": "string", "description": "API Key provided for this API"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm trying to find the age rating for 'The Social Network', which was released in 2010. Could you show me how to make a GET request to OMDB API to fetch this data using my API key '8b5a9d56'?", "human_eval_answer": "requests.get(url='http://www.omdbapi.com/', params={'t': 'The Social Network', 'y': '2010', 'apikey': '8b5a9d56'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Fetches the age rating of a movie from the OMDB API.", "default": "http://www.omdbapi.com/"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"i": {"type": "string", "description": "A valid IMDb ID (e.g., tt1285016)."}, "t": {"type": "string", "description": "Movie title to search for."}, "type": {"type": "string", "description": "Type of result to return. Valid options are 'movie', 'series', and 'episode'."}, "y": {"type": "string", "description": "Year of release."}, "plot": {"type": "string", "description": "Return short or full plot. Default is 'short'."}, "r": {"type": "string", "description": "The data type to return. Default is 'json'."}, "callback": {"type": "string", "description": "JSONP callback name."}, "v": {"type": "integer", "description": "API version (reserved for future use). Default is 1."}, "apikey": {"type": "string", "description": "API Key provided for this API"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I want to find out the age rating for the movie 'The Social Network', and I'm also interested in getting the full plot. What's the correct request using the OMDB API? I have the API key '8b5a9d56' ready to use.", "human_eval_answer": "requests.get(url='http://www.omdbapi.com/', params={'t': 'The Social Network', 'plot': 'full', 'apikey': '8b5a9d56'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Fetches the age rating of a movie from the OMDB API.", "default": "http://www.omdbapi.com/"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"i": {"type": "string", "description": "A valid IMDb ID (e.g., tt1285016)."}, "t": {"type": "string", "description": "Movie title to search for."}, "type": {"type": "string", "description": "Type of result to return. Valid options are 'movie', 'series', and 'episode'."}, "y": {"type": "string", "description": "Year of release."}, "plot": {"type": "string", "description": "Return short or full plot. Default is 'short'."}, "r": {"type": "string", "description": "The data type to return. Default is 'json'."}, "callback": {"type": "string", "description": "JSONP callback name."}, "v": {"type": "integer", "description": "API version (reserved for future use). Default is 1."}, "apikey": {"type": "string", "description": "API Key provided for this API"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Can you provide me with the full plot details of the movie 'Inception', which was released in 2010, and ensure the data returned is in JSON format? API key is '8b5a9d56'", "human_eval_answer": "requests.get(url='http://www.omdbapi.com/', params={'t': 'Inception', 'y': '2010', 'plot': 'full', 'r': 'json','apikey': '8b5a9d56'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Fetches the age rating of a movie from the OMDB API.", "default": "http://www.omdbapi.com/"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"i": {"type": "string", "description": "A valid IMDb ID (e.g., tt1285016)."}, "t": {"type": "string", "description": "Movie title to search for."}, "type": {"type": "string", "description": "Type of result to return. Valid options are 'movie', 'series', and 'episode'."}, "y": {"type": "string", "description": "Year of release."}, "plot": {"type": "string", "description": "Return short or full plot. Default is 'short'."}, "r": {"type": "string", "description": "The data type to return. Default is 'json'."}, "callback": {"type": "string", "description": "JSONP callback name."}, "v": {"type": "integer", "description": "API version (reserved for future use). Default is 1."}, "apikey": {"type": "string", "description": "API Key provided for this API"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm looking to fetch the full plot details for the movie 'Gorilla' from the OMDB API. Can you provide me with the Python requests.get code to retrieve the information in JSON format? I can provide the API key, it's '8b5a9d56'", "human_eval_answer": "requests.get(url='http://www.omdbapi.com/', params={'t': 'Gorilla', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Fetches the age rating of a movie from the OMDB API.", "default": "http://www.omdbapi.com/"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"i": {"type": "string", "description": "A valid IMDb ID (e.g., tt1285016)."}, "t": {"type": "string", "description": "Movie title to search for."}, "type": {"type": "string", "description": "Type of result to return. Valid options are 'movie', 'series', and 'episode'."}, "y": {"type": "string", "description": "Year of release."}, "plot": {"type": "string", "description": "Return short or full plot. Default is 'short'."}, "r": {"type": "string", "description": "The data type to return. Default is 'json'."}, "callback": {"type": "string", "description": "JSONP callback name."}, "v": {"type": "integer", "description": "API version (reserved for future use). Default is 1."}, "apikey": {"type": "string", "description": "API Key provided for this API"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I want to find out the rating for the movie 'Oppenheimer' released in 2023, API key is '8b5a9d56'. I need the full plot details in the response. What's the correct GET request using the requests library?", "human_eval_answer": "requests.get(url='http://www.omdbapi.com/', params={'t': 'Oppenheimer', 'y': '2023', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Fetches the age rating of a movie from the OMDB API.", "default": "http://www.omdbapi.com/"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"i": {"type": "string", "description": "A valid IMDb ID (e.g., tt1285016)."}, "t": {"type": "string", "description": "Movie title to search for."}, "type": {"type": "string", "description": "Type of result to return. Valid options are 'movie', 'series', and 'episode'."}, "y": {"type": "string", "description": "Year of release."}, "plot": {"type": "string", "description": "Return short or full plot. Default is 'short'."}, "r": {"type": "string", "description": "The data type to return. Default is 'json'."}, "callback": {"type": "string", "description": "JSONP callback name."}, "v": {"type": "integer", "description": "API version (reserved for future use). Default is 1."}, "apikey": {"type": "string", "description": "API Key provided for this API"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "My friends were going to the concert watching 'Barbie' released in 2023, said it's very good. But, I decided to watch 'Oppenheimer', I forgot when it released. I want to see the reviews of 'Oppenheimer' and I prefer the response in JSON format with full plot details. I think Oppenheimer is better than Barbie. What would be the proper request call using requests.get with API key '8b5a9d56'to achieve this?", "human_eval_answer": "requests.get(url='http://www.omdbapi.com/', params={'t': 'Oppenheimer', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "Fetches the age rating of a movie from the OMDB API.", "default": "http://www.omdbapi.com/"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {"i": {"type": "string", "description": "A valid IMDb ID (e.g., tt1285016)."}, "t": {"type": "string", "description": "Movie title to search for."}, "type": {"type": "string", "description": "Type of result to return. Valid options are 'movie', 'series', and 'episode'."}, "y": {"type": "string", "description": "Year of release."}, "plot": {"type": "string", "description": "Return short or full plot. Default is 'short'."}, "r": {"type": "string", "description": "The data type to return. Default is 'json'."}, "callback": {"type": "string", "description": "JSONP callback name."}, "v": {"type": "integer", "description": "API version (reserved for future use). Default is 1."}, "apikey": {"type": "string", "description": "API Key provided for this API"}}, "type": "object", "required": []}, "allow_redirects": {"type": "boolean", "description": "A Boolean to enable/disable redirection.", "default": true}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a vacation and trying to maximize my time off. Can you fetch me information about long weekends in Canada for the year 2023?", "human_eval_answer": "requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/CA')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2", "default": "https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "As a travel blogger, I'm planning my trips for the upcoming year and I'd like to take advantage of the long weekends. Could you help me find out when the long weekends will occur in Canada for the year 2023? I need this information to optimize my travel schedule and make the most of my time off.", "human_eval_answer": "requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/CA')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2", "default": "https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a vacation for 2023 and want to take advantage of long weekends. Can you help me find the dates for long weekends in France using the Date Nager API, so I can start booking my trips accordingly?", "human_eval_answer": "requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/FR')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2", "default": "https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a series of business trips for the next year and would prefer to extend my stays over long weekends where possible. Could you help me find information on long weekends in Japan for 2023?", "human_eval_answer": "requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/JP')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2", "default": "https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "I'm planning a series of long weekend getaways for the upcoming year and I need to know when they'll occur in my country. Could you fetch me the list of long weekends for Canada in the year 2023? I'd like to integrate this information into my holiday planning app.", "human_eval_answer": "requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/CA')", "function": {"name": "requests.get", "description": "Sends a GET request to the specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The api provides a simple way to query the holidays of over 100 countries, also it is possible to query long weekends. countryCode is ISO 3166-1 alpha-2", "default": "https://date.nager.at/api/v3/LongWeekend/{year}/{countryCode}"}, "headers": {"properties": {}, "type": "object", "required": []}, "timeout": {"type": "integer", "description": "How many seconds to wait for the server to send data before giving up."}, "params": {"properties": {}, "type": "object", "required": []}, "auth": {"type": "tuple", "description": "A tuple to enable a certain HTTP authentication.", "default": "None"}, "cert": {"type": "string", "description": "A String or Tuple specifying a cert file or key.", "default": "None"}, "cookies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of cookies to send with the request."}, "proxies": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Dictionary of the protocol to the proxy url."}, "stream": {"type": "boolean", "description": "A Boolean indication if the response should be immediately downloaded (False) or streamed (True).", "default": false}, "verify": {"type": "string", "description": "A Boolean or a String indication to verify the servers TLS certificate or not.", "default": true}}, "required": ["url"]}}, "question_type": "rest"}
{"question": "Find the area of a triangle with a base of 10 units and height of 5 units.", "function": {"name": "calculate_triangle_area", "description": "Calculate the area of a triangle given its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle."}, "unit": {"type": "string", "description": "The unit of measure (defaults to 'units' if not specified)"}}, "required": ["base", "height"]}}, "human_eval_answer": "calculate_triangle_area(base=10, height=5, unit='units')", "question_type": "simple"}
{"question": "Calculate the factorial of 5 using math functions.", "function": {"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "object", "properties": {"number": {"type": "number", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}, "human_eval_answer": "math.factorial(number=5)", "question_type": "simple"}
{"question": "Calculate the hypotenuse of a right triangle given the lengths of the other two sides as 4 and 5.", "function": {"name": "math.hypot", "description": "Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.", "parameters": {"type": "object", "properties": {"x": {"type": "number", "description": "The x-coordinate value."}, "y": {"type": "number", "description": "The y-coordinate value."}, "z": {"type": "number", "description": "Optional. The z-coordinate value. Default is 0."}}, "required": ["x", "y"]}}, "human_eval_answer": "math.hypot(x=4, y=5)", "question_type": "simple"}
{"question": "Find the roots of a quadratic equation with coefficients a=1, b=-3, c=2.", "function": {"name": "algebra.quadratic_roots", "description": "Find the roots of a quadratic equation ax^2 + bx + c = 0.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of x^2."}, "b": {"type": "number", "description": "Coefficient of x."}, "c": {"type": "number", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "algebra.quadratic_roots(a=1, b=-3, c=2)", "question_type": "simple"}
{"question": "Solve a quadratic equation where a=2, b=6, and c=5", "function": {"name": "solve_quadratic_equation", "api_call": "root = solve_quadratic_equation(a, b, c)", "description": "Function solves the quadratic equation and returns its roots.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "Coefficient of x squared"}, "b": {"type": "number", "description": "Coefficient of x"}, "c": {"type": "number", "description": "Constant term in the quadratic equation"}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "solve_quadratic_equation(a=2, b=6, c=5)", "question_type": "simple"}
{"question": "Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4.", "function": {"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "number", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "number", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. This parameter is optional."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "solve_quadratic(a=3, b=-11, c=-4)", "question_type": "simple"}
{"question": "What are the roots of the quadratic equation where a=2, b=5 and c=3 ?", "function": {"name": "solve_quadratic", "description": "Find the roots of a quadratic equation. Returns both roots.", "parameters": {"type": "object", "properties": {"a": {"type": "integer", "description": "Coefficient of x\u00b2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, "human_eval_answer": "solve_quadratic(a=2, b=5, c=3)", "question_type": "simple"}
{"question": "What is the circumference of a circle with a radius of 4 inches?", "function": {"name": "calculate_circumference", "description": "Calculates the circumference of a circle with a given radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle in the unit given."}, "unit": {"type": "string", "description": "The unit of measurement for the radius. Default is cm."}}, "required": ["radius"]}}, "human_eval_answer": "calculate_circumference(radius=4, unit='inches')", "question_type": "simple"}
{"question": "What's the area of a circle with a radius of 10?", "function": {"name": "geometry.area_circle", "description": "Calculate the area of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "units": {"type": "string", "description": "The units in which the radius is measured (defaults to meters).", "default": "meters"}}, "required": ["radius"]}}, "human_eval_answer": "geometry.area_circle(radius=10)", "question_type": "simple"}
{"question": "Calculate the area of a circle with a radius of 5 units.", "function": {"name": "geometry.calculate_area_circle", "description": "Calculate the area of a circle given its radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "unit": {"type": "string", "description": "The measurement unit of the radius (optional parameter, default is 'units')."}}, "required": ["radius"]}}, "human_eval_answer": "geometry.calculate_area_circle(radius=5, unit='units')", "question_type": "simple"}
{"question": "Calculate the area of a right-angled triangle given the lengths of its base and height as 6cm and 10cm.", "function": {"name": "calculate_area", "description": "Calculate the area of a right-angled triangle given the lengths of its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the right-angled triangle."}, "height": {"type": "number", "description": "The height of the right-angled triangle."}, "unit": {"type": "string", "description": "The unit of measure used. Defaults to cm.", "default": "cm"}}, "required": ["base", "height"]}}, "human_eval_answer": "calculate_area(base=6, height=10, unit='cm')", "question_type": "simple"}
{"question": "What is the area of a triangle with base of 10 units and height of 5 units?", "function": {"name": "calculate_triangle_area", "description": "Calculate the area of a triangle using its base and height.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle from the base."}}, "required": ["base", "height"]}}, "human_eval_answer": "calculate_triangle_area(base=10, height=5)", "question_type": "simple"}
{"question": "Calculate the circumference of a circle with radius 3", "function": {"name": "geometry.circumference", "description": "Calculate the circumference of a circle given the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}, "units": {"type": "string", "description": "Units for the output circumference measurement. Default is 'cm'."}}, "required": ["radius"]}}, "human_eval_answer": "geometry.circumference(radius=3)", "question_type": "simple"}
{"question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "number"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}, "human_eval_answer": "calculate_area_under_curve(function='x^2', interval=[1,3])", "question_type": "simple"}
{"question": "Calculate the derivative of the function 3x^2 + 2x - 1.", "function": {"name": "calculate_derivative", "description": "Calculate the derivative of a polynomial function.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The polynomial function."}, "x_value": {"type": "number", "description": "The x-value at which the derivative is calculated. Optional, if not given, the function will return a function of the derivative instead of a specific value."}}, "required": ["function"]}}, "human_eval_answer": "calculate_derivative(function='3x^2 + 2x - 1')", "question_type": "simple"}
{"question": "Calculate the area under the curve from x = -2 to x = 3 for the function y = x^3 using simpson method.", "function": {"name": "integrate", "description": "Calculate the area under a curve for a specified function between two x values.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to integrate, represented as a string. For example, 'x^3'"}, "start_x": {"type": "number", "description": "The starting x-value to integrate over."}, "end_x": {"type": "number", "description": "The ending x-value to integrate over."}, "method": {"type": "string", "description": "The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'."}}, "required": ["function", "start_x", "end_x"]}}, "human_eval_answer": "integrate(function='x^3', start_x=-2, end_x=3, method='simpson')", "question_type": "simple"}
{"question": "Calculate the derivative of the function 2x^2 at x = 1.", "function": {"name": "calculus.derivative", "description": "Compute the derivative of a function at a specific value.", "parameters": {"type": "object", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "value": {"type": "integer", "description": "The value where the derivative needs to be calculated at."}, "function_variable": {"type": "string", "description": "The variable present in the function, for instance x or y, etc."}}, "required": ["function", "value"]}}, "human_eval_answer": "calculus.derivative(function=\"2*x^2\", value=1, function_variable=\"x\")", "question_type": "simple"}
{"question": "Find the prime factors of 450", "function": {"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false"}}, "required": ["number", "formatted"]}}, "human_eval_answer": "get_prime_factors(number=450, formatted=true)", "question_type": "simple"}
{"question": "Find the prime factors of the number 123456.", "function": {"name": "number_analysis.prime_factors", "description": "Compute the prime factors of a number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to be factored."}}, "required": ["number"]}}, "human_eval_answer": "number_analysis.prime_factors(number=123456)", "question_type": "simple"}
{"question": "Calculate the greatest common divisor of two numbers: 40 and 50", "function": {"name": "math.gcd", "description": "Compute the greatest common divisor of two numbers", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}, "human_eval_answer": "math.gcd(num1=40, num2=50)", "question_type": "simple"}
{"question": "Find the highest common factor of 36 and 24.", "function": {"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "object", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}, "human_eval_answer": "math.hcf(number1=36, number2=24)", "question_type": "simple"}
{"question": "Find the Greatest Common Divisor (GCD) of two numbers, say 36 and 48.", "function": {"name": "number_theory.gcd", "description": "Compute the greatest common divisor of two given integers.", "parameters": {"type": "object", "properties": {"number1": {"type": "integer", "description": "The first integer."}, "number2": {"type": "integer", "description": "The second integer."}}, "required": ["number1", "number2"]}}, "human_eval_answer": "number_theory.gcd(number1=36, number2=48)", "question_type": "simple"}
{"question": "Calculate the greatest common divisor of two given numbers, for example 12 and 15.", "function": {"name": "math.gcd", "description": "Calculate the greatest common divisor (gcd) of the two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}, "human_eval_answer": "math.gcd(num1=12, num2=15)", "question_type": "simple"}
{"question": "What is the prime factorization of the number 60? Return them in the form of dictionary", "function": {"name": "prime_factorize", "description": "Calculate the prime factorization of a given integer.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number for which to calculate the prime factorization."}, "return_type": {"type": "string", "description": "Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'."}}, "required": ["number"]}}, "human_eval_answer": "prime_factorize(number=60, return_type='dictionary')", "question_type": "simple"}
{"question": "Find the greatest common divisor (GCD) of 12 and 18", "function": {"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "object", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}, "human_eval_answer": "math.gcd(num1=12, num2=18)", "question_type": "simple"}
{"question": "Calculate the final velocity of an object falling from a 150 meter building, assuming initial velocity is zero.", "function": {"name": "calculate_final_velocity", "description": "Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.", "parameters": {"type": "object", "properties": {"height": {"type": "number", "description": "The height the object is dropped from, in meters."}, "initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s. Default is zero."}, "gravity": {"type": "number", "description": "Acceleration due to gravity. Default value is approximately 9.81 m/s^2, earth's gravity."}}, "required": ["height"]}}, "human_eval_answer": "calculate_final_velocity(height=150)", "question_type": "simple"}
{"question": "Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?", "function": {"name": "calculate_velocity", "description": "Calculate the velocity for a certain distance travelled within a specific duration.", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance travelled by the object, typically in kilometers."}, "duration": {"type": "number", "description": "The duration of the journey, typically in hours."}, "unit": {"type": "string", "description": "Optional parameter. The unit to return the velocity in. If not provided, the default is km/h."}}, "required": ["distance", "duration"]}}, "human_eval_answer": "calculate_velocity(distance=50, duration=2)", "question_type": "simple"}
{"question": "Calculate the final velocity of a vehicle after accelerating at 2 meters/second^2 for a duration of 5 seconds, starting from a speed of 10 meters/second.", "function": {"name": "final_velocity", "description": "Calculate the final velocity of an object given its initial velocity, acceleration, and time.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in meters/second."}, "acceleration": {"type": "number", "description": "The acceleration of the object in meters/second^2."}, "time": {"type": "number", "description": "The time over which the acceleration is applied in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "final_velocity(initial_velocity=10, acceleration=2, time=5)", "question_type": "simple"}
{"question": "Calculate the displacement of a car given the initial velocity of 10 and acceleeration of 9.8 within 5 seconds.", "function": {"name": "calculate_displacement", "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object in m/s."}, "time": {"type": "number", "description": "The time in seconds that the object has been in motion."}, "acceleration": {"type": "number", "description": "The acceleration of the object in m/s^2.", "default": 0}}, "required": ["initial_velocity", "time"]}}, "human_eval_answer": "calculate_displacement(initial_velocity=10, time=5, acceleration=9.8)", "question_type": "simple"}
{"question": "What is the final speed of an object dropped from rest after falling for 5 seconds if we neglect air resistance?", "function": {"name": "calculate_final_speed", "description": "Calculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2", "parameters": {"type": "object", "properties": {"initial_speed": {"type": "number", "description": "The initial speed of the object in m/s. Default is 0 for an object at rest."}, "time": {"type": "number", "description": "The time in seconds for which the object is in free fall."}, "gravity": {"type": "number", "description": "The acceleration due to gravity. Default is -9.81 m/s^2."}}, "required": ["time"]}}, "human_eval_answer": "calculate_final_speed(initial_speed=0, time=5)", "question_type": "simple"}
{"question": "What is the final velocity of a vehicle that started from rest and accelerated at 4 m/s^2 for a distance of 300 meters?", "function": {"name": "kinematics.final_velocity_from_distance", "description": "Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.", "parameters": {"type": "object", "properties": {"acceleration": {"type": "number", "description": "Acceleration of the object, m/s^2."}, "distance": {"type": "number", "description": "Distance traveled by the object, m."}, "initial_velocity": {"type": "number", "description": "Initial velocity of the object. Default is 0, m/s"}}, "required": ["acceleration", "distance"]}}, "human_eval_answer": "kinematics.final_velocity_from_distance(acceleration=4, distance=300)", "question_type": "simple"}
{"question": "Calculate the final velocity of an object, knowing that it started from rest, accelerated at a rate of 9.8 m/s^2 for a duration of 5 seconds.", "function": {"name": "calculate_final_velocity", "description": "Calculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "acceleration": {"type": "number", "description": "The acceleration of the object."}, "time": {"type": "number", "description": "The time of acceleration."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "human_eval_answer": "calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=5)", "question_type": "simple"}
{"question": "Calculate the final speed of an object dropped from 100 m without air resistance.", "function": {"name": "calculate_final_speed", "description": "Calculate the final speed of an object dropped from a certain height without air resistance.", "parameters": {"type": "object", "properties": {"initial_velocity": {"type": "number", "description": "The initial velocity of the object."}, "height": {"type": "number", "description": "The height from which the object is dropped."}, "gravity": {"type": "number", "description": "The gravitational acceleration. Default is 9.8 m/s^2."}}, "required": ["initial_velocity", "height"]}}, "human_eval_answer": "calculate_final_speed(initial_velocity=0, height=100)", "question_type": "simple"}
{"question": "Get directions from Sydney to Melbourne using the fastest route.", "function": {"name": "get_directions", "description": "Retrieve directions from one location to another.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting point of the journey."}, "end_location": {"type": "string", "description": "The destination point of the journey."}, "route_type": {"type": "string", "description": "Type of route to use (e.g., fastest, scenic). Default is fastest.", "enum": ["fastest", "scenic"]}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "get_directions(start_location='Sydney', end_location='Melbourne', route_type='fastest')", "question_type": "simple"}
{"question": "Create an itinerary for a 7 days trip to Tokyo with daily budgets not exceeding $100 and prefer exploring nature.", "function": {"name": "travel_itinerary_generator", "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.", "parameters": {"type": "object", "properties": {"destination": {"type": "string", "description": "Destination city of the trip."}, "days": {"type": "integer", "description": "Number of days for the trip."}, "daily_budget": {"type": "number", "description": "The maximum daily budget for the trip."}, "exploration_type": {"type": "string", "enum": ["nature", "urban", "history", "culture"], "description": "The preferred exploration type.", "default": "urban"}}, "required": ["destination", "days", "daily_budget"]}}, "human_eval_answer": "travel_itinerary_generator(destination=\"Tokyo\", days=7, daily_budget=100, exploration_type=\"nature\")", "question_type": "simple"}
{"question": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "function": {"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format."}}, "required": ["location"]}}, "human_eval_answer": "vegan_restaurant.find_nearby(location='New York, NY', operating_hours=23)", "question_type": "simple"}
{"question": "Find the shortest driving distance between New York City and Washington D.C.", "function": {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "Starting point of the journey. You should format it as city name like Boston."}, "destination": {"type": "string", "description": "End point of the journey. You should format it as city name like Boston."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is kilometers)."}}, "required": ["origin", "destination"]}}, "human_eval_answer": "get_shortest_driving_distance(origin='New York City', destination='Washington D.C.')", "question_type": "simple"}
{"question": "Find the estimated travel time by car from San Francisco to Los Angeles with stops at Santa Barbara and Monterey.", "function": {"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey. It should be format as city name such as Boston."}, "end_location": {"type": "string", "description": "The destination for the journey. It should be format as city name such as Boston."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey."}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "route.estimate_time(start_location='San Francisco', end_location='Los Angeles', stops=['Santa Barbara', 'Monterey'])", "question_type": "simple"}
{"question": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?", "function": {"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "object", "properties": {"charge1": {"type": "number", "description": "The quantity of charge on the first body."}, "charge2": {"type": "number", "description": "The quantity of charge on the second body."}, "distance": {"type": "number", "description": "The distance between the two bodies."}, "constant": {"type": "number", "description": "The value of the electrostatic constant."}}, "required": ["charge1", "charge2", "distance"]}}, "human_eval_answer": "calculate_electrostatic_potential(charge1=1e-9, charge2=2e-9, distance=0.05)", "question_type": "simple"}
{"question": "Calculate the electric field at a point 3 meters away from a charge of 2 coulombs.", "function": {"name": "calculate_electric_field", "description": "Calculate the electric field produced by a charge at a certain distance.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "Charge in coulombs producing the electric field."}, "distance": {"type": "number", "description": "Distance from the charge in meters where the field is being measured."}, "permitivity": {"type": "number", "description": "Permitivity of the space where field is being calculated, default is for vacuum."}}, "required": ["charge", "distance"]}}, "human_eval_answer": "calculate_electric_field(charge=2, distance=3)", "question_type": "simple"}
{"question": "Calculate the magnetic field produced at the center of a circular loop carrying current of 5 Ampere with a radius of 4 meters", "function": {"name": "calculate_magnetic_field", "description": "Calculate the magnetic field produced at the center of a circular loop carrying current.", "parameters": {"type": "object", "properties": {"current": {"type": "number", "description": "The current through the circular loop in Amperes."}, "radius": {"type": "number", "description": "The radius of the circular loop in meters."}, "permeability": {"type": "number", "description": "The magnetic permeability. Default is permeability in free space."}}, "required": ["current", "radius"]}}, "human_eval_answer": "calculate_magnetic_field(current=5, radius=4)", "question_type": "simple"}
{"question": "Calculate the electromagnetic force between two charges of 5C and 7C placed 3 meters apart.", "function": {"name": "electromagnetic_force", "description": "Calculate the electromagnetic force between two charges placed at a certain distance.", "parameters": {"type": "object", "properties": {"charge1": {"type": "number", "description": "The magnitude of the first charge in coulombs."}, "charge2": {"type": "number", "description": "The magnitude of the second charge in coulombs."}, "distance": {"type": "number", "description": "The distance between the two charges in meters."}, "medium_permittivity": {"type": "number", "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity)."}}, "required": ["charge1", "charge2", "distance"]}}, "human_eval_answer": "electromagnetic_force(charge1=5, charge2=7, distance=3)", "question_type": "simple"}
{"question": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH.", "function": {"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "object", "properties": {"inductance": {"type": "number", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "number", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}, "human_eval_answer": "calculate_resonant_frequency(inductance=0.05, capacitance=0.0001)", "question_type": "simple"}
{"question": "Calculate the magnetic field strength 10 meters away from a long wire carrying a current of 20 Amperes.", "function": {"name": "calculate_magnetic_field_strength", "description": "Calculate the magnetic field strength at a point a certain distance away from a long wire carrying a current.", "parameters": {"type": "object", "properties": {"current": {"type": "number", "description": "The current flowing through the wire in Amperes."}, "distance": {"type": "number", "description": "The perpendicular distance from the wire to the point where the magnetic field is being calculated."}, "permeability": {"type": "number", "description": "The permeability of the medium. Default is 4\u03c0 x 10^-7 (Vacuum Permeability)."}}, "required": ["current", "distance"]}}, "human_eval_answer": "calculate_magnetic_field_strength(current=20, distance=10)", "question_type": "simple"}
{"question": "Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs.", "function": {"name": "calculate_electric_field_strength", "description": "Calculate the electric field strength at a certain distance from a point charge.", "parameters": {"type": "object", "properties": {"charge": {"type": "number", "description": "The charge in Coulombs."}, "distance": {"type": "number", "description": "The distance from the charge in meters."}, "medium": {"type": "string", "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."}}, "required": ["charge", "distance"]}}, "human_eval_answer": "calculate_electric_field_strength(charge=0.01, distance=4)", "question_type": "simple"}
{"question": "Calculate the energy (in Joules) absorbed or released during the phase change of 100g of water from liquid to steam at its boiling point.", "function": {"name": "thermo.calculate_energy", "description": "Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.", "parameters": {"type": "object", "properties": {"mass": {"type": "number", "description": "Mass of the substance in grams."}, "phase_transition": {"type": "string", "description": "Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'."}, "substance": {"type": "string", "description": "The substance which is undergoing phase change, default is 'water'"}}, "required": ["mass", "phase_transition"]}}, "human_eval_answer": "thermo.calculate_energy(mass=100, phase_transition='vaporization')", "question_type": "simple"}
{"question": "Calculate the final temperature when 20 kg of water at 30 degree Celsius is mixed with 15 kg of water at 60 degree Celsius.", "function": {"name": "calculate_final_temperature", "description": "Calculates the final equilibrium temperature after mixing two bodies with different masses and temperatures", "parameters": {"type": "object", "properties": {"mass1": {"type": "number", "description": "The mass of the first body (kg)."}, "temperature1": {"type": "number", "description": "The initial temperature of the first body (Celsius)."}, "mass2": {"type": "number", "description": "The mass of the second body (kg)."}, "temperature2": {"type": "number", "description": "The initial temperature of the second body (Celsius)."}, "specific_heat_capacity": {"type": "number", "description": "The specific heat capacity of the bodies. If not provided, will default to that of water at room temperature (J/kg.Celsius)."}}, "required": ["mass1", "temperature1", "mass2", "temperature2"]}}, "human_eval_answer": "calculate_final_temperature(mass1=20, temperature1=30, mass2=15, temperature2=60)", "question_type": "simple"}
{"question": "Find the boiling point and melting point of water under the sea level of 5000m.", "function": {"name": "get_boiling_melting_points", "description": "Retrieve the boiling point and melting point of a substance based on its name and the sea level.", "parameters": {"type": "object", "properties": {"substance": {"type": "string", "description": "The name of the substance."}, "sea_level": {"type": "integer", "description": "The sea level in meters."}}, "required": ["substance", "sea_level"]}}, "human_eval_answer": "get_boiling_melting_points(substance='water', sea_level=5000)", "question_type": "simple"}
{"question": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "function": {"name": "calculate_density", "description": "Calculate the density of a substance based on its mass and volume.", "parameters": {"type": "object", "properties": {"mass": {"type": "number", "description": "The mass of the substance in kilograms."}, "volume": {"type": "number", "description": "The volume of the substance in cubic meters."}, "unit": {"type": "string", "description": "The unit of density. Default is kg/m\u00b3"}}, "required": ["mass", "volume"]}}, "human_eval_answer": "calculate_density(mass=45, volume=15)", "question_type": "simple"}
{"question": "Calculate the absolute pressure in pascals given atmospheric pressure of 1 atm and a gauge pressure of 2 atm.", "function": {"name": "calc_absolute_pressure", "description": "Calculates the absolute pressure from gauge and atmospheric pressures.", "parameters": {"type": "object", "properties": {"atm_pressure": {"type": "number", "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."}, "gauge_pressure": {"type": "number", "description": "The gauge pressure in atmospheres (atm). Must be provided."}}, "required": ["gauge_pressure"]}}, "human_eval_answer": "calc_absolute_pressure(atm_pressure=1, gauge_pressure=2)", "question_type": "simple"}
{"question": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?", "function": {"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "object", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "number", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "number", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "number", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "number", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}, "human_eval_answer": "entropy_change.calculate(substance=\"ice\", mass=1, initial_temperature=0, final_temperature=100, pressure=1)", "question_type": "simple"}
{"question": "Calculate the entropy change for a certain process given an initial temperature of 300K, a final temperature of 400K, and a heat capacity of 5J/K.", "function": {"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "object", "properties": {"initial_temp": {"type": "number", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "number", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "number", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}, "human_eval_answer": "calculate_entropy_change(initial_temp=300, final_temp=400, heat_capacity=5)", "question_type": "simple"}
{"question": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.", "function": {"name": "calc_heat_capacity", "description": "Calculate the heat capacity at constant pressure of air using its temperature and volume.", "parameters": {"type": "object", "properties": {"temp": {"type": "number", "description": "The temperature of the gas in Kelvin."}, "volume": {"type": "number", "description": "The volume of the gas in m^3."}, "gas": {"type": "string", "description": "Type of gas, with air as default."}}, "required": ["temp", "volume"]}}, "human_eval_answer": "calc_heat_capacity(temp=298, volume=10, gas='air')", "question_type": "simple"}
{"question": "Retrieve the sequence of DNA molecule with id `DNA123`.", "function": {"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "object", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}, "human_eval_answer": "fetch_DNA_sequence(DNA_id='DNA123')", "question_type": "simple"}
{"question": "Identify the protein sequence of a given human gene 'BRCA1'.", "function": {"name": "get_protein_sequence", "description": "Retrieve the protein sequence encoded by a human gene.", "parameters": {"type": "object", "properties": {"gene": {"type": "string", "description": "The human gene of interest."}, "species": {"type": "string", "description": "The species for which the gene is to be analyzed.", "default": "Homo sapiens"}}, "required": ["gene"]}}, "human_eval_answer": "get_protein_sequence(gene='BRCA1', species='Homo sapiens')", "question_type": "simple"}
{"question": "Find me detailed information about the structure of human cell", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "object", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}, "human_eval_answer": "biology.get_cell_info(cell_type='human', detailed=True)", "question_type": "simple"}
{"question": "What are the names of proteins found in the plasma membrane?", "function": {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "object", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}, "human_eval_answer": "cellbio.get_proteins(cell_compartment=\"plasma membrane\")", "question_type": "simple"}
{"question": "Calculate the cell density in a sample with an optical density of 0.6, where the experiment dilution is 5 times.", "function": {"name": "calculate_cell_density", "description": "Calculate the cell density of a biological sample based on its optical density and the experiment dilution.", "parameters": {"type": "object", "properties": {"optical_density": {"type": "number", "description": "The optical density of the sample, usually obtained from a spectrophotometer reading."}, "dilution": {"type": "number", "description": "The dilution factor applied during the experiment."}, "calibration_factor": {"type": "number", "default": 1000000000.0, "description": "The calibration factor to adjust the density, default value is 1e9 assuming cell density is in CFU/mL."}}, "required": ["optical_density", "dilution"]}}, "human_eval_answer": "calculate_cell_density(optical_density=0.6, dilution=5)", "question_type": "simple"}
{"question": "What is the function of ATP synthase in mitochondria?", "function": {"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "object", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}, "human_eval_answer": "cell_biology.function_lookup(molecule='ATP synthase', organelle='mitochondria', specific_function=True)", "question_type": "simple"}
{"question": "Calculate the molecular weight of Glucose (C6H12O6).", "function": {"name": "calculate_molecular_weight", "description": "Calculate the molecular weight of a compound given the compound formula.", "parameters": {"type": "object", "properties": {"compound": {"type": "string", "description": "The molecular formula of the compound."}, "to_unit": {"type": "string", "description": "The unit in which to return the result. Default is 'grams/mole'"}}, "required": ["compound", "to_unit"]}}, "human_eval_answer": "calculate_molecular_weight(compound='C6H12O6')", "question_type": "simple"}
{"question": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "function": {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "object", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}, "human_eval_answer": "mutation_type.find(snp_id='rs6034464')", "question_type": "simple"}
{"question": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes.", "function": {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "Weight of the person in lbs."}, "height": {"type": "number", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}, "human_eval_answer": "diabetes_prediction(weight=150, height=70, activity_level='lightly active')", "question_type": "simple"}
{"question": "Analyze the DNA sequence 'AGTCGATCGAACGTACGTACG' for any potential substitution mutations based on a reference sequence 'AGTCCATCGAACGTACGTACG'.", "function": {"name": "analyze_dna_sequence", "description": "Analyzes the DNA sequence based on a reference sequence and return any potential mutations.", "parameters": {"type": "object", "properties": {"sequence": {"type": "string", "description": "The DNA sequence to be analyzed."}, "reference_sequence": {"type": "string", "description": "The reference DNA sequence."}, "mutation_type": {"type": "string", "enum": ["insertion", "deletion", "substitution"], "description": "Type of the mutation to be looked for in the sequence."}}, "required": ["sequence", "reference_sequence"]}}, "human_eval_answer": "analyze_dna_sequence(sequence='AGTCGATCGAACGTACGTACG', reference_sequence='AGTCCATCGAACGTACGTACG', mutation_type='substitution')", "question_type": "simple"}
{"question": "Find out how genetically similar a human and a chimp are in percentage.", "function": {"name": "genetics.calculate_similarity", "description": "Calculates the genetic similarity between two species based on their DNA sequences.", "parameters": {"type": "object", "properties": {"species1": {"type": "string", "description": "The first species to compare."}, "species2": {"type": "string", "description": "The second species to compare."}, "format": {"type": "string", "description": "The format of the result (percentage or fraction). Default is percentage."}}, "required": ["species1", "species2"]}}, "human_eval_answer": "genetics.calculate_similarity(species1='Human', species2='Chimp', format='percentage')", "question_type": "simple"}
{"question": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?", "function": {"name": "calculate_genotype_frequency", "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.", "parameters": {"type": "object", "properties": {"allele_frequency": {"type": "number", "description": "The frequency of the dominant allele in the population."}, "genotype": {"type": "string", "description": "The genotype which frequency is needed, default is homozygous dominant. ", "enum": ["AA", "Aa", "aa"]}}, "required": ["allele_frequency", "genotype"]}}, "human_eval_answer": "calculate_genotype_frequency(allele_frequency=0.3, genotype='AA')", "question_type": "simple"}
{"question": "Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers.", "function": {"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "number", "description": "The population of the country."}, "land_area": {"type": "number", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, "human_eval_answer": "calculate_density(country='Brazil', year='2022', population=213000000, land_area=8500000)", "question_type": "simple"}
{"question": "Get me data on average precipitation in the Amazon rainforest for the last six months.", "function": {"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}, "human_eval_answer": "ecology_data.precipitation_stats(location='Amazon rainforest', time_frame='six_months')", "question_type": "simple"}
{"question": "Identify a small green bird in forest.", "function": {"name": "identify_bird", "description": "Identify a bird species based on certain characteristics.", "parameters": {"type": "object", "properties": {"color": {"type": "string", "description": "Color of the bird."}, "habitat": {"type": "string", "description": "Habitat of the bird."}, "size": {"type": "string", "enum": ["small", "medium", "large"], "description": "Size of the bird."}}, "required": ["color", "habitat"]}}, "human_eval_answer": "identify_bird(color='green', habitat='forest', size='small')", "question_type": "simple"}
{"question": "Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact.", "function": {"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}, "human_eval_answer": "forest_growth_forecast(location='Yellowstone National Park', years=5, include_human_impact=true)", "question_type": "simple"}
{"question": "Find out the population and species of turtles in Mississippi river in 2020.", "function": {"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. (optional)"}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false. (optional)"}}, "required": ["location"]}}, "human_eval_answer": "ecology.get_turtle_population(location=\"Mississippi river\", year=2020, species=true)", "question_type": "simple"}
{"question": "What is the carbon footprint of a gas-powered vehicle driving 1500 miles in a year?", "function": {"name": "calculate_vehicle_emission", "description": "Calculate the annual carbon emissions produced by a specific type of vehicle based on mileage.", "parameters": {"type": "object", "properties": {"vehicle_type": {"type": "string", "description": "The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle."}, "miles_driven": {"type": "number", "description": "The number of miles driven per year."}, "emission_factor": {"type": "number", "description": "Optional emission factor to calculate emissions. Default factor is set for gas vehicles"}}, "required": ["vehicle_type", "miles_driven"]}}, "human_eval_answer": "calculate_vehicle_emission(vehicle_type='gas', miles_driven=1500)", "question_type": "simple"}
{"question": "Generate a DNA sequence with 100 bases including more G (Guanine) and C (Cytosine).", "function": {"name": "generate_DNA_sequence", "description": "Generate a random DNA sequence with a specific length and nucleotide preference.", "parameters": {"type": "object", "properties": {"length": {"type": "integer", "description": "The length of the DNA sequence to be generated."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["A", "T", "C", "G"]}, "description": "Preferred nucleotides to include more frequently in the DNA sequence."}}, "required": ["length", "preferences"]}}, "human_eval_answer": "generate_DNA_sequence(length=100, preferences=['G', 'C'])", "question_type": "simple"}
{"question": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7.", "function": {"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "object", "properties": {"trait_values": {"type": "array", "items": {"type": "number"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "number"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}, "human_eval_answer": "calculate_fitness(trait_values=[0.8, 0.7], trait_contributions=[0.4, 0.6])", "question_type": "simple"}
{"question": "What's the projected population growth in United States in the next 20 years?", "function": {"name": "population_projections", "description": "Calculates the projected population growth based on the current growth rate.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country for which to calculate the population projection."}, "years": {"type": "integer", "description": "Number of years for the projection."}, "growth_rate": {"type": "number", "description": "Optional parameter to specify the growth rate. Default is current growth rate."}}, "required": ["country", "years"]}}, "human_eval_answer": "population_projections(country=\"United States\", years=20)", "question_type": "simple"}
{"question": "Calculate the evolution rate of a bacteria population, start with 5000 bacteria, each bacteria duplicates every hour for 6 hours.", "function": {"name": "calculate_bacteria_evolution_rate", "description": "Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.", "parameters": {"type": "object", "properties": {"start_population": {"type": "integer", "description": "The starting population of bacteria."}, "duplication_frequency": {"type": "number", "description": "The frequency of bacteria duplication per hour."}, "duration": {"type": "number", "description": "Total duration in hours."}, "generation_time": {"type": "number", "description": "The average generation time of the bacteria in minutes. Default is 20 minutes"}}, "required": ["start_population", "duplication_frequency", "duration"]}}, "human_eval_answer": "calculate_bacteria_evolution_rate(start_population=5000, duplication_frequency=1, duration=6)", "question_type": "simple"}
{"question": "Estimate the population size of elephants of 35000 in the next 5 years given the current growth rate of 0.015.", "function": {"name": "elephant_population_estimate", "description": "Estimate future population of elephants given current population and growth rate.", "parameters": {"type": "object", "properties": {"current_population": {"type": "integer", "description": "The current number of elephants."}, "growth_rate": {"type": "number", "description": "The annual population growth rate of elephants."}, "years": {"type": "integer", "description": "The number of years to project the population."}}, "required": ["current_population", "growth_rate", "years"]}}, "human_eval_answer": "elephant_population_estimate(current_population=35000, growth_rate=0.015, years=5)", "question_type": "simple"}
{"question": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model", "function": {"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}, "human_eval_answer": "prediction.evolution(species='Homo Sapiens', years=50, model='Darwin')", "question_type": "simple"}
{"question": "Find a nearby restaurant that serves vegan food in Los Angeles.", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference."}}, "required": ["location"]}}, "human_eval_answer": "restaurant.find_nearby(location='Los Angeles, CA', dietary_preference='Vegan')", "question_type": "simple"}
{"question": "Get the average temperature in Austin for the next 3 days in Celsius.", "function": {"name": "average_temperature", "description": "Retrieves the average temperature for a specific location over the defined timeframe.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city to get the average temperature for. It should format as city name such as Boston."}, "days": {"type": "integer", "description": "The number of days to get the average temperature for."}, "temp_unit": {"type": "string", "description": "The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'."}}, "required": ["location", "days"]}}, "human_eval_answer": "average_temperature(location='Austin', days=3, temp_unit='Celsius')", "question_type": "simple"}
{"question": "Create a histogram for student scores with the following data: 85, 90, 88, 92, 86, 89, 91 and set bin range to 5.", "function": {"name": "create_histogram", "description": "Create a histogram based on provided data.", "parameters": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "number"}, "description": "The data for which histogram needs to be plotted."}, "bins": {"type": "number", "description": "The number of equal-width bins in the range. Default is 10."}}, "required": ["data", "bins"]}}, "human_eval_answer": "create_histogram(data=[85, 90, 88, 92, 86, 89, 91], bins=5)", "question_type": "simple"}
{"question": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.", "function": {"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The specific location or area."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free.", "default": "None"}}, "required": ["location", "food_type", "number"]}}, "human_eval_answer": "find_restaurants(location='Manhattan', food_type='Thai', number=5, dietary_requirements=['vegan'])", "question_type": "simple"}
{"question": "Find the fastest route from San Francisco to Los Angeles with toll roads avoided.", "function": {"name": "map_routing.fastest_route", "description": "Finds the fastest route from one location to another, with an option to avoid toll roads.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting location for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "avoid_tolls": {"type": "boolean", "description": "Option to avoid toll roads during the journey."}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "map_routing.fastest_route(start_location='San Francisco', end_location='Los Angeles', avoid_tolls=True)", "question_type": "simple"}
{"question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}, "human_eval_answer": "calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])", "question_type": "simple"}
{"question": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles.", "function": {"name": "calculate_distance", "description": "Calculate the distance between two GPS coordinates.", "parameters": {"type": "object", "properties": {"coord1": {"type": "tuple", "description": "The first coordinate as (latitude, longitude)."}, "coord2": {"type": "tuple", "description": "The second coordinate as (latitude, longitude)."}, "unit": {"type": "string", "description": "The unit of distance. Defaults to miles if not specified."}}, "required": ["coord1", "coord2", "unit"]}}, "human_eval_answer": "calculate_distance(coord1=(33.4484, -112.0740), coord2=(34.0522, -118.2437), unit='miles')", "question_type": "simple"}
{"question": "Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm.", "function": {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) of a person.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "Weight of the person in kilograms."}, "height": {"type": "number", "description": "Height of the person in centimeters."}, "unit": {"type": "string", "description": "Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'."}}, "required": ["weight", "height"]}}, "human_eval_answer": "calculate_bmi(weight=85, height=180)", "question_type": "simple"}
{"question": "What's the approximate distance between Boston, MA, and Washington, D.C. in mile?", "function": {"name": "geo_distance.calculate", "description": "Calculate the geographic distance between two given locations.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting location for the distance calculation. Specify the location in the format of City, State."}, "end_location": {"type": "string", "description": "The destination location for the distance calculation. Specify the location in the format of City, State."}, "units": {"type": "string", "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "geo_distance.calculate(start_location='Boston, MA', end_location='Washington, D.C.', units='miles')", "question_type": "simple"}
{"question": "Find the shortest distance between two cities, New York and Los Angeles, through the train and you can transfer.", "function": {"name": "city_distance.find_shortest", "description": "Calculates the shortest distance between two cities via available public transportation.", "parameters": {"type": "object", "properties": {"start_city": {"type": "string", "description": "The city you are starting from. The parameter is in the format of city name."}, "end_city": {"type": "string", "description": "The city you are heading to.The parameter is in the format of city name."}, "transportation": {"type": "string", "description": "Preferred mode of public transportation. Default is 'bus'."}, "allow_transfer": {"type": "boolean", "description": "Allows transfer between different transportation if true."}}, "required": ["start_city", "end_city"]}}, "human_eval_answer": "city_distance.find_shortest(start_city='New York', end_city='Los Angeles', transportation='train', allow_transfer=true)", "question_type": "simple"}
{"question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "object", "properties": {"list": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting. If not specified, it will default to ascending."}}, "required": ["list", "order"]}}, "human_eval_answer": "array_sort(list=[5, 3, 4, 1, 2], order='ascending')", "question_type": "simple"}
{"question": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall.", "function": {"name": "calculate_BMI", "description": "Calculate the Body Mass Index (BMI) given a person's weight and height.", "parameters": {"type": "object", "properties": {"weight_kg": {"type": "number", "description": "The weight of the person in kilograms."}, "height_m": {"type": "number", "description": "The height of the person in meters."}}, "required": ["weight_kg", "height_m"]}}, "human_eval_answer": "calculate_BMI(weight_kg=70, height_m=1.75)", "question_type": "simple"}
{"question": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB.", "function": {"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "object", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "object", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. If left empty, it fetches all records. (Optional)"}}, "required": ["database_name", "table_name", "conditions"]}}, "human_eval_answer": "db_fetch_records(database_name='StudentDB', table_name='students', conditions={'department': 'Science', 'school': 'Bluebird High School'}, fetch_limit=None)", "question_type": "simple"}
{"question": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'", "function": {"name": "employee.fetch_data", "description": "Fetches the detailed data for a specific employee in a given company.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "employee_id": {"type": "integer", "description": "The unique ID of the employee."}, "data_field": {"type": "array", "items": {"type": "string", "enum": ["Personal Info", "Job History", "Payroll", "Attendance"]}, "description": "Fields of data to be fetched for the employee (Optional)."}}, "required": ["company_name", "employee_id"]}}, "human_eval_answer": "employee.fetch_data(company_name='ABC Ltd.', employee_id=345, data_field=['Personal Info', 'Job History'])", "question_type": "simple"}
{"question": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "function": {"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "object", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}, "human_eval_answer": "get_restaurant(cuisine='sushi', location='Boston', condition='open on Sundays')", "question_type": "simple"}
{"question": "Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database.", "function": {"name": "imdb.find_movies_by_actor", "description": "Searches the database to find all movies by a specific actor within a certain year.", "parameters": {"type": "object", "properties": {"actor_name": {"type": "string", "description": "The name of the actor."}, "year": {"type": "integer", "description": "The specific year to search in."}, "category": {"type": "string", "description": "The category of the film (e.g. Drama, Comedy, etc). This parameter is optional."}}, "required": ["actor_name", "year"]}}, "human_eval_answer": "imdb.find_movies_by_actor(actor_name='Leonardo DiCaprio', year=2010)", "question_type": "simple"}
{"question": "Fetch me the list of IMAX movie releases in theaters near LA for the next week.", "function": {"name": "get_theater_movie_releases", "description": "Retrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location of the theaters."}, "timeframe": {"type": "integer", "description": "The number of days for which releases are required from current date."}, "format": {"type": "string", "description": "Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. This is an optional parameter."}}, "required": ["location", "timeframe"]}}, "human_eval_answer": "get_theater_movie_releases(location='LA', timeframe=7, format='IMAX')", "question_type": "simple"}
{"question": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.", "function": {"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "object", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "object", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}, "human_eval_answer": "update_user_info(user_id=43523, update_info={'name':'John Doe', 'email':'johndoe@email.com'}, database='CustomerInfo')", "question_type": "simple"}
{"question": "Calculate the area of a triangle with base 5m and height 3m.", "function": {"name": "calc_area_triangle", "description": "Calculate the area of a triangle with the formula area = 0.5 * base * height.", "parameters": {"type": "object", "properties": {"base": {"type": "integer", "description": "The length of the base of the triangle in meters."}, "height": {"type": "integer", "description": "The perpendicular height of the triangle from the base to the opposite vertex in meters."}}, "required": ["base", "height"]}}, "human_eval_answer": "calc_area_triangle(base=5, height=3)", "question_type": "simple"}
{"question": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "function": {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "object", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "object", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed."}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}, "human_eval_answer": "database.query(table='users', conditions=[{'field':'age', 'operation':'>', 'value':'25'}, {'field':'job', 'operation':'=', 'value':'engineer'}])", "question_type": "simple"}
{"question": "Calculate the factorial of the number 5", "function": {"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to compute factorial."}}, "required": ["number"]}}, "human_eval_answer": "math.factorial(number=5)", "question_type": "simple"}
{"question": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?", "function": {"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "object", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}, "human_eval_answer": "calculate_clock_angle(hours=6, minutes=30)", "question_type": "simple"}
{"question": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "object", "properties": {"start_range": {"type": "number", "description": "Start of the range in radians."}, "end_range": {"type": "number", "description": "End of the range in radians."}, "frequency": {"type": "number", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "number", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "number", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}, "human_eval_answer": "plot_sine_wave(start_range=0, end_range=2*pi, frequency=5)", "question_type": "simple"}
{"question": "How much time will it take for the light to reach earth from a star 4 light years away?", "function": {"name": "light_travel_time", "description": "Calculate the time taken for light to travel from a celestial body to another.", "parameters": {"type": "object", "properties": {"distance_in_light_years": {"type": "number", "description": "The distance between the two celestial bodies in light years."}, "speed_of_light": {"type": "number", "description": "The speed of light in vacuum, in m/s. Default value is 299792458 m/s."}}, "required": ["distance_in_light_years"]}}, "human_eval_answer": "light_travel_time(distance_in_light_years=4)", "question_type": "simple"}
{"question": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds.", "function": {"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance the object travelled in meters."}, "time": {"type": "number", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}, "human_eval_answer": "calculate_speed(distance=450, time=20, to_unit='km/h')", "question_type": "simple"}
{"question": "What's the distance in milesfrom the Earth to the Moon?", "function": {"name": "calculate_distance", "description": "Calculate the distance between two celestial bodies.", "parameters": {"type": "object", "properties": {"body1": {"type": "string", "description": "The first celestial body."}, "body2": {"type": "string", "description": "The second celestial body."}, "unit": {"type": "string", "description": "The unit of measurement, default is 'kilometers'."}}, "required": ["body1", "body2"]}}, "human_eval_answer": "calculate_distance(body1='Earth', body2='Moon', unit='miles')", "question_type": "simple"}
{"question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "object", "properties": {"polynomial": {"type": "array", "items": {"type": "number"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "number"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}, "human_eval_answer": "mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])", "question_type": "simple"}
{"question": "Calculate the area of a triangle with base 6 and height 10.", "function": {"name": "geometry.area_triangle", "description": "Calculate the area of a triangle.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The length of the base of the triangle."}, "height": {"type": "number", "description": "The height of the triangle from the base."}, "unit": {"type": "string", "description": "The measurement unit for the area. Defaults to square meters."}}, "required": ["base", "height"]}}, "human_eval_answer": "geometry.area_triangle(base=6, height=10)", "question_type": "simple"}
{"question": "Calculate the power of 3 raised to the power 4.", "function": {"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The base number."}, "exponent": {"type": "number", "description": "The exponent."}, "mod": {"type": "number", "description": "The modulus. Default is None. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}, "human_eval_answer": "math.power(base=3, exponent=4)", "question_type": "simple"}
{"question": "Train a random forest classifier on dataset your_dataset_name with maximum depth of trees as 5, and number of estimators as 100.", "function": {"name": "train_random_forest_classifier", "description": "Train a Random Forest classifier with the specified parameters.", "parameters": {"type": "object", "properties": {"dataset": {"type": "string", "description": "The dataset to train the classifier on."}, "max_depth": {"type": "integer", "description": "The maximum depth of the trees in the forest."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest."}}, "required": ["dataset", "max_depth", "n_estimators"]}}, "human_eval_answer": "train_random_forest_classifier(dataset='your_dataset_name', max_depth=5, n_estimators=100)", "question_type": "simple"}
{"question": "Calculate the Body Mass Index for a person with a weight of 70 kg and a height of 175 cm.", "function": {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}, "human_eval_answer": "calculate_bmi(weight=70, height=175, system='metric')", "question_type": "simple"}
{"question": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization.", "function": {"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "object", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}, "human_eval_answer": "run_linear_regression(predictors=['Age', 'Income', 'Education'], target='Purchase_Amount', standardize=True)", "question_type": "simple"}
{"question": "Generate a random forest model with 100 trees and a depth of 5 on the provided data my_data.", "function": {"name": "random_forest.train", "description": "Train a Random Forest Model on given data", "parameters": {"type": "object", "properties": {"n_estimators": {"type": "integer", "description": "The number of trees in the forest."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree."}, "data": {"type": "Dataframe", "description": "The training data for the model."}}, "required": ["n_estimators", "max_depth", "data"]}}, "human_eval_answer": "random_forest.train(n_estimators=100, max_depth=5, data=my_data)", "question_type": "simple"}
{"question": "Predict the price of the house in San Francisco with 3 bedrooms, 2 bathrooms and area of 1800 square feet.", "function": {"name": "predict_house_price", "description": "Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.", "parameters": {"type": "object", "properties": {"bedrooms": {"type": "integer", "description": "The number of bedrooms in the house."}, "bathrooms": {"type": "integer", "description": "The number of bathrooms in the house."}, "area": {"type": "integer", "description": "The area of the house in square feet."}, "location": {"type": "string", "description": "The location of the house in the format of city name."}}, "required": ["bedrooms", "bathrooms", "area", "location"]}}, "human_eval_answer": "predict_house_price(bedrooms=3, bathrooms=2, area=1800, location='San Francisco')", "question_type": "simple"}
{"question": "Generate a random number from a normal distribution with mean 0 and standard deviation 1.", "function": {"name": "random.normalvariate", "description": "Generates a random number from a normal distribution given the mean and standard deviation.", "parameters": {"type": "object", "properties": {"mu": {"type": "number", "description": "Mean of the normal distribution."}, "sigma": {"type": "number", "description": "Standard deviation of the normal distribution."}}, "required": ["mu", "sigma"]}}, "human_eval_answer": "random.normalvariate(mu=0, sigma=1)", "question_type": "simple"}
{"question": "Calculate the probability of drawing a king from a deck of cards.", "function": {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "object", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}, "human_eval_answer": "calculate_probability(total_outcomes=52, favorable_outcomes=4)", "question_type": "simple"}
{"question": "What's the probability of rolling a six on a six-sided die twice in a row?", "function": {"name": "probability.dice_roll", "description": "Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.", "parameters": {"type": "object", "properties": {"desired_number": {"type": "integer", "description": "The number you want to roll."}, "number_of_rolls": {"type": "integer", "description": "How many times you want to roll that number in a row."}, "die_sides": {"type": "integer", "description": "The number of sides on the die (optional; default is 6)."}}, "required": ["desired_number", "number_of_rolls"]}}, "human_eval_answer": "probability.dice_roll(desired_number=6, number_of_rolls=2)", "question_type": "simple"}
{"question": "Find the probability of getting exactly 5 heads in 10 fair coin tosses.", "function": {"name": "prob_dist.binomial", "description": "Compute the probability of having 'success' outcome from binomial distribution.", "parameters": {"type": "object", "properties": {"trials": {"type": "integer", "description": "The number of independent experiments."}, "successes": {"type": "integer", "description": "The number of success events."}, "p": {"type": "number", "description": "The probability of success on any given trial, defaults to 0.5"}}, "required": ["trials", "successes"]}}, "human_eval_answer": "prob_dist.binomial(trials=10, successes=5, p=0.5)", "question_type": "simple"}
{"question": "Calculate the probability of getting exactly 5 heads in 8 tosses of a fair coin.", "function": {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "object", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}, "human_eval_answer": "calculate_binomial_probability(number_of_trials=8, number_of_successes=5, probability_of_success=0.5)", "question_type": "simple"}
{"question": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?", "function": {"name": "probabilities.calculate_single", "description": "Calculate the probability of an event.", "parameters": {"type": "object", "properties": {"total_outcomes": {"type": "integer", "description": "The total number of outcomes."}, "event_outcomes": {"type": "integer", "description": "The number of outcomes where the event occurs."}, "round": {"type": "integer", "description": "Round the answer to a specified number of decimal places. Defaults to 2."}}, "required": ["total_outcomes", "event_outcomes"]}}, "human_eval_answer": "probabilities.calculate_single(total_outcomes=52, event_outcomes=4)", "question_type": "simple"}
{"question": "What are the odds of pulling a heart suit from a well-shuffled standard deck of 52 cards? Format it as ratio.", "function": {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "object", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}, "human_eval_answer": "probability_of_event(success_outcomes=13, total_outcomes=52, format_as_ratio=True)", "question_type": "simple"}
{"question": "Perform a two-sample t-test on my experiment data of Control [10, 15, 12, 14, 11] and Treated [18, 16, 17, 20, 22] group with alpha equals to 0.05", "function": {"name": "stats.t_test", "description": "Perform a two-sample t-test for two given arrays.", "parameters": {"type": "object", "properties": {"array_1": {"type": "array", "items": {"type": "integer"}, "description": "First array of data."}, "array_2": {"type": "array", "items": {"type": "integer"}, "description": "Second array of data."}, "alpha": {"type": "number", "description": "Significance level for hypothesis testing."}}, "required": ["array_1", "array_2", "alpha"]}}, "human_eval_answer": "stats.t_test(array_1 = [10, 15, 12, 14, 11], array_2 = [18, 16, 17, 20, 22], alpha = 0.05)", "question_type": "simple"}
{"question": "Perform a hypothesis test for two independent samples with scores of Sample1: [22,33,42,12,34] and Sample2: [23,45,44,14,38] at a significance level of 0.05.", "function": {"name": "hypothesis_testing.ttest_ind", "description": "Conducts a hypothesis test for two independent samples.", "parameters": {"type": "object", "properties": {"sample1": {"type": "array", "items": {"type": "number"}, "description": "First set of observations (array of numbers)."}, "sample2": {"type": "array", "items": {"type": "number"}, "description": "Second set of observations (array of numbers)."}, "significance_level": {"type": "number", "description": "Significance level of the test (default: 0.05)"}}, "required": ["sample1", "sample2"]}}, "human_eval_answer": "hypothesis_testing.ttest_ind(sample1=[22,33,42,12,34], sample2=[23,45,44,14,38], significance_level=0.05)", "question_type": "simple"}
{"question": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.", "function": {"name": "run_two_sample_ttest", "description": "Runs a two sample t-test for two given data groups.", "parameters": {"type": "object", "properties": {"group1": {"type": "array", "items": {"type": "integer"}, "description": "First group of data points."}, "group2": {"type": "array", "items": {"type": "integer"}, "description": "Second group of data points."}, "equal_variance": {"type": "boolean", "description": "Assumption about whether the two samples have equal variance.", "default": true}}, "required": ["group1", "group2"]}}, "human_eval_answer": "run_two_sample_ttest(group1=[3, 4, 5, 6, 4], group2=[7, 8, 9, 8, 7], equal_variance=true)", "question_type": "simple"}
{"question": "Calculate the probability of observing 60 heads if I flip a coin 100 times with probability of heads 0.5.", "function": {"name": "calc_binomial_prob", "description": "Calculates the probability of an outcome based on the binomial distribution", "parameters": {"type": "object", "properties": {"num_trials": {"type": "integer", "description": "Number of independent experiments."}, "num_success": {"type": "integer", "description": "Number of times the event of interest has occurred."}, "prob_success": {"type": "number", "description": "Probability of the event of interest on any single experiment."}}, "required": ["num_trials", "num_success", "prob_success"]}}, "human_eval_answer": "calc_binomial_prob(num_trials=100, num_success=60, prob_success=0.5)", "question_type": "simple"}
{"question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "object", "properties": {"table": {"type": "array", "items": {"type": "number"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "number", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}, "human_eval_answer": "chi_squared_test(table=[[10, 20], [30, 40]])", "question_type": "simple"}
{"question": "Perform a two-sample t-test to determine if there is a significant difference between the mean of group1 (e.g., 12.4, 15.6, 11.2, 18.9) and group2 (e.g., 10.5, 9.8, 15.2, 13.8) at the significance level 0.05.", "function": {"name": "hypothesis_testing.two_sample_t_test", "description": "Perform a two-sample t-test to determine if there is a significant difference between the means of two independent samples.", "parameters": {"type": "object", "properties": {"group1": {"type": "array", "items": {"type": "number"}, "description": "Sample observations from group 1."}, "group2": {"type": "array", "items": {"type": "number"}, "description": "Sample observations from group 2."}, "alpha": {"type": "number", "description": "Significance level for the t-test. Default is 0.05."}}, "required": ["group1", "group2"]}}, "human_eval_answer": "hypothesis_testing.two_sample_t_test(group1=[12.4, 15.6, 11.2, 18.9], group2=[10.5, 9.8, 15.2, 13.8], alpha=0.05)", "question_type": "simple"}
{"question": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45.", "function": {"name": "t_test", "description": "Perform a statistical t-test to check if the means of two independent datasets are statistically different.", "parameters": {"type": "object", "properties": {"dataset_A": {"type": "array", "items": {"type": "integer"}, "description": "Dataset A for comparison."}, "dataset_B": {"type": "array", "items": {"type": "integer"}, "description": "Dataset B for comparison."}, "alpha": {"type": "float", "description": "Significance level for the test. Default is 0.05."}}, "required": ["dataset_A", "dataset_B"]}}, "human_eval_answer": "t_test(dataset_A=[12, 24, 36], dataset_B=[15, 30, 45])", "question_type": "simple"}
{"question": "Predict house price in San Francisco based on its area of 2500 square feet, number of rooms as 5 and year of construction is 1990.", "function": {"name": "predict_house_price", "description": "Predict house price based on area, number of rooms and year of construction.", "parameters": {"type": "object", "properties": {"area": {"type": "integer", "description": "Area of the house in square feet."}, "rooms": {"type": "integer", "description": "Number of rooms in the house."}, "year": {"type": "integer", "description": "Year when the house was constructed."}, "location": {"type": "string", "description": "The location or city of the house."}}, "required": ["area", "rooms", "year", "location"]}}, "human_eval_answer": "predict_house_price(area=2500, rooms=5, year=1990, location='San Francisco')", "question_type": "simple"}
{"question": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?", "function": {"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "object", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}, "human_eval_answer": "linear_regression.get_r_squared(dataset_path='C:/data/cars.csv', independent_variables=['engine_size', 'fuel_economy'], dependent_variable='car_price')", "question_type": "simple"}
{"question": "Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000.", "function": {"name": "calculate_NPV", "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.", "parameters": {"type": "object", "properties": {"cash_flows": {"type": "array", "items": {"type": "number"}, "description": "Series of future cash flows."}, "discount_rate": {"type": "number", "description": "The discount rate to use."}, "initial_investment": {"type": "number", "description": "The initial investment. Default is 0 if not specified."}}, "required": ["cash_flows", "discount_rate"]}}, "human_eval_answer": "calculate_NPV(cash_flows=[200,300,400,500], discount_rate=0.1, initial_investment=2000)", "question_type": "simple"}
{"question": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?", "function": {"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "object", "properties": {"total_payout": {"type": "number", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}, "human_eval_answer": "finance.calculate_quarterly_dividend_per_share(total_payout=50_000_000,outstanding_shares=100_000_000)", "question_type": "simple"}
{"question": "Calculate the discounted cash flow of a bond that is giving a coupon payment of $100 annually for next 5 years with discount rate 4%.", "function": {"name": "calculate_discounted_cash_flow", "description": "Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.", "parameters": {"type": "object", "properties": {"coupon_payment": {"type": "number", "description": "The annual coupon payment."}, "period": {"type": "integer", "description": "The time frame in years for which coupon payment is made."}, "discount_rate": {"type": "number", "description": "The discount rate."}, "face_value": {"type": "number", "description": "The face value of the bond, default is $1000."}}, "required": ["coupon_payment", "period", "discount_rate"]}}, "human_eval_answer": "calculate_discounted_cash_flow(coupon_payment=100, period=5, discount_rate=0.04)", "question_type": "simple"}
{"question": "What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?", "function": {"name": "finance_calculator.npv", "description": "Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.", "parameters": {"type": "object", "properties": {"cash_flows": {"type": "array", "items": {"type": "number"}, "description": "A list of cash flows."}, "discount_rate": {"type": "number", "description": "The annual interest rate used to discount the cash flows."}, "years": {"type": "array", "items": {"type": "number"}, "description": "A list of years when the cash flow occurs."}}, "required": ["cash_flows", "discount_rate"]}}, "human_eval_answer": "finance_calculator.npv(cash_flows=[-50000, 10000, 15000, 20000, 25000, 30000], discount_rate=0.08)", "question_type": "simple"}
{"question": "Calculate the compound interest for an initial principal amount of $10000, with an annual interest rate of 5% and the number of times interest applied per time period is 4 and the time the money is invested for 10 years.", "function": {"name": "calculate_compound_interest", "description": "Calculate compound interest for an initial principal amount.", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The principal amount that the interest is applied to."}, "rate": {"type": "number", "description": "The annual interest rate. Enter as a decimal. E.g, 5% is 0.05"}, "time": {"type": "number", "description": "The time the money is invested for in years."}, "n": {"type": "number", "description": "The number of times that interest is compounded per time period. Default is 1."}}, "required": ["principal", "rate", "time"]}}, "human_eval_answer": "calculate_compound_interest(principal=10000, rate=0.05, time=10, n=4)", "question_type": "simple"}
{"question": "Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000.", "function": {"name": "calculate_return_on_equity", "description": "Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.", "parameters": {"type": "object", "properties": {"net_income": {"type": "number", "description": "The company's net income."}, "shareholder_equity": {"type": "number", "description": "The company's total shareholder's equity."}, "dividends_paid": {"type": "number", "description": "The total dividends paid by the company. Optional. If not given, assumes it's 0."}}, "required": ["net_income", "shareholder_equity"]}}, "human_eval_answer": "calculate_return_on_equity(net_income=2000000, shareholder_equity=10000000, dividends_paid=200000)", "question_type": "simple"}
{"question": "Predict the future value of a $5000 investment with an annual interest rate of 5% in 3 years with monthly compounding.", "function": {"name": "finance.predict_future_value", "description": "Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.", "parameters": {"type": "object", "properties": {"present_value": {"type": "number", "description": "The present value of the investment."}, "annual_interest_rate": {"type": "number", "description": "The annual interest rate of the investment."}, "compounding_periods_per_year": {"type": "integer", "description": "The number of times that interest is compounded per year. Default is 1 (annually)."}, "time_years": {"type": "integer", "description": "The investment horizon in years."}}, "required": ["present_value", "annual_interest_rate", "time_years"]}}, "human_eval_answer": "finance.predict_future_value(present_value=5000, annual_interest_rate=0.05, compounding_periods_per_year=12, time_years=3)", "question_type": "simple"}
{"question": "Predict the total expected profit of stocks XYZ in 5 years given I have invested $5000 and annual return rate is 7%.", "function": {"name": "investment.predictProfit", "description": "Predict the profit for given investment after specified number of years.", "parameters": {"type": "object", "properties": {"investment_amount": {"type": "number", "description": "The amount invested in dollars."}, "annual_return": {"type": "number", "description": "The annual return rate of the investment."}, "years": {"type": "integer", "description": "The time period in years for which the investment is made."}}, "required": ["investment_amount", "annual_return", "years"]}}, "human_eval_answer": "investment.predictProfit(investment_amount=5000, annual_return=0.07, years=5)", "question_type": "simple"}
{"question": "Calculate the return on investment for a stock bought at $20, sold at $25, with a dividend of $2.", "function": {"name": "calculate_return_on_investment", "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.", "parameters": {"type": "object", "properties": {"purchase_price": {"type": "number", "description": "The price the stock was bought at."}, "sale_price": {"type": "number", "description": "The price the stock was sold at."}, "dividend": {"type": "number", "description": "Any dividends received from the stock.", "default": 0}}, "required": ["purchase_price", "sale_price"]}}, "human_eval_answer": "calculate_return_on_investment(purchase_price=20, sale_price=25, dividend=2)", "question_type": "simple"}
{"question": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "function": {"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "number", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "number", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}, "human_eval_answer": "compound_interest(principal=10000, annual_rate=0.05, compounding_freq='monthly', time_in_years=5)", "question_type": "simple"}
{"question": "Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years.", "function": {"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "object", "properties": {"investment_amount": {"type": "number", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "number", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}, "human_eval_answer": "calculate_stock_return(investment_amount=5000, annual_growth_rate=0.06, holding_period=5)", "question_type": "simple"}
{"question": "Calculate the future value of my portfolio if I invest $5000 in stock 'X' with an expected annual return of 5% for 7 years.", "function": {"name": "portfolio_future_value", "description": "Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.", "parameters": {"type": "object", "properties": {"stock": {"type": "string", "description": "The ticker symbol of the stock."}, "invested_amount": {"type": "number", "description": "The invested amount in USD."}, "expected_annual_return": {"type": "number", "description": "The expected annual return on investment as a decimal. E.g. 5% = 0.05"}, "years": {"type": "integer", "description": "The number of years for which the investment is made."}}, "required": ["stock", "invested_amount", "expected_annual_return", "years"]}}, "human_eval_answer": "portfolio_future_value(stock='X', invested_amount=5000, expected_annual_return=0.05, years=7)", "question_type": "simple"}
{"question": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "function": {"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "object", "properties": {"yearly_yield": {"type": "number", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "number", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}, "human_eval_answer": "estimate_mutual_fund_return(yearly_yield=0.05, investment_amount=2000, years=3)", "question_type": "simple"}
{"question": "Calculate the Compound Annual Growth Rate (CAGR) for an initial investment of $2000, final value of $3000 in a period of 4 years.", "function": {"name": "calculate_cagr", "description": "Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.", "parameters": {"type": "object", "properties": {"initial_value": {"type": "number", "description": "The initial investment value."}, "final_value": {"type": "number", "description": "The final investment value."}, "period_in_years": {"type": "integer", "description": "The period of the investment in years."}}, "required": ["initial_value", "final_value", "period_in_years"]}}, "human_eval_answer": "calculate_cagr(initial_value=2000, final_value=3000, period_in_years=4)", "question_type": "simple"}
{"question": "Get current Gold price per ounce.", "function": {"name": "get_metal_price", "description": "Retrieve the current price for a specified metal and measure.", "parameters": {"type": "object", "properties": {"metal": {"type": "string", "description": "The metal whose price needs to be fetched."}, "measure": {"type": "string", "description": "The measure unit for price, like 'ounce' or 'kg'."}}, "required": ["metal", "measure"]}}, "human_eval_answer": "get_metal_price(metal=\"Gold\", measure=\"ounce\")", "question_type": "simple"}
{"question": "Find the NASDAQ stock price for the company Amazon at closing March.11, 2022.", "function": {"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}, "human_eval_answer": "get_stock_price(company_name='Amazon', date='2022-03-11', exchange='NASDAQ')", "question_type": "simple"}
{"question": "'Get stock price of Apple for the last 5 days in NASDAQ.'", "function": {"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}, "human_eval_answer": "get_stock_price(company='AAPL', days=5, exchange='NASDAQ')", "question_type": "simple"}
{"question": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days.", "function": {"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "object", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}, "human_eval_answer": "market_performance.get_data(indexes=['S&P 500', 'Dow Jones'], days=5)", "question_type": "simple"}
{"question": "Calculate the compounded interest for an initial principal of $5000, annual interest rate of 5%, and compounding period of 10 years.", "function": {"name": "calculate_compounded_interest", "description": "Calculate the compounded interest for a given principal, interest rate, and period.", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The initial principal."}, "interest_rate": {"type": "number", "description": "The annual interest rate."}, "period": {"type": "integer", "description": "The period in years."}, "compounding_frequency": {"type": "string", "description": "The frequency of compounding per year. Defaults to 'Annually'.", "enum": ["Annually", "Semiannually", "Quarterly", "Monthly", "Daily"]}}, "required": ["principal", "interest_rate", "period"]}}, "human_eval_answer": "calculate_compounded_interest(principal=5000, interest_rate=0.05, period=10", "question_type": "simple"}
{"question": "What's the price of Amazon stock for the last 3 days?", "function": {"name": "stock_price", "description": "Get stock price data for a given company over a specified number of days.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company name."}, "days": {"type": "integer", "description": "The number of previous days to retrieve data for."}, "data_type": {"type": "string", "description": "The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'."}}, "required": ["company", "days"]}}, "human_eval_answer": "stock_price(company='Amazon', days=3)", "question_type": "simple"}
{"question": "Retrieve stock prices of Microsoft and Google for the last 2 weeks.", "function": {"name": "get_stock_prices", "description": "Retrieves stock prices for specified companies and duration.", "parameters": {"type": "object", "properties": {"companies": {"type": "array", "items": {"type": "string"}, "description": "List of companies to retrieve stock prices for."}, "duration": {"type": "string", "description": "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."}}, "required": ["companies", "duration"]}}, "human_eval_answer": "get_stock_prices(companies=['Microsoft', 'Google'], duration='2 weeks')", "question_type": "simple"}
{"question": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.", "function": {"name": "finance.calculate_future_value", "description": "Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial investment amount."}, "rate_of_return": {"type": "number", "description": "The annual rate of return."}, "years": {"type": "integer", "description": "The time frame of the investment in years."}, "contribution": {"type": "number", "description": "Optional: Additional regular contributions. Default is 0."}}, "required": ["initial_investment", "rate_of_return", "years"]}}, "human_eval_answer": "finance.calculate_future_value(initial_investment=20000, rate_of_return=0.08, years=5)", "question_type": "simple"}
{"question": "What's the current stock price of Apple and Microsoft?", "function": {"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "object", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, "human_eval_answer": "get_stock_price(company_names=['Apple', 'Microsoft'])", "question_type": "simple"}
{"question": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year.", "function": {"name": "calculate_roi", "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.", "parameters": {"type": "object", "properties": {"deposit": {"type": "number", "description": "The initial deposit amount."}, "annual_interest_rate": {"type": "number", "description": "The annual interest rate provided by the bank."}, "years": {"type": "number", "description": "The period for which the money is invested."}}, "required": ["deposit", "annual_interest_rate", "years"]}}, "human_eval_answer": "calculate_roi(deposit=1000, annual_interest_rate=0.03, years=1)", "question_type": "simple"}
{"question": "Find the highest grossing banks in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}, "human_eval_answer": "highest_grossing_banks(country='U.S', year=2020)", "question_type": "simple"}
{"question": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years.", "function": {"name": "calculate_mutual_fund_balance", "description": "Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.", "parameters": {"type": "object", "properties": {"investment_amount": {"type": "number", "description": "The initial total amount invested in the fund."}, "annual_yield": {"type": "number", "description": "The annual yield rate of the fund."}, "years": {"type": "integer", "description": "The period of time for the fund to mature."}}, "required": ["investment_amount", "annual_yield", "years"]}}, "human_eval_answer": "calculate_mutual_fund_balance(investment_amount=50000, annual_yield=0.05, years=3)", "question_type": "simple"}
{"question": "Calculate the compounded interest on an initial deposit of $5000 at an annual interest rate of 3% for 5 years, compounded quarterly.", "function": {"name": "calculate_compounded_interest", "description": "Calculate the compounded interest for a given initial deposit, interest rate, time and number of times the interest is compounded per unit time.", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The initial amount of money that is being invested or loaned."}, "rate": {"type": "number", "description": "The annual interest rate."}, "time": {"type": "number", "description": "The number of time periods the money is invested or loaned for."}, "n": {"type": "number", "description": "The number of times that interest is compounded per unit time."}}, "required": ["principal", "rate", "time", "n"]}}, "human_eval_answer": "calculate_compounded_interest(principal=5000, rate=0.03, time=5, n=4)", "question_type": "simple"}
{"question": "Calculate the Future Value of a $5000 investment made today for a term of 10 years at an annual interest rate of 5%", "function": {"name": "calculate_future_value", "description": "Calculates the future value of an investment based on the present value, interest rate, and time period.", "parameters": {"type": "object", "properties": {"present_value": {"type": "number", "description": "The present value or principal amount."}, "annual_interest_rate": {"type": "number", "description": "The annual interest rate in decimal form. Example, 5% is 0.05."}, "years": {"type": "integer", "description": "The time period in years for which the investment is made."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (annual compounding)."}}, "required": ["present_value", "annual_interest_rate", "years"]}}, "human_eval_answer": "calculate_future_value(present_value=5000, annual_interest_rate=0.05, years=10)", "question_type": "simple"}
{"question": "Calculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years.", "function": {"name": "calculate_future_value", "description": "Calculate the future value of an investment given the initial amount, interest rate, and investment duration.", "parameters": {"type": "object", "properties": {"initial_investment": {"type": "number", "description": "The initial investment amount."}, "interest_rate": {"type": "number", "description": "The annual interest rate in decimal form."}, "duration": {"type": "number", "description": "The investment duration in years."}, "compounded": {"type": "number", "description": "The number of times the interest is compounded per year. Default is 1 (annual compounding)."}}, "required": ["initial_investment", "interest_rate", "duration"]}}, "human_eval_answer": "calculate_future_value(initial_investment=1000, interest_rate=0.05, duration=2)", "question_type": "simple"}
{"question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}, "human_eval_answer": "crime_record.get_record(case_number='CA123456', county='San Diego', details=True)", "question_type": "simple"}
{"question": "Find out if an individual John Doe with a birthday 01-01-1980 has any prior felony convictions in California.", "function": {"name": "criminal_history.check_felonies", "description": "This function checks if an individual has any prior felony convictions based on their full name and birth date.", "parameters": {"type": "object", "properties": {"full_name": {"type": "string", "description": "The full name of the individual."}, "birth_date": {"type": "string", "description": "The birth date of the individual. Must be in MM-DD-YYYY format."}, "state": {"type": "string", "description": "The state to search the criminal record in. If not specified, the function will search across all states."}}, "required": ["full_name", "birth_date"]}}, "human_eval_answer": "criminal_history.check_felonies(full_name='John Doe', birth_date='01-01-1980', state='California')", "question_type": "simple"}
{"question": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015.", "function": {"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}, "human_eval_answer": "get_criminal_records(name='Mr. X', location='New York, NY', from_year=2012, to_year=2015)", "question_type": "simple"}
{"question": "Give me the details of Criminal Law Amendment Act of 2013.", "function": {"name": "get_act_details", "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.", "parameters": {"type": "object", "properties": {"act_name": {"type": "string", "description": "The name of the act."}, "amendment_year": {"type": "integer", "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."}}, "required": ["act_name", "amendment_year"]}}, "human_eval_answer": "get_act_details(act_name='Criminal Law Amendment', amendment_year=2013)", "question_type": "simple"}
{"question": "Who was the victim in the case docket numbered 2022/AL2562 in California?", "function": {"name": "get_case_info", "description": "Retrieve case details using a specific case docket number and court location.", "parameters": {"type": "object", "properties": {"docket": {"type": "string", "description": "Docket number for the specific court case."}, "court": {"type": "string", "description": "Court in which the case was heard."}, "info_type": {"type": "string", "description": "Specify the information type needed for the case. i.e., victim, accused, verdict etc."}}, "required": ["docket", "court", "info_type"]}}, "human_eval_answer": "get_case_info(docket=\"2022/AL2562\", court=\"California\", info_type=\"victim\")", "question_type": "simple"}
{"question": "Find out the possible punishments for the crime of theft in California in detail.", "function": {"name": "crime_statute_lookup", "description": "Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.", "parameters": {"type": "object", "properties": {"jurisdiction": {"type": "string", "description": "The jurisdiction to search in, usually a state or country."}, "crime": {"type": "string", "description": "The crime to search for."}, "detail_level": {"type": "string", "enum": ["basic", "detailed"], "description": "How detailed of a report to return. Optional, default is 'basic'."}}, "required": ["jurisdiction", "crime"]}}, "human_eval_answer": "crime_statute_lookup(jurisdiction='California', crime='theft'')", "question_type": "simple"}
{"question": "Generate a customized law contract between John and Alice for rental agreement in California.", "function": {"name": "generate_law_contract", "description": "Generates a customized law contract given involved parties, contract type and location.", "parameters": {"type": "object", "properties": {"parties": {"type": "array", "items": {"type": "string"}, "description": "Parties involved in the contract."}, "contract_type": {"type": "string", "description": "Type of the contract."}, "location": {"type": "string", "description": "Location where the contract will be in effect."}}, "required": ["parties", "contract_type", "location"]}}, "human_eval_answer": "generate_law_contract(parties=['John', 'Alice'], contract_type='Rental Agreement', location='California')", "question_type": "simple"}
{"question": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response.", "function": {"name": "property_records.get", "description": "Fetch property records based on location, parcel number and county.", "parameters": {"type": "object", "properties": {"address": {"type": "string", "description": "Address of the property."}, "parcel_number": {"type": "string", "description": "Parcel number of the property."}, "county": {"type": "string", "description": "County where the property is located."}, "include_owner": {"type": "boolean", "description": "Include owner's name in the property record. Default is false.", "default": false}}, "required": ["address", "parcel_number", "county"]}}, "human_eval_answer": "property_records.get(address='123 main street', parcel_number='1234567890', county='Santa Clara', include_owner=True)", "question_type": "simple"}
{"question": "Provide me the official crime rate of violent crime in San Francisco in 2020.", "function": {"name": "get_crime_rate", "description": "Retrieve the official crime rate of a city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The name of the city."}, "state": {"type": "string", "description": "The state where the city is located."}, "type": {"type": "string", "description": "Optional. The type of crime."}, "year": {"type": "integer", "description": "Optional. The year for the crime rate data."}}, "required": ["city", "state"]}}, "human_eval_answer": "get_crime_rate(city=\"San Francisco\", state=\"California\", type=\"violent\", year=2020)", "question_type": "simple"}
{"question": "Retrieve cases from 2020 about theft crimes in Los Angeles, California", "function": {"name": "civil_cases.retrieve", "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "Year of the cases"}, "crime_type": {"type": "string", "description": "Type of the crime."}, "location": {"type": "string", "description": "Location of the case in the format of city name."}}, "required": ["year", "crime_type", "location"]}}, "human_eval_answer": "civil_cases.retrieve(year=2020, crime_type=\"theft\", location=\"Los Angeles\")", "question_type": "simple"}
{"question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer", "maximum": 400}}, "required": ["city", "specialty", "fee"]}}, "human_eval_answer": "lawyer.find_nearby(city=\"Chicago\", specialty=\"Divorce\", fee=400)", "question_type": "simple"}
{"question": "Retrieve the details of a Supreme Court case titled 'Roe v. Wade'.Include dissent information.", "function": {"name": "law.civil.get_case_details", "description": "Retrieve the details of a Supreme Court case given its title.", "parameters": {"type": "object", "properties": {"case_title": {"type": "string", "description": "Title of the Supreme Court case."}, "include_dissent": {"type": "boolean", "description": "If true, the output will include details of the dissenting opinion."}}, "required": ["case_title", "include_dissent"]}}, "human_eval_answer": "law.civil.get_case_details(case_title='Roe v. Wade', include_dissent=True)", "question_type": "simple"}
{"question": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.", "function": {"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY."}, "location": {"type": "string", "description": "Location where the lawsuit was filed in the format of full state name."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}, "human_eval_answer": "lawsuit_search(company='Google', start_date='2021-01-01', location='California')", "question_type": "simple"}
{"question": "Find the details of the court case identified by docket number 123456 in Texas. Don't return full text", "function": {"name": "court_case.search", "description": "Retrieves details about a court case using its docket number and location.", "parameters": {"type": "object", "properties": {"docket_number": {"type": "string", "description": "The docket number for the case."}, "location": {"type": "string", "description": "The location where the case is registered, in the format: state, e.g., Texas"}, "full_text": {"type": "boolean", "default": "false", "description": "Option to return the full text of the case ruling."}}, "required": ["docket_number", "location"]}}, "human_eval_answer": "court_case.search(docket_number='123456', location='Texas', full_text=false)", "question_type": "simple"}
{"question": "Find a historical law case about fraud from 2010 to 2015.", "function": {"name": "law_case_search.find_historical", "description": "Search for a historical law case based on specific criteria like the subject and year.", "parameters": {"type": "object", "properties": {"subject": {"type": "string", "description": "The subject matter of the case, e.g., 'fraud'"}, "from_year": {"type": "integer", "description": "The start year for the range of the case. The case should happen after this year."}, "to_year": {"type": "integer", "description": "The end year for the range of the case. The case should happen before this year."}}, "required": ["subject", "from_year", "to_year"]}}, "human_eval_answer": "law_case_search.find_historical(subject='fraud', from_year=2010, to_year=2015)", "question_type": "simple"}
{"question": "Fetch details of a law case with number 43403 in New York court for year 2018.", "function": {"name": "fetch_law_case_details", "description": "Fetch details of a specific law case based on case number, year and court.", "parameters": {"type": "object", "properties": {"case_number": {"type": "integer", "description": "The specific number of the law case."}, "court": {"type": "string", "description": "The city name where the court takes place"}, "year": {"type": "integer", "description": "The year in which the law case took place."}}, "required": ["case_number", "court", "year"]}}, "human_eval_answer": "fetch_law_case_details(case_number=43403, court=\"New York\", year=2018)", "question_type": "simple"}
{"question": "How to obtain the detailed case information of the R vs Adams legal case?", "function": {"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "object", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. Default is false."}}, "required": ["case_id", "details"]}}, "human_eval_answer": "legal_case.fetch(case_id='R vs Adams', details=True)", "question_type": "simple"}
{"question": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York.", "function": {"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "object", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}, "human_eval_answer": "law_case_search(topic='land disputes', year_range=[2015, 2021], location='New York', judicial_system='state')", "question_type": "simple"}
{"question": "Get me the top 10 landmark cases in constitutional law in China.", "function": {"name": "get_top_cases", "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.", "parameters": {"type": "object", "properties": {"field_of_law": {"type": "string", "description": "The specific field of law e.g., constitutional law, criminal law, etc."}, "top_number": {"type": "integer", "description": "The number of top cases to retrieve."}, "country": {"type": "string", "description": "The country where the law cases should be retrieved from. Default is United States of America."}}, "required": ["field_of_law", "top_number"]}}, "human_eval_answer": "get_top_cases(field_of_law='constitutional', top_number=10, country='China')", "question_type": "simple"}
{"question": "How many months of experience a Lawyer John Doe has on handling Bankruptcy cases.", "function": {"name": "lawyer.get_experience", "description": "Retrieve months of experience of a Lawyer on handling certain type of law cases.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The full name of the Lawyer."}, "law_type": {"type": "string", "description": "The type of law case. eg. Bankruptcy"}}, "required": ["name", "law_type"]}}, "human_eval_answer": "lawyer.get_experience(name='John Doe', law_type='Bankruptcy')", "question_type": "simple"}
{"question": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "function": {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter."}}, "required": ["company_name", "year"]}}, "human_eval_answer": "lawsuit_details.find(company_name='Apple Inc.', year=2010, case_type='Patent')", "question_type": "simple"}
{"question": "Find all Patent lawsuit cases of Facebook in 2018.", "function": {"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}, "human_eval_answer": "get_lawsuit_cases(company_name='Facebook', year=2018)", "question_type": "simple"}
{"question": "Find details about lawsuit case numbered 'LAX2019080202' in the Los Angeles court.", "function": {"name": "get_lawsuit_details", "description": "Retrieve the detailed information about a lawsuit based on its case number and the court location.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The case number of the lawsuit."}, "court_location": {"type": "string", "description": "The location of the court where the case is filed."}, "additional_details": {"type": "array", "items": {"type": "string", "enum": ["attorneys", "plaintiffs", "defendants", "charges", "court_updates"]}, "description": "Optional. Array containing additional details to be fetched."}}, "required": ["case_number", "court_location"]}}, "human_eval_answer": "get_lawsuit_details(case_number='LAX2019080202', court_location='Los Angeles')", "question_type": "simple"}
{"question": "Find the latest court case between Apple and Samsung occured in USA.", "function": {"name": "find_latest_court_case", "description": "Find the latest court case between two companies.", "parameters": {"type": "object", "properties": {"company1": {"type": "string", "description": "The name of the first company."}, "company2": {"type": "string", "description": "The name of the second company."}, "country": {"type": "string", "description": "The country in which the court case is located.", "default": "USA"}}, "required": ["company1", "company2"]}}, "human_eval_answer": "find_latest_court_case(company1=\"Apple\", company2=\"Samsung\", country=\"USA\")", "question_type": "simple"}
{"question": "Find the lawsuits filed against the company Google in California in the year 2020.", "function": {"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types."}}, "required": ["company_name", "location", "year"]}}, "human_eval_answer": "lawsuits_search(company_name='Google', location='California', year=2020)", "question_type": "simple"}
{"question": "Get details of a lawsuit with case number '123456-ABC' filed in Los Angeles court with verdict", "function": {"name": "get_lawsuit_details", "description": "Retrieve details of a lawsuit based on its case number and court location.", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "Case number of the lawsuit."}, "court_location": {"type": "string", "description": "The location of the court where the lawsuit was filed."}, "with_verdict": {"type": "boolean", "description": "Flag to include verdict details if available. Default is False"}}, "required": ["case_number", "court_location"]}}, "human_eval_answer": "get_lawsuit_details(case_number='123456-ABC', court_location='Los Angeles', with_verdict=True)", "question_type": "simple"}
{"question": "Retrieve all the lawsuit details for case number XYZ123", "function": {"name": "lawsuit_info", "description": "Retrieves details of a lawsuit given a case number", "parameters": {"type": "object", "properties": {"case_number": {"type": "string", "description": "The unique identifier of the lawsuit case"}, "year": {"type": "number", "description": "The year in which the lawsuit case was initiated", "optional": true}, "location": {"type": "string", "description": "The location or court jurisdiction where the case was filed.", "optional": true}}, "required": ["case_number"]}}, "human_eval_answer": "lawsuit_info(case_number='XYZ123')", "question_type": "simple"}
{"question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "object", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}, "human_eval_answer": "lawsuit_search(entity='Apple', county='Santa Clara County')", "question_type": "simple"}
{"question": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed.", "function": {"name": "lawsuit.check_case", "description": "Verify the details of a lawsuit case and check its status using case ID.", "parameters": {"type": "object", "properties": {"case_id": {"type": "integer", "description": "The identification number of the lawsuit case."}, "closed_status": {"type": "boolean", "description": "The status of the lawsuit case to be verified."}}, "required": ["case_id", "closed_status"]}}, "human_eval_answer": "lawsuit.check_case(case_id=1234, closed_status=True)", "question_type": "simple"}
{"question": "What will be the weather in New York in the next 72 hours including the precipitation?", "function": {"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city name that you want to get the weather for."}, "duration": {"type": "integer", "description": "Duration in hours for the detailed forecast."}, "include_precipitation": {"type": "boolean", "description": "Whether to include precipitation data in the forecast."}}, "required": ["location", "duration"]}}, "human_eval_answer": "detailed_weather_forecast(location='New York', duration=72, include_precipitation=True)", "question_type": "simple"}
{"question": "What is the temperature in celsius and humidity level of Tokyo, Japan right now?", "function": {"name": "current_weather_condition", "description": "Get the current weather conditions of a specific city including temperature and humidity.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city that you want to get the current weather conditions for."}, "country": {"type": "string", "description": "The country of the city you specified."}, "measurement": {"type": "string", "description": "You can specify which unit to display the temperature in, 'c' for Celsius, 'f' for Fahrenheit. Default is Celsius"}}, "required": ["city", "country"]}}, "human_eval_answer": "current_weather_condition(city='Tokyo', country='Japan', measurement='c')", "question_type": "simple"}
{"question": "What's the current temperature and humidity in Seattle, Washington?", "function": {"name": "get_current_weather", "description": "Retrieves the current temperature and humidity for a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city name to get the weather for."}, "include_temperature": {"type": "boolean", "description": "Whether to include the temperature in the result. Default is true."}, "include_humidity": {"type": "boolean", "description": "Whether to include the humidity in the result. Default is true."}}, "required": ["location"]}}, "human_eval_answer": "get_current_weather(location='Seattle', include_temperature=True, include_humidity=True)", "question_type": "simple"}
{"question": "What is the humidity level in Miami, Florida in the upcoming 7 days?", "function": {"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Optional parameter."}}, "required": ["location", "days"]}}, "human_eval_answer": "weather.humidity_forecast(location=\"Miami\", days=7)", "question_type": "simple"}
{"question": "Get weather information for New York, USA for the next 3 days with details.", "function": {"name": "weather_forecast_detailed", "description": "Retrieve a detailed weather forecast for a specific city like Boston and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "boolean", "description": "Provide detailed weather information or not.", "default": false}}, "required": ["location", "days"]}}, "human_eval_answer": "weather_forecast_detailed(location=\"New York\", days=3, details=true)", "question_type": "simple"}
{"question": "What's the elevation and area of Yellowstone National Park?", "function": {"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "object", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}, "human_eval_answer": "park_information(park_name=\"Yellowstone\", information=[\"Elevation\", \"Area\"])", "question_type": "simple"}
{"question": "Find me the 5 tallest mountains within 50km of Denver, Colorado.", "function": {"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "number", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "number", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}, "human_eval_answer": "locate_tallest_mountains(location='Denver, Colorado', radius=50, amount=5)", "question_type": "simple"}
{"question": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437).", "function": {"name": "calculate_slope_gradient", "description": "Calculate the slope gradient between two geographical coordinates.", "parameters": {"type": "object", "properties": {"point1": {"type": "array", "items": {"type": "number"}, "description": "The geographic coordinates for the first point [Latitude, Longitude]."}, "point2": {"type": "array", "items": {"type": "number"}, "description": "The geographic coordinates for the second point [Latitude, Longitude]."}, "unit": {"type": "string", "enum": ["degree", "percent", "ratio"], "description": "The unit for the slope gradient. Default is 'degree'."}}, "required": ["point1", "point2"]}}, "human_eval_answer": "calculate_slope_gradient(point1=[40.7128, -74.0060], point2=[34.0522, -118.2437], unit='degree')", "question_type": "simple"}
{"question": "Find the best local nurseries in Toronto with a good variety of annual plants.", "function": {"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}, "human_eval_answer": "local_nursery.find(location='Toronto', plant_types=['Annual'])", "question_type": "simple"}
{"question": "What are the top three plants suitable for a hill slope in terms of erosion prevention?", "function": {"name": "get_plants_for_slope", "description": "Retrieve the list of plants suitable for slope based on erosion control ability.", "parameters": {"type": "object", "properties": {"slope_type": {"type": "string", "description": "The type of slope like steep, moderate etc."}, "num_results": {"type": "integer", "description": "The number of top results needed. Default is 5."}}, "required": ["slope_type", "num_results"]}}, "human_eval_answer": "get_plants_for_slope(slope_type='hill', num_results=3)", "question_type": "simple"}
{"question": "Calculate the carbon footprint of my lifestyle, assuming I drive 20 miles a day, consume 3 meat meals a week, and produce 500 lbs of trash in a year.", "function": {"name": "calculate_carbon_footprint", "description": "Calculate the estimated carbon footprint of a lifestyle based on factors such as daily driving distance, weekly meat consumption, and yearly trash production.", "parameters": {"type": "object", "properties": {"daily_miles": {"type": "number", "description": "The daily driving distance in miles."}, "meat_meals_per_week": {"type": "number", "description": "The number of meat-based meals consumed per week."}, "annual_trash_weight": {"type": "number", "description": "The yearly weight of trash production in pounds."}, "flights_per_year": {"type": "number", "description": "The number of flights taken per year."}}, "required": ["daily_miles", "meat_meals_per_week", "annual_trash_weight"]}}, "human_eval_answer": "calculate_carbon_footprint(daily_miles=20, meat_meals_per_week=3, annual_trash_weight=500)", "question_type": "simple"}
{"question": "What is the air quality index in London 2022/08/16?", "function": {"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date you want to get the air quality index for. Default is today."}}, "required": ["location", "date"]}}, "human_eval_answer": "air_quality(location='London', date='2022-08-16')", "question_type": "simple"}
{"question": "Find the air quality index in San Diego at 12pm.", "function": {"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}, "human_eval_answer": "get_air_quality_index(location=\"San Diego\", time=\"12pm\")", "question_type": "simple"}
{"question": "Calculate the required water daily intake for a person with weight 70 kg.", "function": {"name": "calculate_daily_water_intake", "description": "Calculate the recommended daily water intake for a person based on their weight.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "The weight of the person in kilograms."}, "activity_level": {"type": "string", "description": "The level of physical activity of the person. Default is 'moderate'."}, "climate": {"type": "string", "description": "The climate of the area where the person lives. Default is 'temperate'."}}, "required": ["weight"]}}, "human_eval_answer": "calculate_daily_water_intake(weight=70)", "question_type": "simple"}
{"question": "Find air quality index in San Jose for next three days.", "function": {"name": "environmental_data.air_quality_index", "description": "Retrieves Air Quality Index (AQI) for specified location over a number of days.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Name of the city or town to retrieve air quality index for."}, "days": {"type": "integer", "description": "Number of days for which to retrieve data. If not provided, defaults to today."}}, "required": ["location"]}}, "human_eval_answer": "environmental_data.air_quality_index(location=\"San Jose\", days=3)", "question_type": "simple"}
{"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25% ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "number", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "number", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}, "human_eval_answer": "calculate_emissions(distance=12000, fuel_type='gas', fuel_efficiency=25)", "question_type": "simple"}
{"question": "Estimate the population of pandas in the wild in China.", "function": {"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "object", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "number", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}, "human_eval_answer": "estimate_population(species='panda', country='China')", "question_type": "simple"}
{"question": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "object", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy."}}, "required": ["energy_type", "usage_duration"]}}, "human_eval_answer": "calculate_emission_savings(energy_type='renewable', usage_duration=3, region='California')", "question_type": "simple"}
{"question": "Can you find me the latest information about air quality index and pollution data for Chicago?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}, "human_eval_answer": "get_air_quality(location='Chicago')", "question_type": "simple"}
{"question": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle.", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "number", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}, "human_eval_answer": "restaurant.find_nearby(location=\"Seattle\", cuisine=\"Chinese\", max_distance=10)", "question_type": "simple"}
{"question": "Find out the current traffic situation from Boston driving to New York.", "function": {"name": "get_traffic_info", "description": "Retrieve current traffic conditions for a specified route.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting point of the route."}, "end_location": {"type": "string", "description": "The destination of the route."}, "mode": {"type": "string", "enum": ["driving", "walking", "bicycling", "transit"], "description": "Preferred method of transportation, default to 'driving'."}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "get_traffic_info(start_location='Boston', end_location='New York', mode='driving')", "question_type": "simple"}
{"question": "Find the nearest park with a tennis court in London.", "function": {"name": "parks.find_nearby", "description": "Locate nearby parks based on specific criteria like tennis court availability.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. London, UK"}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Tennis Court", "Picnic Area", "Playground", "Running Track"]}, "description": "Preferred amenities in park."}}, "required": ["location"]}}, "human_eval_answer": "parks.find_nearby(location='London', amenities='Tennis Court')", "question_type": "simple"}
{"question": "Get the shortest driving distance between New York, USA and Miami, USA.", "function": {"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}, "human_eval_answer": "calculate_shortest_distance(start_location=\"New York, USA\", end_location=\"Miami, USA\", route_preference=\"Shortest\")", "question_type": "simple"}
{"question": "Get me the directions from New York to Los Angeles avoiding highways and toll roads.", "function": {"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "object", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid."}}, "required": ["start", "end"]}}, "human_eval_answer": "map_service.get_directions(start='New York', end='Los Angeles', avoid=['highways', 'tolls'])", "question_type": "simple"}
{"question": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi.", "function": {"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}, "human_eval_answer": "public_library.find_nearby(location='Boston, MA', facilities=['Fiction', 'Wi-Fi'])", "question_type": "simple"}
{"question": "Get 5 latest news on Bitcoin in US", "function": {"name": "get_news", "description": "Fetches the latest news on a specific topic.", "parameters": {"type": "object", "properties": {"topic": {"type": "string", "description": "The subject for the news topic."}, "quantity": {"type": "integer", "description": "Number of articles to fetch."}, "region": {"type": "string", "description": "The geographical region for the news (Optional)."}}, "required": ["topic", "quantity"]}}, "human_eval_answer": "get_news(topic='Bitcoin', quantity=5, region='US')", "question_type": "simple"}
{"question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "object", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy."}}, "required": ["to", "subject", "body"]}}, "human_eval_answer": "send_email(to='john.doe@example.com', subject='Meeting', body='Let\\'s meet at 10 AM tomorrow')", "question_type": "simple"}
{"question": "Give me detail information about stocks of Apple Inc.", "function": {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}, "human_eval_answer": "get_stock_info(company_name='Apple Inc.', detail_level='detailed')", "question_type": "simple"}
{"question": "Book a direct flight from San Francisco to London for 2022-04-27 afternoon", "function": {"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "object", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false"}}, "required": ["departure_location", "destination_location", "date"]}}, "human_eval_answer": "flight.book(departure_location='San Francisco', destination_location='London', date='2022-04-27', time='afternoon', direct_flight=True)", "question_type": "simple"}
{"question": "Search for upcoming month rock concerts in New York.", "function": {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}, "human_eval_answer": "event_finder.find_upcoming(location='New York', genre='Rock', days_ahead=30)", "question_type": "simple"}
{"question": "Give me a brief on movie 'Interstellar'", "function": {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}, "human_eval_answer": "movie_details.brief(title='Interstellar')", "question_type": "simple"}
{"question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, "human_eval_answer": "sentiment_analysis(text='I love the food here! It is always fresh and delicious.', language='english')", "question_type": "simple"}
{"question": "Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm.", "function": {"name": "fMRI.analyze", "description": "This function takes in fMRI data to output analyzed data.", "parameters": {"type": "object", "properties": {"data_source": {"type": "string", "description": "The path where the data is stored."}, "sequence_type": {"type": "string", "description": "Type of fMRI sequence"}, "smooth": {"type": "integer", "description": "Spatial smoothing FWHM. In mm."}, "voxel_size": {"type": "number", "description": "Size of isotropic voxels in mm.", "default": "3"}}, "required": ["data_source", "sequence_type", "smooth"]}}, "human_eval_answer": "fMRI.analyze(data_source=\"~/data/myfMRI.nii\", sequence_type=\"multi-band\", smooth=6, voxel_size=2)", "question_type": "simple"}
{"question": "Given patient with id 546382, retrieve their brain MRI report with the status 'concluded'.", "function": {"name": "patient.get_mri_report", "description": "Fetch the brain MRI report of the patient for a given status.", "parameters": {"type": "object", "properties": {"patient_id": {"type": "string", "description": "The patient identifier."}, "mri_type": {"type": "string", "description": "Type of the MRI, should be 'brain'.", "enum": ["brain", "spinal", "chest", "abdominal"]}, "status": {"type": "string", "description": "Status of the report, could be 'in progress', 'concluded' or 'draft'", "enum": ["in progress", "concluded", "draft"]}}, "required": ["patient_id", "status"]}}, "human_eval_answer": "patient.get_mri_report(patient_id='546382', mri_type='brain', status='concluded')", "question_type": "simple"}
{"question": "What are the coordinates of the neuron in a rat's all part of the brain that produces GABA neurotransmitters?", "function": {"name": "get_neuron_coordinates", "description": "Retrieve the coordinates of the specified neuron in the rat's brain.", "parameters": {"type": "object", "properties": {"neuron_type": {"type": "string", "description": "Type of neuron to find. For instance, GABA, Glutamate, etc."}, "brain_region": {"type": "string", "description": "The region of the brain to consider.", "default": "All"}}, "required": ["neuron_type", "brain_region"]}}, "human_eval_answer": "get_neuron_coordinates(neuron_type=\"GABA\", brain_region=\"All\")", "question_type": "simple"}
{"question": "Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1.", "function": {"name": "calculate_neuronal_activity", "description": "Calculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it.", "parameters": {"type": "object", "properties": {"input_synaptic_rate": {"type": "number", "description": "The synaptic input rate, usually represented as number of inputs per second."}, "weight": {"type": "number", "description": "The weight of the input, denoting its influence on the neuron's state."}, "decay_rate": {"type": "number", "description": "The rate at which the neuron's potential decays in the absence of inputs."}}, "required": ["input_synaptic_rate", "decay_rate"], "optional": ["weight"]}}, "human_eval_answer": "calculate_neuronal_activity(input_synaptic_rate=200.0, weight=0.5, decay_rate=0.1)", "question_type": "simple"}
{"question": "What will be the population growth in London over the next five years?", "function": {"name": "population_growth_estimate", "description": "Estimate the future population growth of a specific location over a specified time period.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to estimate the population growth for."}, "years": {"type": "integer", "description": "Number of years into the future for the estimate."}, "rate": {"type": "number", "description": "Expected annual growth rate in percentage, if not specified will take average growth rate."}}, "required": ["location", "years"]}}, "human_eval_answer": "population_growth_estimate(location='London', years=5)", "question_type": "simple"}
{"question": "Can you calculate my Body Mass Index (BMI) given my weight is 70 kg and height is 180 cm?", "function": {"name": "calculate_bmi", "description": "Calculate the Body Mass Index based on given weight and height.", "parameters": {"type": "object", "properties": {"weight": {"type": "number", "description": "The weight of a person in kilograms."}, "height": {"type": "number", "description": "The height of a person in centimeters."}, "unit": {"type": "string", "description": "Optional. The measurement system to be used for the result. The default is metric."}}, "required": ["weight", "height"]}}, "human_eval_answer": "calculate_bmi(weight=70, height=180)", "question_type": "simple"}
{"question": "Find social behaviors and patterns in a group size of 50 with extroverted members being 15 and introverted members being 35.", "function": {"name": "group_dynamics.pattern", "description": "Examine the social dynamics and interactions within a group based on the personality traits and group size.", "parameters": {"type": "object", "properties": {"total": {"type": "integer", "description": "The total group size."}, "extroverts": {"type": "integer", "description": "The number of extroverted members in the group."}, "introverts": {"type": "integer", "description": "The number of introverted members in the group."}}, "required": ["total", "extroverts", "introverts"]}}, "human_eval_answer": "group_dynamics.pattern(total=50, extroverts=15, introverts=35)", "question_type": "simple"}
{"question": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics.", "function": {"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "object", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic, Optional."}, "region": {"type": "string", "description": "Region of interest for twitter search, Optional."}}, "required": ["topic"]}}, "human_eval_answer": "social_media_analytics.most_followed(topic='psychology', sub_topics=['behaviour', 'group dynamics'])", "question_type": "simple"}
{"question": "What is the percentage of population preferring digital reading over physical books?", "function": {"name": "psych_research.get_preference", "description": "Gathers research data on public preference between two options, based on societal category.", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "The societal category the preference data is about. E.g. reading, transportation, food"}, "option_one": {"type": "string", "description": "The first option people could prefer."}, "option_two": {"type": "string", "description": "The second option people could prefer."}, "demographic": {"type": "string", "description": "Specific demographic of society to narrow down the research.", "default": "all"}}, "required": ["category", "option_one", "option_two"]}}, "human_eval_answer": "psych_research.get_preference(category='reading', option_one='digital reading', option_two='physical book')", "question_type": "simple"}
{"question": "Find the compatibility score in percentage of Aries with Gemini.", "function": {"name": "get_zodiac_compatibility", "description": "Retrieve the compatibility score between two Zodiac signs.", "parameters": {"type": "object", "properties": {"sign1": {"type": "string", "description": "The first Zodiac sign."}, "sign2": {"type": "string", "description": "The second Zodiac sign."}, "scale": {"type": "string", "enum": ["percentage", "0-10 scale"], "description": "The scale on which compatibility should be shown. Default is 'percentage'."}}, "required": ["sign1", "sign2"]}}, "human_eval_answer": "get_zodiac_compatibility(sign1=\"Aries\", sign2=\"Gemini\", scale=\"percentage\")", "question_type": "simple"}
{"question": "Get me strength and weakness traits for ENFJ personality type.", "function": {"name": "get_personality_traits", "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.", "parameters": {"type": "object", "properties": {"type": {"type": "string", "description": "The personality type."}, "traits": {"type": "array", "items": {"type": "string", "enum": ["strengths", "weaknesses"]}, "description": "List of traits to be retrieved, default is ['strengths', 'weaknesses']."}}, "required": ["type"]}}, "human_eval_answer": "get_personality_traits(type='ENFJ', traits=['strengths', 'weaknesses'])", "question_type": "simple"}
{"question": "Find three personality traits of people who like jogging.", "function": {"name": "get_personality_traits", "description": "Retrieve the common personality traits of people based on their hobbies or activities.", "parameters": {"type": "object", "properties": {"hobby": {"type": "string", "description": "The hobby or activity of interest."}, "trait_count": {"type": "integer", "description": "The number of top traits to return, default is 5"}}, "required": ["hobby"]}}, "human_eval_answer": "get_personality_traits(hobby='jogging', trait_count=3)", "question_type": "simple"}
{"question": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?", "function": {"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "object", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}, "human_eval_answer": "get_bigfive_scores(characteristics=['efficient', 'organized', 'easy going', 'compassionate'])", "question_type": "simple"}
{"question": "Who was the King of France in 1510?", "function": {"name": "historic_leader_search", "description": "Retrieve information about a historical leader given a location and date.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The country or region in question."}, "date": {"type": "integer", "description": "The year being queried."}, "title": {"type": "string", "description": "The official title of the position. Default is 'King'."}}, "required": ["location", "date"]}}, "human_eval_answer": "historic_leader_search(title='King',location='France', date=1510)", "question_type": "simple"}
{"question": "Provide key war events in German history from 1871 to 1945.", "function": {"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. If none is provided, all types will be considered."}}, "required": ["country", "start_year", "end_year"]}}, "human_eval_answer": "history.get_key_events(country='Germany', start_year=1871, end_year=1945, event_type=['War'])", "question_type": "simple"}
{"question": "What was the full name king of England in 1800?", "function": {"name": "monarch.getMonarchOfYear", "description": "Retrieve the monarch of a specific location during a specified year.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location (e.g., country) whose monarch needs to be found."}, "year": {"type": "integer", "description": "The year to search the monarch."}, "fullName": {"type": "boolean", "default": "false", "description": "If true, returns the full name and title of the monarch."}}, "required": ["location", "year"]}}, "human_eval_answer": "monarch.getMonarchOfYear(location='England', year=1800, fullName=True)", "question_type": "simple"}
{"question": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY.", "function": {"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "object", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}, "human_eval_answer": "european_history.get_event_date(event_name='Treaty of Tordesillas', format='YYYY')", "question_type": "simple"}
{"question": "Find important Wars in European history during the 19th century.", "function": {"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "object", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}, "human_eval_answer": "history_eu.fetch_events(century=19,category='Wars')", "question_type": "simple"}
{"question": "When was the signing of the Treaty of Lisbon?", "function": {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Defaults to global if not specified"}}, "required": ["event"]}}, "human_eval_answer": "get_event_date(event='Treaty of Lisbon')", "question_type": "simple"}
{"question": "Get start date on the American Civil War.", "function": {"name": "us_history.get_event_info", "description": "Retrieve detailed information about a significant event in U.S. history.", "parameters": {"type": "object", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "specific_info": {"type": "string", "description": "Specific aspect of information related to event.", "enum": ["Start Date", "End Date", "Participants", "Result", "Notable Figures", "Importance in History"]}}, "required": ["event_name", "specific_info"]}}, "human_eval_answer": "us_history.get_event_info(event_name=\"American Civil War\", specific_info=\"Start Date\")", "question_type": "simple"}
{"question": "Get historical GDP data for United States from 1960 to 2000.", "function": {"name": "get_historical_GDP", "description": "Retrieve historical GDP data for a specific country and time range.", "parameters": {"type": "object", "properties": {"country": {"type": "string", "description": "The country for which the historical GDP data is required."}, "start_year": {"type": "integer", "description": "Starting year of the period for which GDP data is required."}, "end_year": {"type": "integer", "description": "Ending year of the period for which GDP data is required."}}, "required": ["country", "start_year", "end_year"]}}, "human_eval_answer": "get_historical_GDP(country='United States', start_year=1960, end_year=2000)", "question_type": "simple"}
{"question": "Who was the president of the United States during the American Civil War?", "function": {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}, "human_eval_answer": "us_history.get_president(event='American Civil War', year=1861)", "question_type": "simple"}
{"question": "Who was the full name of the president of the United States in 1861?", "function": {"name": "US_president.in_year", "description": "Retrieve the name of the U.S. president in a given year.", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year in question."}, "full_name": {"type": "boolean", "default": true, "description": "Option to return full name with middle initial, if applicable."}}, "required": ["year"]}}, "human_eval_answer": "US_president.in_year(year=1861, full_name=true)", "question_type": "simple"}
{"question": "Who was the President of the United States in 1940?", "function": {"name": "history_api.get_president_by_year", "description": "Get the name of the U.S. President for a specified year.", "parameters": {"type": "object", "properties": {"year": {"type": "integer", "description": "The year you want to know the U.S. president of."}, "full_term_only": {"type": "boolean", "description": "Flag to determine if we should only return presidents that served a full term for the specified year.", "default": "false"}}, "required": ["year"]}}, "human_eval_answer": "history_api.get_president_by_year(year=1940)", "question_type": "simple"}
{"question": "Who was the U.S. president during the Civil War?", "function": {"name": "US_President_During_Event", "description": "Returns the U.S. president during a specified historical event.", "parameters": {"type": "object", "properties": {"event": {"type": "string", "description": "The historical event."}, "country": {"type": "string", "description": "The country the president leads (optional parameter, defaults to 'USA' if not specified)."}}, "required": ["event"]}}, "human_eval_answer": "US_President_During_Event(event='Civil War')", "question_type": "simple"}
{"question": "Who is the scientist that first proposed the theory of evolution?", "function": {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}, "human_eval_answer": "get_scientist_for_discovery(discovery=\"Theory of Evolution\")", "question_type": "simple"}
{"question": "Who discovered the neutron? Give me detail information.", "function": {"name": "get_discoverer", "description": "Get the person or team who made a particular scientific discovery", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The discovery for which the discoverer's information is needed."}, "detail": {"type": "boolean", "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."}}, "required": ["discovery", "detail"]}}, "human_eval_answer": "get_discoverer(discovery='neutron', detail=true)", "question_type": "simple"}
{"question": "What year was the law of universal gravitation published by Isaac Newton?", "function": {"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "object", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known."}}, "required": ["author", "work_title"]}}, "human_eval_answer": "publication_year.find(author='Isaac Newton', work_title='Law of Universal Gravitation')", "question_type": "simple"}
{"question": "Who discovered radium?", "function": {"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "object", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}, "human_eval_answer": "discoverer.get(element_name='radium')", "question_type": "simple"}
{"question": "Who discovered Gravity and what was the method used?", "function": {"name": "science_history.get_discovery_details", "description": "Retrieve the details of a scientific discovery based on the discovery name.", "parameters": {"type": "object", "properties": {"discovery": {"type": "string", "description": "The name of the discovery, e.g. Gravity"}, "method_used": {"type": "string", "description": "The method used for the discovery, default value is 'default' which gives the most accepted method."}}, "required": ["discovery"]}}, "human_eval_answer": "science_history.get_discovery_details(discovery='Gravity')", "question_type": "simple"}
{"question": "What was Albert Einstein's contribution to science on March 17, 1915?", "function": {"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "object", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields."}}, "required": ["scientist", "date"]}}, "human_eval_answer": "historical_contrib.get_contrib(scientist='Albert Einstein', date='1915-03-17')", "question_type": "simple"}
{"question": "Who invented the theory of relativity and in which year?", "function": {"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "object", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}, "human_eval_answer": "science_history.get_invention(invention_name='theory of relativity', want_year=true)", "question_type": "simple"}
{"question": "Tell me more about Christianity and its history till the 14th century", "function": {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}, "human_eval_answer": "religion.history_info(religion='Christianity', till_century=14, include_people=True)", "question_type": "simple"}
{"question": "What's the time difference between San Francisco and Sydney?", "function": {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "object", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, "human_eval_answer": "get_time_difference(place1='San Francisco', place2='Sydney')", "question_type": "simple"}
{"question": "What is the earliest reference of Jesus Christ in history from historical record?", "function": {"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}, "human_eval_answer": "get_earliest_reference(name='Jesus Christ', source='historical records')", "question_type": "simple"}
{"question": "Find ten major historical events related to Christianity in the 16th century sort by importance.", "function": {"name": "get_religion_history", "description": "Retrieves significant religious events, including the details of the event, its historical context, and its impacts.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "Name of the religion to be queried."}, "century": {"type": "integer", "description": "The century in which the event(s) took place."}, "sort_by": {"type": "string", "enum": ["importance", "chronological"], "default": "chronological", "description": "Order of sorting the events. Default is chronological."}, "count": {"type": "integer", "default": 5, "description": "Number of events to return. Default is 5."}}, "required": ["religion", "century"]}}, "human_eval_answer": "get_religion_history(religion='Christianity', century=16, sort_by='importance', count=10)", "question_type": "simple"}
{"question": "Retrieve the full historyof Buddhism", "function": {"name": "retrieve_religion_info", "description": "Retrieve the history and main beliefs of a religion.", "parameters": {"type": "object", "properties": {"religion_name": {"type": "string", "description": "The name of the religion."}, "detail_level": {"type": "string", "description": "Level of detail for the returned information, either 'summary' or 'full'.", "default": "summary"}}, "required": ["religion_name", "detail_level"]}}, "human_eval_answer": "retrieve_religion_info(religion_name=\"Buddhism\", detail_level=\"full\")", "question_type": "simple"}
{"question": "Retrieve the historic dates and facts related to Christianity between year 300 and 400.", "function": {"name": "get_religion_history", "description": "Retrieves historic events and facts related to a specified religion for a given period.", "parameters": {"type": "object", "properties": {"religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The starting year of the period."}, "end_year": {"type": "integer", "description": "The end year of the period."}, "event_type": {"type": "string", "enum": ["all", "crusade", "schism", "reform"], "description": "Optional parameter specifying the type of event. Default is 'all'."}}, "required": ["religion", "start_year", "end_year"]}}, "human_eval_answer": "get_religion_history(religion='Christianity', start_year=300, end_year=400)", "question_type": "simple"}
{"question": "Get the biography and main contributions of Pope Innocent III.", "function": {"name": "religious_history.get_papal_biography", "description": "Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.", "parameters": {"type": "object", "properties": {"papal_name": {"type": "string", "description": "The papal name of the Pope."}, "include_contributions": {"type": "boolean", "default": false, "description": "Include main contributions of the Pope in the response if true."}}, "required": ["papal_name", "include_contributions"]}}, "human_eval_answer": "religious_history.get_papal_biography(papal_name='Innocent III', include_contributions=True)", "question_type": "simple"}
{"question": "Generate an image of a circle with a radius of 50 pixels and color 'Red'.", "function": {"name": "generate_circle_image", "description": "Generates a circle image based on the given radius and color", "parameters": {"type": "object", "properties": {"radius": {"type": "integer", "description": "The radius of the circle in pixels."}, "color": {"type": "string", "description": "The color of the circle."}, "background": {"type": "string", "description": "Optional: The color of the background, default is white."}}, "required": ["radius", "color"]}}, "human_eval_answer": "generate_circle_image(radius=50, color='Red')", "question_type": "simple"}
{"question": "Can you help me identify the basic RGB value of Sea Green color?", "function": {"name": "identify_color_rgb", "description": "This function identifies the RGB values of a named color.", "parameters": {"type": "object", "properties": {"color_name": {"type": "string", "description": "Name of the color."}, "standard": {"type": "string", "description": "The color standard (e.g. basic, pantone). Default is 'basic'"}}, "required": ["color_name"]}}, "human_eval_answer": "identify_color_rgb(color_name='Sea Green', standard='basic')", "question_type": "simple"}
{"question": "Mix yellow and blue colors and adjust the lightness level to 60 percent.", "function": {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "object", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}, "human_eval_answer": "mix_paint_color(color1=\"yellow\", color2=\"blue\", lightness=60)", "question_type": "simple"}
{"question": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.", "function": {"name": "calculate_paint_needed", "description": "Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.", "parameters": {"type": "object", "properties": {"coverage_rate": {"type": "integer", "description": "The area in square feet that one gallon of paint can cover."}, "length": {"type": "integer", "description": "Length of the wall to be painted in feet."}, "height": {"type": "integer", "description": "Height of the wall to be painted in feet."}}, "required": ["coverage_rate", "length", "height"]}}, "human_eval_answer": "calculate_paint_needed(coverage_rate=400, length=30, height=12)", "question_type": "simple"}
{"question": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft.", "function": {"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "object", "properties": {"area": {"type": "object", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "object", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted"}}, "required": ["area", "paint_coverage"]}}, "human_eval_answer": "paint_requirement.calculate(area={'width': 20, 'height': 12}, paint_coverage=350, exclusion={'type': 'window', 'area': 15})", "question_type": "simple"}
{"question": "Draw a rectangle with a width of 20 units and height of 10 units in red.", "function": {"name": "draw_rectangle", "description": "Draw a rectangle given its width and height.", "parameters": {"type": "object", "properties": {"width": {"type": "integer", "description": "The width of the rectangle."}, "height": {"type": "integer", "description": "The height of the rectangle."}, "color": {"type": "string", "description": "The color of the rectangle. Default is 'black'."}}, "required": ["width", "height"]}}, "human_eval_answer": "draw_rectangle(width=20, height=10, color='red')", "question_type": "simple"}
{"question": "Change my painting's medium to oil and change size to 12x18 with red dominant color.", "function": {"name": "modify_painting", "description": "Modify an existing painting's attributes such as size, medium, and color.", "parameters": {"type": "object", "properties": {"size": {"type": "string", "description": "The size of the painting in inches, width by height."}, "medium": {"type": "string", "description": "The medium of the painting, such as oil, acrylic, etc."}, "dominant_color": {"type": "string", "description": "The dominant color of the painting."}}, "required": ["size", "medium"]}}, "human_eval_answer": "modify_painting(size='12x18', medium='oil', dominant_color='red')", "question_type": "simple"}
{"question": "Find me the most recent art sculpture by James Plensa with detailed description.", "function": {"name": "get_sculpture_info", "description": "Retrieves the most recent artwork by a specified artist with its detailed description.", "parameters": {"type": "object", "properties": {"artist_name": {"type": "string", "description": "The name of the artist."}, "year": {"type": "integer", "description": "Year of the sculpture. This is optional."}, "detail": {"type": "boolean", "description": "If True, it provides detailed description of the sculpture. Defaults to False."}}, "required": ["artist_name"]}}, "human_eval_answer": "get_sculpture_info(artist_name=\"James Plensa\", detail=True)", "question_type": "simple"}
{"question": "Find the size of the sculpture with title 'David' by Michelangelo.", "function": {"name": "sculpture.get_details", "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "The artist who made the sculpture."}, "title": {"type": "string", "description": "The title of the sculpture."}, "detail": {"type": "string", "description": "The specific detail wanted about the sculpture. Default is 'general information'."}}, "required": ["artist", "title"]}}, "human_eval_answer": "sculpture.get_details(artist='Michelangelo', title='David', detail='size')", "question_type": "simple"}
{"question": "Find me sculptures near Chicago that were made in the 19th century.", "function": {"name": "sculpture_search", "description": "Find sculptures based on location and a specific time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the sculptures are located."}, "time_frame": {"type": "string", "description": "The time frame during which the sculptures were made."}, "material": {"type": "string", "description": "Optional material of the sculptures."}}, "required": ["location", "time_frame"]}}, "human_eval_answer": "sculpture_search(location='Chicago', time_frame='19th century')", "question_type": "simple"}
{"question": "What is the value of the sculpture 'The Thinker' by Rodin?", "function": {"name": "get_sculpture_value", "description": "Retrieve the current market value of a particular sculpture by a specific artist.", "parameters": {"type": "object", "properties": {"sculpture": {"type": "string", "description": "The name of the sculpture."}, "artist": {"type": "string", "description": "The name of the artist who created the sculpture."}, "year": {"type": "integer", "description": "The year the sculpture was created. This is optional and is not required for all sculptures."}}, "required": ["sculpture", "artist"]}}, "human_eval_answer": "get_sculpture_value(sculpture='The Thinker', artist='Rodin')", "question_type": "simple"}
{"question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold."}}, "required": ["location", "art_form"]}}, "human_eval_answer": "find_exhibition(location='New York', art_form='sculpture', month='upcoming', user_ratings='high')", "question_type": "simple"}
{"question": "Find me the sculptures of Michelangelo with material Marble in Rome, Italy.", "function": {"name": "sculpture_locator.find_by_artist", "description": "Locate the sculptures of specific artist by material and location", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "Name of the Artist of the sculpture"}, "material": {"type": "string", "description": "Material of the sculpture."}, "location": {"type": "string", "description": "The location where you want to find the sculpture."}}, "required": ["artist", "material"]}}, "human_eval_answer": "sculpture_locator.find_by_artist(artist='Michelangelo', material='Marble', location='Rome')", "question_type": "simple"}
{"question": "Calculate the compound interest of an investment of $10,000 at an interest rate of 5% compounded yearly for 10 years.", "function": {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "object", "properties": {"principle": {"type": "number", "description": "The initial amount of the investment."}, "interest_rate": {"type": "number", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}, "human_eval_answer": "calculate_compound_interest(principle=10000, interest_rate=0.05, time=10)", "question_type": "simple"}
{"question": "Can you give me the height and width of Empire State building in feet?", "function": {"name": "building.get_dimensions", "description": "Retrieve the dimensions of a specific building based on its name.", "parameters": {"type": "object", "properties": {"building_name": {"type": "string", "description": "The name of the building."}, "unit": {"type": "string", "description": "The unit in which you want the dimensions. Default is meter.", "enum": ["meter", "feet"]}}, "required": ["building_name", "unit"]}}, "human_eval_answer": "building.get_dimensions(building_name='Empire State', unit='feet')", "question_type": "simple"}
{"question": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?", "function": {"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "object", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}, "human_eval_answer": "analyze_structure(building_id='B1004', floors=[2, 3, 4], mode='dynamic')", "question_type": "simple"}
{"question": "Calculate the area and circumference of a circle with a radius of 5 units.", "function": {"name": "calculate_circle_dimensions", "description": "Calculate the area and circumference of a circle based on the radius.", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle."}}, "required": ["radius"]}}, "human_eval_answer": "calculate_circle_dimensions(radius=5)", "question_type": "simple"}
{"question": "Find out the open hours for the Louvre Museum in Paris.", "function": {"name": "museum.get_hours", "description": "Retrieve the open hours for a museum based on its name and location.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The city where the museum is located."}, "day": {"type": "string", "description": "Optional: Day of the week for specific open hours, e.g. 'Monday'."}}, "required": ["name", "location"]}}, "human_eval_answer": "museum.get_hours(name='Louvre Museum', location='Paris')", "question_type": "simple"}
{"question": "Find information about the opening hours of the Metropolitan Museum of Art.", "function": {"name": "museum_info", "description": "Retrieve information about the opening hours of a museum based on its name.", "parameters": {"type": "object", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "info_type": {"type": "string", "description": "The type of information needed about the museum.", "default": "opening_hours"}}, "required": ["museum_name"]}}, "human_eval_answer": "museum_info(museum_name='Metropolitan Museum of Art', info_type='opening_hours')", "question_type": "simple"}
{"question": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity.", "function": {"name": "metropolitan_museum.get_top_artworks", "description": "Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number of artworks to fetch"}, "sort_by": {"type": "string", "description": "The criteria to sort the results on.", "enum": ["popularity", "chronological", "alphabetical"]}}, "required": ["number"]}}, "human_eval_answer": "metropolitan_museum.get_top_artworks(number=5, sort_by='popularity')", "question_type": "simple"}
{"question": "Get the working hours of Louvre Museum in Paris.", "function": {"name": "museum_working_hours.get", "description": "Get the working hours of a museum in a specific location.", "parameters": {"type": "object", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The location of the museum."}, "day": {"type": "string", "description": "Specific day of the week. Optional parameter"}}, "required": ["museum", "location"]}}, "human_eval_answer": "museum_working_hours.get(museum=\"Louvre Museum\", location=\"Paris\")", "question_type": "simple"}
{"question": "Find the working hours and ticket price of The British Museum for this weekend.", "function": {"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "object", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}, "human_eval_answer": "museum_info(museum='The British Museum', date='this weekend', information=['opening_hours', 'ticket_price'])", "question_type": "simple"}
{"question": "Find me the average price and ratings of piano from Yamaha.", "function": {"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "object", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument."}}, "required": ["instrument", "manufacturer"]}}, "human_eval_answer": "get_instrument_details(instrument='piano', manufacturer='Yamaha', features=['price','rating'])", "question_type": "simple"}
{"question": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?", "function": {"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "object", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}, "human_eval_answer": "instrument_price.get(brand='Fender', model='American Professional II Stratocaster', finish='Rosewood')", "question_type": "simple"}
{"question": "Find a Violin within my budget of $1000 with acoustic type.", "function": {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "object", "properties": {"budget": {"type": "number", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter."}}, "required": ["budget", "type"]}}, "human_eval_answer": "find_instrument(budget=1000, type='acoustic', make='Violin')", "question_type": "simple"}
{"question": "Find the details about the musical instrument 'Violin' from 'Stradivarius' maker, made in the year 1721.", "function": {"name": "get_instrument_info", "description": "Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the instrument."}, "maker": {"type": "string", "description": "The name of the maker who created the instrument."}, "year": {"type": "integer", "description": "The year the instrument was made."}}, "required": ["name", "maker", "year"]}}, "human_eval_answer": "get_instrument_info(name='Violin', maker='Stradivarius', year=1721)", "question_type": "simple"}
{"question": "Find a Yamaha flute with the specifications of open hole, C foot, and silver headjoint available for sale.", "function": {"name": "find_flute", "description": "Locate a flute for sale based on specific requirements.", "parameters": {"type": "object", "properties": {"brand": {"type": "string", "description": "The brand of the flute. Example, 'Yamaha'"}, "specs": {"type": "array", "items": {"type": "string", "enum": ["open hole", "C foot", "silver headjoint"]}, "description": "The specifications of the flute desired."}}, "required": ["brand", "specs"]}}, "human_eval_answer": "find_flute(brand='Yamaha', specs=['open hole', 'C foot', 'silver headjoint'])", "question_type": "simple"}
{"question": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area.", "function": {"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "object", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}, "human_eval_answer": "guitar_price.find(model=\"Gibson Les Paul\", condition=\"Excellent\", location=\"Chicago\")", "question_type": "simple"}
{"question": "Get information about the pop concerts in New York for next month.", "function": {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}, "human_eval_answer": "concert_info.get(location='New York', date='next month', genre='Pop')", "question_type": "simple"}
{"question": "Find me a Rock concert in Chicago with ticket availability under $100.", "function": {"name": "find_concert", "description": "Locate a concert in a specified location within a certain budget.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you are looking for a concert."}, "price": {"type": "integer", "description": "Maximum ticket price."}, "genre": {"type": "string", "description": "Music genre of the concert.", "enum": ["Rock", "Pop", "Country", "Jazz", "Classical"]}}, "required": ["location", "price"]}}, "human_eval_answer": "find_concert(location='Chicago', price=100, genre='Rock')", "question_type": "simple"}
{"question": "Get concert details for the artist Beyonce performing in San Diego April 2022.", "function": {"name": "concert.get_details", "description": "Fetch the details for a particular concert based on the artist and location.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "Name of the artist/band who's performing."}, "location": {"type": "string", "description": "City where the concert is taking place."}, "date": {"type": "string", "description": "Date of the concert in 'mm-yyyy' format."}}, "required": ["artist", "location"]}}, "human_eval_answer": "concert.get_details(artist='Beyonce', location='San Diego', date='04-2022')", "question_type": "simple"}
{"question": "Find me a classical concert this weekend in Los Angeles with cheap tickets.", "function": {"name": "concert.search", "description": "Locate a concert based on specific criteria like genre, location, and date.", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "Genre of the concert."}, "location": {"type": "string", "description": "City of the concert."}, "date": {"type": "string", "description": "Date of the concert, e.g. this weekend, today, tomorrow, or date string."}, "price_range": {"type": "string", "enum": ["free", "cheap", "moderate", "expensive"], "description": "Expected price range of the concert tickets."}}, "required": ["genre", "location", "date"]}}, "human_eval_answer": "concert.search(genre='classical', location='Los Angeles', date='this weekend', price_range='cheap')", "question_type": "simple"}
{"question": "Get me two tickets for next Eminem concert in New York City.", "function": {"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}, "human_eval_answer": "concert_booking.book_ticket(artist='Eminem', city='New York City', num_tickets=2)", "question_type": "simple"}
{"question": "Find concerts near me in Seattle that plays jazz music.", "function": {"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "genre": {"type": "string", "description": "Genre of music to be played at the concert."}}, "required": ["location", "genre"]}}, "human_eval_answer": "concert.find_nearby(location='Seattle', genre='Jazz')", "question_type": "simple"}
{"question": "What's the timing and location for The Weeknd's concert happening in December?", "function": {"name": "concert.find_details", "description": "Finds details of a concert event.", "parameters": {"type": "object", "properties": {"artist": {"type": "string", "description": "Name of the artist performing."}, "month": {"type": "string", "description": "Month in which the concert is happening."}, "year": {"type": "integer", "description": "Year of the concert.", "default": 2022}}, "required": ["artist", "month"]}}, "human_eval_answer": "concert.find_details(artist='The Weeknd', month='December')", "question_type": "simple"}
{"question": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute.", "function": {"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}, "human_eval_answer": "music_generator.generate_melody(key='C', start_note='C4', length=16, tempo=120)", "question_type": "simple"}
{"question": "Compose a simple piano melody with a progression of C, F and G for 4 measures.", "function": {"name": "compose_melody", "description": "Compose a melody using the specified chord progression for a certain number of measures on specified instrument.", "parameters": {"type": "object", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The progression of chords."}, "measures": {"type": "integer", "description": "The number of measures of the melody."}, "instrument": {"type": "string", "description": "The instrument for the composition. Default is 'Piano'."}}, "required": ["progression", "measures"]}}, "human_eval_answer": "compose_melody(progression=['C', 'F', 'G'], measures=4, instrument='Piano')", "question_type": "simple"}
{"question": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes.", "function": {"name": "music_composer.create_mix", "description": "Create a mix of a song based on a particular music scale and duration", "parameters": {"type": "object", "properties": {"scale": {"type": "string", "description": "The musical scale to be used. E.g: C Major, A Minor, etc."}, "note_duration": {"type": "string", "description": "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.", "enum": ["whole", "half", "quarter", "eighth", "sixteenth"]}, "track_length": {"type": "integer", "description": "Length of the mix track in seconds."}}, "required": ["scale", "note_duration", "track_length"]}}, "human_eval_answer": "music_composer.create_mix(scale='C Major', note_duration='quarter', track_length=180)", "question_type": "simple"}
{"question": "Generate a major chord progression in C key with four chords.", "function": {"name": "music_generation.create_chord_progression", "description": "Create a chord progression in a specific key and number of chords.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key for the chord progression."}, "chords": {"type": "integer", "description": "Number of chords in the progression."}, "progression_type": {"type": "string", "description": "The type of the chord progression. Optional parameter. Default is 'major'."}}, "required": ["key", "chords"]}}, "human_eval_answer": "music_generation.create_chord_progression(key='C', chords=4, progression_type='major')", "question_type": "simple"}
{"question": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen.", "function": {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "object", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, "human_eval_answer": "get_song_lyrics(song_title='Bohemian Rhapsody', artist_name='Queen')", "question_type": "simple"}
{"question": "Generate a major C scale progression with tempo 80 BPM and duration 4 beats.", "function": {"name": "music_generator.generate_scale_progression", "description": "Generate a music scale progression in a specific key with a given tempo and duration.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key in which to generate the scale progression."}, "tempo": {"type": "integer", "description": "The tempo of the scale progression in BPM."}, "duration": {"type": "integer", "description": "The duration of each note in beats."}, "scale_type": {"type": "string", "default": "major", "description": "The type of scale to generate. Defaults to 'major'."}}, "required": ["key", "tempo", "duration"]}}, "human_eval_answer": "music_generator.generate_scale_progression(key='C', tempo=80, duration=4, scale_type='major')", "question_type": "simple"}
{"question": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])", "function": {"name": "music.theory.chordProgression", "description": "Identifies a potential key signature for the given chord progression.", "parameters": {"type": "object", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, "returnAllPossibleKeys": {"type": "boolean", "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."}, "assumeMajor": {"type": "boolean", "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."}}, "required": ["progression"]}}, "human_eval_answer": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])", "question_type": "simple"}
{"question": "What key signature does C# major have?", "function": {"name": "music_theory.key_signature", "description": "Return the key signature of a major or minor scale.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The root of the scale, e.g., 'C', 'F#', 'Ab'."}, "scale_type": {"type": "string", "enum": ["major", "minor"], "description": "Type of the scale, either 'major' or 'minor'. Default is 'major'."}}, "required": ["key"]}}, "human_eval_answer": "music_theory.key_signature(key='C#', scale_type='major')", "question_type": "simple"}
{"question": "What is the musical scale associated with C sharp major?", "function": {"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}, "human_eval_answer": "musical_scale(key='C#', scale_type='major')", "question_type": "simple"}
{"question": "Calculate the duration between two notes of 440Hz and 880Hz frequency based on harmonic rhythm.", "function": {"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "object", "properties": {"first_note_frequency": {"type": "number", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "number", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "number", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}, "human_eval_answer": "music.calculate_note_duration(first_note_frequency=440, second_note_frequency=880)", "question_type": "simple"}
{"question": "What is the third major chord in C major scale?", "function": {"name": "get_third_chord", "description": "Calculate the third major chord in a given key.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key of the scale."}, "type": {"type": "string", "description": "Type of the scale, either major or minor."}}, "required": ["key"]}}, "human_eval_answer": "get_third_chord(key='C', type='major')", "question_type": "simple"}
{"question": "Calculate the batting average for a baseball player who has 180 hits and 600 at-bats. Round to 3 decimals.", "function": {"name": "calculate_batting_average", "description": "Calculate the batting average for a baseball player based on their number of hits and at-bats.", "parameters": {"type": "object", "properties": {"hits": {"type": "integer", "description": "The number of hits."}, "at_bats": {"type": "integer", "description": "The number of at-bats."}, "decimal_places": {"type": "integer", "description": "The number of decimal places to return in the batting average. Default is 3."}}, "required": ["hits", "at_bats"]}}, "human_eval_answer": "calculate_batting_average(hits=180, at_bats=600, decimal_places=3)", "question_type": "simple"}
{"question": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season", "function": {"name": "soccer_stat.get_player_stats", "description": "Retrieve soccer player statistics for a given season.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "season": {"type": "string", "description": "Soccer season, usually specified by two years."}, "league": {"type": "string", "description": "Optional - the soccer league, defaults to all leagues."}}, "required": ["player_name", "season"]}}, "human_eval_answer": "soccer_stat.get_player_stats(player_name='Cristiano Ronaldo', season='2019-2020')", "question_type": "simple"}
{"question": "Get point and rebound stats for player 'LeBron James' from last basketball game", "function": {"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned"}}, "required": ["player_name", "team"]}}, "human_eval_answer": "player_stats.getLastGame(player_name='LeBron James', team='Los Angeles Lakers', metrics=['Points', 'Rebounds'])", "question_type": "simple"}
{"question": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season", "function": {"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible."}}, "required": ["player_name", "tournament", "season"]}}, "human_eval_answer": "sports_stats.get_performance(player_name='Messi', tournament='La Liga', season='2020-2021', performance_indicator=['Goals Scored', 'Assists Made'])", "question_type": "simple"}
{"question": "Find average batting score of a cricketer, Virat Kohli for past 10 matches", "function": {"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}, "human_eval_answer": "average_batting_score(player_name='Virat Kohli', matches=10)", "question_type": "simple"}
{"question": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?", "function": {"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "object", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game."}}, "required": ["teams", "date"]}}, "human_eval_answer": "game_result.get_winner(teams=['Lakers', 'Clippers'], date='2021-01-28')", "question_type": "simple"}
{"question": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "function": {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter."}}, "required": ["team_name", "num_matches"]}}, "human_eval_answer": "sports.match_schedule(team_name=\"Manchester United\", num_matches=5, league=\"English Premier League\")", "question_type": "simple"}
{"question": "Find me the record of Tom Brady in the 2020 NFL season.", "function": {"name": "nfl_data.player_record", "description": "Retrieve the record of an NFL player in a specified season.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The name of the NFL player."}, "season_year": {"type": "integer", "description": "The year of the NFL season."}, "team": {"type": "string", "description": "The NFL team that the player played for in that season."}}, "required": ["player_name", "season_year"]}}, "human_eval_answer": "nfl_data.player_record(player_name='Tom Brady', season_year=2020)", "question_type": "simple"}
{"question": "What are the career stats of basketball player LeBron James?", "function": {"name": "get_career_stats", "description": "Retrieve the career statistics of a basketball player based on the player's name.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that the player currently plays for or has played for (Optional)."}}, "required": ["player_name"]}}, "human_eval_answer": "get_career_stats(player_name='LeBron James')", "question_type": "simple"}
{"question": "Find me the detailed profile of basketball player Lebron James", "function": {"name": "sports_db.find_athlete", "description": "Find the profile information of a sports athlete based on their full name.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The full name of the athlete."}, "team": {"type": "string", "description": "The team the athlete belongs to."}, "sport": {"type": "string", "description": "The sport that athlete plays.", "enum": ["Basketball", "Baseball", "Football", "Soccer"]}}, "required": ["name", "sport"]}}, "human_eval_answer": "sports_db.find_athlete(name=\"Lebron James\", sport=\"Basketball\")", "question_type": "simple"}
{"question": "What are the statistics of Ronaldo's matches in 2021?", "function": {"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional)."}}, "required": ["player_name", "year"]}}, "human_eval_answer": "player_statistic(player_name='Ronaldo', year=2021)", "question_type": "simple"}
{"question": "What's the total worth in euro of Messi according to latest data?", "function": {"name": "celebrity_net_worth.get", "description": "Get the total net worth of a sports celebrity based on most recent data.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The full name of the sports celebrity."}, "currency": {"type": "string", "description": "The currency in which the net worth will be returned. Default is 'USD'."}}, "required": ["name", "currency"]}}, "human_eval_answer": "celebrity_net_worth.get(name='Lionel Messi', currency='EUR')", "question_type": "simple"}
{"question": "Find all the major achievements of the footballer Lionel Messi.", "function": {"name": "sports_celebrity.get_major_achievements", "description": "Returns a list of major achievements of a particular sports celebrity.", "parameters": {"type": "object", "properties": {"celebrity_name": {"type": "string", "description": "Name of the sports celebrity."}, "sports": {"type": "string", "description": "Type of sports the celebrity involved in. Default is Football."}, "team": {"type": "string", "description": "Optional. Team where celebrity currently plays."}}, "required": ["celebrity_name"]}}, "human_eval_answer": "sports_celebrity.get_major_achievements(celebrity_name='Lionel Messi', sports='Football')", "question_type": "simple"}
{"question": "Get the NBA team's ranking with the best defence in the 2021 season.", "function": {"name": "get_defense_ranking", "description": "Retrieve the defence ranking of NBA teams in a specified season.", "parameters": {"type": "object", "properties": {"season": {"type": "integer", "description": "The NBA season to get defence ranking from."}, "top": {"type": "integer", "default": 1, "description": "Number of top teams in defence ranking to fetch."}}, "required": ["season"]}}, "human_eval_answer": "get_defense_ranking(season=2021, top=1)", "question_type": "simple"}
{"question": "Find the current world rank of a Tennis player, Serena Williams.", "function": {"name": "get_sport_ranking", "description": "Retrieve the current world ranking of a sportsperson based on the sport and player's name.", "parameters": {"type": "object", "properties": {"sport": {"type": "string", "description": "Name of the sport."}, "player_name": {"type": "string", "description": "Name of the player."}, "gender": {"type": "string", "description": "Gender of the player. This is optional. The possible values are male or female.", "default": "all"}}, "required": ["sport", "player_name"]}}, "human_eval_answer": "get_sport_ranking(sport='Tennis', player_name='Serena Williams')", "question_type": "simple"}
{"question": "Find the ranking of LA Lakers in the NBA 2021 regular season.", "function": {"name": "get_team_rank", "description": "Get the team ranking in a sports league based on season and type.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The name of the league in which the team competes."}, "season": {"type": "string", "description": "The season for which the team's ranking is sought."}, "type": {"type": "string", "description": "Type of the season: regular or playoff.", "enum": ["regular", "playoff"]}}, "required": ["team_name", "league", "season", "type"]}}, "human_eval_answer": "get_team_rank(team_name='LA Lakers', league='NBA', season='2021', type='regular')", "question_type": "simple"}
{"question": "What is the FIFA ranking of Germany's men soccer team for the year 2021?", "function": {"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}, "human_eval_answer": "get_team_ranking(team_name='Germany', year=2021, gender='men')", "question_type": "simple"}
{"question": "What is the ranking of Manchester United in Premier League?", "function": {"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season."}}, "required": ["team", "league"]}}, "human_eval_answer": "sports_ranking(team='Manchester United', league='Premier League')", "question_type": "simple"}
{"question": "Fetch the basketball league standings, where Golden State Warriors stand in current season with details", "function": {"name": "sports_ranking.get_team_position", "description": "Retrieve a team's position and stats in the basketball league for a given season.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the team."}, "season": {"type": "string", "description": "The season for which data should be fetched."}, "detailed": {"type": "boolean", "description": "Flag to retrieve detailed stats or just the position.", "default": false}}, "required": ["team", "season"]}}, "human_eval_answer": "sports_ranking.get_team_position(team=\"Golden State Warriors\", season=\"current\", detailed=True)", "question_type": "simple"}
{"question": "What's the ranking of Barcelona in the 2021 La Liga season?", "function": {"name": "sports_ranking", "description": "Get the ranking of a team in a given sports league and season.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the sports league."}, "season": {"type": "string", "description": "The season for which ranking needs to be obtained."}}, "required": ["team", "league", "season"]}}, "human_eval_answer": "sports_ranking(team=\"Barcelona\", league=\"La Liga\", season=\"2021\")", "question_type": "simple"}
{"question": "Get the current ranking for Liverpool Football Club in the Premier League.", "function": {"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season if not provided."}}, "required": ["team", "league"]}}, "human_eval_answer": "sports_ranking.get_current(team='Liverpool Football Club', league='Premier League')", "question_type": "simple"}
{"question": "Who is ranked as the top player in woman tennis?", "function": {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "object", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}, "human_eval_answer": "sports_ranking.get_top_player(sport='tennis', gender='women')", "question_type": "simple"}
{"question": "Find the score of last game for Los Angeles Lakers including its opponent name.", "function": {"name": "team_score.get_latest", "description": "Retrieve the score of the most recent game for a specified sports team.", "parameters": {"type": "object", "properties": {"team": {"type": "string", "description": "Name of the sports team."}, "include_opponent": {"type": "boolean", "description": "Include the name of the opponent team in the return.", "default": "false"}}, "required": ["team"]}}, "human_eval_answer": "team_score.get_latest(team=\"Los Angeles Lakers\", include_opponent=true)", "question_type": "simple"}
{"question": "Who won the last match between Chicago Bulls and Los Angeles Lakers?", "function": {"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "object", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}, "human_eval_answer": "sports.match_results(team1='Chicago Bulls', team2='Los Angeles Lakers')", "question_type": "simple"}
{"question": "Get the latest game score and statistics for Los Angeles Lakers in NBA.", "function": {"name": "get_team_score", "description": "Retrieves the latest game score, individual player stats, and team stats for a specified sports team.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The league that the team is part of."}, "include_player_stats": {"type": "boolean", "default": false, "description": "Indicates if individual player statistics should be included in the result. Default is false."}}, "required": ["team_name", "league"]}}, "human_eval_answer": "get_team_score(team_name='Los Angeles Lakers', league='NBA')", "question_type": "simple"}
{"question": "Give me the schedule of Manchester United for the next 6 games in Premier League.", "function": {"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}, "human_eval_answer": "sports_team.get_schedule(team_name='Manchester United', num_of_games=6, league='Premier League')", "question_type": "simple"}
{"question": "Find the rating and player count of the board game 'Ticket to Ride'.", "function": {"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}, "human_eval_answer": "boardgame.get_info(name='Ticket to Ride', parameters=['rating', 'player count'])", "question_type": "simple"}
{"question": "Calculate the odds of rolling a 7 with two dice in the board game Monopoly.", "function": {"name": "monopoly_odds_calculator", "description": "Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number for which the odds are calculated."}, "dice_number": {"type": "integer", "description": "The number of dice involved in the roll."}, "dice_faces": {"type": "integer", "description": "The number of faces on a single die. Default is 6 for standard six-faced die."}}, "required": ["number", "dice_number"]}}, "human_eval_answer": "monopoly_odds_calculator(number=7, dice_number=2)", "question_type": "simple"}
{"question": "What's the average review rating and the age range for the board game 'Catan'?", "function": {"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}, "human_eval_answer": "board_game_info(game_name='Catan', info_required=['average_review_rating', 'age_range'])", "question_type": "simple"}
{"question": "Find the top chess players in New York with a rating above 2300.", "function": {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, "human_eval_answer": "board_game.chess.get_top_players(location=\"New York\", minimum_rating=2300)", "question_type": "simple"}
{"question": "What's the chess classical rating of Magnus Carlsen?", "function": {"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, "human_eval_answer": "chess.rating(player_name='Magnus Carlsen', variant='classical')", "question_type": "simple"}
{"question": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days.", "function": {"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}, "human_eval_answer": "detailed_weather_forecast(location='London, United Kingdom', days=3, details=['high_low_temperature', 'humidity', 'precipitation'])", "question_type": "simple"}
{"question": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1.", "function": {"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "object", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}, "human_eval_answer": "blackjack.check_winner(player_cards=['A', '10'], dealer_cards=['10', '9'], ace_value=1)", "question_type": "simple"}
{"question": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck.", "function": {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "object", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "object", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}}, "required": ["rank", "suit"]}}, "human_eval_answer": "find_card_in_deck(rank='Queen', suit='Hearts')", "question_type": "simple"}
{"question": "Shuffle a deck of cards, and draw 3 cards from the top.", "function": {"name": "cards.shuffle_and_draw", "description": "Shuffle a standard deck of 52 cards and draw a specified number of cards from the top.", "parameters": {"type": "object", "properties": {"num_cards": {"type": "integer", "description": "Number of cards to be drawn. The default is 1 if no value is provided."}}, "required": ["num_cards"]}}, "human_eval_answer": "cards.shuffle_and_draw(num_cards=3)", "question_type": "simple"}
{"question": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "function": {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "object", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "object", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}, "human_eval_answer": "poker_game_winner(players=['Alex', 'Sam', 'Robert', 'Steve'], cards={'Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']}, type='Texas Holdem')", "question_type": "simple"}
{"question": "What is the probability of drawing a heart card from a deck of 52 cards?", "function": {"name": "card_game_probability.calculate", "description": "Calculate the probability of drawing a certain card or suit from a deck of cards.", "parameters": {"type": "object", "properties": {"total_cards": {"type": "integer", "description": "Total number of cards in the deck."}, "desired_cards": {"type": "integer", "description": "Number of cards in the deck that satisfy the conditions."}, "cards_drawn": {"type": "integer", "default": 1, "description": "Number of cards drawn from the deck."}}, "required": ["total_cards", "desired_cards"]}}, "human_eval_answer": "card_game_probability.calculate(total_cards=52, desired_cards=13)", "question_type": "simple"}
{"question": "What is the probability of getting a full house in poker?", "function": {"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "object", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, "human_eval_answer": "poker_probability.full_house(deck_size=52, hand_size=5)", "question_type": "simple"}
{"question": "Determine the winner in a Poker game with John having a Hand of 8\u2665, 10\u2665, J\u2665, Q\u2665, K\u2665 and Mike having 9\u2660, J\u2660, 10\u2660, Q\u2660, K\u2660.", "function": {"name": "card_games.poker_determine_winner", "description": "Determines the winner in a game of Poker based on the cards in each players' hands.", "parameters": {"type": "object", "properties": {"player1": {"type": "string", "description": "The first player's name."}, "hand1": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']"}, "player2": {"type": "string", "description": "The second player's name."}, "hand2": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']"}}, "required": ["player1", "hand1", "player2", "hand2"]}}, "human_eval_answer": "card_games.poker_determine_winner(player1='John', hand1=['8\u2665', '10\u2665', 'J\u2665', 'Q\u2665', 'K\u2665'], player2='Mike', hand2=['9\u2660', 'J\u2660', '10\u2660', 'Q\u2660', 'K\u2660'])", "question_type": "simple"}
{"question": "What are the odds of drawing a heart card from a deck without joker?", "function": {"name": "deck_of_cards.odds", "description": "Compute the probability of drawing a specific suit from a given deck of cards.", "parameters": {"type": "object", "properties": {"suit": {"type": "string", "description": "The card suit. Valid values include: 'spades', 'clubs', 'hearts', 'diamonds'."}, "deck_type": {"type": "string", "description": "Type of deck, normal deck includes joker, and without_joker deck excludes joker.", "default": "normal"}}, "required": ["suit", "deck_type"]}}, "human_eval_answer": "deck_of_cards.odds(suit='hearts', deck_type='without_joker')", "question_type": "simple"}
{"question": "Find all multi-player games released in 2019 with an ESRB rating of 'Everyone'", "function": {"name": "game_list.get_games", "description": "Get a list of video games based on release year, multiplayer functionality and ESRB rating", "parameters": {"type": "object", "properties": {"release_year": {"type": "integer", "description": "The year the game was released."}, "multiplayer": {"type": "boolean", "description": "Whether the game has multiplayer functionality."}, "ESRB_rating": {"type": "string", "description": "The ESRB rating of the game."}}, "required": ["release_year", "multiplayer", "ESRB_rating"]}}, "human_eval_answer": "game_list.get_games(release_year=2019, multiplayer=true, ESRB_rating='Everyone')", "question_type": "simple"}
{"question": "Fetch player statistics of 'Zelda' on Switch for user 'Sam'.", "function": {"name": "game_stats.fetch_player_statistics", "description": "Fetch player statistics for a specific video game for a given user.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the video game."}, "username": {"type": "string", "description": "The username of the player."}, "platform": {"type": "string", "description": "The platform user is playing on.", "default": "PC"}}, "required": ["game", "username"]}}, "human_eval_answer": "game_stats.fetch_player_statistics(game='Zelda', username='Sam', platform='Switch')", "question_type": "simple"}
{"question": "What's the power rating for the Weapon 'Guardian Sword+' in the game 'Legend of Zelda: Breath of the Wild'?", "function": {"name": "get_game_item_stats", "description": "Retrieve the statistics of a specific item in a specific video game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The game to retrieve information from."}, "item": {"type": "string", "description": "The name of the item in the game."}, "stat": {"type": "string", "description": "Specific statistic required."}}, "required": ["game", "item", "stat"]}}, "human_eval_answer": "get_game_item_stats(game='Legend of Zelda: Breath of the Wild', item='Guardian Sword+', stat='Power')", "question_type": "simple"}
{"question": "Find the value of a vintage Super Mario Bros. game from 1985 like new.", "function": {"name": "game_valuation", "description": "Get the current market value of a vintage video game.", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "release_year": {"type": "integer", "description": "The year the game was released."}, "condition": {"type": "string", "enum": ["New", "Like New", "Used", "Fair", "Poor"], "description": "The condition of the game. Default is 'Used'."}}, "required": ["game_name", "release_year"]}}, "human_eval_answer": "game_valuation(game_name=\"Super Mario Bros.\", release_year=1985, condition=\"Like New\")", "question_type": "simple"}
{"question": "Get all collectable items from the game 'Animal Crossing: New Horizons' during the Spring season.", "function": {"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}, "human_eval_answer": "get_collectables_in_season(game_name='Animal Crossing: New Horizons', season='Spring')", "question_type": "simple"}
{"question": "Get me the details of the last game played by Liverpool F.C. Include its statistics.", "function": {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "object", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}, "human_eval_answer": "soccer.get_last_match(team_name=\"Liverpool F.C.\", include_stats=true)", "question_type": "simple"}
{"question": "Create a new player profile for the game with name 'StarPlayer' and character class 'Mage', set the starting level to 5.", "function": {"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "object", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "_class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "_class"]}}, "human_eval_answer": "create_player_profile(player_name='StarPlayer', _class='Mage', starting_level=5)", "question_type": "simple"}
{"question": "Find the highest score achieved by any player in the online game 'Overwatch' on PC globally.", "function": {"name": "game_score.highest", "description": "Retrieve the highest score achieved by any player in a specific game.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The name of the online game."}, "platform": {"type": "string", "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"}, "region": {"type": "string", "description": "The geographic region of the player. Defaults to 'Global'"}}, "required": ["game", "platform"]}}, "human_eval_answer": "game_score.highest(game='Overwatch', platform='PC', region='Global')", "question_type": "simple"}
{"question": "Get the highest scoring player of game 'Valorant' in 2022 season.", "function": {"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "object", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}, "region": {"type": "string", "description": "The geographical region in which the game is being played (Optional)."}}, "required": ["game", "season"]}}, "human_eval_answer": "get_highest_scoring_player(game='Valorant', season=2022)", "question_type": "simple"}
{"question": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10.", "function": {"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "object", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "number", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}, "human_eval_answer": "multiplayer_game_finder(platform='Windows 10', rating=4.5)", "question_type": "simple"}
{"question": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot.", "function": {"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "object", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}, "human_eval_answer": "gamespot.getAverageUserScore(game_name='The Legend of Zelda: Breath of the Wild', platform='Nintendo Switch')", "question_type": "simple"}
{"question": "What are some gluten-free recipes for dinner?", "function": {"name": "find_recipes", "description": "Find recipes based on dietary restrictions, meal type, and preferred ingredients.", "parameters": {"type": "object", "properties": {"diet": {"type": "string", "description": "The dietary restrictions, e.g., 'vegan', 'gluten-free'."}, "meal_type": {"type": "string", "description": "The type of meal, e.g., 'dinner', 'breakfast'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The preferred ingredients. If left blank, it will return general recipes."}}, "required": ["diet", "meal_type"]}}, "human_eval_answer": "find_recipes(diet='gluten-free', meal_type='dinner')", "question_type": "simple"}
{"question": "Find a vegan soup recipe that takes under 30 minutes to make.", "function": {"name": "get_vegan_recipe", "description": "Retrieve a vegan soup recipe based on the provided cooking time.", "parameters": {"type": "object", "properties": {"dish_type": {"type": "string", "description": "The type of dish, e.g. soup, dessert, etc.", "enum": ["soup", "main dish", "dessert", "salad"]}, "cooking_time": {"type": "integer", "description": "The maximum cooking time for the recipe in minutes."}, "ingredient_preference": {"type": "array", "items": {"type": "string"}, "description": "Preferred ingredients to be included in the recipe, if any."}}, "required": ["dish_type", "cooking_time"]}}, "human_eval_answer": "get_vegan_recipe(dish_type='soup', cooking_time=30,ingredient_preference=['vegan'])", "question_type": "simple"}
{"question": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "function": {"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "object", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner')"}}, "required": ["website", "recipe"]}}, "human_eval_answer": "recipe_info.get_calories(website='Foodnetwork.com', recipe='Beef Lasagna')", "question_type": "simple"}
{"question": "Find me a recipe that serves 2 people, is vegan, and takes under 30 minutes to prepare.", "function": {"name": "recipe_finder.find", "description": "Find a recipe based on dietary preferences, number of servings, and preparation time.", "parameters": {"type": "object", "properties": {"servings": {"type": "integer", "description": "The number of people that the recipe should serve."}, "diet": {"type": "string", "description": "Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc."}, "prep_time": {"type": "integer", "description": "The maximum amount of time (in minutes) the preparation should take."}}, "required": ["servings", "diet"], "optional": ["prep_time"]}}, "human_eval_answer": "recipe_finder.find(servings=2, diet='vegan', prep_time=30)", "question_type": "simple"}
{"question": "Get the recipe for vegan chocolate cake including the steps for preparation.", "function": {"name": "get_recipe", "description": "Fetch the recipe for a specific dish along with preparation steps.", "parameters": {"type": "object", "properties": {"dish_name": {"type": "string", "description": "Name of the dish whose recipe needs to be fetched."}, "diet_preference": {"type": "string", "description": "Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none.", "default": "none"}}, "required": ["dish_name"]}}, "human_eval_answer": "get_recipe(dish_name=\"chocolate cake\", diet_preference=\"vegan\")", "question_type": "simple"}
{"question": "Find a gluten-free cookie recipe that takes less than 30 minutes to prepare.", "function": {"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "object", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for."}}, "required": ["dish", "diet"]}}, "human_eval_answer": "recipe_search(dish='cookie', diet=['Gluten Free'], time_limit=30)", "question_type": "simple"}
{"question": "Give me a recipe for a vegetarian pasta with cheese for 2 servings.", "function": {"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "object", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}, "human_eval_answer": "recipe_search(dietary_restriction='Vegetarian', ingredients=['pasta', 'cheese'], servings=2)", "question_type": "simple"}
{"question": "Find a recipe for pasta carbonara which contains only less than 500 calories.", "function": {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "object", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}, "human_eval_answer": "find_recipe(recipeName='pasta carbonara', maxCalories=500)", "question_type": "simple"}
{"question": "Find Italian restaurants near New York city that serves gluten-free options.", "function": {"name": "restaurant_finder", "description": "Locate restaurants based on certain criteria such as cuisine, city, and dietary preferences.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "City where you are looking for the restaurant."}, "cuisine": {"type": "string", "description": "Type of cuisine you are interested in."}, "diet": {"type": "string", "description": "Dietary preferences. e.g. 'Vegetarian', 'Gluten-free', etc."}}, "required": ["city", "cuisine"]}}, "human_eval_answer": "restaurant_finder(city='New York', cuisine='Italian', diet='Gluten-free')", "question_type": "simple"}
{"question": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?", "function": {"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "number", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned."}}, "required": ["city", "top"]}}, "human_eval_answer": "get_best_sushi_places(city='Tokyo', top=5, review_rate=4.5)", "question_type": "simple"}
{"question": "Find the closest sushi restaurant with a patio in Boston.", "function": {"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant."}}, "required": ["location", "cuisine"]}}, "human_eval_answer": "restaurant_search.find_closest(location=\"Boston\", cuisine=\"Sushi\", amenities=[\"Patio\"])", "question_type": "simple"}
{"question": "Can I find an Italian restaurant with Gluten-free options near Brooklyn?", "function": {"name": "find_restaurant", "description": "Locate nearby restaurants based on user defined criteria", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location where user wants to search for a restaurant."}, "type": {"type": "string", "description": "The type of the cuisine/restaurant."}, "diet_option": {"type": "string", "description": "Special dietary preferences."}}, "required": ["location", "type", "diet_option"]}}, "human_eval_answer": "find_restaurant(location='Brooklyn', type='Italian', diet_option='Gluten-free')", "question_type": "simple"}
{"question": "How many ounces in 2 pounds of butter?", "function": {"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "object", "properties": {"quantity": {"type": "number", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}, "human_eval_answer": "cooking_conversion.convert(quantity=2, from_unit='pound', to_unit='ounce', item='butter')", "question_type": "simple"}
{"question": "How many teaspoons are in 2 tablespoons for accurate measurement in my recipe?", "function": {"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "object", "properties": {"value": {"type": "number", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 0."}}, "required": ["value", "from_unit", "to_unit"]}}, "human_eval_answer": "recipe.unit_conversion(value=2, from_unit='tablespoon', to_unit='teaspoon')", "question_type": "simple"}
{"question": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "function": {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "object", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "number", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}, "human_eval_answer": "find_recipe(dietary_restrictions=\"vegan\", recipe_type=\"brownies\", time=30)", "question_type": "simple"}
{"question": "How much time will it take to cook a roast chicken of 1.5 kg?", "function": {"name": "calculate_cooking_time", "description": "Calculate the cooking time for a roast chicken.", "parameters": {"type": "object", "properties": {"weight_kg": {"type": "number", "description": "The weight of the chicken in kilograms."}, "cooking_method": {"type": "string", "description": "The method of cooking, defaults to 'roast'."}, "temp_celsius": {"type": "number", "description": "The cooking temperature in degrees celsius, defaults to 180."}}, "required": ["weight_kg"]}}, "human_eval_answer": "calculate_cooking_time(weight_kg=1.5)", "question_type": "simple"}
{"question": "Find a grocery store near me with organic fruits and vegetables in Houston.", "function": {"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store."}}, "required": ["location"]}}, "human_eval_answer": "grocery_store.find_nearby(location=\"Houston\", categories=[\"Organic\", \"Vegetables\", \"Fruits\"])", "question_type": "simple"}
{"question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}, "human_eval_answer": "safeway.order(location='Palo Alto', items=['olive oil', 'rice'], quantity=[3,1])", "question_type": "simple"}
{"question": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles.", "function": {"name": "whole_foods.check_price", "description": "Check the price of items at a specific Whole Foods location.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "Location of the Whole Foods store."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items for which the price needs to be checked."}}, "required": ["location", "items"]}}, "human_eval_answer": "whole_foods.check_price(location='Los Angeles', items=['tomatoes', 'lettuce'])", "question_type": "simple"}
{"question": "Find the top five organic bananas brands on the basis of rating from Whole Foods store.", "function": {"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "object", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "category": {"type": "string", "description": "Category of the product. Default is 'All'"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}, "human_eval_answer": "whole_foods.find_top_brands(product='bananas', number=5, organic=true)", "question_type": "simple"}
{"question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "object", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list."}}, "required": ["loc", "product_list"]}}, "human_eval_answer": "walmart.purchase(loc=\"San Jose\",product_list=[\"apples\", \"rice\", \"bottled water\"], pack_size=[1, 1, 12])", "question_type": "simple"}
{"question": "Check the amount of protein, calories and carbs in an avocado from Walmart.", "function": {"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "object", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}, "human_eval_answer": "grocery_info.nutritional_info(store='Walmart', food='avocado', information=['Protein', 'Calories', 'Carbohydrates'])", "question_type": "simple"}
{"question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "object", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional)."}}, "required": ["items", "quantities"]}}, "human_eval_answer": "walmart.check_price(items=['pumpkins', 'eggs'], quantities=[3, 2], store_location='Los Angeles')", "question_type": "simple"}
{"question": "What time is it currently in London, UK in 24 hour format?", "function": {"name": "time_zone_converter", "description": "Retrieve the current time of a specific city.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city you want to know the current time for."}, "country": {"type": "string", "description": "The country where the city is located."}, "display_format": {"type": "string", "description": "The time display format: '12h' or '24h'. Default is '24h'."}}, "required": ["city", "country"]}}, "human_eval_answer": "time_zone_converter(city='London', country='UK', display_format='24h')", "question_type": "simple"}
{"question": "What is the current time in Sydney, Australia?", "function": {"name": "get_current_time", "description": "Retrieve the current time for a specified city and country.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city for which the current time is to be retrieved."}, "country": {"type": "string", "description": "The country where the city is located."}, "format": {"type": "string", "description": "The format in which the time is to be displayed, optional (defaults to 'HH:MM:SS')."}}, "required": ["city", "country"]}}, "human_eval_answer": "get_current_time(city='Sydney', country='Australia')", "question_type": "simple"}
{"question": "Convert time 3pm from New York time zone to London time zone.", "function": {"name": "timezone.convert", "description": "Convert time from one time zone to another.", "parameters": {"type": "object", "properties": {"time": {"type": "string", "description": "The local time you want to convert, e.g. 3pm"}, "from_timezone": {"type": "string", "description": "The time zone you want to convert from."}, "to_timezone": {"type": "string", "description": "The time zone you want to convert to."}}, "required": ["time", "from_timezone", "to_timezone"]}}, "human_eval_answer": "timezone.convert(time='3pm', from_timezone='America/New_York', to_timezone='Europe/London')", "question_type": "simple"}
{"question": "What's the current time in Sydney, Australia?", "function": {"name": "get_current_time", "description": "Retrieve the current time in a specific time zone.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The name of the city."}, "country": {"type": "string", "description": "The name of the country."}, "timezone": {"type": "string", "description": "The optional timezone to get current time."}}, "required": ["location", "country"]}}, "human_eval_answer": "get_current_time(location='Sydney', country='Australia')", "question_type": "simple"}
{"question": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023.", "function": {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel."}}, "required": ["location", "room_type", "duration", "start_date"]}}, "human_eval_answer": "hotel_booking(location='Manhattan, New York', room_type='single', duration=3, start_date='2023-03-10', preferences=['pet_friendly'])", "question_type": "simple"}
{"question": "Check if any Hilton Hotel is available for two adults in Paris from April 4th to April 8th?", "function": {"name": "hilton_hotel.check_availability", "description": "Check hotel availability for a specific location and time frame.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city where you want to check hotel availability."}, "check_in_date": {"type": "string", "description": "The check-in date in the format YYYY-MM-DD."}, "check_out_date": {"type": "string", "description": "The check-out date in the format YYYY-MM-DD."}, "no_of_adults": {"type": "integer", "description": "The number of adults for the hotel booking."}, "hotel_chain": {"type": "string", "description": "The hotel chain where you want to book the hotel.", "default": "Hilton"}}, "required": ["location", "check_in_date", "check_out_date", "no_of_adults"]}}, "human_eval_answer": "hilton_hotel.check_availability(location='Paris', hotel_chain='Hilton', check_in_date='2023-04-04', check_out_date='2023-04-08', no_of_adults=2)", "question_type": "simple"}
{"question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}, "human_eval_answer": "book_hotel(hotel_name='Hilton Hotel', location='Chicago', room_type='single', start_date='10-12-2022', nights=2)", "question_type": "simple"}
{"question": "I would like to book a single room for two nights at The Plaza hotel.", "function": {"name": "book_room", "description": "Book a room in a specified hotel.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "num_nights": {"type": "integer", "description": "The number of nights to book the room for."}}, "required": ["hotel_name", "room_type", "num_nights"]}}, "human_eval_answer": "book_room(hotel_name='The Plaza', room_type='Single', num_nights=2)", "question_type": "simple"}
{"question": "Book a hotel room for two adults and one child in Paris, France from July 10, 2022 to July 20, 2022.", "function": {"name": "hotel_booking.book", "description": "Book a hotel room given the city, date, and the number of adults and children.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The city where the hotel is located."}, "from_date": {"type": "string", "description": "The start date of the booking. The format is MM-DD-YYYY."}, "to_date": {"type": "string", "description": "The end date of the booking. The format is MM-DD-YYYY."}, "adults": {"type": "integer", "description": "The number of adults for the booking."}, "children": {"type": "integer", "description": "The number of children for the booking."}, "room_type": {"type": "string", "description": "The type of the room, default is 'Standard'. Options are 'Standard', 'Deluxe', 'Suite'.", "default": "Standard"}}, "required": ["city", "from_date", "to_date", "adults", "children"]}}, "human_eval_answer": "hotel_booking.book(city='Paris', from_date='07-10-2022', to_date='07-20-2022', adults=2, children=1, room_type='Deluxe')", "question_type": "simple"}
{"question": "Book a hotel room with king size bed in Los Angeles for 2 nights starting from 15th October,2023.", "function": {"name": "hotel_bookings.book_room", "description": "Book a hotel room based on specific criteria like location, room type, and check-in and check-out dates.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state where you want to book the hotel, e.g. Los Angeles, CA"}, "room_type": {"type": "string", "description": "Preferred type of room in the hotel, e.g. king size, queen size, deluxe, suite etc."}, "check_in_date": {"type": "string", "description": "Check-in date for the hotel. Format - DD-MM-YYYY."}, "no_of_nights": {"type": "integer", "description": "Number of nights for the stay."}, "no_of_rooms": {"type": "integer", "description": "Number of rooms to book. Default is 1.", "default": 1}}, "required": ["location", "room_type", "check_in_date", "no_of_nights"]}}, "human_eval_answer": "hotel_bookings.book_room(location='Los Angeles, CA', room_type='King Size', check_in_date='15-10-2022', no_of_nights=2)", "question_type": "simple"}
{"question": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "function": {"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}, "human_eval_answer": "book_hotel(hotel_name='Hotel Paradise', location='Las Vegas', room_type='luxury', start_date='05-12-2022', stay_duration=3, view='city view')", "question_type": "simple"}
{"question": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "object", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, "human_eval_answer": "hotel_booking(hotel_name='Plaza Hotel', location='New York', start_date='2022-06-01', end_date='2022-06-04', rooms=1)", "question_type": "simple"}
{"question": "How many Canadian dollars can I get for 500 US dollars?", "function": {"name": "currency_exchange.convert", "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "number", "description": "The amount in base currency to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}, "human_eval_answer": "currency_exchange.convert(base_currency='USD', target_currency='CAD', amount=500)", "question_type": "simple"}
{"question": "Calculate the current cost in British Pounds if I need to convert 200 US dollars.", "function": {"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}, "human_eval_answer": "currency_converter(base_currency='USD', target_currency='GBP', amount=200)", "question_type": "simple"}
{"question": "Convert 150 Euros to Canadian dollars.", "function": {"name": "currency_conversion.convert", "description": "Convert a value from one currency to another.", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}, "human_eval_answer": "currency_conversion.convert(amount=150, from_currency='EUR', to_currency='CAD')", "question_type": "simple"}
{"question": "Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included.", "function": {"name": "get_exchange_rate_with_fee", "description": "Retrieve the exchange rate between two currencies including transaction fee.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The base currency."}, "target_currency": {"type": "string", "description": "The target currency."}, "fee": {"type": "number", "description": "The transaction fee in percentage. Default is 0%."}}, "required": ["base_currency", "target_currency", "fee"]}}, "human_eval_answer": "get_exchange_rate_with_fee(base_currency='GBP', target_currency='JPY', fee=0.02)", "question_type": "simple"}
{"question": "Get me the latest exchange rate from British Pounds to Japanese Yen.", "function": {"name": "latest_exchange_rate", "description": "Retrieve the latest exchange rate between two specified currencies.", "parameters": {"type": "object", "properties": {"source_currency": {"type": "string", "description": "The currency you are converting from."}, "target_currency": {"type": "string", "description": "The currency you are converting to."}, "amount": {"type": "number", "description": "The amount to be converted. If omitted, exchange rate of 1 unit source currency is given"}}, "required": ["source_currency", "target_currency"]}}, "human_eval_answer": "latest_exchange_rate(source_currency='GBP', target_currency='JPY')", "question_type": "simple"}
{"question": "How much will 20000 Japanese Yen be in United States Dollar?", "function": {"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}, "human_eval_answer": "convert_currency(base_currency='JPY', target_currency='USD', amount=20000)", "question_type": "simple"}
{"question": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "function": {"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}, "human_eval_answer": "maps.get_distance_duration(start_location='Eiffel Tower', end_location='Louvre Museum')", "question_type": "simple"}
{"question": "Find the nearest parking lot within 2 miles of Central Park in New York.", "function": {"name": "parking_lot.find_nearest", "description": "Locate the nearest parking lot based on a specific location and radius.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The reference location e.g. Central Park, NY"}, "radius": {"type": "integer", "description": "The maximum distance from the location in miles. Default is 5 miles"}, "type": {"type": "string", "description": "The type of parking lot. Default is 'public'."}}, "required": ["location", "radius"]}}, "human_eval_answer": "parking_lot.find_nearest(location='Central Park, NY', radius=2)", "question_type": "simple"}
{"question": "Find a hospital within 5 km radius around Denver, Colorado with pediatrics department.", "function": {"name": "hospital.locate", "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Denver, CO"}, "radius": {"type": "integer", "description": "The radius within which you want to find the hospital in kms."}, "department": {"type": "string", "description": "Specific department within the hospital", "enum": ["General Medicine", "Emergency", "Pediatrics", "Cardiology", "Orthopedics"]}}, "required": ["location", "radius"]}}, "human_eval_answer": "hospital.locate(location='Denver, CO', radius=5, department='Pediatrics')", "question_type": "simple"}
{"question": "Find the distance between New York and Boston, accounting for terrain.", "function": {"name": "distance_calculator.calculate", "description": "Calculate the distance between two locations, considering terrain.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "Starting location of the distance measurement."}, "destination": {"type": "string", "description": "Destination location of the distance measurement."}, "consider_terrain": {"type": "boolean", "description": "Whether to account for terrain in distance calculation, defaults to false."}}, "required": ["origin", "destination"]}}, "human_eval_answer": "distance_calculator.calculate(origin='New York', destination='Boston', consider_terrain=True)", "question_type": "simple"}
{"question": "What are the opening hours of the Metropolitan Museum of Art on Saturday?", "function": {"name": "get_museum_hours", "description": "Retrieve opening hours of a specified museum for the specified day.", "parameters": {"type": "object", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "day": {"type": "string", "description": "Day of the week. If not specified, returns the current day's hours."}}, "required": ["museum_name", "day"]}}, "human_eval_answer": "get_museum_hours(museum_name=\"Metropolitan Museum of Art\", day=\"Saturday\")", "question_type": "simple"}
{"question": "Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards.", "function": {"name": "restaurant_search", "description": "Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York City, NY"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine e.g., Italian, Indian, American, etc."}, "rating": {"type": "integer", "description": "Minimum average customer rating out of 5"}, "accepts_credit_cards": {"type": "boolean", "description": "If the restaurant should accept credit cards."}}, "required": ["location", "cuisine", "rating", "accepts_credit_cards"]}}, "human_eval_answer": "restaurant_search(location='New York City', cuisine='Italian', rating=4, accepts_credit_cards=True)", "question_type": "simple"}
{"question": "What is the name of the student in the 'students' table with the ID 1234, if we consider the columns 'id' and 'name' and the condition 'id = 1234'?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"students\", columns=[\"name\"], conditions=[\"id = 1234\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "What is the value of the 'result' column in the 'calculations' table for the calculation with the ID 5678, if we consider the columns 'id' and 'result' and the condition 'id = 5678'?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"calculations\", columns=[\"result\"], conditions=[\"id = 5678\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you create a new table in the database named 'Students' with the columns 'StudentID', 'FirstName', 'LastName', 'Age', and 'Grade'?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"Students\", columns=[\"StudentID\", \"FirstName\", \"LastName\", \"Age\", \"Grade\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you generate a new table in the database named 'MathScores' with the columns 'StudentID', 'AlgebraScore', 'GeometryScore', 'CalculusScore', and 'StatisticsScore'?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"MathScores\", columns=[\"StudentID\", \"AlgebraScore\", \"GeometryScore\", \"CalculusScore\", \"StatisticsScore\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database table named \"StudentGrades\", there are columns named \"StudentID\", \"MathGrade\", \"EnglishGrade\", and \"ScienceGrade\". You want to change the \"MathGrade\" of the student with \"StudentID\" 12345 to 95. What operation would you perform to accomplish this, and what would be the new values corresponding to the columns to set and the conditions for this operation?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"StudentGrades\", columns=[\"MathGrade\"], update_values=[\"95\"], conditions=[\"StudentID = 12345\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database table called \"ExamScores\", there are columns named \"ExamID\", \"AlgebraScore\", \"GeometryScore\", and \"CalculusScore\". If you need to modify the \"GeometryScore\" of the exam with \"ExamID\" 67890 to 85, what operation would you carry out and what would be the new values associated with the columns to set and the conditions for this operation?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"ExamScores\", columns=[\"GeometryScore\"], update_values=[\"85\"], conditions=[\"ExamID = 67890\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database table named \"Students\", can you remove the records of students who have a GPA less than 2.0? The columns involved in this operation are \"StudentID\", \"Name\", and \"GPA\". The condition for this operation is \"GPA < 2.0\".", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"Students\", columns=[\"StudentID\", \"Name\", \"GPA\"], conditions=[\"GPA < 2.0\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database table named \"MathScores\", can you erase the records of students who scored less than 50 in their final exam? The columns involved in this operation are \"StudentID\", \"StudentName\", and \"FinalScore\". The condition for this operation is \"FinalScore < 50\".", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"MathScores\", columns=[\"StudentID\", \"StudentName\", \"FinalScore\"], conditions=[\"FinalScore < 50\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database, there is a table named 'Students' with columns 'ID', 'Name', 'Age', 'Grade'. You are required to add a new student's information into the table. The student's ID is 'S101', Name is 'John Doe', Age is '15', and Grade is '10'. How would you add this information into the table?", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"Students\", columns=[\"ID\", \"Name\", \"Age\", \"Grade\"], insert_values=[[\"S101\", \"John Doe\", \"15\", \"10\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a school database, there is a table named 'MathScores' with columns 'StudentID', 'Name', 'TestScore', 'TestDate'. You have just graded a math test for a student named 'Emily Watson' with ID 'EW123'. Emily scored '95' on the test which was conducted on '2022-03-01'. How would you record Emily's test score into the database?", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"MathScores\", columns=[\"StudentID\", \"Name\", \"TestScore\", \"TestDate\"], insert_values=[[\"EW123\", \"Emily Watson\", \"95\", \"2022-03-01\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you provide the names of the students from the \"Physics_Class\" table who scored above 90 in the final exam? The column names involved in this operation are \"student_name\" and \"final_score\", with the condition being \"final_score > 90\".", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"Physics_Class\", columns=[\"student_name\"], conditions=[\"final_score > 90\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you retrieve the names and research topics of the physicists from the \"Physicists\" table who are working on Quantum Mechanics? The table to operate on is \"Physicists\", the column names involved in this operation are \"name\" and \"research_topic\", with the condition being \"research_topic = 'Quantum Mechanics'\".", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"Physicists\", columns=[\"name\", \"research_topic\"], conditions=[\"research_topic = 'Quantum Mechanics'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you create a database table named \"PhysicsExperiments\" with columns \"ExperimentID\", \"ExperimentName\", \"Researcher\", \"DateConducted\", \"Result\" to store the details of physics experiments conducted in our lab?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"PhysicsExperiments\", columns=[\"ExperimentID\", \"ExperimentName\", \"Researcher\", \"DateConducted\", \"Result\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you establish a new database table called \"ParticleData\" with the columns \"ParticleID\", \"ParticleName\", \"DiscoveredBy\", \"YearDiscovered\", \"Charge\", \"Spin\", \"Mass\" to record the properties of elementary particles discovered in particle physics?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"ParticleData\", columns=[\"ParticleID\", \"ParticleName\", \"DiscoveredBy\", \"YearDiscovered\", \"Charge\", \"Spin\", \"Mass\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a physics experiment, the data is stored in a database table named 'ExperimentData'. The table has columns 'ExperimentID', 'ExperimentName', 'DataValue', 'Unit', and 'DataTime'. The experiment with ID 'EX123' has a data value of '9.8' with unit 'm/s^2' recorded at '2022-01-01 10:00:00'. However, the data value was recorded incorrectly and should be '10.0'. Can you correct this value in the database?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"ExperimentData\", columns=[\"DataValue\"], update_values=[\"10.0\"], conditions=[\"ExperimentID = 'EX123'\", \"DataTime = '2022-01-01 10:00:00'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a physics lab, the results of an experiment are stored in a database table named 'PhysicsResults'. The table has columns 'ExperimentID', 'ExperimentName', 'Result', 'MeasurementUnit', and 'ExperimentDate'. The experiment with ID 'PHY789' has a result of '5.6' with measurement unit 'Joules' recorded on '2022-02-02 14:00:00'. However, upon reevaluation, it was found that the actual result should be '6.0' Joules. Could you please make this correction in the database?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"PhysicsResults\", columns=[\"Result\"], update_values=[\"6.0\"], conditions=[\"ExperimentID = 'PHY789'\"])", "sql.execute(sql_keyword=\"SELECT\", table_name=\"PhysicsResults\", columns=[\"ExperimentID\", \"ExperimentName\", \"Result\", \"MeasurementUnit\", \"ExperimentDate\"], conditions=[\"ExperimentID = 'PHY789'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a physics experiment, a database table named \"ExperimentData\" is used to store the measurements. Each row in the table represents a single measurement and contains columns for 'ExperimentID', 'MeasurementID', 'Value', 'Unit', and 'Timestamp'. If a measurement with 'MeasurementID' of 'M123' and 'ExperimentID' of 'E456' was found to be incorrect, could you remove this specific measurement from the \"ExperimentData\" table? The condition for this operation would be where 'MeasurementID' equals 'M123' and 'ExperimentID' equals 'E456'.", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"ExperimentData\", conditions=[\"MeasurementID = 'M123'\", \"ExperimentID = 'E456'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In the field of astrophysics, a database table named \"StarObservations\" is used to record the observations of various celestial bodies. The table includes columns for 'ObservationID', 'StarName', 'Magnitude', 'Coordinates', and 'ObservationTime'. If an observation with 'ObservationID' of 'O789' and 'StarName' of 'Betelgeuse' was identified as erroneous due to a faulty telescope, could you eliminate this particular observation from the \"StarObservations\" table? The criteria for this operation would be where 'ObservationID' equals 'O789' and 'StarName' equals 'Betelgeuse'.", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"StarObservations\", conditions=[\"ObservationID = 'O789'\", \"StarName = 'Betelgeuse'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a physics experiment, we have collected data for the time taken by a ball to fall from different heights. The data is to be stored in a database table named 'FreeFallExperiment'. The columns in the table are 'Height', 'Time' and 'TrialNumber'. For the first trial, the ball was dropped from a height of 10m and it took 1.43 seconds to hit the ground. For the second trial, the ball was dropped from a height of 20m and it took 2.01 seconds to hit the ground. Can you store this data in the database?", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"FreeFallExperiment\", insert_values=[[\"10\", \"1.43\", \"1\"],[\"20\", \"2.01\", \"2\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a physics lab, we are conducting an experiment to measure the speed of sound in different mediums. We have a database table named 'SoundSpeedExperiment' where we store our results. The columns in the table are 'Medium', 'Speed', 'Temperature' and 'ExperimentNumber'. In the first experiment, the speed of sound in air at 20 degrees Celsius was measured to be 343 m/s. In the second experiment, the speed of sound in water at the same temperature was found to be 1482 m/s. Can you help us record this data in our database?", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"SoundSpeedExperiment\", insert_values=[[\"Air\", \"343\", \"20\", \"1\"],[\"Water\", \"1482\", \"20\", \"2\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you provide the names and atomic numbers of all elements in the 'PeriodicTable' database where the atomic weight is less than 20?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"PeriodicTable\", columns=[\"name\", \"atomic_numbers\"], conditions=[\"atomic_weight < 20\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you provide the names and atomic masses of all elements in the 'ChemicalElements' database where the number of protons is greater than 50?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"ChemicalElements\", columns=[\"name\", \"atomic_masses\"], conditions=[\"number_of_protons > 50\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you create a new table in the database named \"ChemicalElements\" with the columns \"ElementName\", \"AtomicNumber\", \"Symbol\", and \"AtomicWeight\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"ChemicalElements\", columns=[\"ElementName\", \"AtomicNumber\", \"Symbol\", \"AtomicWeight\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you form a new table in the database called \"MolecularStructures\" with the columns \"MoleculeName\", \"MolecularFormula\", \"MolecularWeight\", and \"StructureDiagram\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"MolecularStructures\", columns=[\"MoleculeName\", \"MolecularFormula\", \"MolecularWeight\", \"StructureDiagram\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In our chemistry database, we have a table named \"Elements\" which contains information about all the known chemical elements. The columns in this table are 'ElementName', 'AtomicNumber', 'Symbol', 'AtomicWeight', and 'Period'. Recently, there has been a revision in the atomic weight of the element \"Hydrogen\". The new atomic weight is 1.008. Can you please update this information in our database? Use the condition where 'ElementName' is \"Hydrogen\".", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"Elements\", columns=[\"AtomicWeight\"], update_values=[\"1.008\"], conditions=[\"ElementName = Hydrogen\"]"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In our chemistry database, there's a table called \"Compounds\" that stores data about various chemical compounds. The columns of this table are 'CompoundName', 'Formula', 'MolarMass', 'Density', and 'MeltingPoint'. We've recently discovered that the molar mass of the compound \"Water\" has been inaccurately recorded as 18.01 g/mol. The correct molar mass should be 18.01528 g/mol. Could you please correct this error in our database? Make sure to apply this change only to the record where 'CompoundName' is \"Water\".", "human_eval_answer": [{"sql.execute": {"sql_keyword": "UPDATE", "table_name": "Compounds", "columns": ["MolarMass"], "update_values": ["18.01528"], "conditions": ["CompoundName = Water"]}}], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a chemistry database, there is a table named 'Elements' that contains information about all known chemical elements. The columns in this table are 'ElementName', 'AtomicNumber', 'Symbol', 'AtomicWeight', and 'Period'. If a new discovery proves that the element with the atomic number 118, currently known as 'Oganesson' with the symbol 'Og', does not exist, how would you remove this information from the database?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"Elements\", conditions=[\"AtomicNumber = 118\"])", "sql.execute(sql_keyword=\"DELETE\", table_name=\"Elements\", conditions=[\"ElementName = 'Oganesson'\"])", "sql.execute(sql_keyword=\"DELETE\", table_name=\"Elements\", conditions=[\"Symbol = 'Og'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database of chemical compounds, there is a table named 'Compounds' that includes details about various chemical compounds. The columns in this table are 'CompoundName', 'MolecularFormula', 'MolecularWeight', 'Density', and 'MeltingPoint'. If a recent scientific study disproves the existence of a compound previously believed to be real, specifically the compound with the name 'Dihydrogen Monoxide' and the molecular formula 'H2O', how would you eliminate this data from the database?", "human_eval_answer": ["sql.execute(sql_keyword='DELETE', table_name='Compounds', conditions=['CompoundName = Dihydrogen Monoxide', 'MolecularFormula = H2O'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new record to the 'ChemicalElements' table in the database, where the columns are 'ElementName', 'AtomicNumber', 'Symbol', and 'AtomicWeight', and the values to be inserted are 'Helium', '2', 'He', and '4.002602'?", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"ChemicalElements\", columns=[\"ElementName\", \"AtomicNumber\", \"Symbol\", \"AtomicWeight\"], insert_values=[[\"Helium\", \"2\", \"He\", \"4.002602\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new entry to the 'PeriodicTable' database table, where the columns are 'Element', 'AtomicNumber', 'Symbol', and 'AtomicMass', and the values to be inserted correspond to the element 'Neon', with atomic number '10', symbol 'Ne', and atomic mass '20.1797'?", "human_eval_answer": [{"sql.execute": {"sql_keyword": "INSERT INTO", "table_name": "PeriodicTable", "columns": ["Element", "AtomicNumber", "Symbol", "AtomicMass"], "insert_values": [["Neon", "10", "Ne", "20.1797"]]}}], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "What are the names of the species in the \"species\" table in the database that have a lifespan greater than 50 years? Please include only those species whose names are listed in the columns \"species_name\", \"lifespan\" and satisfy the condition where lifespan is greater than 50 years.", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"species\", columns=[\"species_name\"], conditions=[\"lifespan > 50\"]"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you provide the list of genes from the \"gene\" table that are associated with the disease \"Cancer\"? Please include only those genes whose names are listed in the columns \"gene_name\", \"disease\" and satisfy the condition where disease is \"Cancer\".", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"gene\", columns=[\"gene_name\"], conditions=[\"disease = Cancer\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you create a new table called \"CellTypes\" in the database, with columns named \"CellID\", \"CellName\", \"Organ\", and \"Function\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"CellTypes\", columns=[\"CellID\", \"CellName\", \"Organ\", \"Function\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you generate a new table named \"Genes\" in the database, with the column names being \"GeneID\", \"GeneName\", \"Chromosome\", \"StartLocation\", and \"EndLocation\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"Genes\", columns=[\"GeneID\", \"GeneName\", \"Chromosome\", \"StartLocation\", \"EndLocation\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "What changes should be made to the \"AnimalClassification\" table in the database to update the \"Lifespan\" column for the animal \"Elephant\" to 70 years, based on the condition that the current lifespan is less than 70 years?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"AnimalClassification\", columns=[\"Lifespan\"], update_values=[\"70\"], conditions=[\"animal = Elephant\", \"Lifespan < 70\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In the \"PlantSpecies\" database table, how can we modify the \"AverageHeight\" column to reflect a new average height of 150 cm for the plant species \"Sunflower\", given that the current average height recorded is less than 150 cm?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"PlantSpecies\", columns=[\"AverageHeight\"], update_values=[\"150\"], conditions=[\"SpeciesName = 'Sunflower'\", \"AverageHeight < 150\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you remove the record from the \"Genes\" table where the \"GeneID\" is \"BRCA1\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"Genes\", conditions=[\"GeneID = 'BRCA1'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you eliminate the data from the \"Proteins\" table where the \"ProteinName\" is \"Hemoglobin\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"Proteins\", conditions=[\"ProteinName = Hemoglobin\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add the new species of frog discovered in the Amazon rainforest, named \"Leptodactylus pentadactylus\", with a lifespan of 10 years, a size of 7.5 cm, and a weight of 80 grams, to the \"Species\" table in the database? The columns in the table are \"Species_Name\", \"Lifespan\", \"Size\", and \"Weight\".", "human_eval_answer": [{"sql.execute": {"sql_keyword": "INSERT INTO", "table_name": "Species", "columns": ["Species_Name", "Lifespan", "Size", "Weight"], "insert_values": [["Leptodactylus pentadactylus", "10", "7.5", "80"]]}}], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you record the discovery of a new plant species in the Sahara desert, named \"Cactaceae saharae\", with a height of 15 cm, a lifespan of 20 years, and a seed weight of 0.5 grams, in the \"Plant_Species\" table in the database? The columns in the table are \"Species_Name\", \"Height\", \"Lifespan\", and \"Seed_Weight\".", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"Plant_Species\", columns=[\"Species_Name\", \"Height\", \"Lifespan\", \"Seed_Weight\"], insert_values=[[\"Cactaceae saharae\", \"15\", \"20\", \"0.5\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you retrieve the data from the 'employees' table where the 'age' column is greater than 30 and the 'department' column is 'Sales'?", "human_eval_answer": ["sql.execute(sql_keyword='SELECT', table_name='employees', columns=['*'], conditions=['age > 30', 'department = Sales'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you fetch the records from the 'students' table where the 'grade' column is less than 60 and the 'course' column is 'Computer Science'?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"students\", columns=[\"*\"], conditions=[\"grade < 60\", \"course = 'Computer Science'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you create a new table named 'Students' in the database with columns 'ID', 'Name', 'Age', and 'Grade'?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"Students\", columns=[\"ID\", \"Name\", \"Age\", \"Grade\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you generate a new table in the database called 'Employees' with the fields 'EmployeeID', 'FirstName', 'LastName', 'Position', and 'Salary'?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"Employees\", columns=[\"EmployeeID\", \"FirstName\", \"LastName\", \"Position\", \"Salary\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database, you have a table named 'Students' with columns 'Name', 'Age', 'Grade'. You want to change the 'Grade' of a student named 'John' to 'A'. How would you perform this operation?", "human_eval_answer": ["sql.execute(sql_keyword='UPDATE', table_name='Students', columns=['Grade'], update_values=['A'], conditions=['Name = John'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database, there is a table called 'Employees' with columns 'EmployeeID', 'Name', 'Position', 'Salary'. You need to modify the 'Salary' of an employee with 'EmployeeID' 'E123' to '80000'. How can you accomplish this task?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"Employees\", columns=[\"Salary\"], update_values=[\"80000\"], conditions=[\"EmployeeID = 'E123'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database, there is a table named \"Employees\" which contains information about all the employees in a company. The company has recently fired an employee named \"John Doe\". Can you remove all the records from the \"Employees\" table where the employee's name is \"John Doe\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"Employees\", conditions=[\"name='John Doe'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a university database, there is a table named \"Students\" that stores all the information about the students. A student named \"Jane Smith\" has recently withdrawn from the university. Can you eliminate all the records from the \"Students\" table where the student's name is \"Jane Smith\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"Students\", conditions=[\"name='Jane Smith'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database, there is a table named \"Students\" with columns \"ID\", \"Name\", \"Age\", and \"Grade\". You need to add a new student's information into this table. The student's ID is \"S101\", name is \"John Doe\", age is \"16\", and grade is \"10\". How would you add this information into the \"Students\" table?", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"Students\", columns=[\"ID\", \"Name\", \"Age\", \"Grade\"], insert_values=[[\"S101\", \"John Doe\", \"16\", \"10\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database, there is a table named \"Employees\" with columns \"EmployeeID\", \"FirstName\", \"LastName\", \"Position\", and \"Salary\". You have a new employee's details to be added to this table. The details are as follows: EmployeeID is \"E123\", FirstName is \"Jane\", LastName is \"Doe\", Position is \"Manager\", and Salary is \"80000\". How would you incorporate this data into the \"Employees\" table?", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"Employees\", columns=[\"EmployeeID\", \"FirstName\", \"LastName\", \"Position\", \"Salary\"], insert_values=[[\"E123\", \"Jane\", \"Doe\", \"Manager\", \"80000\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "What are the names of the employees from the 'employees' table who have a salary greater than 50000?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"employees\", columns=[\"name\"], conditions=[\"salary > 50000\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you provide the names and ages of the customers from the 'customers' table who have made purchases exceeding $1000?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"customers\", columns=[\"name\", \"age\"], conditions=[\"purchases > 1000\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you create a new table named 'Employee' in the database with columns 'ID', 'Name', 'Position', 'Salary' and 'Department'?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"Employee\", columns=[\"ID\", \"Name\", \"Position\", \"Salary\", \"Department\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you establish a new database table called 'Customer' with the fields 'CustomerID', 'FirstName', 'LastName', 'Email', 'Phone', and 'Address'?", "human_eval_answer": ["sql.execute(sql_keyword='CREATE', table_name='Customer', columns=['CustomerID', 'FirstName', 'LastName', 'Email', 'Phone', 'Address'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you modify the \"employees\" table by setting the \"salary\" column to \"5000\" for all employees whose \"job_title\" is \"Manager\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"employees\", columns=[\"salary\"], update_values=[\"5000\"], conditions=[\"job_title = 'Manager'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you change the \"products\" table by adjusting the \"price\" column to \"20\" for all items whose \"category\" is \"Electronics\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"products\", columns=[\"price\"], update_values=[\"20\"], conditions=[\"category = Electronics\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you remove all records from the 'orders' table where the 'order_status' is 'cancelled'?", "human_eval_answer": ["sql.execute(sql_keyword='DELETE', table_name='orders', conditions=['order_status = cancelled'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you eliminate all entries from the 'customer_data' table where the 'customer_age' is less than '18'?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"customer_data\", conditions=[\"customer_age < 18\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new record into the 'employees' table, where the columns are 'employee_id', 'first_name', 'last_name', 'email', and 'phone_number', and the corresponding values to be inserted are 'E1001', 'John', 'Doe', 'johndoe@example.com', and '123-456-7890'?", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"employees\", columns=[\"employee_id\", \"first_name\", \"last_name\", \"email\", \"phone_number\"], insert_values=[[\"E1001\", \"John\", \"Doe\", \"johndoe@example.com\", \"123-456-7890\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you populate the 'customer' table with a new entry where the columns are 'customer_id', 'customer_name', 'customer_email', 'customer_address', and 'customer_phone', and the corresponding values to be added are 'C1023', 'Jane Smith', 'janesmith@example.com', '123 Main St, Anytown', and '987-654-3210'?", "human_eval_answer": ["sql.execute(sql_keyword='INSERT INTO', table_name='customer', columns=['customer_id', 'customer_name', 'customer_email', 'customer_address', 'customer_phone'], insert_values=[['C1023', 'Jane Smith', 'janesmith@example.com', '123 Main St, Anytown', '987-654-3210']])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "What are the names of the employees from the 'employees' table who have a salary greater than $5000?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"employees\", columns=[\"name\"], conditions=[\"salary > 5000\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "What is the average age of the customers from the 'customers' table who have made purchases above $1000?", "human_eval_answer": ["sql.execute(sql_keyword='SELECT', table_name='customers', columns=['AVG(age)'], conditions=['purchase > 1000'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you create a new table named \"StudentScores\" in the database, with columns \"StudentID\", \"MathScore\", \"EnglishScore\", and \"ScienceScore\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"StudentScores\", columns=[\"StudentID\", \"MathScore\", \"EnglishScore\", \"ScienceScore\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you generate a new database table named \"SurveyResults\" that includes the columns \"RespondentID\", \"Age\", \"Gender\", \"Income\", and \"SatisfactionScore\" to store the data collected from a customer satisfaction survey?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"SurveyResults\", columns=[\"RespondentID\", \"Age\", \"Gender\", \"Income\", \"SatisfactionScore\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database table named \"Students\", can you change the \"Grade\" column to 'A' for all students whose \"Age\" is greater than 18?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"Students\", columns=[\"Grade\"], update_values=[\"A\"], conditions=[\"Age > 18\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database table called \"Survey_Responses\", can you modify the \"Response\" column to 'Yes' for all participants whose \"Age\" is above 50 and \"Gender\" is 'Male'?", "human_eval_answer": [{"func_name1": "sql.execute", "param1": "sql_keyword", "param_val1": "UPDATE", "param2": "table_name", "param_val2": "Survey_Responses", "param3": "columns", "param_val3": ["Response"], "param4": "update_values", "param_val4": ["Yes"], "param5": "conditions", "param_val5": ["Age > 50", "Gender = 'Male'"]}], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you remove all records from the 'employees' table where the 'job_title' is 'Data Analyst'?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"employees\", conditions=[\"job_title='Data Analyst'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you eliminate all entries from the 'student_scores' table where the 'score' is less than 50?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"student_scores\", conditions=[\"score < 50\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new record to the database table named 'Students' with the columns 'StudentID', 'FirstName', 'LastName', 'Age', and 'Grade' where the values to be inserted are 'S101', 'John', 'Doe', '15', and '10'?", "human_eval_answer": ["sql.execute(sql_keyword='INSERT INTO', table_name='Students', columns=['StudentID', 'FirstName', 'LastName', 'Age', 'Grade'], insert_values=[['S101', 'John', 'Doe', '15', '10']])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new data entry to the 'Census' database table with the columns 'Year', 'Population', 'BirthRate', 'DeathRate', and 'NetMigrationRate' where the values to be inserted are '2022', '331002651', '12.4', '8.9', and '2.5'? This will help us update our statistical data on the United States demographics.", "human_eval_answer": [{"sql.execute": {"sql_keyword": "INSERT INTO", "table_name": "Census", "columns": ["Year", "Population", "BirthRate", "DeathRate", "NetMigrationRate"], "insert_values": [["2022", "331002651", "12.4", "8.9", "2.5"]]}}], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "What is the total quantity of product X sold in the last quarter from the 'sales' table, considering only the columns 'product_name' and 'quantity_sold', where the product name is 'Product X' and the sale date is between '2022-01-01' and '2022-03-31'?", "human_eval_answer": ["sql.execute(sql_keyword='SELECT', table_name='sales', columns=['product_name', 'quantity_sold'], conditions=['product_name = Product X', 'sale_date >= 2022-01-01', 'sale_date <= 2022-03-31'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "What is the average income of individuals in the city of New York from the 'income_data' table, considering only the columns 'city' and 'income', where the city is 'New York'?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"income_data\", columns=[\"income\"], conditions=[\"city = 'New York'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you create a new table in the database named 'EconomicData' with columns 'Year', 'GDP', 'InflationRate', 'UnemploymentRate', and 'InterestRate'?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"EconomicData\", columns=[\"Year\", \"GDP\", \"InflationRate\", \"UnemploymentRate\", \"InterestRate\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you establish a new database table called 'FiscalPolicy' with the fields 'Year', 'GovernmentSpending', 'TaxRevenue', 'BudgetDeficit', and 'PublicDebt'?", "human_eval_answer": ["sql.execute(sql_keyword='CREATE', table_name='FiscalPolicy', columns=['Year', 'GovernmentSpending', 'TaxRevenue', 'BudgetDeficit', 'PublicDebt'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In the context of a database containing information about various countries' GDP, can you modify the GDP value of the United States in the table named 'country_gdp' under the column 'gdp'? Please set the new GDP value to '21.44 trillion USD' and ensure this operation only affects the row where the 'country_name' is 'United States'.", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"country_gdp\", columns=[\"gdp\"], update_values=[\"21.44 trillion USD\"], conditions=[\"country_name = 'United States'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "In a database that stores information about the inflation rates of different countries, could you change the inflation rate of Japan in the 'country_inflation' table under the 'inflation_rate' column? Please change the inflation rate to '1.2%' and make sure this operation only applies to the row where the 'country_name' is 'Japan'.", "human_eval_answer": ["sql.execute(sql_keyword='UPDATE', table_name='country_inflation', columns=['inflation_rate'], update_values=['1.2%'], conditions=['country_name = Japan'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you remove all records from the 'EconomicData' table in the database that have 'GDP' in the 'Indicator' column and '2010' in the 'Year' column?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"EconomicData\", conditions=[\"Indicator = GDP\", \"Year = 2010\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you eliminate all entries from the 'FinancialStats' table where the 'EconomicIndicator' column is 'Unemployment Rate' and the 'Year' column is '2005'?", "human_eval_answer": ["sql.execute(sql_keyword='DELETE', table_name='FinancialStats', conditions=['EconomicIndicator = Unemployment Rate', 'Year = 2005'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new record to the 'EconomicData' table in the database, where the columns are 'Country', 'GDP', 'Unemployment_Rate', and 'Inflation_Rate', and the corresponding values to be inserted are 'USA', '21.43 trillion', '3.5%', and '1.8%' respectively?", "human_eval_answer": [{"sql.execute": {"sql_keyword": "INSERT INTO", "table_name": "EconomicData", "columns": ["Country", "GDP", "Unemployment_Rate", "Inflation_Rate"], "insert_values": [["USA", "21.43 trillion", "3.5%", "1.8%"]]}}], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new entry to the 'GlobalEconomy' table, where the columns are 'Region', 'Trade_Deficit', 'Interest_Rate', and 'Population', with the respective values being 'Europe', '2.1 trillion', '0.5%', and '741.4 million'?", "human_eval_answer": ["sql.execute(sql_keyword='INSERT INTO', table_name='GlobalEconomy', columns=['Region', 'Trade_Deficit', 'Interest_Rate', 'Population'], insert_values=[['Europe', '2.1 trillion', '0.5%', '741.4 million']])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "What are the names and salaries of employees in the \"Employees\" table who have a salary greater than $5000?", "human_eval_answer": ["sql.execute(sql_keyword='SELECT', table_name='Employees', columns=['name', 'salaries'], conditions=['salaries > 5000'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you provide the names and account balances of customers from the \"Customers\" table who have an account balance greater than $10,000?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"Customers\", columns=[\"name\", \"account_balances\"], conditions=[\"account_balances > 10000\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you create a new table named 'Investments' in the database, with the columns 'InvestorName', 'InvestmentType', 'InvestmentAmount', and 'InvestmentDate'?", "human_eval_answer": ["sql.execute(sql_keyword='CREATE', table_name='Investments', columns=['InvestorName', 'InvestmentType', 'InvestmentAmount', 'InvestmentDate'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you establish a new database table called 'FinancialTransactions', with the fields 'TransactionID', 'TransactionType', 'TransactionAmount', and 'TransactionDate'?", "human_eval_answer": ["sql.execute(sql_keyword='CREATE', table_name='FinancialTransactions', columns=['TransactionID', 'TransactionType', 'TransactionAmount', 'TransactionDate'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "What is the new balance of the customer named \"John Doe\" in the \"customers\" table after we add $500 to his current balance of $1000 in the \"balance\" column, given that the operation is successful?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"customers\", columns=[\"balance\"], update_values=[\"1500\"], conditions=[\"name = 'John Doe'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you tell me the updated price of the stock named \"Apple Inc.\" in the \"stocks\" table after we decrease its current price of $150 by $10 in the \"price\" column, assuming the operation is successful?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"stocks\", columns=[\"price\"], update_values=[\"140\"], conditions=[\"name = 'Apple Inc.'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you remove all records from the 'transactions' table in the database where the 'account_type' is 'savings' and the 'amount' is greater than 5000?", "human_eval_answer": [{"sql.execute": {"sql_keyword": "DELETE", "table_name": "transactions", "conditions": ["account_type = 'savings'", "amount > 5000"]}}], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you eliminate all entries from the 'customer_details' table where the 'credit_score' is less than 600 and the 'account_balance' is less than 1000?", "human_eval_answer": ["sql.execute(sql_keyword='DELETE', table_name='customer_details', conditions=['credit_score < 600', 'account_balance < 1000'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new record to the 'Transactions' table in our database, where the columns are 'TransactionID', 'Date', 'Amount', 'Type' and 'AccountID', and the values to be inserted are 'TXN12345', '2022-03-01', '5000', 'Deposit', and 'ACC789'?", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"Transactions\", columns=[\"TransactionID\", \"Date\", \"Amount\", \"Type\", \"AccountID\"], insert_values=[[\"TXN12345\", \"2022-03-01\", \"5000\", \"Deposit\", \"ACC789\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new entry to the 'Stocks' table in our financial database, where the columns are 'StockID', 'PurchaseDate', 'PurchasePrice', 'Quantity', and 'InvestorID', and the values to be inserted are 'STK54321', '2022-03-15', '150', '100', and 'INV456'?", "human_eval_answer": ["sql.execute(sql_keyword='INSERT INTO', table_name='Stocks', columns=['StockID', 'PurchaseDate', 'PurchasePrice', 'Quantity', 'InvestorID'], insert_values=[['STK54321', '2022-03-15', '150', '100', 'INV456']])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you provide me with the data from the columns 'name', 'age', and 'salary' in the 'employees' table where the 'age' is greater than 30?", "human_eval_answer": ["sql.execute(sql_keyword='SELECT', table_name='employees', columns=['name', 'age', 'salary'], conditions=['age > 30'])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you retrieve the 'product_name', 'product_id', and 'price' from the 'products' table where the 'price' is less than 20?", "human_eval_answer": ["sql.execute(sql_keyword=\"SELECT\", table_name=\"products\", columns=[\"product_name\", \"product_id\", \"price\"], conditions=[\"price < 20\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you create a new table named \"Employee\" in the database with columns \"EmployeeID\", \"FirstName\", \"LastName\", \"Email\", and \"Phone\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"Employee\", columns=[\"EmployeeID\", \"FirstName\", \"LastName\", \"Email\", \"Phone\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you establish a new database table called \"Inventory\" with the fields \"ProductID\", \"ProductName\", \"SupplierID\", \"CategoryID\", \"QuantityPerUnit\", and \"UnitPrice\"?", "human_eval_answer": ["sql.execute(sql_keyword=\"CREATE\", table_name=\"Inventory\", columns=[\"ProductID\", \"ProductName\", \"SupplierID\", \"CategoryID\", \"QuantityPerUnit\", \"UnitPrice\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you modify the 'employees' table in our database by changing the 'salary' column for the employee with the ID 'E123' to '5000'?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"employees\", columns=[\"salary\"], update_values=[\"5000\"], conditions=[\"ID = 'E123'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you change the 'price' column in the 'products' table for the product with the SKU 'P789' to '15.99'?", "human_eval_answer": ["sql.execute(sql_keyword=\"UPDATE\", table_name=\"products\", columns=[\"price\"], update_values=[\"15.99\"], conditions=[\"SKU = 'P789'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you remove all records from the 'employees' table where the 'salary' column is less than 50000?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"employees\", conditions=[\"salary < 50000\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you eliminate all entries from the 'orders' table where the 'order_status' column is marked as 'cancelled'?", "human_eval_answer": ["sql.execute(sql_keyword=\"DELETE\", table_name=\"orders\", conditions=[\"order_status = 'cancelled'\"])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new record into the 'Employees' table with the columns 'EmployeeID', 'FirstName', 'LastName', 'Position' and their corresponding values as 'E123', 'John', 'Doe', 'Manager'?", "human_eval_answer": ["sql.execute(sql_keyword=\"INSERT INTO\", table_name=\"Employees\", columns=[\"EmployeeID\", \"FirstName\", \"LastName\", \"Position\"], insert_values=[[\"E123\", \"John\", \"Doe\", \"Manager\"]])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
{"question": "Can you add a new product to the 'Products' table with the columns 'ProductID', 'ProductName', 'Category', 'Price' and their corresponding values as 'P789', 'Apple iPhone 13', 'Electronics', '999'?", "human_eval_answer": ["sql.execute(sql_keyword='INSERT INTO', table_name='Products', columns=['ProductID', 'ProductName', 'Category', 'Price'], insert_values=[['P789', 'Apple iPhone 13', 'Electronics', '999']])"], "function": {"name": "sql.execute", "description": "Execute SQL queries based on user-defined parameters like SQL keyword, table name, column names, and conditions.", "parameters": {"type": "object", "properties": {"sql_keyword": {"type": "string", "enum": ["SELECT", "INSERT INTO", "UPDATE", "DELETE", "CREATE"], "description": "The SQL keyword to define the type of operation."}, "table_name": {"type": "string", "description": "The name of the database table to operate on."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "The column names involved in the SQL operation."}, "insert_values": {"type": "array", "description": "Values of an INSERT statement.", "items": {"type": "array", "items": {"type": "string"}}}, "update_values": {"type": "array", "description": "Values of an UPDATE statement corresponding to columns to set.", "items": {"type": "string"}}, "conditions": {"type": "array", "description": "Conditions for the SQL operation, formatted as a SQL WHERE clause. Put them in the format of [cond1 > val1, cond2 = val2, cond3<val3] and etc.", "items": {"type": "array", "items": {"type": "string"}}}}, "required": ["sql_keyword", "table_name"]}}, "question_type": "sql"}
