test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
tool_calls : 
[ChatCompletionMessageToolCall(id='call_xGN1tj1didGtEtFSVWHvsXTA', function=Function(arguments='{\n  "url": "https://timezone-by-location.p.rapidapi.com/timezone",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"\n  },\n  "params": {\n    "lat": 48.8584,\n    "lon": 2.2945,\n    "c": 1,\n    "s": 1\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://timezone-by-location.p.rapidapi.com/timezone",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"  },  params = {    "lat": 48.8584,    "lon": 2.2945,    "c": 1,    "s": 1  })
model_generated_function : None
model_generated_function : None
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_ri56jGbfthCl5Gnz4NsvHkZ3', function=Function(arguments='{\n  "url": "https://timezone-by-location.p.rapidapi.com/timezone",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"\n  },\n  "params": {\n    "lat": 48.8584,\n    "lon": 2.2945\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://timezone-by-location.p.rapidapi.com/timezone",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"  },  params = {    "lat": 48.8584,    "lon": 2.2945  })
current matched count: 1
model_generated_function : None
model_generated_function : None
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_0pMFaNSzbDjFIU4WeuIl2pTS', function=Function(arguments='{\n  "url": "https://covid-193.p.rapidapi.com/statistics",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "covid-193.p.rapidapi.com"\n  },\n  "params": {\n    "country": "Iran"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://covid-193.p.rapidapi.com/statistics",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "covid-193.p.rapidapi.com"  },  params = {    "country": "Iran"  })
current matched count: 2
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_RetubJI9HHhs6Vy6UNRcRbgR', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 3
tool_calls : 
[ChatCompletionMessageToolCall(id='call_2WKAnxbvhxbTxcXCVlz704ew', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 4
tool_calls : 
[ChatCompletionMessageToolCall(id='call_2q9wEzTvi6kdJUtSgxU8OK2q', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD")
current matched count: 5
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_M3JOEqRtFrlCr7SAOwpWHwvr', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 6
tool_calls : 
[ChatCompletionMessageToolCall(id='call_D5a44ZjQuZpivldGidwibLBV', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 7
tool_calls : 
[ChatCompletionMessageToolCall(id='call_RetubJI9HHhs6Vy6UNRcRbgR', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 8
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_Se2r0eAiAGfDwmU7DXXjzh3k', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 9
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_IaA4U3VUgVHGRYOqaJL58fu6', function=Function(arguments='{\n  "url": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"\n  },\n  "params": {\n    "search": "Meta"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"  },  params = {    "search": "Meta"  })
current matched count: 10
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_uijJ2rLjmZ2QNb2oYrSn1exT', function=Function(arguments='{\n  "url": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"\n  },\n  "params": {\n    "search": "Tesla"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"  },  params = {    "search": "Tesla"  })
current matched count: 11
tool_calls : 
[ChatCompletionMessageToolCall(id='call_C9uuEfhGxQ0PrjzBzL7zyo6H', function=Function(arguments='{\n  "url": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"\n  },\n  "params": {\n    "search": "Apple"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"  },  params = {    "search": "Apple"  })
current matched count: 12
tool_calls : 
[ChatCompletionMessageToolCall(id='call_junHYtDL4pDEixDEBTFOX2xG', function=Function(arguments='{\n  "url": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"\n  },\n  "params": {\n    "search": "Tesla"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"  },  params = {    "search": "Tesla"  })
current matched count: 13
tool_calls : 
[ChatCompletionMessageToolCall(id='call_CefYSUvnilMC7vEBmkrF3HUK', function=Function(arguments='{\n  "url": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"\n  },\n  "params": {\n    "search": "Tesla"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"  },  params = {    "search": "Tesla"  })
current matched count: 14
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_NekOwFAwXLrjt1uoOFlo9VSV', function=Function(arguments='{\n  "url": "http://ip-api.com/json",\n  "params": {\n    "fields": "status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query",\n    "lang": "fr"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://ip-api.com/json",  params = {    "fields": "status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query",    "lang": "fr"  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_NFZRC8wU7GDJ5ekTKEyW8vOU', function=Function(arguments='{\n  "url": "http://ip-api.com/json/{ip}",\n  "params": {\n    "fields": "country,city,timezone",\n    "lang": "fr"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://ip-api.com/json/{ip}",  params = {    "fields": "country,city,timezone",    "lang": "fr"  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_B7bDdrAoJwI9a5Lz3gPGFxqa', function=Function(arguments='{\n  "url": "http://ip-api.com/json",\n  "params": {\n    "fields": "city,country,isp",\n    "lang": "es"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://ip-api.com/json",  params = {    "fields": "city,country,isp",    "lang": "es"  })
current matched count: 15
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_TD6L0KhddHJQSfLSbSGb8862', function=Function(arguments='{\n  "url": "http://ip-api.com/json",\n  "params": {\n    "fields": "query,country",\n    "lang": "es"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://ip-api.com/json",  params = {    "fields": "query,country",    "lang": "es"  })
current matched count: 16
tool_calls : 
[ChatCompletionMessageToolCall(id='call_64c3bv3PFSgRePL1Y4XdCx0z', function=Function(arguments='{\n  "url": "https://geocode.maps.co/search",\n  "params": {\n    "lat": 5331,\n    "lon": 36116,\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "geojson"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/search",  params = {    "lat": 5331,    "lon": 36116,    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "geojson"  })
model_generated_function : None
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_76TEfuTaIhJv9DtQqskDfauW', function=Function(arguments='{\n  "url": "https://geocode.maps.co/reverse",\n  "params": {\n    "lat": 37.4224764,\n    "lon": -122.0842499,\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "geojson"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/reverse",  params = {    "lat": 37.4224764,    "lon": -122.0842499,    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "geojson"  })
current matched count: 17
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_6ieVlYnwj8KP5Nx7srGC46Zv', function=Function(arguments='{\n  "url": "https://geocode.maps.co/search",\n  "params": {\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "geojson"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/search",  params = {    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "geojson"  })
current matched count: 18
tool_calls : 
[ChatCompletionMessageToolCall(id='call_Vuo1gUypoL04WnTI6abfavNr', function=Function(arguments='{\n  "url": "https://geocode.maps.co/reverse",\n  "params": {\n    "lat": 39.4224764,\n    "lon": -112.0842499,\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "geojson"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/reverse",  params = {    "lat": 39.4224764,    "lon": -112.0842499,    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "geojson"  })
current matched count: 19
tool_calls : 
[ChatCompletionMessageToolCall(id='call_9FqD7IfWaistlXnLH9EOX5Aj', function=Function(arguments='{\n  "url": "https://geocode.maps.co/reverse",\n  "params": {\n    "lat": 40.748817,\n    "lon": -73.985428,\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "geojson"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/reverse",  params = {    "lat": 40.748817,    "lon": -73.985428,    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "geojson"  })
current matched count: 20
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_CEeAIB8HB34Aszt2FiPq6uYB', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "35.6895",\n    "longitude": "139.6917",\n    "forecast_days": 7,\n    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"],\n    "hourly": ["wind_speed_10min_max"],\n    "temperature_unit": "F",\n    "wind_speed_unit": "mph",\n    "precipitation_unit": "in",\n    "timezone": "Asia/Tokyo"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "35.6895",    "longitude": "139.6917",    "forecast_days": 7,    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"],    "hourly": ["wind_speed_10min_max"],    "temperature_unit": "F",    "wind_speed_unit": "mph",    "precipitation_unit": "in",    "timezone": "Asia/Tokyo"  })
the function call params list cannot parse into dict.
tool_calls : 
[ChatCompletionMessageToolCall(id='call_NFZRC8wU7GDJ5ekTKEyW8vOU', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "35.68",\n    "longitude": "-121.34",\n    "daily": ["temperature_2m_max", "precipitation_sum"],\n    "temperature_unit": "Fahrenheit",\n    "precipitation_unit": "inches",\n    "forecast_days": 10\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "35.68",    "longitude": "-121.34",    "daily": ["temperature_2m_max", "precipitation_sum"],    "temperature_unit": "Fahrenheit",    "precipitation_unit": "inches",    "forecast_days": 10  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_ofPuvyiCPlgCgK8P7LdUegvl', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "35.6895",\n    "longitude": "139.6917",\n    "daily": ["temperature_2m_max", "wind_speed_10m_max", "precipitation_sum"],\n    "temperature_unit": "C",\n    "wind_speed_unit": "km/h",\n    "precipitation_unit": "mm",\n    "forecast_days": 7\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "35.6895",    "longitude": "139.6917",    "daily": ["temperature_2m_max", "wind_speed_10m_max", "precipitation_sum"],    "temperature_unit": "C",    "wind_speed_unit": "km/h",    "precipitation_unit": "mm",    "forecast_days": 7  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_IaA4U3VUgVHGRYOqaJL58fu6', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "47.8095",\n    "longitude": "13.0550",\n    "daily": ["temperature_2m_max", "temperature_2m_min", "wind_speed_10m_max", "precipitation_sum"],\n    "temperature_unit": "F",\n    "wind_speed_unit": "mph",\n    "timezone": "Europe/Vienna",\n    "forecast_days": 7\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "47.8095",    "longitude": "13.0550",    "daily": ["temperature_2m_max", "temperature_2m_min", "wind_speed_10m_max", "precipitation_sum"],    "temperature_unit": "F",    "wind_speed_unit": "mph",    "timezone": "Europe/Vienna",    "forecast_days": 7  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_MOgtABaHALJEjGZvaqEEwOx9', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "39.113014",\n    "longitude": "-105.358887",\n    "forecast_days": 10,\n    "temperature_unit": "F",\n    "wind_speed_unit": "mph",\n    "timezone": "America/Denver",\n    "apikey": "your_api_key"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "39.113014",    "longitude": "-105.358887",    "forecast_days": 10,    "temperature_unit": "F",    "wind_speed_unit": "mph",    "timezone": "America/Denver",    "apikey": "your_api_key"  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_uDrCEknY2hudqZ4DQJrPqFoc', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "37.8651",\n    "longitude": "-119.5383",\n    "hourly": ["temperature", "wind_speed", "precipitation"],\n    "daily": [],\n    "temperature_unit": "F",\n    "wind_speed_unit": "mph",\n    "precipitation_unit": "in",\n    "timeformat": "timestamp",\n    "timezone": "America/Los_Angeles",\n    "forecast_days": 10,\n    "apikey": "your_api_key"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "37.8651",    "longitude": "-119.5383",    "hourly": ["temperature", "wind_speed", "precipitation"],    "daily": [],    "temperature_unit": "F",    "wind_speed_unit": "mph",    "precipitation_unit": "in",    "timeformat": "timestamp",    "timezone": "America/Los_Angeles",    "forecast_days": 10,    "apikey": "your_api_key"  })
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
tool_calls : 
[ChatCompletionMessageToolCall(id='call_Lvx8ZZGuTDdS2sZAoHJoZ5fA', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "46.0207,46.4836",\n    "longitude": "7.7491,9.8355",\n    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"],\n    "temperature_unit": "F",\n    "wind_speed_unit": "mph",\n    "precipitation_unit": "in",\n    "start_date": "2022-04-15",\n    "end_date": "2022-04-21",\n    "timezone": "Europe/Zurich"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "46.0207,46.4836",    "longitude": "7.7491,9.8355",    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"],    "temperature_unit": "F",    "wind_speed_unit": "mph",    "precipitation_unit": "in",    "start_date": "2022-04-15",    "end_date": "2022-04-21",    "timezone": "Europe/Zurich"  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_RetubJI9HHhs6Vy6UNRcRbgR', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "46.2028",\n    "longitude": "-121.4905",\n    "elevation": "3743",\n    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"],\n    "forecast_days": 10,\n    "temperature_unit": "C",\n    "precipitation_unit": "mm",\n    "timezone": "America/Los_Angeles",\n    "apikey": "your_api_key"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "46.2028",    "longitude": "-121.4905",    "elevation": "3743",    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"],    "forecast_days": 10,    "temperature_unit": "C",    "precipitation_unit": "mm",    "timezone": "America/Los_Angeles",    "apikey": "your_api_key"  })
model_generated_function : None
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_ofPuvyiCPlgCgK8P7LdUegvl', function=Function(arguments='{\n  "url": "https://mashape-community-urban-dictionary.p.rapidapi.com/define",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "mashape-community-urban-dictionary.p.rapidapi.com"\n  },\n  "params": {\n    "term": "bet"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://mashape-community-urban-dictionary.p.rapidapi.com/define",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "mashape-community-urban-dictionary.p.rapidapi.com"  },  params = {    "term": "bet"  })
current matched count: 21
model_generated_function : None
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_ri56jGbfthCl5Gnz4NsvHkZ3', function=Function(arguments='{\n  "url": "http://www.omdbapi.com/",\n  "params": {\n    "t": "The Social Network",\n    "plot": "full",\n    "apikey": "8b5a9d56"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://www.omdbapi.com/",  params = {    "t": "The Social Network",    "plot": "full",    "apikey": "8b5a9d56"  })
current matched count: 22
tool_calls : 
[ChatCompletionMessageToolCall(id='call_FohOL42YWWEO9AxApm4zcQ6X', function=Function(arguments='{\n  "url": "http://www.omdbapi.com/",\n  "params": {\n    "t": "Inception",\n    "y": "2010",\n    "plot": "full",\n    "r": "json",\n    "apikey": "8b5a9d56"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://www.omdbapi.com/",  params = {    "t": "Inception",    "y": "2010",    "plot": "full",    "r": "json",    "apikey": "8b5a9d56"  })
current matched count: 23
tool_calls : 
[ChatCompletionMessageToolCall(id='call_Qn1QVkE7Dn22PU8QRfm3BrVh', function=Function(arguments='{\n  "url": "http://www.omdbapi.com/",\n  "params": {\n    "t": "Gorilla",\n    "plot": "full",\n    "r": "json",\n    "apikey": "8b5a9d56"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://www.omdbapi.com/",  params = {    "t": "Gorilla",    "plot": "full",    "r": "json",    "apikey": "8b5a9d56"  })
current matched count: 24
tool_calls : 
[ChatCompletionMessageToolCall(id='call_VofEG5jw93CPpL9P7uXtpo6T', function=Function(arguments='{\n  "url": "http://www.omdbapi.com/",\n  "params": {\n    "t": "Oppenheimer",\n    "y": "2023",\n    "plot": "full",\n    "apikey": "8b5a9d56"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://www.omdbapi.com/",  params = {    "t": "Oppenheimer",    "y": "2023",    "plot": "full",    "apikey": "8b5a9d56"  })
current matched count: 25
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_RBzuzDpiS7HsI2SrB7PTq21u', function=Function(arguments='{\n  "url": "https://date.nager.at/api/v3/LongWeekend/2023/CA"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://date.nager.at/api/v3/LongWeekend/2023/CA")
current matched count: 26
tool_calls : 
[ChatCompletionMessageToolCall(id='call_GrOzkbFj2nC9nQTMk11ryM8w', function=Function(arguments='{\n  "url": "https://date.nager.at/api/v3/LongWeekend/2023/CA"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://date.nager.at/api/v3/LongWeekend/2023/CA")
current matched count: 27
tool_calls : 
[ChatCompletionMessageToolCall(id='call_ubqhO6PJI4LnZYeNmBErF4Os', function=Function(arguments='{\n  "url": "https://date.nager.at/api/v3/LongWeekend/2023/FR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://date.nager.at/api/v3/LongWeekend/2023/FR")
current matched count: 28
tool_calls : 
[ChatCompletionMessageToolCall(id='call_9FqD7IfWaistlXnLH9EOX5Aj', function=Function(arguments='{\n  "url": "https://date.nager.at/api/v3/LongWeekend/2023/JP"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://date.nager.at/api/v3/LongWeekend/2023/JP")
current matched count: 29
tool_calls : 
[ChatCompletionMessageToolCall(id='call_Op7lo6zxN8rwSCfBJ4IWqqqN', function=Function(arguments='{\n  "url": "https://date.nager.at/api/v3/LongWeekend/2023/CA"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://date.nager.at/api/v3/LongWeekend/2023/CA")
current matched count: 30
Accuracy: 0.43
-----------------------
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
tool_calls : 
[ChatCompletionMessageToolCall(id='call_raFniSL0TKdJQPrblMzIhMzw', function=Function(arguments='{\n  "url": "https://timezone-by-location.p.rapidapi.com/timezone",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"\n  },\n  "params": {\n    "lat": 48.8584,\n    "lon": 2.2945,\n    "c": 1,\n    "s": 1\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://timezone-by-location.p.rapidapi.com/timezone",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"  },  params = {    "lat": 48.8584,    "lon": 2.2945,    "c": 1,    "s": 1  })
model_generated_function : None
model_generated_function : None
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_NIomzoQgDDz0U9FkyCSxjcHY', function=Function(arguments='{\n  "url": "https://timezone-by-location.p.rapidapi.com/timezone",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"\n  },\n  "params": {\n    "lat": 48.8584,\n    "lon": 2.2945\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://timezone-by-location.p.rapidapi.com/timezone",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"  },  params = {    "lat": 48.8584,    "lon": 2.2945  })
current matched count: 1
tool_calls : 
[ChatCompletionMessageToolCall(id='call_5nnXHNPB6A9665tk1t5kPoSt', function=Function(arguments='{\n  "url": "https://covid-193.p.rapidapi.com/statistics",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "covid-193.p.rapidapi.com"\n  },\n  "timeout": 10,\n  "params": {\n    "country": "Uganda"\n  },\n  "stream": false\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://covid-193.p.rapidapi.com/statistics",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "covid-193.p.rapidapi.com"  },  timeout = 10,  params = {    "country": "Uganda"  },  stream = "false")
the function call params list cannot parse into dict.
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
tool_calls : 
[ChatCompletionMessageToolCall(id='call_rahSxP0scyjiHAxQ7MROuw05', function=Function(arguments='{\n  "url": "https://timezone-by-location.p.rapidapi.com/timezone",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"\n  },\n  "params": {\n    "lat": 48.8584,\n    "lon": 2.2945,\n    "c": 1,\n    "s": 1\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://timezone-by-location.p.rapidapi.com/timezone",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"  },  params = {    "lat": 48.8584,    "lon": 2.2945,    "c": 1,    "s": 1  })
model_generated_function : None
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_3DibiPatDbincfFRTMI5cWcW', function=Function(arguments='{\n  "url": "https://timezone-by-location.p.rapidapi.com/timezone",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"\n  },\n  "params": {\n    "lat": 40.7128,\n    "lon": -74.0060,\n    "c": 1,\n    "s": 1\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://timezone-by-location.p.rapidapi.com/timezone",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"  },  params = {    "lat": 40.7128,    "lon": -74.0060,    "c": 1,    "s": 1  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_dM5qBeCohDTsGIMuKOfH4J4V', function=Function(arguments='{\n  "url": "https://timezone-by-location.p.rapidapi.com/timezone",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"\n  },\n  "params": {\n    "lat": 48.8584,\n    "lon": 2.2945\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://timezone-by-location.p.rapidapi.com/timezone",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "timezone-by-location.p.rapidapi.com"  },  params = {    "lat": 48.8584,    "lon": 2.2945  })
current matched count: 1
model_generated_function : None
model_generated_function : None
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_gh3ySBUiN4VUGgUHzDtJiyh6', function=Function(arguments='{\n  "url": "https://covid-193.p.rapidapi.com/statistics",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "covid-193.p.rapidapi.com"\n  },\n  "params": {\n    "country": "Iran"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://covid-193.p.rapidapi.com/statistics",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "covid-193.p.rapidapi.com"  },  params = {    "country": "Iran"  })
current matched count: 2
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_sMMxF06BjEs8Asm4j8V3mo3r', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 3
tool_calls : 
[ChatCompletionMessageToolCall(id='call_RFiBJr0EdfTFWjvqVthqGUhb', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 4
tool_calls : 
[ChatCompletionMessageToolCall(id='call_Xw6UOCx6x2ro8ZFhs9jEr1vu', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD")
current matched count: 5
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_4GROYqzIvlRY7pyIngWSGMXL', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 6
tool_calls : 
[ChatCompletionMessageToolCall(id='call_8HlItevFXV9K0Qyc08xx234W', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 7
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_QNwmbjsALL4RUd7XAJUumZXL', function=Function(arguments='{\n  "url": "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR")
current matched count: 8
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_IobbbOQHhPxeuEzbcqtuk4Av', function=Function(arguments='{\n  "url": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"\n  },\n  "params": {\n    "search": "Meta"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"  },  params = {    "search": "Meta"  })
current matched count: 9
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_ZFSrjuMGwApjUBc9khx3ISpJ', function=Function(arguments='{\n  "url": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"\n  },\n  "params": {\n    "search": "Tesla"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"  },  params = {    "search": "Tesla"  })
current matched count: 10
tool_calls : 
[ChatCompletionMessageToolCall(id='call_AHgcgJl95pxjdRjTn21CGmIv', function=Function(arguments='{\n  "url": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"\n  },\n  "params": {\n    "search": "Apple"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"  },  params = {    "search": "Apple"  })
current matched count: 11
tool_calls : 
[ChatCompletionMessageToolCall(id='call_RMnNK1p4v7CYp8dFGwmKH22n', function=Function(arguments='{\n  "url": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"\n  },\n  "params": {\n    "search": "Tesla"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"  },  params = {    "search": "Tesla"  })
current matched count: 12
tool_calls : 
[ChatCompletionMessageToolCall(id='call_HTdMYFZZOTmWyJTwGMNXicQD', function=Function(arguments='{\n  "url": "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"\n  },\n  "params": {\n    "search": "Tesla"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "yahoo-finance15.p.rapidapi.com"  },  params = {    "search": "Tesla"  })
current matched count: 13
tool_calls : 
[ChatCompletionMessageToolCall(id='call_CGXERNZHNciId7WW9NiYVNZ5', function=Function(arguments='{\n  "url": "http://ip-api.com/json",\n  "params": {\n    "fields": "query,status,country",\n    "lang": "fr"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://ip-api.com/json",  params = {    "fields": "query,status,country",    "lang": "fr"  })
current matched count: 14
tool_calls : 
[ChatCompletionMessageToolCall(id='call_5LM41SEnv8u5oIJQAXuO6FNg', function=Function(arguments='{\n  "url": "http://ip-api.com/json",\n  "params": {\n    "fields": "status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query",\n    "lang": "fr"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://ip-api.com/json",  params = {    "fields": "status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query",    "lang": "fr"  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_niuymiGh6Bjd8LGKPTKL5wZU', function=Function(arguments='{\n  "url": "http://ip-api.com/json",\n  "params": {\n    "fields": "country,city,timezone",\n    "lang": "fr"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://ip-api.com/json",  params = {    "fields": "country,city,timezone",    "lang": "fr"  })
current matched count: 15
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_GXvn7WCcP1Nq3ASv7C3YklGL', function=Function(arguments='{\n  "url": "http://ip-api.com/json",\n  "params": {\n    "fields": "query,country",\n    "lang": "es"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://ip-api.com/json",  params = {    "fields": "query,country",    "lang": "es"  })
current matched count: 16
tool_calls : 
[ChatCompletionMessageToolCall(id='call_K4bk7VgWaq9GTXHb45uLgpRY', function=Function(arguments='{\n  "url": "https://geocode.maps.co/search",\n  "params": {\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "geojson"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/search",  params = {    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "geojson"  })
current matched count: 17
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_dM5qBeCohDTsGIMuKOfH4J4V', function=Function(arguments='{\n  "url": "https://geocode.maps.co/search",\n  "params": {\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "json"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/search",  params = {    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "json"  })
current matched count: 18
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_QNwmbjsALL4RUd7XAJUumZXL', function=Function(arguments='{\n  "url": "https://geocode.maps.co/reverse",\n  "params": {\n    "lat": 37.4224764,\n    "lon": -122.0842499,\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "geojson"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/reverse",  params = {    "lat": 37.4224764,    "lon": -122.0842499,    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "geojson"  })
current matched count: 19
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_o7M7O7r1fUIFHJ4dlgOiK0my', function=Function(arguments='{\n  "url": "https://geocode.maps.co/search",\n  "params": {\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "geojson"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/search",  params = {    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "geojson"  })
current matched count: 20
tool_calls : 
[ChatCompletionMessageToolCall(id='call_pxIN0XuEsc0L9ysCtFHFLpDS', function=Function(arguments='{\n  "url": "https://geocode.maps.co/reverse",\n  "params": {\n    "lat": 39.4224764,\n    "lon": -112.0842499,\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "geojson"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/reverse",  params = {    "lat": 39.4224764,    "lon": -112.0842499,    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "geojson"  })
current matched count: 21
tool_calls : 
[ChatCompletionMessageToolCall(id='call_SsAjI2cMcm6xeUYSKprH3doj', function=Function(arguments='{\n  "url": "https://geocode.maps.co/reverse",\n  "params": {\n    "lat": 40.748817,\n    "lon": -73.985428,\n    "api_key": "65fe68824e7f3760331092odq60ce8c",\n    "format": "geojson"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://geocode.maps.co/reverse",  params = {    "lat": 40.748817,    "lon": -73.985428,    "api_key": "65fe68824e7f3760331092odq60ce8c",    "format": "geojson"  })
current matched count: 22
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_UmI2fU2JyX4VzYBlhFxoi78k', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "35.6895",\n    "longitude": "139.6917",\n    "daily": ["temperature_2m_max", "temperature_2m_min", "wind_speed_10m_max", "precipitation_sum"],\n    "temperature_unit": "F",\n    "forecast_days": 7\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "35.6895",    "longitude": "139.6917",    "daily": ["temperature_2m_max", "temperature_2m_min", "wind_speed_10m_max", "precipitation_sum"],    "temperature_unit": "F",    "forecast_days": 7  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_4GROYqzIvlRY7pyIngWSGMXL', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "35.68",\n    "longitude": "-121.34",\n    "forecast_days": 10,\n    "daily": ["temperature_2m_max", "precipitation_sum"],\n    "temperature_unit": "Fahrenheit",\n    "precipitation_unit": "inches"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "35.68",    "longitude": "-121.34",    "forecast_days": 10,    "daily": ["temperature_2m_max", "precipitation_sum"],    "temperature_unit": "Fahrenheit",    "precipitation_unit": "inches"  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_nxuanlsSkgbAnCbMuasgGVsH', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "35.6895",\n    "longitude": "139.6917",\n    "forecast_days": 7,\n    "temperature_unit": "C",\n    "wind_speed_unit": "km/h",\n    "precipitation_unit": "mm",\n    "hourly": ["temperature_2m_max", "wind_speed_10m_max", "precipitation_sum"],\n    "daily": ["temperature_2m_max", "wind_speed_10m_max", "precipitation_sum"],\n    "apikey": "your_api_key"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "35.6895",    "longitude": "139.6917",    "forecast_days": 7,    "temperature_unit": "C",    "wind_speed_unit": "km/h",    "precipitation_unit": "mm",    "hourly": ["temperature_2m_max", "wind_speed_10m_max", "precipitation_sum"],    "daily": ["temperature_2m_max", "wind_speed_10m_max", "precipitation_sum"],    "apikey": "your_api_key"  })
the function call params list cannot parse into dict.
tool_calls : 
[ChatCompletionMessageToolCall(id='call_2FvLMFYCxnvl8mFcWvim9hQH', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "47.8095",\n    "longitude": "13.0550",\n    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum", "windspeed_10m_max"],\n    "temperature_unit": "F",\n    "wind_speed_unit": "mph",\n    "timezone": "Europe/Vienna",\n    "forecast_days": 7\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "47.8095",    "longitude": "13.0550",    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum", "windspeed_10m_max"],    "temperature_unit": "F",    "wind_speed_unit": "mph",    "timezone": "Europe/Vienna",    "forecast_days": 7  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_r3UDT1NP3uq8BmlGZzhou1Ka', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "39.113014",\n    "longitude": "-105.358887",\n    "forecast_days": 10,\n    "temperature_unit": "F",\n    "wind_speed_unit": "mph",\n    "timezone": "local",\n    "daily": ["temperature_2m_max", "temperature_2m_min", "wind_speed_10m_max", "precipitation_sum"],\n    "apikey": "your_api_key"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "39.113014",    "longitude": "-105.358887",    "forecast_days": 10,    "temperature_unit": "F",    "wind_speed_unit": "mph",    "timezone": "local",    "daily": ["temperature_2m_max", "temperature_2m_min", "wind_speed_10m_max", "precipitation_sum"],    "apikey": "your_api_key"  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_yQn0JOrQpQtMkiYxHWuUnBJM', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "37.8651",\n    "longitude": "-119.5383",\n    "hourly": ["temperature", "wind_speed", "precipitation"],\n    "daily": [],\n    "temperature_unit": "F",\n    "wind_speed_unit": "mph",\n    "precipitation_unit": "in",\n    "timeformat": "timestamp",\n    "timezone": "America/Los_Angeles",\n    "forecast_days": 10,\n    "apikey": "your_api_key"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "37.8651",    "longitude": "-119.5383",    "hourly": ["temperature", "wind_speed", "precipitation"],    "daily": [],    "temperature_unit": "F",    "wind_speed_unit": "mph",    "precipitation_unit": "in",    "timeformat": "timestamp",    "timezone": "America/Los_Angeles",    "forecast_days": 10,    "apikey": "your_api_key"  })
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
tool_calls : 
[ChatCompletionMessageToolCall(id='call_IziLJGqxbb9yEtMiRLx6RINH', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "46.0207,46.4836",\n    "longitude": "7.7491,9.8355",\n    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"],\n    "temperature_unit": "F",\n    "wind_speed_unit": "mph",\n    "precipitation_unit": "in",\n    "timezone": "Europe/Zurich",\n    "start_date": "2022-04-15",\n    "end_date": "2022-04-21",\n    "forecast_days": 7\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "46.0207,46.4836",    "longitude": "7.7491,9.8355",    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"],    "temperature_unit": "F",    "wind_speed_unit": "mph",    "precipitation_unit": "in",    "timezone": "Europe/Zurich",    "start_date": "2022-04-15",    "end_date": "2022-04-21",    "forecast_days": 7  })
tool_calls : 
[ChatCompletionMessageToolCall(id='call_hggpJOexynJm1kjLDypuzT3I', function=Function(arguments='{\n  "url": "https://api.open-meteo.com/v1/forecast",\n  "params": {\n    "latitude": "46.2028",\n    "longitude": "-121.4905",\n    "elevation": "3743",\n    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"],\n    "forecast_days": 10,\n    "temperature_unit": "C",\n    "precipitation_unit": "mm",\n    "timezone": "America/Los_Angeles",\n    "apikey": "<YOUR_OPEN-METEO_API_KEY>"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://api.open-meteo.com/v1/forecast",  params = {    "latitude": "46.2028",    "longitude": "-121.4905",    "elevation": "3743",    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"],    "forecast_days": 10,    "temperature_unit": "C",    "precipitation_unit": "mm",    "timezone": "America/Los_Angeles",    "apikey": "<YOUR_OPEN-METEO_API_KEY>"  })
model_generated_function : None
model_generated_function : None
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_r3UDT1NP3uq8BmlGZzhou1Ka', function=Function(arguments='{\n  "url": "https://mashape-community-urban-dictionary.p.rapidapi.com/define",\n  "headers": {\n    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",\n    "X-RapidAPI-Host": "mashape-community-urban-dictionary.p.rapidapi.com"\n  },\n  "params": {\n    "term": "bet"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://mashape-community-urban-dictionary.p.rapidapi.com/define",  headers = {    "X-RapidAPI-Key": "8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c",    "X-RapidAPI-Host": "mashape-community-urban-dictionary.p.rapidapi.com"  },  params = {    "term": "bet"  })
current matched count: 23
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_0yKCoOFjBcrVvozt0tjw28kF', function=Function(arguments='{\n  "url": "http://www.omdbapi.com/",\n  "params": {\n    "t": "Barbie",\n    "y": "2023",\n    "apikey": "8b5a9d56"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://www.omdbapi.com/",  params = {    "t": "Barbie",    "y": "2023",    "apikey": "8b5a9d56"  })
current matched count: 24
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_BRJ3fshboPGfoJD2dbuIjQzY', function=Function(arguments='{\n  "url": "http://www.omdbapi.com/",\n  "params": {\n    "t": "The Social Network",\n    "plot": "full",\n    "apikey": "8b5a9d56"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://www.omdbapi.com/",  params = {    "t": "The Social Network",    "plot": "full",    "apikey": "8b5a9d56"  })
current matched count: 25
tool_calls : 
[ChatCompletionMessageToolCall(id='call_QNwmbjsALL4RUd7XAJUumZXL', function=Function(arguments='{\n  "url": "http://www.omdbapi.com/",\n  "params": {\n    "t": "Inception",\n    "y": "2010",\n    "plot": "full",\n    "r": "json",\n    "apikey": "8b5a9d56"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://www.omdbapi.com/",  params = {    "t": "Inception",    "y": "2010",    "plot": "full",    "r": "json",    "apikey": "8b5a9d56"  })
current matched count: 26
tool_calls : 
[ChatCompletionMessageToolCall(id='call_AHgcgJl95pxjdRjTn21CGmIv', function=Function(arguments='{\n  "url": "http://www.omdbapi.com/",\n  "params": {\n    "t": "Gorilla",\n    "plot": "full",\n    "r": "json",\n    "apikey": "8b5a9d56"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://www.omdbapi.com/",  params = {    "t": "Gorilla",    "plot": "full",    "r": "json",    "apikey": "8b5a9d56"  })
current matched count: 27
tool_calls : 
[ChatCompletionMessageToolCall(id='call_SjtfxcknJLIbYPTDXueZRXW7', function=Function(arguments='{\n  "url": "http://www.omdbapi.com/",\n  "params": {\n    "t": "Oppenheimer",\n    "y": "2023",\n    "plot": "full",\n    "apikey": "8b5a9d56"\n  }\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "http://www.omdbapi.com/",  params = {    "t": "Oppenheimer",    "y": "2023",    "plot": "full",    "apikey": "8b5a9d56"  })
current matched count: 28
model_generated_function : None
tool_calls : 
[ChatCompletionMessageToolCall(id='call_3SoTnH6kj4TLwLzj5o3i6BUY', function=Function(arguments='{\n  "url": "https://date.nager.at/api/v3/LongWeekend/2023/CA"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://date.nager.at/api/v3/LongWeekend/2023/CA")
current matched count: 29
tool_calls : 
[ChatCompletionMessageToolCall(id='call_ZFSrjuMGwApjUBc9khx3ISpJ', function=Function(arguments='{\n  "url": "https://date.nager.at/api/v3/LongWeekend/2023/CA"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://date.nager.at/api/v3/LongWeekend/2023/CA")
current matched count: 30
tool_calls : 
[ChatCompletionMessageToolCall(id='call_fWm3Q8zj1g8aKny5Cq2C8PZ7', function=Function(arguments='{\n  "url": "https://date.nager.at/api/v3/LongWeekend/2023/FR"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://date.nager.at/api/v3/LongWeekend/2023/FR")
current matched count: 31
tool_calls : 
[ChatCompletionMessageToolCall(id='call_yNSWsqqZ0WajnepyCcRSPAho', function=Function(arguments='{\n  "url": "https://date.nager.at/api/v3/LongWeekend/2023/JP"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://date.nager.at/api/v3/LongWeekend/2023/JP")
current matched count: 32
tool_calls : 
[ChatCompletionMessageToolCall(id='call_HTdMYFZZOTmWyJTwGMNXicQD', function=Function(arguments='{\n  "url": "https://date.nager.at/api/v3/LongWeekend/2023/CA"\n}', name='requests_get'), type='function')]
model_generated_function : 
requests.get(  url = "https://date.nager.at/api/v3/LongWeekend/2023/CA")
current matched count: 33
Accuracy: 0.47
-----------------------
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
model_generated_function : 
requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1})
model_generated_result: []
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1})"]
model_generated_result: []
model_generated_function : 
[]
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1})"]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 40.712776, 'lon': -74.005974, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.712776, 'lon': -74.005974, 'c': 1, 's': 1})"]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 40.7128, 'lon': -74.006, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.7128, 'lon': -74.006, 'c': 1, 's': 1})"]
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 48.8584, 'lon': 2.2945}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945})"]
current matched count: 1
model_generated_result: [{'args': {'url': 'https://covid-193.p.rapidapi.com/statistics', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, 'timeout': 10, 'params': {'country': 'Uganda'}, 'stream': False}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout = 10, params = {'country': 'Uganda'}, stream = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
current matched count: 2
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://covid-193.p.rapidapi.com/statistics', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, 'params': {'country': 'Iran'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params = {'country': 'Iran'})"]
current matched count: 3
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
current matched count: 4
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
current matched count: 5
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD')"]
current matched count: 6
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
current matched count: 7
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
current matched count: 8
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
current matched count: 9
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
current matched count: 10
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
current matched count: 11
model_generated_result: [{'args': {'url': 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, 'params': {'search': 'Meta'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Meta'})"]
current matched count: 12
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, 'params': {'search': 'Tesla'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
current matched count: 13
model_generated_result: [{'args': {'url': 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, 'params': {'search': 'Apple'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Apple'})"]
current matched count: 14
model_generated_result: [{'args': {'url': 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, 'params': {'search': 'Tesla'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
current matched count: 15
model_generated_result: [{'args': {'url': 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, 'params': {'search': 'Tesla'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
current matched count: 16
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'http://ip-api.com/json', 'params': {'fields': 'status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query', 'lang': 'fr'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query', 'lang': 'fr'})"]
model_generated_result: [{'args': {'url': 'http://ip-api.com/json', 'params': {'fields': 'country,city,timezone', 'lang': 'fr'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'country,city,timezone', 'lang': 'fr'})"]
current matched count: 17
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/search', 'params': {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}, 'headers': {'address': '5331 Rexford Court, Montgomery AL 36116'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}, headers = {'address': '5331 Rexford Court, Montgomery AL 36116'})"]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/search', 'params': {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'}, 'headers': {'address': '1600 Amphitheatre Parkway, Mountain View, CA'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'}, headers = {'address': '1600 Amphitheatre Parkway, Mountain View, CA'})"]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/reverse', 'params': {'lat': 37.4224764, 'lon': -122.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 37.4224764, 'lon': -122.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
current matched count: 18
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/search', 'params': {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}, 'headers': {'address': 'Soda Hall, Berkeley, CA'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}, headers = {'address': 'Soda Hall, Berkeley, CA'})"]
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/reverse', 'params': {'lat': 39.4224764, 'lon': -112.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 39.4224764, 'lon': -112.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
current matched count: 19
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/reverse', 'params': {'lat': 40.748817, 'lon': -73.985428, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 40.748817, 'lon': -73.985428, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
current matched count: 20
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/reverse', 'params': {'lat': 48.8584, 'lon': 2.2945, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 48.8584, 'lon': 2.2945, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
current matched count: 21
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'forecast_days': 7}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'forecast_days': 7})"]
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '35.68', 'longitude': '-121.34', 'forecast_days': 10, 'daily': ['temperature_2m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'precipitation_unit': 'inches'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.68', 'longitude': '-121.34', 'forecast_days': 10, 'daily': ['temperature_2m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'precipitation_unit': 'inches'})"]
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'C', 'wind_speed_unit': 'km/h', 'precipitation_unit': 'mm', 'forecast_days': 7}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'C', 'wind_speed_unit': 'km/h', 'precipitation_unit': 'mm', 'forecast_days': 7})"]
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '47.8095', 'longitude': '13.0550', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'timezone': 'Europe/Vienna', 'forecast_days': 7}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '47.8095', 'longitude': '13.0550', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'timezone': 'Europe/Vienna', 'forecast_days': 7})"]
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '39.113014', 'longitude': '-105.358887', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'timezone': 'America/Denver', 'forecast_days': 10}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '39.113014', 'longitude': '-105.358887', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'timezone': 'America/Denver', 'forecast_days': 10})"]
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '37.8651', 'longitude': '-119.5383', 'hourly': ['temperature', 'wind_speed', 'precipitation'], 'daily': [], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'precipitation_unit': 'in', 'timeformat': 'local', 'timezone': 'America/Los_Angeles', 'forecast_days': 10, 'apikey': 'your_api_key_here'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '37.8651', 'longitude': '-119.5383', 'hourly': ['temperature', 'wind_speed', 'precipitation'], 'daily': [], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'precipitation_unit': 'in', 'timeformat': 'local', 'timezone': 'America/Los_Angeles', 'forecast_days': 10, 'apikey': 'your_api_key_here'})"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '46.0207,46.4836', 'longitude': '7.7491,9.8355', 'daily': ['temperature', 'wind_speed', 'precipitation'], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'precipitation_unit': 'in', 'start_date': '2022-04-15', 'end_date': '2022-04-21', 'timezone': 'Europe/Zurich', 'forecast_days': 7}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '46.0207,46.4836', 'longitude': '7.7491,9.8355', 'daily': ['temperature', 'wind_speed', 'precipitation'], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'precipitation_unit': 'in', 'start_date': '2022-04-15', 'end_date': '2022-04-21', 'timezone': 'Europe/Zurich', 'forecast_days': 7})"]
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '46.2028', 'longitude': '-121.4905', 'elevation': '3743', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum'], 'temperature_unit': 'C', 'precipitation_unit': 'mm', 'forecast_days': 10, 'timezone': 'America/Los_Angeles'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '46.2028', 'longitude': '-121.4905', 'elevation': '3743', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum'], 'temperature_unit': 'C', 'precipitation_unit': 'mm', 'forecast_days': 10, 'timezone': 'America/Los_Angeles'})"]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, 'params': {'term': 'bet'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'bet'})"]
current matched count: 22
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'http://www.omdbapi.com/', 'params': {'t': 'Inception', 'y': '2010', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Inception', 'y': '2010', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
current matched count: 23
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://date.nager.at/api/v3/LongWeekend/2023/CA'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
current matched count: 24
model_generated_result: [{'args': {'url': 'https://date.nager.at/api/v3/LongWeekend/2023/CA'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
current matched count: 25
model_generated_result: [{'args': {'url': 'https://date.nager.at/api/v3/LongWeekend/2023/FR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/FR')"]
current matched count: 26
model_generated_result: [{'args': {'url': 'https://date.nager.at/api/v3/LongWeekend/2023/JP'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/JP')"]
current matched count: 27
model_generated_result: [{'args': {'url': 'https://date.nager.at/api/v3/LongWeekend/2023/CA'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
current matched count: 28
Accuracy: 0.4
-----------------------
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1})"]
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
Error occur when invoke model.
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1})"]
model_generated_function_params_pair_count: 7
correct_params_count: 6
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
Error occur when invoke model.
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945, 'c': 1, 's': 1})"]
model_generated_function_params_pair_count: 7
correct_params_count: 6
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 40.712776, 'lon': -74.005974, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.712776, 'lon': -74.005974, 'c': 1, 's': 1})"]
model_generated_function_params_pair_count: 7
correct_params_count: 6
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 40.7128, 'lon': -74.006, 'c': 1, 's': 1}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.7128, 'lon': -74.006, 'c': 1, 's': 1})"]
model_generated_function_params_pair_count: 7
correct_params_count: 6
compare reuslt: False
model_generated_result: [{'args': {'url': 'https://timezone-by-location.p.rapidapi.com/timezone', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, 'params': {'lat': 48.8584, 'lon': 2.2945}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 1
model_generated_result: [{'args': {'url': 'https://covid-193.p.rapidapi.com/statistics', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, 'timeout': 10, 'params': {'country': 'Uganda'}, 'stream': False}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout = 10, params = {'country': 'Uganda'}, stream = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 2
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://covid-193.p.rapidapi.com/statistics', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, 'params': {'country': 'Iran'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params = {'country': 'Iran'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 3
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 4
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 5
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 6
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 7
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 9
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 10
model_generated_result: [{'args': {'url': 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 11
model_generated_result: [{'args': {'url': 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, 'params': {'search': 'Meta'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Meta'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 12
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, 'params': {'search': 'Tesla'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 13
model_generated_result: [{'args': {'url': 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, 'params': {'search': 'Apple'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Apple'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 14
model_generated_result: [{'args': {'url': 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, 'params': {'search': 'Tesla'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 15
model_generated_result: [{'args': {'url': 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, 'params': {'search': 'Tesla'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 16
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'http://ip-api.com/json', 'params': {'fields': 'status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query', 'lang': 'fr'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query', 'lang': 'fr'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'url': 'http://ip-api.com/json', 'params': {'fields': 'country,city,timezone', 'lang': 'fr'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'country,city,timezone', 'lang': 'fr'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 17
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/search', 'params': {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}, 'headers': {'address': '5331 Rexford Court, Montgomery AL 36116'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}, headers = {'address': '5331 Rexford Court, Montgomery AL 36116'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 3
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/search', 'params': {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'}, 'headers': {'address': '1600 Amphitheatre Parkway, Mountain View, CA'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'}, headers = {'address': '1600 Amphitheatre Parkway, Mountain View, CA'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 3
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/reverse', 'params': {'lat': 37.4224764, 'lon': -122.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 37.4224764, 'lon': -122.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 18
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/search', 'params': {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}, 'headers': {'address': 'Soda Hall, Berkeley, CA'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}, headers = {'address': 'Soda Hall, Berkeley, CA'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/reverse', 'params': {'lat': 39.4224764, 'lon': -112.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 39.4224764, 'lon': -112.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 19
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/reverse', 'params': {'lat': 40.748817, 'lon': -73.985428, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 40.748817, 'lon': -73.985428, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 20
model_generated_result: [{'args': {'url': 'https://geocode.maps.co/reverse', 'params': {'lat': 48.8584, 'lon': 2.2945, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 48.8584, 'lon': 2.2945, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 21
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'forecast_days': 7}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'forecast_days': 7})"]
model_generated_function_params_pair_count: 6
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '35.68', 'longitude': '-121.34', 'forecast_days': 10, 'daily': ['temperature_2m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'precipitation_unit': 'inches'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.68', 'longitude': '-121.34', 'forecast_days': 10, 'daily': ['temperature_2m_max', 'precipitation_sum'], 'temperature_unit': 'F', 'precipitation_unit': 'inches'})"]
model_generated_function_params_pair_count: 7
correct_params_count: 5
compare reuslt: False
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'C', 'wind_speed_unit': 'km/h', 'precipitation_unit': 'mm', 'forecast_days': 7}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'wind_speed_10m_max', 'precipitation_sum'], 'temperature_unit': 'C', 'wind_speed_unit': 'km/h', 'precipitation_unit': 'mm', 'forecast_days': 7})"]
model_generated_function_params_pair_count: 8
correct_params_count: 4
compare reuslt: False
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '47.8095', 'longitude': '13.0550', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum', 'wind_speed_10m_max'], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'timezone': 'Europe/Vienna', 'forecast_days': 7}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '47.8095', 'longitude': '13.0550', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum', 'wind_speed_10m_max'], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'timezone': 'Europe/Vienna', 'forecast_days': 7})"]
model_generated_function_params_pair_count: 8
correct_params_count: 6
compare reuslt: False
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '39.113014', 'longitude': '-105.358887', 'forecast_days': 10, 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'timezone': 'America/Denver', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'wind_speed_10m_max', 'precipitation_sum'], 'apikey': 'your_api_key'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '39.113014', 'longitude': '-105.358887', 'forecast_days': 10, 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'timezone': 'America/Denver', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'wind_speed_10m_max', 'precipitation_sum'], 'apikey': 'your_api_key'})"]
model_generated_function_params_pair_count: 9
correct_params_count: 5
compare reuslt: False
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '37.8651', 'longitude': '-119.5383', 'hourly': ['temperature', 'wind_speed', 'precipitation'], 'forecast_days': 10, 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'precipitation_unit': 'in', 'timezone': 'America/Los_Angeles'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '37.8651', 'longitude': '-119.5383', 'hourly': ['temperature', 'wind_speed', 'precipitation'], 'forecast_days': 10, 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'precipitation_unit': 'in', 'timezone': 'America/Los_Angeles'})"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 22
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '46.0207', 'longitude': '7.7491', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum'], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'precipitation_unit': 'in', 'timeformat': 'iso8601', 'timezone': 'Europe/Zurich', 'forecast_days': 7, 'start_date': '2022-04-15', 'end_date': '2022-04-21', 'apikey': 'your_api_key_here'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '46.0207', 'longitude': '7.7491', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum'], 'temperature_unit': 'F', 'wind_speed_unit': 'mph', 'precipitation_unit': 'in', 'timeformat': 'iso8601', 'timezone': 'Europe/Zurich', 'forecast_days': 7, 'start_date': '2022-04-15', 'end_date': '2022-04-21', 'apikey': 'your_api_key_here'})"]
model_generated_function_params_pair_count: 13
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'url': 'https://api.open-meteo.com/v1/forecast', 'params': {'latitude': '46.2028', 'longitude': '-121.4905', 'elevation': '3743', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum'], 'temperature_unit': 'C', 'precipitation_unit': 'mm', 'forecast_days': 10, 'timezone': 'America/Los_Angeles'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '46.2028', 'longitude': '-121.4905', 'elevation': '3743', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum'], 'temperature_unit': 'C', 'precipitation_unit': 'mm', 'forecast_days': 10, 'timezone': 'America/Los_Angeles'})"]
model_generated_function_params_pair_count: 9
correct_params_count: 6
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', 'headers': {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, 'params': {'term': 'bet'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'bet'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 23
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'http://www.omdbapi.com/', 'params': {'t': 'Inception', 'y': '2010', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'}}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Inception', 'y': '2010', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 24
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'url': 'https://date.nager.at/api/v3/LongWeekend/2023/CA'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
model_generated_result: [{'args': {'url': 'https://date.nager.at/api/v3/LongWeekend/2023/CA'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
model_generated_result: [{'args': {'url': 'https://date.nager.at/api/v3/LongWeekend/2023/FR'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/FR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
model_generated_result: [{'args': {'url': 'https://date.nager.at/api/v3/LongWeekend/2023/JP'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/JP')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
model_generated_result: [{'args': {'url': 'https://date.nager.at/api/v3/LongWeekend/2023/CA'}, 'type': 'requests_get'}]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 29
Accuracy: 0.41
-----------------------
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc.binomial.probability(n = 20, k = 5, p = 0.6)']
model_generated_result: [{'args': {'n': 30, 'k': 15, 'p': 0.5}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc.binomial.probability(n = 30, k = 15, p = 0.5)']
model_generated_result: [{'args': {'vectorA': [0.5, 0.7, 0.2, 0.9, 0.1], 'vectorB': [0.4, 0.6, 0.3, 0.8, 0.2]}, 'type': 'calculate_cosine_similarity'}]
model_generated_function : 
['calculate.cosine.similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'mass': 50, 'volume': 10}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate.density(mass = 50, volume = 10)']
model_generated_result: [{'args': {'mass': 120, 'volume': 30}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate.density(mass = 120, volume = 30)']
model_generated_result: [{'args': {'initial_velocity': 15, 'acceleration': 9.8, 'time': 10}, 'type': 'calculate_displacement'}]
model_generated_function : 
['calculate.displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'present_value': 5000, 'interest_rate': 0.05, 'periods': 10}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate.future.value(present_value = 5000, interest_rate = 0.05, periods = 10)']
model_generated_result: []
model_generated_function : 
[]
Error occur when invoke model.
model_generated_function : None
model_generated_result: [{'args': {'numbers': [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate.mean(numbers = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])']
model_generated_result: [{'args': {'n': 26, 'k': 5}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate.permutations(n = 26, k = 5)']
Error occur when invoke model.
model_generated_function : None
Error occur when invoke model.
model_generated_function : None
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc.binomial.probability(n = 20, k = 5, p = 0.6)']
model_generated_result: [{'args': {'n': 30, 'k': 15, 'p': 0.5}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc.binomial.probability(n = 30, k = 15, p = 0.5)']
model_generated_result: [{'args': {'vectorA': [0.5, 0.7, 0.2, 0.9, 0.1], 'vectorB': [0.4, 0.6, 0.3, 0.8, 0.2]}, 'type': 'calculate_cosine_similarity'}]
model_generated_function : 
['calculate.cosine.similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'mass': 50, 'volume': 10}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate.density(mass = 50, volume = 10)']
model_generated_result: [{'args': {'mass': 120, 'volume': 30}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate.density(mass = 120, volume = 30)']
model_generated_result: [{'args': {'initial_velocity': 15, 'acceleration': 9.8, 'time': 10}, 'type': 'calculate_displacement'}]
model_generated_function : 
['calculate.displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'charge': 7.8, 'voltage': 15.2}, 'type': 'calculate_electrostatic_potential_energy'}]
model_generated_function : 
['calculate.electrostatic.potential.energy(charge = 7.8, voltage = 15.2)']
model_generated_result: []
model_generated_function : 
[]
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc.binomial.probability(n = 20, k = 5, p = 0.6)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
model_generated_result: [{'args': {'n': 30, 'k': 15, 'p': 0.5}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc.binomial.probability(n = 30, k = 15, p = 0.5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 2
model_generated_result: [{'args': {'vectorA': [0.5, 0.7, 0.2, 0.9, 0.1], 'vectorB': [0.4, 0.6, 0.3, 0.8, 0.2]}, 'type': 'calculate_cosine_similarity'}]
model_generated_function : 
['calculate.cosine.similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'mass': 50, 'volume': 10}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate.density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 4
model_generated_result: [{'args': {'mass': 120, 'volume': 30}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate.density(mass = 120, volume = 30)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
model_generated_result: [{'args': {'initial_velocity': 15, 'acceleration': 9.8, 'time': 10}, 'type': 'calculate_displacement'}]
model_generated_function : 
['calculate.displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'charge': 7.8, 'voltage': 15.2}, 'type': 'calculate_electrostatic_potential_energy'}]
model_generated_function : 
['calculate.electrostatic.potential.energy(charge = 7.8, voltage = 15.2)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 7
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'present_value': 5000, 'interest_rate': 5, 'periods': 10}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate.future.value(present_value = 5000, interest_rate = 5, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'present_value': 8000, 'interest_rate': 4, 'periods': 15}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate.future.value(present_value = 8000, interest_rate = 4, periods = 15)']
model_generated_function_params_pair_count: 3
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'numbers': [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate.mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
model_generated_result: [{'args': {'numbers': [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate.mean(numbers = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 9
model_generated_result: [{'args': {'n': 26, 'k': 5}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate.permutations(n = 26, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 10
model_generated_result: [{'args': {'n': 30, 'k': 7}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate.permutations(n = 30, k = 7)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
model_generated_result: [{'args': {'numbers': [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate.standard.deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 12
model_generated_result: [{'args': {'numbers': [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate.standard.deviation(numbers = [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 13
model_generated_result: [{'args': {'base': 500, 'height': 300}, 'type': 'calculate_triangle_area'}]
model_generated_function : 
['calculate.triangle.area(base = 500, height = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 14
model_generated_result: [{'args': {'base': 700, 'height': 450}, 'type': 'calculate_triangle_area'}]
model_generated_function : 
['calculate.triangle.area(base = 700, height = 450)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 15
model_generated_result: [{'args': {'amount': 5000, 'from_currency': 'EUR', 'to_currency': 'JPY'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert.currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 16
model_generated_result: [{'args': {'amount': 3000, 'from_currency': 'USD', 'to_currency': 'GBP'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert.currency(amount = 3000, from_currency = 'USD', to_currency = 'GBP')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 17
model_generated_result: [{'args': {'function': '3*t^2 + 2*t + 1', 'x': 5}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate.derivative(function = '3*t^2 + 2*t + 1', x = 5)"]
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'function': '4*x^3 + 3*x^2 + 2*x + 1', 'x': 7}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate.derivative(function = '4*x^3 + 3*x^2 + 2*x + 1', x = 7)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 18
model_generated_result: [{'args': {'term': 'lit'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find.term.on.urban.dictionary(term = 'lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
model_generated_result: [{'args': {'term': 'flex'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find.term.on.urban.dictionary(term = 'flex')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
model_generated_result: [{'args': {'radius': 15}, 'type': 'geometry_area_circle'}]
model_generated_function : 
['geometry.area.circle(radius = 15)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'stock_name': 'GOOGL'}, 'type': 'get_company_name_by_stock_name'}]
model_generated_function : 
["get.company.name.by.stock.name(stock_name = 'GOOGL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get.coordinate.by.ip.address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
model_generated_result: [{'args': {'ip_address': '172.16.254.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get.coordinate.by.ip.address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 24
model_generated_result: [{'args': {'city_name': 'Paris'}, 'type': 'get_coordinates_from_city'}]
model_generated_function : 
["get.coordinates.from.city(city_name = 'Paris')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'country': 'Brazil'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get.covid.death.by.country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
model_generated_result: [{'args': {'country': 'India'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get.covid.death.by.country(country = 'India')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
model_generated_result: [{'args': {'pointA': '45.76, 4.85', 'pointB': '48.85, 2.35'}, 'type': 'get_distance'}]
model_generated_function : 
["get.distance(pointA = '45.76, 4.85', pointB = '48.85, 2.35')"]
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'pointA': '32.71, -117.16', 'pointB': '34.05, -118.25'}, 'type': 'get_distance'}]
model_generated_function : 
["get.distance(pointA = '32.71, -117.16', pointB = '34.05, -118.25')"]
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'n': 20}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get.fibonacci.sequence(n = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
model_generated_result: [{'args': {'n': 50}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get.fibonacci.sequence(n = 50)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 29
model_generated_result: [{'args': {'ASIN': 'B08N5WRWNW'}, 'type': 'get_price_by_amazon_ASIN'}]
model_generated_function : 
["get.price.by.amazon.ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 30
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'number': 4567}, 'type': 'get_prime_factors'}]
model_generated_function : 
['get.prime.factors(number = 4567)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 31
model_generated_result: [{'args': {'number': 7891}, 'type': 'get_prime_factors'}]
model_generated_function : 
['get.prime.factors(number = 7891)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 32
model_generated_result: [{'args': {'ASIN': 'B08L8KC1J7'}, 'type': 'get_product_name_by_amazon_ASIN'}]
model_generated_function : 
["get.product.name.by.amazon.ASIN(ASIN = 'B08L8KC1J7')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
model_generated_result: [{'args': {'ASIN': 'B07FZ8S74R'}, 'type': 'get_product_name_by_amazon_ASIN'}]
model_generated_function : 
["get.product.name.by.amazon.ASIN(ASIN = 'B07FZ8S74R')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 34
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'stock_name': 'AAPL', 'interval': '1mo', 'diffandsplits': True}, 'type': 'get_stock_history'}]
model_generated_function : 
["get.stock.history(stock_name = 'AAPL', interval = '1mo', diffandsplits = True)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 35
model_generated_result: [{'args': {'stock_name': 'MSFT', 'interval': '1wk', 'diffandsplits': False}, 'type': 'get_stock_history'}]
model_generated_function : 
["get.stock.history(stock_name = 'MSFT', interval = '1wk', diffandsplits = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 36
model_generated_result: [{'args': {'stock_name': 'AAPL'}, 'type': 'get_stock_price_by_stock_name'}]
model_generated_function : 
["get.stock.price.by.stock.name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 37
model_generated_result: [{'args': {'stock_name': 'MSFT'}, 'type': 'get_stock_price_by_stock_name'}]
model_generated_function : 
["get.stock.price.by.stock.name(stock_name = 'MSFT')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 38
model_generated_result: [{'args': {'long': '123.45', 'lat': '-67.89'}, 'type': 'get_time_zone_by_coord'}]
model_generated_function : 
["get.time.zone.by.coord(long = '123.45', lat = '-67.89')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 39
model_generated_result: [{'args': {'long': '80.75', 'lat': '35.22'}, 'type': 'get_time_zone_by_coord'}]
model_generated_function : 
["get.time.zone.by.coord(long = '80.75', lat = '35.22')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 40
model_generated_result: [{'args': {'coordinates': [90.0, 0.0]}, 'type': 'get_weather_data'}]
model_generated_function : 
['get.weather.data(coordinates = [90.0, 0.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 41
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_zipcode_by_ip_address'}]
model_generated_function : 
["get.zipcode.by.ip.address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 42
model_generated_result: [{'args': {'ip_address': '172.16.254.1'}, 'type': 'get_zipcode_by_ip_address'}]
model_generated_function : 
["get.zipcode.by.ip.address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 43
model_generated_result: [{'args': {'matA': [[1, 2], [3, 4]], 'matB': [[5, 6], [7, 8]]}, 'type': 'mat_mul'}]
model_generated_function : 
['mat.mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 44
model_generated_result: [{'args': {'matA': [[2, 3], [4, 5]], 'matB': [[6, 7], [8, 9]]}, 'type': 'mat_mul'}]
model_generated_function : 
['mat.mul(matA = [[2, 3], [4, 5]], matB = [[6, 7], [8, 9]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 45
model_generated_result: [{'args': {'n': 7}, 'type': 'math_factorial'}]
model_generated_function : 
['math.factorial(n = 7)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 46
model_generated_result: [{'args': {'n': 12}, 'type': 'math_factorial'}]
model_generated_function : 
['math.factorial(n = 12)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 47
model_generated_result: [{'args': {'a': 450, 'b': 300}, 'type': 'math_gcd'}]
model_generated_function : 
['math.gcd(a = 450, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 48
model_generated_result: [{'args': {'a': 360, 'b': 240}, 'type': 'math_gcd'}]
model_generated_function : 
['math.gcd(a = 360, b = 240)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 49
model_generated_result: [{'args': {'a': 18, 'b': 24}, 'type': 'math_lcm'}]
model_generated_function : 
['math.lcm(a = 18, b = 24)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 50
model_generated_result: [{'args': {'a': 35, 'b': 45}, 'type': 'math_lcm'}]
model_generated_function : 
['math.lcm(a = 35, b = 45)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 51
model_generated_result: [{'args': {'loan_amount': 350000, 'interest_rate': 3.5, 'loan_period': 30}, 'type': 'mortgage_calculator'}]
model_generated_function : 
['mortgage.calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 3
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'loan_amount': 500000, 'interest_rate': 4.5, 'loan_period': 25}, 'type': 'mortgage_calculator'}]
model_generated_function : 
['mortgage.calculator(loan_amount = 500000, interest_rate = 4.5, loan_period = 25)']
model_generated_function_params_pair_count: 3
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'a': 3, 'b': 7, 'c': -10}, 'type': 'quadratic_roots'}]
model_generated_function : 
['quadratic.roots(a = 3, b = 7, c = -10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 52
model_generated_result: [{'args': {'a': 5, 'b': -8, 'c': 2}, 'type': 'quadratic_roots'}]
model_generated_function : 
['quadratic.roots(a = 5, b = -8, c = 2)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 53
model_generated_result: [{'args': {'zipcode': '90210'}, 'type': 'retrieve_city_based_on_zipcode'}]
model_generated_function : 
["retrieve.city.based.on.zipcode(zipcode = '90210')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 54
model_generated_result: [{'args': {'zipcode': '10001'}, 'type': 'retrieve_city_based_on_zipcode'}]
model_generated_function : 
["retrieve.city.based.on.zipcode(zipcode = '10001')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 55
model_generated_result: [{'args': {'year': '2010', 'country': 'FR'}, 'type': 'retrieve_holiday_by_year'}]
model_generated_function : 
["retrieve.holiday.by.year(year = '2010', country = 'FR')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 56
model_generated_result: [{'args': {'year': '2005', 'country': 'DE'}, 'type': 'retrieve_holiday_by_year'}]
model_generated_function : 
["retrieve.holiday.by.year(year = '2005', country = 'DE')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 57
model_generated_result: [{'args': {'array': [34, 2, 56, 7, 9, 12], 'reverse': True}, 'type': 'sort_array'}]
model_generated_function : 
['sort.array(array = [34, 2, 56, 7, 9, 12], reverse = True)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 58
model_generated_result: [{'args': {'array': [1, 2, 2, 7, 7, 10]}, 'type': 'sort_array'}]
model_generated_function : 
['sort.array(array = [1, 2, 2, 7, 7, 10])']
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'a': '0011', 'b': '1100'}, 'type': 'add_binary_numbers'}]
model_generated_function : 
["add.binary.numbers(a = '0011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 59
model_generated_result: [{'args': {'a': '10011', 'b': '1100'}, 'type': 'add_binary_numbers'}]
model_generated_function : 
["add.binary.numbers(a = '10011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 60
model_generated_result: [{'args': {'x': [1, 2, 3], 'y': [4, 5, 6], 'point': 10}, 'type': 'linear_regression'}]
model_generated_function : 
['linear.regression(x = [1, 2, 3], y = [4, 5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 61
model_generated_result: [{'args': {'x': [1, 2, -3], 'y': [4, -5, 6], 'point': 10}, 'type': 'linear_regression'}]
model_generated_function : 
['linear.regression(x = [1, 2, -3], y = [4, -5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 62
model_generated_result: [{'args': {'points': [[1, 1], [2, 2], [3, 4], [5, 5]]}, 'type': 'maxPoints'}]
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 2], [3, 4], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 63
model_generated_result: [{'args': {'points': [[1, 1], [2, 3], [4, 6], [5, 5]]}, 'type': 'maxPoints'}]
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 3], [4, 6], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 64
model_generated_result: [{'args': {'initial_investment': 10000, 'annual_contribution': 1000, 'years': 5, 'annual_return': 5, 'inflation_rate': [1, 2, 3, 4, 4]}, 'type': 'calculate_investment_value'}]
model_generated_function : 
['calculate.investment.value(initial_investment = 10000, annual_contribution = 1000, years = 5, annual_return = 5, inflation_rate = [1, 2, 3, 4, 4])']
model_generated_function_params_pair_count: 5
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'initial_investment': 1000000, 'annual_contribution': 1000, 'years': 3, 'annual_return': 10, 'inflation_rate': [1, 4, 4]}, 'type': 'calculate_investment_value'}]
model_generated_function : 
['calculate.investment.value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4])']
model_generated_function_params_pair_count: 5
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'weight': 100, 'height': 170, 'age': 30, 'gender': 'male', 'activity_level': 1, 'goal': 'lose'}, 'type': 'calculate_nutritional_needs'}]
model_generated_function : 
["calculate.nutritional.needs(weight = 100, height = 170, age = 30, gender = 'male', activity_level = 1, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 5
compare reuslt: False
model_generated_result: [{'args': {'weight': 59, 'height': 170, 'age': 80, 'gender': 'female', 'activity_level': 4, 'goal': 'lose'}, 'type': 'calculate_nutritional_needs'}]
model_generated_function : 
["calculate.nutritional.needs(weight = 59, height = 170, age = 80, gender = 'female', activity_level = 4, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 5
compare reuslt: False
model_generated_result: [{'args': {'check_in_date': '08-11-2024', 'check_out_date': '08-15-2024', 'customer_id': '123'}, 'type': 'book_room'}]
model_generated_function : 
["book.room(check_in_date = '08-11-2024', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 65
model_generated_result: [{'args': {'check_in_date': '12-11-2023', 'check_out_date': '08-15-2024', 'customer_id': '123'}, 'type': 'book_room'}]
model_generated_function : 
["book.room(check_in_date = '12-11-2023', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 66
model_generated_result: [{'args': {'burgers': {'quantity': 10, 'price': 5}, 'ice_creams': {'quantity': 7, 'price': 2}}, 'type': 'order_food'}]
model_generated_function : 
["order.food(burgers = {'quantity': 10, 'price': 5}, ice_creams = {'quantity': 7, 'price': 2})"]
model_generated_function_params_pair_count: 4
correct_params_count: 0
compare reuslt: False
model_generated_result: [{'args': {'dumplings': 101, 'rice_bowl': 20}, 'type': 'order_food'}]
model_generated_function : 
['order.food(dumplings = 101, rice_bowl = 20)']
model_generated_function_params_pair_count: 2
correct_params_count: 0
compare reuslt: False
model_generated_result: [{'args': {'movie_name': 'Avatar'}, 'type': 'get_movie_director'}]
model_generated_function : 
["get.movie.director(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 67
model_generated_result: [{'args': {'movie_name': 'Pulp Fiction'}, 'type': 'get_movie_director'}]
model_generated_function : 
["get.movie.director(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 68
model_generated_result: [{'args': {'movie_name': 'Avatar'}, 'type': 'get_movie_rating'}]
model_generated_function : 
["get.movie.rating(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 69
model_generated_result: [{'args': {'movie_name': 'Pulp Fiction'}, 'type': 'get_movie_rating'}]
model_generated_function : 
["get.movie.rating(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 70
model_generated_result: [{'args': {'vertices': [[1, 2], [3, 4], [1, 3]]}, 'type': 'polygon_area'}]
model_generated_function : 
['polygon.area(vertices = [[1, 2], [3, 4], [1, 3]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 71
model_generated_result: [{'args': {'vertices': [[1, 2], [3, 4], [1, 4], [3, 7]]}, 'type': 'polygon_area'}]
model_generated_function : 
['polygon.area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 72
Accuracy: 0.72
-----------------------
test_category: executable_multiple
test_category: executable_multiple_function
Generating: gorilla_openfunctions_v1_test_executable_multiple_function.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.16666666666666666}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc.binomial.probability(n = 20, k = 5, p = 0.16666666666666666)']
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc.binomial.probability(n = 20, k = 5, p = 0.6)']
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc.binomial.probability(n = 20, k = 5, p = 0.6)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'n': 30, 'k': 15, 'p': 0.5}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc.binomial.probability(n = 30, k = 15, p = 0.5)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'vectorA': [0.5, 0.7, 0.2, 0.9, 0.1], 'vectorB': [0.4, 0.6, 0.3, 0.8, 0.2]}, 'type': 'calculate_cosine_similarity'}]
model_generated_function : 
['calculate.cosine.similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'mass': 50, 'volume': 10}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate.density(mass = 50, volume = 10)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'mass': 120, 'volume': 30}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate.density(mass = 120, volume = 30)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'initial_velocity': 15, 'acceleration': 9.8, 'time': 10}, 'type': 'calculate_displacement'}]
model_generated_function : 
['calculate.displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'charge': 7.8, 'voltage': 15.2}, 'type': 'calculate_electrostatic_potential_energy'}]
model_generated_function : 
['calculate.electrostatic.potential.energy(charge = 7.8, voltage = 15.2)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'present_value': 5000, 'interest_rate': 5, 'periods': 10}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate.future.value(present_value = 5000, interest_rate = 5, periods = 10)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'present_value': 8000, 'interest_rate': 4, 'periods': 15}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate.future.value(present_value = 8000, interest_rate = 4, periods = 15)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'numbers': [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate.mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'numbers': [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate.mean(numbers = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'n': 26, 'k': 5}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate.permutations(n = 26, k = 5)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'n': 30, 'k': 7}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate.permutations(n = 30, k = 7)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'numbers': [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate.standard.deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'numbers': [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate.standard.deviation(numbers = [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'base': 500, 'height': 300}, 'type': 'calculate_triangle_area'}]
model_generated_function : 
['calculate.triangle.area(base = 500, height = 300)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'base': 700, 'height': 450}, 'type': 'calculate_triangle_area'}]
model_generated_function : 
['calculate.triangle.area(base = 700, height = 450)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'amount': 5000, 'from_currency': 'EUR', 'to_currency': 'JPY'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert.currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'amount': 3000, 'from_currency': 'USD', 'to_currency': 'GBP'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert.currency(amount = 3000, from_currency = 'USD', to_currency = 'GBP')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'function': '3*t^2 + 2*t + 1', 'x': 5}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate.derivative(function = '3*t^2 + 2*t + 1', x = 5)"]
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'function': '4*x^3 + 3*x^2 + 2*x + 1', 'x': 7}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate.derivative(function = '4*x^3 + 3*x^2 + 2*x + 1', x = 7)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'term': 'lit'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find.term.on.urban.dictionary(term = 'lit')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'term': 'flex'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find.term.on.urban.dictionary(term = 'flex')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'radius': 15}, 'type': 'geometry_area_circle'}]
model_generated_function : 
['geometry.area.circle(radius = 15)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'stock_name': 'GOOGL'}, 'type': 'get_company_name_by_stock_name'}]
model_generated_function : 
["get.company.name.by.stock.name(stock_name = 'GOOGL')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get.coordinate.by.ip.address(ip_address = '192.168.1.1')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'ip_address': '172.16.254.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get.coordinate.by.ip.address(ip_address = '172.16.254.1')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'city_name': 'Paris'}, 'type': 'get_coordinates_from_city'}]
model_generated_function : 
["get.coordinates.from.city(city_name = 'Paris')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'country': 'Brazil'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get.covid.death.by.country(country = 'Brazil')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'country': 'India'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get.covid.death.by.country(country = 'India')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'pointA': '45.76, 4.85', 'pointB': '48.85, 2.35'}, 'type': 'get_distance'}]
model_generated_function : 
["get.distance(pointA = '45.76, 4.85', pointB = '48.85, 2.35')"]
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'pointA': '32.71, -117.16', 'pointB': '34.05, -118.25'}, 'type': 'get_distance'}]
model_generated_function : 
["get.distance(pointA = '32.71, -117.16', pointB = '34.05, -118.25')"]
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'n': 20}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get.fibonacci.sequence(n = 20)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'n': 50}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get.fibonacci.sequence(n = 50)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'ASIN': 'B08N5WRWNW'}, 'type': 'get_price_by_amazon_ASIN'}]
model_generated_function : 
["get.price.by.amazon.ASIN(ASIN = 'B08N5WRWNW')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'number': 4567}, 'type': 'get_prime_factors'}]
model_generated_function : 
['get.prime.factors(number = 4567)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'number': 7891}, 'type': 'get_prime_factors'}]
model_generated_function : 
['get.prime.factors(number = 7891)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'ASIN': 'B08L8KC1J7'}, 'type': 'get_product_name_by_amazon_ASIN'}]
model_generated_function : 
["get.product.name.by.amazon.ASIN(ASIN = 'B08L8KC1J7')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'ASIN': 'B07FZ8S74R'}, 'type': 'get_product_name_by_amazon_ASIN'}]
model_generated_function : 
["get.product.name.by.amazon.ASIN(ASIN = 'B07FZ8S74R')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'ASIN': 'B07FZ8S74R'}, 'type': 'get_rating_by_amazon_ASIN'}]
model_generated_function : 
["get.rating.by.amazon.ASIN(ASIN = 'B07FZ8S74R')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'stock_name': 'AAPL', 'interval': '1mo', 'diffandsplits': True}, 'type': 'get_stock_history'}]
model_generated_function : 
["get.stock.history(stock_name = 'AAPL', interval = '1mo', diffandsplits = True)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'stock_name': 'MSFT', 'interval': '1wk', 'diffandsplits': False}, 'type': 'get_stock_history'}]
model_generated_function : 
["get.stock.history(stock_name = 'MSFT', interval = '1wk', diffandsplits = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'stock_name': 'AAPL'}, 'type': 'get_stock_price_by_stock_name'}]
model_generated_function : 
["get.stock.price.by.stock.name(stock_name = 'AAPL')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'stock_name': 'MSFT'}, 'type': 'get_stock_price_by_stock_name'}]
model_generated_function : 
["get.stock.price.by.stock.name(stock_name = 'MSFT')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'long': '123.45', 'lat': '-67.89'}, 'type': 'get_time_zone_by_coord'}]
model_generated_function : 
["get.time.zone.by.coord(long = '123.45', lat = '-67.89')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'long': '80.75', 'lat': '35.22'}, 'type': 'get_time_zone_by_coord'}]
model_generated_function : 
["get.time.zone.by.coord(long = '80.75', lat = '35.22')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'coordinates': [90.0, 0.0]}, 'type': 'get_weather_data'}]
model_generated_function : 
['get.weather.data(coordinates = [90.0, 0.0])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_zipcode_by_ip_address'}]
model_generated_function : 
["get.zipcode.by.ip.address(ip_address = '192.168.1.1')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'ip_address': '172.16.254.1'}, 'type': 'get_zipcode_by_ip_address'}]
model_generated_function : 
["get.zipcode.by.ip.address(ip_address = '172.16.254.1')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'matA': [[1, 2], [3, 4]], 'matB': [[5, 6], [7, 8]]}, 'type': 'mat_mul'}]
model_generated_function : 
['mat.mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'matA': [[2, 3], [4, 5]], 'matB': [[6, 7], [8, 9]]}, 'type': 'mat_mul'}]
model_generated_function : 
['mat.mul(matA = [[2, 3], [4, 5]], matB = [[6, 7], [8, 9]])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'n': 7}, 'type': 'math_factorial'}]
model_generated_function : 
['math.factorial(n = 7)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'n': 12}, 'type': 'math_factorial'}]
model_generated_function : 
['math.factorial(n = 12)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'a': 450, 'b': 300}, 'type': 'math_gcd'}]
model_generated_function : 
['math.gcd(a = 450, b = 300)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'a': 360, 'b': 240}, 'type': 'math_gcd'}]
model_generated_function : 
['math.gcd(a = 360, b = 240)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'a': 18, 'b': 24}, 'type': 'math_lcm'}]
model_generated_function : 
['math.lcm(a = 18, b = 24)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'a': 35, 'b': 45}, 'type': 'math_lcm'}]
model_generated_function : 
['math.lcm(a = 35, b = 45)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'loan_amount': 350000, 'interest_rate': 3.5, 'loan_period': 30}, 'type': 'mortgage_calculator'}]
model_generated_function : 
['mortgage.calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'loan_amount': 500000, 'interest_rate': 4.5, 'loan_period': 25}, 'type': 'mortgage_calculator'}]
model_generated_function : 
['mortgage.calculator(loan_amount = 500000, interest_rate = 4.5, loan_period = 25)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'a': 3, 'b': 7, 'c': -10}, 'type': 'quadratic_roots'}]
model_generated_function : 
['quadratic.roots(a = 3, b = 7, c = -10)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'a': 5, 'b': -8, 'c': 2}, 'type': 'quadratic_roots'}]
model_generated_function : 
['quadratic.roots(a = 5, b = -8, c = 2)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'zipcode': '90210'}, 'type': 'retrieve_city_based_on_zipcode'}]
model_generated_function : 
["retrieve.city.based.on.zipcode(zipcode = '90210')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'zipcode': '10001'}, 'type': 'retrieve_city_based_on_zipcode'}]
model_generated_function : 
["retrieve.city.based.on.zipcode(zipcode = '10001')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'year': '2010', 'country': 'FR'}, 'type': 'retrieve_holiday_by_year'}]
model_generated_function : 
["retrieve.holiday.by.year(year = '2010', country = 'FR')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'year': '2005', 'country': 'DE'}, 'type': 'retrieve_holiday_by_year'}]
model_generated_function : 
["retrieve.holiday.by.year(year = '2005', country = 'DE')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'array': [34, 2, 56, 7, 9, 12], 'reverse': True}, 'type': 'sort_array'}]
model_generated_function : 
['sort.array(array = [34, 2, 56, 7, 9, 12], reverse = True)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'array': [1, 2, 2, 7, 7, 10]}, 'type': 'sort_array'}]
model_generated_function : 
['sort.array(array = [1, 2, 2, 7, 7, 10])']
the function call params list cannot parse into dict.
an error occur when compare the ground_truth_function and model_generated_function.
compare reuslt: False
model_generated_result: [{'args': {'a': '0011', 'b': '1100'}, 'type': 'add_binary_numbers'}]
model_generated_function : 
["add.binary.numbers(a = '0011', b = '1100')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'a': '10011', 'b': '1100'}, 'type': 'add_binary_numbers'}]
model_generated_function : 
["add.binary.numbers(a = '10011', b = '1100')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: [{'args': {'x': [1, 2, 3], 'y': [4, 5, 6], 'point': 10}, 'type': 'linear_regression'}]
model_generated_function : 
['linear.regression(x = [1, 2, 3], y = [4, 5, 6], point = 10)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'x': [1, 2, -3], 'y': [4, -5, 6], 'point': 10}, 'type': 'linear_regression'}]
model_generated_function : 
['linear.regression(x = [1, 2, -3], y = [4, -5, 6], point = 10)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'points': [[1, 1], [2, 2], [3, 4], [5, 5]]}, 'type': 'maxPoints'}]
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 2], [3, 4], [5, 5]])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'points': [[1, 1], [2, 3], [4, 6], [5, 5]]}, 'type': 'maxPoints'}]
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 3], [4, 6], [5, 5]])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'initial_investment': 10000, 'annual_contribution': 1000, 'years': 5, 'annual_return': 5, 'inflation_rate': [1, 2, 3, 4, 4]}, 'type': 'calculate_investment_value'}]
model_generated_function : 
['calculate.investment.value(initial_investment = 10000, annual_contribution = 1000, years = 5, annual_return = 5, inflation_rate = [1, 2, 3, 4, 4])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 5
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'initial_investment': 1000000, 'annual_contribution': 1000, 'years': 3, 'annual_return': 10, 'inflation_rate': [1, 4, 4]}, 'type': 'calculate_investment_value'}]
model_generated_function : 
['calculate.investment.value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 5
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'weight': 100, 'height': 170, 'age': 30, 'gender': 'male', 'activity_level': 1, 'goal': 'lose'}, 'type': 'calculate_nutritional_needs'}]
model_generated_function : 
["calculate.nutritional.needs(weight = 100, height = 170, age = 30, gender = 'male', activity_level = 1, goal = 'lose')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 6
correct_params_count: 5
compare reuslt: False
model_generated_result: [{'args': {'weight': 59, 'height': 170, 'age': 80, 'gender': 'female', 'activity_level': 4, 'goal': 'lose'}, 'type': 'calculate_nutritional_needs'}]
model_generated_function : 
["calculate.nutritional.needs(weight = 59, height = 170, age = 80, gender = 'female', activity_level = 4, goal = 'lose')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 6
correct_params_count: 5
compare reuslt: False
model_generated_result: [{'args': {'check_in_date': '08-11-2024', 'check_out_date': '08-15-2024', 'customer_id': '123'}, 'type': 'book_room'}]
model_generated_function : 
["book.room(check_in_date = '08-11-2024', check_out_date = '08-15-2024', customer_id = '123')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'check_in_date': '12-11-2023', 'check_out_date': '08-15-2024', 'customer_id': '123'}, 'type': 'book_room'}]
model_generated_function : 
["book.room(check_in_date = '12-11-2023', check_out_date = '08-15-2024', customer_id = '123')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'burgers': {'quantity': 10, 'price': 5}, 'ice_creams': {'quantity': 7, 'price': 2}}, 'type': 'order_food'}]
model_generated_function : 
["order.food(burgers = {'quantity': 10, 'price': 5}, ice_creams = {'quantity': 7, 'price': 2})"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 4
correct_params_count: 0
compare reuslt: False
model_generated_result: [{'args': {'food_items': [{'name': 'dumplings', 'quantity': 101, 'price': 0.1}, {'name': 'rice bowl', 'quantity': 20, 'price': 10}]}, 'type': 'order_food'}]
model_generated_function : 
["order.food(food_items = [{'name': 'dumplings', 'quantity': 101, 'price': 0.1}, {'name': 'rice bowl', 'quantity': 20, 'price': 10}])"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 0
compare reuslt: False
model_generated_result: [{'args': {'movie_name': 'Avatar'}, 'type': 'get_movie_director'}]
model_generated_function : 
["get.movie.director(movie_name = 'Avatar')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'movie_name': 'Pulp Fiction'}, 'type': 'get_movie_director'}]
model_generated_function : 
["get.movie.director(movie_name = 'Pulp Fiction')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'movie_name': 'Avatar'}, 'type': 'get_movie_rating'}]
model_generated_function : 
["get.movie.rating(movie_name = 'Avatar')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'movie_name': 'Pulp Fiction'}, 'type': 'get_movie_rating'}]
model_generated_function : 
["get.movie.rating(movie_name = 'Pulp Fiction')"]
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'vertices': [[1, 2], [3, 4], [1, 3]]}, 'type': 'polygon_area'}]
model_generated_function : 
['polygon.area(vertices = [[1, 2], [3, 4], [1, 3]])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
model_generated_result: [{'args': {'vertices': [[1, 2], [3, 4], [1, 4], [3, 7]]}, 'type': 'polygon_area'}]
model_generated_function : 
['polygon.area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: False
Accuracy: 0.0
-----------------------
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.6)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'n': 30, 'k': 15, 'p': 0.5}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 30, k = 15, p = 0.5)']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: False
model_generated_result: [{'args': {'vectorA': [0.5, 0.7, 0.2, 0.9, 0.1], 'vectorB': [0.4, 0.6, 0.3, 0.8, 0.2]}, 'type': 'calculate_cosine_similarity'}]
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
an error occur when compare the ground_truth_function and model_generated_function.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: False
model_generated_result: []
model_generated_function : 
[]
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.6)']
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.6)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.6)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
model_generated_result: [{'args': {'n': 30, 'k': 15, 'p': 0.5}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 30, k = 15, p = 0.5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 2
model_generated_result: [{'args': {'vectorA': [0.5, 0.7, 0.2, 0.9, 0.1], 'vectorB': [0.4, 0.6, 0.3, 0.8, 0.2]}, 'type': 'calculate_cosine_similarity'}]
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'mass': 50, 'volume': 10}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate_density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 4
model_generated_result: [{'args': {'mass': 120, 'volume': 30}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate_density(mass = 120, volume = 30)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
model_generated_result: [{'args': {'initial_velocity': 15, 'acceleration': 9.8, 'time': 10}, 'type': 'calculate_displacement'}]
model_generated_function : 
['calculate_displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'present_value': 5000, 'interest_rate': 5, 'periods': 10}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'numbers': [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate_mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
model_generated_result: [{'args': {'numbers': [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate_mean(numbers = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 9
model_generated_result: [{'args': {'n': 26, 'k': 5}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate_permutations(n = 26, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 10
model_generated_result: [{'args': {'n': 30, 'k': 7}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate_permutations(n = 30, k = 7)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
model_generated_result: [{'args': {'numbers': [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate_standard_deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 12
model_generated_result: [{'args': {'numbers': [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate_standard_deviation(numbers = [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 13
model_generated_result: [{'args': {'base': 500, 'height': 300}, 'type': 'calculate_triangle_area'}]
model_generated_function : 
['calculate_triangle_area(base = 500, height = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 14
model_generated_result: [{'args': {'base': 700, 'height': 450}, 'type': 'calculate_triangle_area'}]
model_generated_function : 
['calculate_triangle_area(base = 700, height = 450)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 15
model_generated_result: [{'args': {'amount': 5000, 'from_currency': 'EUR', 'to_currency': 'JPY'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 16
model_generated_result: [{'args': {'amount': 3000, 'from_currency': 'USD', 'to_currency': 'GBP'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert_currency(amount = 3000, from_currency = 'USD', to_currency = 'GBP')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 17
model_generated_result: [{'args': {'function': '3*t^2 + 2*t + 1', 'x': 5}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate_derivative(function = '3*t^2 + 2*t + 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 18
model_generated_result: [{'args': {'function': '4*x^3 + 3*x^2 + 2*x + 1', 'x': 7}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate_derivative(function = '4*x^3 + 3*x^2 + 2*x + 1', x = 7)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 19
model_generated_result: [{'args': {'term': 'lit'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
model_generated_result: [{'args': {'term': 'flex'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'flex')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
model_generated_result: [{'args': {'radius': 15}, 'type': 'geometry_area_circle'}]
model_generated_function : 
['geometry_area_circle(radius = 15)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'stock_name': 'GOOGL'}, 'type': 'get_company_name_by_stock_name'}]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'GOOGL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 24
model_generated_result: [{'args': {'ip_address': '172.16.254.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
model_generated_result: [{'args': {'city_name': 'Paris'}, 'type': 'get_coordinates_from_city'}]
model_generated_function : 
["get_coordinates_from_city(city_name = 'Paris')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'country': 'Brazil'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
test_category: executable
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.6}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.6)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
model_generated_result: [{'args': {'n': 30, 'k': 15, 'p': 0.5}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 30, k = 15, p = 0.5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 2
model_generated_result: [{'args': {'vectorA': [0.5, 0.7, 0.2, 0.9, 0.1], 'vectorB': [0.4, 0.6, 0.3, 0.8, 0.2]}, 'type': 'calculate_cosine_similarity'}]
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'mass': 50, 'volume': 10}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate_density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 4
model_generated_result: [{'args': {'mass': 120, 'volume': 30}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate_density(mass = 120, volume = 30)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
model_generated_result: [{'args': {'initial_velocity': 15, 'acceleration': 9.8, 'time': 10}, 'type': 'calculate_displacement'}]
model_generated_function : 
['calculate_displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'charge': 7.8, 'voltage': 15.2}, 'type': 'calculate_electrostatic_potential_energy'}]
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 7.8, voltage = 15.2)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 7
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'present_value': 5000, 'interest_rate': 5, 'periods': 10}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 8
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'numbers': [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate_mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 9
model_generated_result: [{'args': {'numbers': [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate_mean(numbers = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 10
model_generated_result: [{'args': {'n': 26, 'k': 5}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate_permutations(n = 26, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
model_generated_result: [{'args': {'n': 30, 'k': 7}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate_permutations(n = 30, k = 7)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 12
model_generated_result: [{'args': {'numbers': [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate_standard_deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 13
model_generated_result: [{'args': {'numbers': [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate_standard_deviation(numbers = [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
model_generated_result: [{'args': {'base': 500, 'height': 300}, 'type': 'calculate_triangle_area'}]
model_generated_function : 
['calculate_triangle_area(base = 500, height = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 15
model_generated_result: [{'args': {'base': 700, 'height': 450}, 'type': 'calculate_triangle_area'}]
model_generated_function : 
['calculate_triangle_area(base = 700, height = 450)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 16
model_generated_result: [{'args': {'amount': 5000, 'from_currency': 'EUR', 'to_currency': 'JPY'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 17
model_generated_result: [{'args': {'amount': 3000, 'from_currency': 'USD', 'to_currency': 'GBP'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert_currency(amount = 3000, from_currency = 'USD', to_currency = 'GBP')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 18
model_generated_result: [{'args': {'function': '3*t^2 + 2*t + 1', 'x': 5}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate_derivative(function = '3*t^2 + 2*t + 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 19
model_generated_result: [{'args': {'function': '4*x^3 + 3*x^2 + 2*x + 1', 'x': 7}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate_derivative(function = '4*x^3 + 3*x^2 + 2*x + 1', x = 7)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 20
model_generated_result: [{'args': {'term': 'lit'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
model_generated_result: [{'args': {'term': 'flex'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'flex')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
model_generated_result: [{'args': {'radius': 15}, 'type': 'geometry_area_circle'}]
model_generated_function : 
['geometry_area_circle(radius = 15)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'stock_name': 'GOOGL'}, 'type': 'get_company_name_by_stock_name'}]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'GOOGL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 24
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
model_generated_result: [{'args': {'ip_address': '172.16.254.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
model_generated_result: [{'args': {'city_name': 'Paris'}, 'type': 'get_coordinates_from_city'}]
model_generated_function : 
["get_coordinates_from_city(city_name = 'Paris')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'country': 'Brazil'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
model_generated_result: [{'args': {'country': 'India'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get_covid_death_by_country(country = 'India')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 29
model_generated_result: [{'args': {'pointA': '45.76, 4.85', 'pointB': '48.85, 2.35'}, 'type': 'get_distance'}]
model_generated_function : 
["get_distance(pointA = '45.76, 4.85', pointB = '48.85, 2.35')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 30
model_generated_result: [{'args': {'pointA': '32.71, -117.16', 'pointB': '34.05, -118.25'}, 'type': 'get_distance'}]
model_generated_function : 
["get_distance(pointA = '32.71, -117.16', pointB = '34.05, -118.25')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 31
model_generated_result: [{'args': {'n': 20}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get_fibonacci_sequence(n = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 32
model_generated_result: [{'args': {'n': 50}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get_fibonacci_sequence(n = 50)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
model_generated_result: [{'args': {'ASIN': 'B08N5WRWNW'}, 'type': 'get_price_by_amazon_ASIN'}]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 34
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'number': 4567}, 'type': 'get_prime_factors'}]
model_generated_function : 
['get_prime_factors(number = 4567)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 35
model_generated_result: [{'args': {'number': 7891}, 'type': 'get_prime_factors'}]
model_generated_function : 
['get_prime_factors(number = 7891)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 36
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'ASIN': 'B07FZ8S74R'}, 'type': 'get_product_name_by_amazon_ASIN'}]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B07FZ8S74R')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 37
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'ASIN': 'B07FZ8S74R'}, 'type': 'get_rating_by_amazon_ASIN'}]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B07FZ8S74R')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 38
model_generated_result: [{'args': {'stock_name': 'AAPL', 'interval': '1mo', 'diffandsplits': True}, 'type': 'get_stock_history'}]
model_generated_function : 
["get_stock_history(stock_name = 'AAPL', interval = '1mo', diffandsplits = True)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 39
model_generated_result: [{'args': {'stock_name': 'MSFT', 'interval': '1wk', 'diffandsplits': False}, 'type': 'get_stock_history'}]
model_generated_function : 
["get_stock_history(stock_name = 'MSFT', interval = '1wk', diffandsplits = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 40
model_generated_result: [{'args': {'stock_name': 'AAPL'}, 'type': 'get_stock_price_by_stock_name'}]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 41
model_generated_result: [{'args': {'stock_name': 'MSFT'}, 'type': 'get_stock_price_by_stock_name'}]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'MSFT')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 42
model_generated_result: [{'args': {'long': '123.45', 'lat': '-67.89'}, 'type': 'get_time_zone_by_coord'}]
model_generated_function : 
["get_time_zone_by_coord(long = '123.45', lat = '-67.89')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 43
model_generated_result: [{'args': {'long': '80.75', 'lat': '35.22'}, 'type': 'get_time_zone_by_coord'}]
model_generated_function : 
["get_time_zone_by_coord(long = '80.75', lat = '35.22')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 44
model_generated_result: [{'args': {'coordinates': [90.0, 0.0]}, 'type': 'get_weather_data'}]
model_generated_function : 
['get_weather_data(coordinates = [90.0, 0.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 45
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_zipcode_by_ip_address'}]
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 46
model_generated_result: [{'args': {'ip_address': '172.16.254.1'}, 'type': 'get_zipcode_by_ip_address'}]
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 47
model_generated_result: [{'args': {'matA': [[1, 2], [3, 4]], 'matB': [[5, 6], [7, 8]]}, 'type': 'mat_mul'}]
model_generated_function : 
['mat_mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 48
model_generated_result: [{'args': {'matA': [[2, 3], [4, 5]], 'matB': [[6, 7], [8, 9]]}, 'type': 'mat_mul'}]
model_generated_function : 
['mat_mul(matA = [[2, 3], [4, 5]], matB = [[6, 7], [8, 9]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 49
model_generated_result: [{'args': {'n': 7}, 'type': 'math_factorial'}]
model_generated_function : 
['math_factorial(n = 7)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 50
model_generated_result: [{'args': {'n': 12}, 'type': 'math_factorial'}]
model_generated_function : 
['math_factorial(n = 12)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 51
model_generated_result: [{'args': {'a': 450, 'b': 300}, 'type': 'math_gcd'}]
model_generated_function : 
['math_gcd(a = 450, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 52
model_generated_result: [{'args': {'a': 360, 'b': 240}, 'type': 'math_gcd'}]
model_generated_function : 
['math_gcd(a = 360, b = 240)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 53
model_generated_result: [{'args': {'a': 18, 'b': 24}, 'type': 'math_lcm'}]
model_generated_function : 
['math_lcm(a = 18, b = 24)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 54
model_generated_result: [{'args': {'a': 35, 'b': 45}, 'type': 'math_lcm'}]
model_generated_function : 
['math_lcm(a = 35, b = 45)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 55
model_generated_result: [{'args': {'loan_amount': 350000, 'interest_rate': 3.5, 'loan_period': 30}, 'type': 'mortgage_calculator'}]
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 56
model_generated_result: [{'args': {'loan_amount': 500000, 'interest_rate': 4.5, 'loan_period': 25}, 'type': 'mortgage_calculator'}]
model_generated_function : 
['mortgage_calculator(loan_amount = 500000, interest_rate = 4.5, loan_period = 25)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 57
model_generated_result: [{'args': {'a': 3, 'b': 7, 'c': -10}, 'type': 'quadratic_roots'}]
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = -10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 58
model_generated_result: [{'args': {'a': 5, 'b': -8, 'c': 2}, 'type': 'quadratic_roots'}]
model_generated_function : 
['quadratic_roots(a = 5, b = -8, c = 2)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 59
model_generated_result: [{'args': {'zipcode': '90210'}, 'type': 'retrieve_city_based_on_zipcode'}]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 60
model_generated_result: [{'args': {'zipcode': '10001'}, 'type': 'retrieve_city_based_on_zipcode'}]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '10001')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 61
model_generated_result: [{'args': {'year': '2010', 'country': 'FR'}, 'type': 'retrieve_holiday_by_year'}]
model_generated_function : 
["retrieve_holiday_by_year(year = '2010', country = 'FR')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 62
model_generated_result: [{'args': {'year': '2005', 'country': 'DE'}, 'type': 'retrieve_holiday_by_year'}]
model_generated_function : 
["retrieve_holiday_by_year(year = '2005', country = 'DE')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 63
model_generated_result: [{'args': {'array': [34, 2, 56, 7, 9, 12], 'reverse': True}, 'type': 'sort_array'}]
model_generated_function : 
['sort_array(array = [34, 2, 56, 7, 9, 12], reverse = True)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 64
model_generated_result: [{'args': {'array': [1, 2, 2, 7, 7, 10]}, 'type': 'sort_array'}]
model_generated_function : 
['sort_array(array = [1, 2, 2, 7, 7, 10])']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 65
model_generated_result: [{'args': {'a': '0011', 'b': '1100'}, 'type': 'add_binary_numbers'}]
model_generated_function : 
["add_binary_numbers(a = '0011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 66
model_generated_result: [{'args': {'a': '10011', 'b': '1100'}, 'type': 'add_binary_numbers'}]
model_generated_function : 
["add_binary_numbers(a = '10011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 67
model_generated_result: [{'args': {'x': [1, 2, 3], 'y': [4, 5, 6], 'point': 10}, 'type': 'linear_regression'}]
model_generated_function : 
['linear_regression(x = [1, 2, 3], y = [4, 5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 68
model_generated_result: [{'args': {'x': [1, 2, -3], 'y': [4, -5, 6], 'point': 10}, 'type': 'linear_regression'}]
model_generated_function : 
['linear_regression(x = [1, 2, -3], y = [4, -5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 69
model_generated_result: [{'args': {'points': [[1, 1], [2, 2], [3, 4], [5, 5]]}, 'type': 'maxPoints'}]
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 2], [3, 4], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 70
model_generated_result: [{'args': {'points': [[1, 1], [2, 3], [4, 6], [5, 5]]}, 'type': 'maxPoints'}]
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 3], [4, 6], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 71
model_generated_result: [{'args': {'initial_investment': 10000, 'annual_contribution': 1000, 'years': 5, 'annual_return': 5, 'inflation_rate': [1, 2, 3, 4, 4]}, 'type': 'calculate_investment_value'}]
model_generated_function : 
['calculate_investment_value(initial_investment = 10000, annual_contribution = 1000, years = 5, annual_return = 5, inflation_rate = [1, 2, 3, 4, 4])']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 72
model_generated_result: [{'args': {'initial_investment': 1000000, 'annual_contribution': 1000, 'years': 3, 'annual_return': 10, 'inflation_rate': [1, 4, 4]}, 'type': 'calculate_investment_value'}]
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4])']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 73
model_generated_result: [{'args': {'weight': 100, 'height': 170, 'age': 30, 'gender': 'male', 'activity_level': 1, 'goal': 'lose'}, 'type': 'calculate_nutritional_needs'}]
model_generated_function : 
["calculate_nutritional_needs(weight = 100, height = 170, age = 30, gender = 'male', activity_level = 1, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 74
model_generated_result: [{'args': {'weight': 59, 'height': 170, 'age': 80, 'gender': 'female', 'activity_level': 4, 'goal': 'lose'}, 'type': 'calculate_nutritional_needs'}]
model_generated_function : 
["calculate_nutritional_needs(weight = 59, height = 170, age = 80, gender = 'female', activity_level = 4, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 75
model_generated_result: [{'args': {'check_in_date': '08-11-2024', 'check_out_date': '08-15-2024', 'customer_id': '123'}, 'type': 'book_room'}]
model_generated_function : 
["book_room(check_in_date = '08-11-2024', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 76
model_generated_result: [{'args': {'check_in_date': '12-11-2023', 'check_out_date': '08-15-2024', 'customer_id': '123'}, 'type': 'book_room'}]
model_generated_function : 
["book_room(check_in_date = '12-11-2023', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 77
model_generated_result: [{'args': {'burgers': {'quantity': 10, 'price': 5}, 'ice_creams': {'quantity': 7, 'price': 2}}, 'type': 'order_food'}]
model_generated_function : 
["order_food(burgers = {'quantity': 10, 'price': 5}, ice_creams = {'quantity': 7, 'price': 2})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 78
model_generated_result: [{'args': {'items': [{'name': 'dumplings', 'quantity': 101, 'price': 0.1}, {'name': 'rice bowl', 'quantity': 20, 'price': 10}]}, 'type': 'order_food'}]
model_generated_function : 
["order_food(items = [{'name': 'dumplings', 'quantity': 101, 'price': 0.1}, {'name': 'rice bowl', 'quantity': 20, 'price': 10}])"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 79
model_generated_result: [{'args': {'movie_name': 'Avatar'}, 'type': 'get_movie_director'}]
model_generated_function : 
["get_movie_director(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 80
model_generated_result: [{'args': {'movie_name': 'Pulp Fiction'}, 'type': 'get_movie_director'}]
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 81
model_generated_result: [{'args': {'movie_name': 'Avatar'}, 'type': 'get_movie_rating'}]
model_generated_function : 
["get_movie_rating(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 82
model_generated_result: [{'args': {'movie_name': 'Pulp Fiction'}, 'type': 'get_movie_rating'}]
model_generated_function : 
["get_movie_rating(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 83
model_generated_result: [{'args': {'vertices': [[1, 2], [3, 4], [1, 3]]}, 'type': 'polygon_area'}]
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 3]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 84
model_generated_result: [{'args': {'vertices': [[1, 2], [3, 4], [1, 4], [3, 7]]}, 'type': 'polygon_area'}]
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 85
Accuracy: 0.85
-----------------------
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
model_generated_result: [{'args': {'n': 10, 'k': 3, 'p': 0.3}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 10, k = 3, p = 0.3)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
model_generated_result: [{'args': {'vectorA': [0.5, 0.7, 0.2, 0.9, 0.1], 'vectorB': [0.3, 0.6, 0.2, 0.8, 0.1]}, 'type': 'calculate_cosine_similarity'}]
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.3, 0.6, 0.2, 0.8, 0.1])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 2
model_generated_result: [{'args': {'mass': 500, 'volume': 100}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate_density(mass = 500, volume = 100)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
model_generated_result: [{'args': {'initial_velocity': 20, 'acceleration': -9.8, 'time': 5}, 'type': 'calculate_displacement'}]
model_generated_function : 
['calculate_displacement(initial_velocity = 20, acceleration = -9.8, time = 5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 4
model_generated_result: [{'args': {'charge': 1.6e-19, 'voltage': 500}, 'type': 'calculate_electrostatic_potential_energy'}]
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 1.6e-19, voltage = 500)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
model_generated_result: [{'args': {'initial_velocity': 5, 'acceleration': 2, 'time': 10}, 'type': 'calculate_final_velocity'}]
model_generated_function : 
['calculate_final_velocity(initial_velocity = 5, acceleration = 2, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
model_generated_result: [{'args': {'present_value': 5000, 'interest_rate': 0.05, 'periods': 10}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 0.05, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
model_generated_result: [{'args': {'numbers': [35, 40, 45, 50, 55]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate_mean(numbers = [35, 40, 45, 50, 55])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
model_generated_result: [{'args': {'n': 20, 'k': 5}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate_permutations(n = 20, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
model_generated_result: [{'args': {'numbers': [23, 34, 45, 56, 67, 78, 89]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate_standard_deviation(numbers = [23, 34, 45, 56, 67, 78, 89])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 10
model_generated_result: [{'args': {'base': 15, 'height': 20}, 'type': 'calculate_triangle_area'}]
model_generated_function : 
['calculate_triangle_area(base = 15, height = 20)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
model_generated_result: [{'args': {'amount': 5000, 'from_currency': 'JPY', 'to_currency': 'USD'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'JPY', to_currency = 'USD')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 12
model_generated_result: [{'args': {'function': '3*x^2 + 2*x - 1', 'x': 4}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate_derivative(function = '3*x^2 + 2*x - 1', x = 4)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 13
model_generated_result: [{'args': {'term': 'Lit'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'Lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
model_generated_result: [{'args': {'radius': 5}, 'type': 'geometry_area_circle'}]
model_generated_function : 
['geometry_area_circle(radius = 5)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
model_generated_result: [{'args': {'country': 'France'}, 'type': 'get_active_covid_case_by_country'}]
model_generated_function : 
["get_active_covid_case_by_country(country = 'France')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
model_generated_result: [{'args': {'stock_name': 'AAPL'}, 'type': 'get_company_name_by_stock_name'}]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
model_generated_result: [{'args': {'city_name': 'New York'}, 'type': 'get_coordinates_from_city'}]
model_generated_function : 
["get_coordinates_from_city(city_name = 'New York')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
model_generated_result: [{'args': {'country': 'Brazil'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
model_generated_result: [{'args': {'pointA': '(3, 4)', 'pointB': '(7, 9)'}, 'type': 'get_distance'}]
model_generated_function : 
["get_distance(pointA = '(3, 4)', pointB = '(7, 9)')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 21
model_generated_result: [{'args': {'n': 10}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get_fibonacci_sequence(n = 10)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
model_generated_result: [{'args': {'ASIN': 'B08N5WRWNW'}, 'type': 'get_price_by_amazon_ASIN'}]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
model_generated_result: [{'args': {'number': 456}, 'type': 'get_prime_factors'}]
model_generated_function : 
['get_prime_factors(number = 456)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 24
model_generated_result: [{'args': {'ASIN': 'B08L5VG843'}, 'type': 'get_product_name_by_amazon_ASIN'}]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L5VG843')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
model_generated_result: [{'args': {'ASIN': 'B07HJHKL9S'}, 'type': 'get_rating_by_amazon_ASIN'}]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B07HJHKL9S')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
model_generated_result: [{'args': {'stock_name': 'AAPL', 'interval': '1d'}, 'type': 'get_stock_history'}]
model_generated_function : 
["get_stock_history(stock_name = 'AAPL', interval = '1d')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 27
model_generated_result: [{'args': {'stock_name': 'GOOG'}, 'type': 'get_stock_price_by_stock_name'}]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'GOOG')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
model_generated_result: [{'args': {'long': '77.1025', 'lat': '28.7041'}, 'type': 'get_time_zone_by_coord'}]
model_generated_function : 
["get_time_zone_by_coord(long = '77.1025', lat = '28.7041')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 29
model_generated_result: [{'args': {'coordinates': [34.0522, -118.2437]}, 'type': 'get_weather_data'}]
model_generated_function : 
['get_weather_data(coordinates = [34.0522, -118.2437])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 30
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_zipcode_by_ip_address'}]
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 31
model_generated_result: [{'args': {'matrix1': [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'matrix2': [[10, 11, 12], [13, 14, 15], [16, 17, 18]]}, 'type': 'mat_mul'}]
model_generated_function : 
['mat_mul(matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], matrix2 = [[10, 11, 12], [13, 14, 15], [16, 17, 18]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 32
model_generated_result: [{'args': {'n': 5}, 'type': 'math_factorial'}]
model_generated_function : 
['math_factorial(n = 5)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
model_generated_result: [{'args': {'a': 45, 'b': 60}, 'type': 'math_gcd'}]
model_generated_function : 
['math_gcd(a = 45, b = 60)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 34
model_generated_result: [{'args': {'a': 35, 'b': 45}, 'type': 'math_lcm'}]
model_generated_function : 
['math_lcm(a = 35, b = 45)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 35
model_generated_result: [{'args': {'loan_amount': 350000, 'interest_rate': 3.5, 'loan_period': 30}, 'type': 'mortgage_calculator'}]
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 36
model_generated_result: [{'args': {'a': 3, 'b': 7, 'c': 2}, 'type': 'quadratic_roots'}]
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = 2)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 37
model_generated_result: [{'args': {'zipcode': '90210'}, 'type': 'retrieve_city_based_on_zipcode'}]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 38
model_generated_result: [{'args': {'year': '2018', 'country': 'US'}, 'type': 'retrieve_holiday_by_year'}]
model_generated_function : 
["retrieve_holiday_by_year(year = '2018', country = 'US')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 39
model_generated_result: [{'args': {'array': [5, 2, 9, 1, 7]}, 'type': 'sort_array'}]
model_generated_function : 
['sort_array(array = [5, 2, 9, 1, 7])']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 40
model_generated_result: [{'args': {'a': '0011', 'b': '1100'}, 'type': 'add_binary_numbers'}]
model_generated_function : 
["add_binary_numbers(a = '0011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 41
model_generated_result: [{'args': {'x': [1, 2, 3], 'y': [4, 5, 6], 'point': 10}, 'type': 'linear_regression'}]
model_generated_function : 
['linear_regression(x = [1, 2, 3], y = [4, 5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 42
model_generated_result: [{'args': {'points': [[1, 1], [2, 2], [3, 4], [5, 5]]}, 'type': 'maxPoints'}]
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 2], [3, 4], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 43
model_generated_result: [{'args': {'initial_investment': 1000000, 'annual_contribution': 1000, 'years': 3, 'annual_return': 10, 'inflation_rate': [1, 4, 4]}, 'type': 'calculate_investment_value'}]
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4])']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 44
model_generated_result: [{'args': {'weight': 75, 'height': 180, 'age': 25, 'gender': 'male', 'activity_level': 3, 'goal': 'gain'}, 'type': 'calculate_nutritional_needs'}]
model_generated_function : 
["calculate_nutritional_needs(weight = 75, height = 180, age = 25, gender = 'male', activity_level = 3, goal = 'gain')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 45
model_generated_result: [{'args': {'item': ['burger'], 'quantity': [10], 'price': [5]}, 'type': 'order_food'}]
model_generated_function : 
["order_food(item = ['burger'], quantity = [10], price = [5])"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 46
model_generated_result: [{'args': {'item': ['dumplings', 'rice bowls', 'spring rolls', 'noodle soups'], 'quantity': [101, 20, 50, 10], 'price': [0.1, 10, 0.5, 3]}, 'type': 'order_food'}]
model_generated_function : 
["order_food(item = ['dumplings', 'rice bowls', 'spring rolls', 'noodle soups'], quantity = [101, 20, 50, 10], price = [0.1, 10, 0.5, 3])"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 47
model_generated_result: [{'args': {'movie_name': 'Pulp Fiction'}, 'type': 'get_movie_director'}]
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 48
model_generated_result: [{'args': {'movie_name': 'Pulp Fiction'}, 'type': 'get_movie_rating'}]
model_generated_function : 
["get_movie_rating(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 49
model_generated_result: [{'args': {'vertices': [[1, 2], [3, 4], [1, 4], [3, 7]]}, 'type': 'polygon_area'}]
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 50
Accuracy: 1.0
-----------------------
Generating: gorilla_openfunctions_v1_test_executable_multiple_function.json
model_generated_result: [{'args': {'n': 20, 'k': 5, 'p': 0.16666666666666666}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.16666666666666666)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 1
model_generated_result: [{'args': {'vectorA': [0.5, 0.7, 0.2, 0.9, 0.1], 'vectorB': [0.4, 0.6, 0.3, 0.8, 0.2]}, 'type': 'calculate_cosine_similarity'}]
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 2
model_generated_result: [{'args': {'mass': 50, 'volume': 10}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate_density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
model_generated_result: [{'args': {'initial_velocity': 15, 'acceleration': 9.8, 'time': 10}, 'type': 'calculate_displacement'}]
model_generated_function : 
['calculate_displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 4
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'initial_velocity': 0, 'acceleration': 9.8, 'time': 12}, 'type': 'calculate_final_velocity'}]
model_generated_function : 
['calculate_final_velocity(initial_velocity = 0, acceleration = 9.8, time = 12)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 5
model_generated_result: [{'args': {'present_value': 5000, 'interest_rate': 5, 'periods': 10}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
model_generated_result: [{'args': {'numbers': [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate_mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 7
model_generated_result: [{'args': {'n': 26, 'k': 5}, 'type': 'calculate_permutations'}]
model_generated_function : 
['calculate_permutations(n = 26, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 8
model_generated_result: [{'args': {'numbers': [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate_standard_deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 9
model_generated_result: [{'args': {'base': 500, 'height': 300}, 'type': 'calculate_triangle_area'}]
model_generated_function : 
['calculate_triangle_area(base = 500, height = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 10
model_generated_result: [{'args': {'amount': 5000, 'from_currency': 'EUR', 'to_currency': 'JPY'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 11
model_generated_result: [{'args': {'function': '3*t^2 + 2*t + 1', 'x': 5}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate_derivative(function = '3*t^2 + 2*t + 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 12
model_generated_result: [{'args': {'term': 'lit'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 13
model_generated_result: [{'args': {'radius': 15}, 'type': 'geometry_area_circle'}]
model_generated_function : 
['geometry_area_circle(radius = 15)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
model_generated_result: []
model_generated_function : 
[]
model_generated_result: []
model_generated_function : 
[]
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
model_generated_result: [{'args': {'city_name': 'Paris'}, 'type': 'get_coordinates_from_city'}]
model_generated_function : 
["get_coordinates_from_city(city_name = 'Paris')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
model_generated_result: [{'args': {'country': 'Brazil'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
model_generated_result: [{'args': {'pointA': '45.76, 4.85', 'pointB': '48.85, 2.35'}, 'type': 'get_distance'}]
model_generated_function : 
["get_distance(pointA = '45.76, 4.85', pointB = '48.85, 2.35')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 18
model_generated_result: [{'args': {'n': 20}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get_fibonacci_sequence(n = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
model_generated_result: [{'args': {'ASIN': 'B08N5WRWNW'}, 'type': 'get_price_by_amazon_ASIN'}]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
model_generated_result: [{'args': {'number': 4567}, 'type': 'get_prime_factors'}]
model_generated_function : 
['get_prime_factors(number = 4567)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
model_generated_result: [{'args': {'ASIN': 'B08L8KC1J7'}, 'type': 'get_product_name_by_amazon_ASIN'}]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L8KC1J7')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
model_generated_result: [{'args': {'ASIN': 'B08L5WGQGJ'}, 'type': 'get_rating_by_amazon_ASIN'}]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B08L5WGQGJ')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
model_generated_result: [{'args': {'stock_name': 'AAPL', 'interval': '1mo', 'diffandsplits': True}, 'type': 'get_stock_history'}]
model_generated_function : 
["get_stock_history(stock_name = 'AAPL', interval = '1mo', diffandsplits = True)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 24
model_generated_result: [{'args': {'stock_name': 'AAPL'}, 'type': 'get_stock_price_by_stock_name'}]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
model_generated_result: [{'args': {'long': '123.45', 'lat': '-67.89'}, 'type': 'get_time_zone_by_coord'}]
model_generated_function : 
["get_time_zone_by_coord(long = '123.45', lat = '-67.89')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 26
model_generated_result: [{'args': {'coordinates': [90.0, 0.0]}, 'type': 'get_weather_data'}]
model_generated_function : 
['get_weather_data(coordinates = [90.0, 0.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_zipcode_by_ip_address'}]
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
model_generated_result: [{'args': {}, 'type': 'mat_mul'}]
model_generated_function : 
['mat_mul()']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 29
model_generated_result: [{'args': {'n': 7}, 'type': 'math_factorial'}]
model_generated_function : 
['math_factorial(n = 7)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 30
model_generated_result: [{'args': {'a': 450, 'b': 300}, 'type': 'math_gcd'}]
model_generated_function : 
['math_gcd(a = 450, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 31
model_generated_result: [{'args': {'a': 18, 'b': 24}, 'type': 'math_lcm'}]
model_generated_function : 
['math_lcm(a = 18, b = 24)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 32
model_generated_result: [{'args': {'loan_amount': 350000, 'interest_rate': 3.5, 'loan_period': 30}, 'type': 'mortgage_calculator'}]
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 33
model_generated_result: [{'args': {'a': 3, 'b': 7, 'c': -10}, 'type': 'quadratic_roots'}]
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = -10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 34
model_generated_result: [{'args': {'zipcode': '90210'}, 'type': 'retrieve_city_based_on_zipcode'}]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 35
model_generated_result: [{'args': {'year': '2010', 'country': 'FR'}, 'type': 'retrieve_holiday_by_year'}]
model_generated_function : 
["retrieve_holiday_by_year(year = '2010', country = 'FR')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 36
model_generated_result: [{'args': {'array': [34, 2, 56, 7, 9, 12], 'reverse': True}, 'type': 'sort_array'}]
model_generated_function : 
['sort_array(array = [34, 2, 56, 7, 9, 12], reverse = True)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 37
model_generated_result: [{'args': {'a': '10011', 'b': '1100'}, 'type': 'add_binary_numbers'}]
model_generated_function : 
["add_binary_numbers(a = '10011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 38
model_generated_result: [{'args': {'x': [1, 2, -3], 'y': [4, -5, 6], 'point': 10}, 'type': 'linear_regression'}]
model_generated_function : 
['linear_regression(x = [1, 2, -3], y = [4, -5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 39
model_generated_result: [{'args': {'initial_investment': 10000, 'annual_contribution': 1000, 'years': 5, 'annual_return': 5, 'inflation_rate': [1, 2, 3, 4, 4]}, 'type': 'calculate_investment_value'}]
model_generated_function : 
['calculate_investment_value(initial_investment = 10000, annual_contribution = 1000, years = 5, annual_return = 5, inflation_rate = [1, 2, 3, 4, 4])']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 40
model_generated_result: [{'args': {'initial_investment': 1000000, 'annual_contribution': 1000, 'years': 3, 'annual_return': 10, 'inflation_rate': [1, 4, 4]}, 'type': 'calculate_investment_value'}]
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4])']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 41
model_generated_result: [{'args': {'weight': 59, 'height': 170, 'age': 80, 'gender': 'female', 'activity_level': 4, 'goal': 'lose'}, 'type': 'calculate_nutritional_needs'}]
model_generated_function : 
["calculate_nutritional_needs(weight = 59, height = 170, age = 80, gender = 'female', activity_level = 4, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 42
model_generated_result: [{'args': {'check_in_date': '08-11-2024', 'check_out_date': '08-15-2024', 'customer_id': '123'}, 'type': 'book_room'}]
model_generated_function : 
["book_room(check_in_date = '08-11-2024', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 43
model_generated_result: [{'args': {'item': ['dumplings', 'rice bowl'], 'quantity': [101, 20], 'price': [0.1, 10]}, 'type': 'order_food'}]
model_generated_function : 
["order_food(item = ['dumplings', 'rice bowl'], quantity = [101, 20], price = [0.1, 10])"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 44
model_generated_result: [{'args': {'movie_name': 'Pulp Fiction'}, 'type': 'get_movie_director'}]
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 45
model_generated_result: [{'args': {'movie_name': 'Avatar'}, 'type': 'get_movie_rating'}]
model_generated_function : 
["get_movie_rating(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 46
model_generated_result: [{'args': {'vertices': [[1, 2], [3, 4], [1, 4], [3, 7]]}, 'type': 'validate_polygon'}]
model_generated_function : 
['validate_polygon(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 47
Accuracy: 0.94
-----------------------
Generating: gorilla_openfunctions_v1_test_executable_parallel_multiple_function.json
model_generated_result: [{'args': {'coordinates': [45.4215, -75.6972]}, 'type': 'get_weather_data'}]
model_generated_function : 
['get_weather_data(coordinates = [45.4215, -75.6972])']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
model_generated_result: [{'args': {'vectorA': [1, 2, 3], 'vectorB': [4, 5, 6]}, 'type': 'calculate_cosine_similarity'}]
model_generated_function : 
['calculate_cosine_similarity(vectorA = [1, 2, 3], vectorB = [4, 5, 6])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 2
model_generated_result: [{'args': {'mass': 50, 'volume': 10}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate_density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 3
model_generated_result: [{'args': {'year': '2020', 'country': 'ES'}, 'type': 'retrieve_holiday_by_year'}]
model_generated_function : 
["retrieve_holiday_by_year(year = '2020', country = 'ES')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 4
model_generated_result: [{'args': {'charge': 5, 'voltage': 10}, 'type': 'calculate_electrostatic_potential_energy'}]
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 5
model_generated_result: [{'args': {'initial_velocity': 10, 'acceleration': 2, 'time': 5}, 'type': 'calculate_final_velocity'}]
model_generated_function : 
['calculate_final_velocity(initial_velocity = 10, acceleration = 2, time = 5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
model_generated_result: [{'args': {'present_value': 5000, 'interest_rate': 0.05, 'periods': 10}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 0.05, periods = 10)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 7
model_generated_result: [{'args': {'numbers': [5, 10, 15, 20, 25]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate_mean(numbers = [5, 10, 15, 20, 25])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 8
model_generated_result: [{'args': {'present_value': 5000, 'interest_rate': 0.05, 'periods': 10}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 0.05, periods = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
model_generated_result: [{'args': {'n': 10}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get_fibonacci_sequence(n = 10)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 10
model_generated_result: [{'args': {'stock_name': 'AAPL'}, 'type': 'get_company_name_by_stock_name'}]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
model_generated_result: [{'args': {'stock_name': 'Apple', 'interval': '1mo', 'diffandsplits': False}, 'type': 'get_stock_history'}]
model_generated_function : 
["get_stock_history(stock_name = 'Apple', interval = '1mo', diffandsplits = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 12
model_generated_result: [{'args': {'a': 36, 'b': 48}, 'type': 'math_gcd'}]
model_generated_function : 
['math_gcd(a = 36, b = 48)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 13
model_generated_result: [{'args': {'term': 'Bitcoin'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'Bitcoin')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 14
model_generated_result: [{'args': {'charge': 5, 'voltage': 10}, 'type': 'calculate_electrostatic_potential_energy'}]
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
model_generated_result: [{'args': {'country': 'Italy'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get_covid_death_by_country(country = 'Italy')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
model_generated_result: [{'args': {'stock_name': 'AAPL'}, 'type': 'get_stock_price_by_stock_name'}]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
model_generated_result: [{'args': {'ip_address': '192.168.1.1'}, 'type': 'get_coordinate_by_ip_address'}]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
model_generated_result: [{'args': {'numbers': [1, 3, 4, 6, 8]}, 'type': 'calculate_mean'}]
model_generated_function : 
['calculate_mean(numbers = [1, 3, 4, 6, 8])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
model_generated_result: [{'args': {'ASIN': 'B08N5WRWNW'}, 'type': 'get_product_name_by_amazon_ASIN'}]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
model_generated_result: [{'args': {'n': 10}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get_fibonacci_sequence(n = 10)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 21
model_generated_result: [{'args': {'n': 10}, 'type': 'get_fibonacci_sequence'}]
model_generated_function : 
['get_fibonacci_sequence(n = 10)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
model_generated_result: [{'args': {'country': 'Brazil'}, 'type': 'get_covid_death_by_country'}]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
model_generated_result: [{'args': {'numbers': [23, 436, 1231, 123]}, 'type': 'calculate_standard_deviation'}]
model_generated_function : 
['calculate_standard_deviation(numbers = [23, 436, 1231, 123])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 24
model_generated_result: [{'args': {'ASIN': 'B08JG8DQ7C'}, 'type': 'get_product_name_by_amazon_ASIN'}]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08JG8DQ7C')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 25
model_generated_result: [{'args': {'ASIN': 'B08N5WRWNW'}, 'type': 'get_rating_by_amazon_ASIN'}]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
model_generated_result: [{'args': {'function': 'x^2', 'x': 5}, 'type': 'estimate_derivative'}]
model_generated_function : 
["estimate_derivative(function = 'x^2', x = 5)"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
model_generated_result: [{'args': {'loan_amount': 350000, 'interest_rate': 3.5, 'loan_period': 30}, 'type': 'mortgage_calculator'}]
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
model_generated_result: [{'args': {'long': '120.97388', 'lat': '23.973875'}, 'type': 'get_time_zone_by_coord'}]
model_generated_function : 
["get_time_zone_by_coord(long = '120.97388', lat = '23.973875')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 29
model_generated_result: [{'args': {'n': 10, 'k': 5, 'p': 0.5}, 'type': 'calc_binomial_probability'}]
model_generated_function : 
['calc_binomial_probability(n = 10, k = 5, p = 0.5)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 30
model_generated_result: [{'args': {'initial_velocity': 20, 'acceleration': 2, 'time': 10}, 'type': 'calculate_displacement'}]
model_generated_function : 
['calculate_displacement(initial_velocity = 20, acceleration = 2, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 31
model_generated_result: [{'args': {}, 'type': 'mat_mul'}]
model_generated_function : 
['mat_mul()']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 32
model_generated_result: [{'args': {'amount': 1000, 'from_currency': 'USD', 'to_currency': 'EUR'}, 'type': 'convert_currency'}]
model_generated_function : 
["convert_currency(amount = 1000, from_currency = 'USD', to_currency = 'EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
model_generated_result: [{'args': {'mass': 300, 'volume': 50}, 'type': 'calculate_density'}]
model_generated_function : 
['calculate_density(mass = 300, volume = 50)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 34
model_generated_result: [{'args': {'loan_amount': 350000, 'interest_rate': 3.5, 'loan_period': 30}, 'type': 'mortgage_calculator'}]
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 35
model_generated_result: [{'args': {'a': 2, 'b': -3, 'c': 5}, 'type': 'quadratic_roots'}]
model_generated_function : 
['quadratic_roots(a = 2, b = -3, c = 5)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 36
model_generated_result: [{'args': {'present_value': 5000, 'interest_rate': 0.05, 'periods': 10}, 'type': 'calculate_future_value'}]
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 0.05, periods = 10)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 37
model_generated_result: [{'args': {'long': '12.4924', 'lat': '41.8902'}, 'type': 'get_time_zone_by_coord'}]
model_generated_function : 
["get_time_zone_by_coord(long = '12.4924', lat = '41.8902')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 38
model_generated_result: [{'args': {'term': 'Hello World'}, 'type': 'find_term_on_urban_dictionary'}]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'Hello World')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 39
model_generated_result: [{'args': {'coordinates': [45.4215, -75.6972]}, 'type': 'get_weather_data'}]
model_generated_function : 
['get_weather_data(coordinates = [45.4215, -75.6972])']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 40
Accuracy: 1.0
-----------------------
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
this model is not accepted now.
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
tuple indices must be integers or slices, not str
model_generated_function : None
tuple indices must be integers or slices, not str
model_generated_function : None
tuple indices must be integers or slices, not str
model_generated_function : None
tuple indices must be integers or slices, not str
model_generated_function : None
tuple indices must be integers or slices, not str
model_generated_function : None
tuple indices must be integers or slices, not str
model_generated_function : None
tuple indices must be integers or slices, not str
model_generated_function : None
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
tuple indices must be integers or slices, not str
model_generated_function : None
tuple indices must be integers or slices, not str
model_generated_function : None
tuple indices must be integers or slices, not str
model_generated_function : None
tuple indices must be integers or slices, not str
model_generated_function : None
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
'tuple' object has no attribute 'name'
model_generated_function : None
'tuple' object has no attribute 'name'
model_generated_function : None
'tuple' object has no attribute 'name'
model_generated_function : None
'tuple' object has no attribute 'name'
model_generated_function : None
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.6)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
model_generated_function : 
['calc_binomial_probability(n = 30, k = 15, p = 0.5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 2
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.3, 0.8, 0.1, 0.6, 0.2], vectorB = [0.5, 0.7, 0.4, 0.9, 0.3])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 4
model_generated_function : 
['calculate_density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
model_generated_function : 
['calculate_density(mass = 120, volume = 30)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 6
model_generated_function : 
['calculate_displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
model_generated_function : 
['calculate_displacement(initial_velocity = 25, acceleration = 15, time = 8)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 8
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 7.8, voltage = 15.2)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 10
model_generated_function : 
['calculate_final_velocity(initial_velocity = 0, acceleration = 9.8, time = 12)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 11
model_generated_function : 
['calculate_final_velocity(initial_velocity = 0, acceleration = 9.8, time = 7)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 12
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 13
model_generated_function : 
['calculate_future_value(present_value = 8000, interest_rate = 4, periods = 15)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 14
model_generated_function : 
['calculate_mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
model_generated_function : 
['calculate_mean(numbers = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
model_generated_function : 
['calculate_permutations(n = 26, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 17
model_generated_function : 
['calculate_permutations(n = 30, k = 7)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 18
model_generated_function : 
['calculate_standard_deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
model_generated_function : 
['calculate_standard_deviation(numbers = [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
model_generated_function : 
['calculate_triangle_area(base = 500, height = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 21
model_generated_function : 
['calculate_triangle_area(base = 700, height = 450)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 22
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 23
model_generated_function : 
["convert_currency(amount = 3000, from_currency = 'USD', to_currency = 'GBP')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 24
model_generated_function : 
["estimate_derivative(function = '3t^2 + 2x + 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 25
model_generated_function : 
["estimate_derivative(function = '4x^3 + 3x^2 + 2x + 1', x = 7)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 26
model_generated_function : 
["find_term_on_urban_dictionary(term = 'lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
model_generated_function : 
["find_term_on_urban_dictionary(term = 'flex')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
model_generated_function : 
['geometry_area_circle(radius = 15)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 29
model_generated_function : 
['geometry_area_circle(radius = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 30
model_generated_function : 
["get_active_covid_case_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 31
model_generated_function : 
["get_active_covid_case_by_country(country = 'Spain')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 32
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'GOOGL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 34
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 35
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 36
model_generated_function : 
["get_coordinates_from_city(city_name = 'Paris')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 37
model_generated_function : 
["get_coordinates_from_city(city_name = 'Cairo')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 38
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 39
model_generated_function : 
["get_covid_death_by_country(country = 'India')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 40
model_generated_function : 
["get_distance(pointA = '(45.76, 4.85)', pointB = '(48.85, 2.35)')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 41
model_generated_function : 
["get_distance(pointA = '(32.71, -117.16)', pointB = '(34.05, -118.25)')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 42
model_generated_function : 
['get_fibonacci_sequence(n = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 43
model_generated_function : 
['get_fibonacci_sequence(n = 50)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 44
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 45
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B07HJXVHSS')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 46
model_generated_function : 
['get_prime_factors(number = 4567)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 47
model_generated_function : 
['get_prime_factors(number = 7891)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 48
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L8KC1J7')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 49
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B07FZ8S74R')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 50
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B08L5WGQGJ')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 51
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B07FZ8S74R')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 52
'NoneType' object has no attribute 'replace'
model_generated_function : None
model_generated_function : 
["get_stock_history(stock_name = 'MSFT', interval = '1wk', diffandsplits = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 53
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 54
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'MSFT')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 55
model_generated_function : 
["get_time_zone_by_coord(long = '123.45', lat = '-67.89')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 56
model_generated_function : 
["get_time_zone_by_coord(long = '80.75', lat = '35.22')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 57
model_generated_function : 
['get_weather_data(coordinates = [90.0, 0.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 58
model_generated_function : 
['get_weather_data(coordinates = [25.0, 13.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 59
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 60
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 61
model_generated_function : 
['mat_mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 62
model_generated_function : 
['mat_mul(matA = [[2, 3], [4, 5]], matB = [[6, 7], [8, 9]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 63
model_generated_function : 
['math_factorial(n = 7)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 64
model_generated_function : 
['math_factorial(n = 12)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 65
model_generated_function : 
['math_gcd(a = 450, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 66
model_generated_function : 
['math_gcd(a = 360, b = 240)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 67
model_generated_function : 
['math_lcm(a = 18, b = 24)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 68
model_generated_function : 
['math_lcm(a = 35, b = 45)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 69
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 70
model_generated_function : 
['mortgage_calculator(loan_amount = 500000, interest_rate = 4.5, loan_period = 25)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 71
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = -10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 72
model_generated_function : 
['quadratic_roots(a = 5, b = -8, c = 2)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 73
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 74
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '10001')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 75
model_generated_function : 
["retrieve_holiday_by_year(year = '2010', country = 'FR')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 76
model_generated_function : 
["retrieve_holiday_by_year(year = '2005', country = 'DE')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 77
model_generated_function : 
['sort_array(array = [34, 2, 56, 7, 9, 12], reverse = True)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 78
model_generated_function : 
['sort_array(array = [1, 2, 2, 7, 7, 10])']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 79
model_generated_function : 
["add_binary_numbers(a = '0011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 80
model_generated_function : 
["add_binary_numbers(a = '10011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 81
model_generated_function : 
['linear_regression(x = [1, 2, 3], y = [4, 5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 82
model_generated_function : 
['linear_regression(x = [1, 2, -3], y = [4, -5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 83
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 2], [3, 4], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 84
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 3], [4, 6], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 85
model_generated_function : 
['calculate_investment_value(initial_investment = 10000, annual_contribution = 1000, years = 5, annual_return = 5, inflation_rate = [1, 2, 3, 4, 4], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 86
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 87
model_generated_function : 
["calculate_nutritional_needs(weight = 100, height = 170, age = 30, gender = 'male', activity_level = 1, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 88
model_generated_function : 
["calculate_nutritional_needs(weight = 59, height = 170, age = 80, gender = 'female', activity_level = 4, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 89
model_generated_function : 
["book_room(room_type = {'type': 'deluxe', 'price': 1000}, check_in_date = '08-11-2024', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 90
model_generated_function : 
["book_room(room_type = {'type': 'king', 'price': 10000}, check_in_date = '12-11-2023', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 91
'FunctionCall' object is not subscriptable
model_generated_function : None
'FunctionCall' object is not subscriptable
model_generated_function : None
model_generated_function : 
["get_movie_director(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 92
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 93
model_generated_function : 
["get_movie_rating(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 94
model_generated_function : 
["get_movie_rating(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 95
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 3]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 96
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 97
Accuracy: 0.97
-----------------------
test_category: executable_multiple_function
Generating: gorilla_openfunctions_v1_test_executable_multiple_function.json
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.16666666666666666)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 1
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 2
model_generated_function : 
['calculate_density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
model_generated_function : 
['calculate_displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 4
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
model_generated_function : 
['calculate_final_velocity(initial_velocity = 0, acceleration = 9.8, time = 12)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
model_generated_function : 
['calculate_mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
model_generated_function : 
['calculate_permutations(n = 26, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
model_generated_function : 
['calculate_standard_deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 10
model_generated_function : 
['calculate_triangle_area(base = 500, height = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 12
model_generated_function : 
["estimate_derivative(function = '3t^2 + 2x + 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 13
model_generated_function : 
["find_term_on_urban_dictionary(term = 'lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
model_generated_function : 
['geometry_area_circle(radius = 15)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
model_generated_function : 
["get_active_covid_case_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
model_generated_function : 
["get_coordinates_from_city(city_name = 'Paris')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
model_generated_function : 
["get_distance(pointA = '(45.76, 4.85)', pointB = '(48.85, 2.35)')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 21
model_generated_function : 
['get_fibonacci_sequence(n = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
model_generated_function : 
['get_prime_factors(number = 4567)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 24
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L8KC1J7')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B08L5WGQGJ')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
'NoneType' object has no attribute 'replace'
model_generated_function : None
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
model_generated_function : 
["get_time_zone_by_coord(long = '123.45', lat = '-67.89')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 28
model_generated_function : 
['get_weather_data(coordinates = [90.0, 0.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 29
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 30
model_generated_function : 
['mat_mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 31
model_generated_function : 
['math_factorial(n = 7)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 32
model_generated_function : 
['math_gcd(a = 450, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 33
model_generated_function : 
['math_lcm(a = 18, b = 24)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 34
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 35
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = -10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 36
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 37
model_generated_function : 
["retrieve_holiday_by_year(year = '2010', country = 'FR')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 38
model_generated_function : 
['sort_array(array = [34, 2, 56, 7, 9, 12], reverse = True)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 39
model_generated_function : 
["add_binary_numbers(a = '10011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 40
model_generated_function : 
['linear_regression(x = [1, 2, -3], y = [4, -5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 41
model_generated_function : 
['calculate_investment_value(initial_investment = 10000, annual_contribution = 1000, years = 5, annual_return = 5, inflation_rate = [1, 2, 3, 4, 4], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 42
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4])']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 43
model_generated_function : 
["calculate_nutritional_needs(weight = 59, height = 170, age = 80, gender = 'female', activity_level = 4, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 44
model_generated_function : 
["book_room(room_type = {'type': 'deluxe', 'price': 1000}, check_in_date = '08-11-2024', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 45
model_generated_function : 
["order_food(item = ['dumplings', 'rice bowl'], quantity = [101, 20], price = [0.1, 10])"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 46
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 47
model_generated_function : 
["get_movie_rating(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 48
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 49
Accuracy: 0.98
-----------------------
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
'FunctionCall' object is not subscriptable
model_generated_function : None
'FunctionCall' object is not subscriptable
model_generated_function : None
'FunctionCall' object is not subscriptable
model_generated_function : None
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
'FunctionCall' object is not subscriptable
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
'FunctionCall' object is not subscriptable
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
model_generated_function : 
['calc_binomial_probability(n = 10, k = 3, p = 0.3)', 'calc_binomial_probability(n = 15, k = 5, p = 0.3)', 'calc_binomial_probability(n = 20, k = 7, p = 0.3)']
compare reuslt: False
ground_truth_function: ['["calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.3, 0.6, 0.2, 0.8, 0.1])", "calculate_cosine_similarity(vectorA=[0.2, 0.4, 0.6, 0.8, 1.0], vectorB=[1.0, 0.8, 0.6, 0.4, 0.2])", "calculate_cosine_similarity(vectorA=[0.1, 0.2, 0.3, 0.4, 0.5], vectorB=[0.5, 0.4, 0.3, 0.2, 0.1])"]']
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.3, 0.6, 0.2, 0.8, 0.1])', 'calculate_cosine_similarity(vectorA = [0.2, 0.4, 0.6, 0.8, 1.0], vectorB = [1.0, 0.8, 0.6, 0.4, 0.2])', 'calculate_cosine_similarity(vectorA = [0.1, 0.2, 0.3, 0.4, 0.5], vectorB = [0.5, 0.4, 0.3, 0.2, 0.1])']
compare reuslt: False
ground_truth_function: ['["calculate_density(mass=500, volume=100)", "calculate_density(mass=200, volume=50)", "calculate_density(mass=300, volume=75)", "calculate_density(mass=400, volume=80)"]']
model_generated_function : 
['calculate_density(mass = 500, volume = 100)', 'calculate_density(mass = 200, volume = 50)', 'calculate_density(mass = 300, volume = 75)', 'calculate_density(mass = 400, volume = 80)']
compare reuslt: False
ground_truth_function: ['[calculate_displacement(initial_velocity=20, acceleration=-9.8, time=5), calculate_displacement(initial_velocity=30, acceleration=-9.8, time=5), calculate_displacement(initial_velocity=25, acceleration=-9.8, time=5)]']
model_generated_function : 
['calculate_displacement(initial_velocity = 20, acceleration = -9.8, time = 5)', 'calculate_displacement(initial_velocity = 30, acceleration = -9.8, time = 5)', 'calculate_displacement(initial_velocity = 25, acceleration = -9.8, time = 5)']
compare reuslt: False
ground_truth_function: ['[calculate_electrostatic_potential_energy(charge=1.6e-19, voltage=500), calculate_electrostatic_potential_energy(charge=-1.6e-19, voltage=1000), calculate_electrostatic_potential_energy(charge=0, voltage=2000)]']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 1.6e-19, voltage = 500)', 'calculate_electrostatic_potential_energy(charge = -1.6e-19, voltage = 1000)', 'calculate_electrostatic_potential_energy(charge = 0, voltage = 2000)']
compare reuslt: False
ground_truth_function: ['[calculate_final_velocity(initial_velocity=5, acceleration=2, time=10), calculate_final_velocity(initial_velocity=2, acceleration=1, time=15), calculate_final_velocity(initial_velocity=1, acceleration=0.5, time=20)]']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 5, acceleration = 2, time = 10)', 'calculate_final_velocity(initial_velocity = 2, acceleration = 1, time = 15)', 'calculate_final_velocity(initial_velocity = 1, acceleration = 0.5, time = 20)']
compare reuslt: False
ground_truth_function: ['[calculate_future_value(present_value=5000, interest_rate=5, periods=10), calculate_future_value(present_value=2000, interest_rate=7, periods=15), calculate_future_value(present_value=1000, interest_rate=10, periods=20)]']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)', 'calculate_future_value(present_value = 2000, interest_rate = 7, periods = 15)', 'calculate_future_value(present_value = 1000, interest_rate = 10, periods = 20)']
compare reuslt: False
ground_truth_function: ['[calculate_mean(numbers=[35, 40, 45, 50, 55]), calculate_mean(numbers=[72, 75, 78, 80, 82, 85]), calculate_mean(numbers=[1.50, 1.55, 1.60, 1.65, 1.70])]']
model_generated_function : 
['calculate_mean(numbers = [35, 40, 45, 50, 55])', 'calculate_mean(numbers = [72, 75, 78, 80, 82, 85])', 'calculate_mean(numbers = [1.5, 1.55, 1.6, 1.65, 1.7])']
compare reuslt: False
ground_truth_function: ['[calculate_permutations(n=20, k=5), calculate_permutations(n=12, k=5), calculate_permutations(n=10, k=3)]']
model_generated_function : 
['calculate_permutations(n = 20, k = 5)', 'calculate_permutations(n = 12, k = 5)', 'calculate_permutations(n = 10, k = 3)']
compare reuslt: False
ground_truth_function: ['[calculate_standard_deviation(numbers=[23, 34, 45, 56, 67, 78, 89]), calculate_standard_deviation(numbers=[10, 20, 30, 40, 50, 60]), calculate_standard_deviation(numbers=[90, 80, 70, 60, 50, 40])]']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
model_generated_function : 
['calc_binomial_probability(n = 10, k = 3, p = 0.3)', 'calc_binomial_probability(n = 15, k = 5, p = 0.3)', 'calc_binomial_probability(n = 20, k = 7, p = 0.3)']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
model_generated_function : 
['calc_binomial_probability(n = 10, k = 3, p = 0.3)', 'calc_binomial_probability(n = 15, k = 5, p = 0.3)', 'calc_binomial_probability(n = 20, k = 7, p = 0.3)']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
model_generated_function : 
['calc_binomial_probability(n = 10, k = 3, p = 0.3)', 'calc_binomial_probability(n = 15, k = 5, p = 0.3)', 'calc_binomial_probability(n = 20, k = 7, p = 0.3)']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3), calc_binomial_probability(n=15, k=5, p=0.3), calc_binomial_probability(n=20, k=7, p=0.3)]']
model_generated_function : 
['calc_binomial_probability(n = 10, k = 3, p = 0.3)', 'calc_binomial_probability(n = 15, k = 5, p = 0.3)', 'calc_binomial_probability(n = 20, k = 7, p = 0.3)']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['[calc_binomial_probability(n=10, k=3, p=0.3)', 'calc_binomial_probability(n=15, k=5, p=0.3)', 'calc_binomial_probability(n=20, k=7, p=0.3)]']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['calc_binomial_probability(n=10, k=3, p=0.3)', 'calc_binomial_probability(n=15, k=5, p=0.3)', 'calc_binomial_probability(n=20, k=7, p=0.3)']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['calc_binomial_probability(n=10, k=3, p=0.3)', 'calc_binomial_probability(n=15, k=5, p=0.3)', 'calc_binomial_probability(n=20, k=7, p=0.3)']
model_generated_function : 
['calc_binomial_probability(n = 10, k = 3, p = 0.3)', 'calc_binomial_probability(n = 15, k = 5, p = 0.3)', 'calc_binomial_probability(n = 20, k = 7, p = 0.3)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
ground_truth_function: ['"calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.3, 0.6, 0.2, 0.8, 0.1])"', '"calculate_cosine_similarity(vectorA=[0.2, 0.4, 0.6, 0.8, 1.0], vectorB=[1.0, 0.8, 0.6, 0.4, 0.2])"', '"calculate_cosine_similarity(vectorA=[0.1, 0.2, 0.3, 0.4, 0.5], vectorB=[0.5, 0.4, 0.3, 0.2, 0.1])"']
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.3, 0.6, 0.2, 0.8, 0.1])', 'calculate_cosine_similarity(vectorA = [0.2, 0.4, 0.6, 0.8, 1.0], vectorB = [1.0, 0.8, 0.6, 0.4, 0.2])', 'calculate_cosine_similarity(vectorA = [0.1, 0.2, 0.3, 0.4, 0.5], vectorB = [0.5, 0.4, 0.3, 0.2, 0.1])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 2
ground_truth_function: ['"calculate_density(mass=500, volume=100)"', '"calculate_density(mass=200, volume=50)"', '"calculate_density(mass=300, volume=75)"', '"calculate_density(mass=400, volume=80)"']
model_generated_function : 
['calculate_density(mass = 500, volume = 100)', 'calculate_density(mass = 200, volume = 50)', 'calculate_density(mass = 300, volume = 75)', 'calculate_density(mass = 400, volume = 80)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
ground_truth_function: ['calculate_displacement(initial_velocity=20, acceleration=-9.8, time=5)', 'calculate_displacement(initial_velocity=30, acceleration=-9.8, time=5)', 'calculate_displacement(initial_velocity=25, acceleration=-9.8, time=5)']
model_generated_function : 
['calculate_displacement(initial_velocity = 20, acceleration = -9.8, time = 5)', 'calculate_displacement(initial_velocity = 30, acceleration = -9.8, time = 5)', 'calculate_displacement(initial_velocity = 25, acceleration = -9.8, time = 5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 4
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=1.6e-19, voltage=500)', 'calculate_electrostatic_potential_energy(charge=-1.6e-19, voltage=1000)', 'calculate_electrostatic_potential_energy(charge=0, voltage=2000)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 1.6e-19, voltage = 500)', 'calculate_electrostatic_potential_energy(charge = -1.6e-19, voltage = 1000)', 'calculate_electrostatic_potential_energy(charge = 0, voltage = 2000)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
ground_truth_function: ['calculate_final_velocity(initial_velocity=5, acceleration=2, time=10)', 'calculate_final_velocity(initial_velocity=2, acceleration=1, time=15)', 'calculate_final_velocity(initial_velocity=1, acceleration=0.5, time=20)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 5, acceleration = 2, time = 10)', 'calculate_final_velocity(initial_velocity = 2, acceleration = 1, time = 15)', 'calculate_final_velocity(initial_velocity = 1, acceleration = 0.5, time = 20)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=5, periods=10)', 'calculate_future_value(present_value=2000, interest_rate=7, periods=15)', 'calculate_future_value(present_value=1000, interest_rate=10, periods=20)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)', 'calculate_future_value(present_value = 2000, interest_rate = 7, periods = 15)', 'calculate_future_value(present_value = 1000, interest_rate = 10, periods = 20)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
ground_truth_function: ['calculate_mean(numbers=[35, 40, 45, 50, 55])', 'calculate_mean(numbers=[72, 75, 78, 80, 82, 85])', 'calculate_mean(numbers=[1.50, 1.55, 1.60, 1.65, 1.70])']
model_generated_function : 
['calculate_mean(numbers = [35, 40, 45, 50, 55])', 'calculate_mean(numbers = [72, 75, 78, 80, 82, 85])', 'calculate_mean(numbers = [1.5, 1.55, 1.6, 1.65, 1.7])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
ground_truth_function: ['calculate_permutations(n=20, k=5)', 'calculate_permutations(n=12, k=5)', 'calculate_permutations(n=10, k=3)']
model_generated_function : 
['calculate_permutations(n = 20, k = 5)', 'calculate_permutations(n = 12, k = 5)', 'calculate_permutations(n = 10, k = 3)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
ground_truth_function: ['calculate_standard_deviation(numbers=[23, 34, 45, 56, 67, 78, 89])', 'calculate_standard_deviation(numbers=[10, 20, 30, 40, 50, 60])', 'calculate_standard_deviation(numbers=[90, 80, 70, 60, 50, 40])']
model_generated_function : 
['calculate_standard_deviation(numbers = [23, 34, 45, 56, 67, 78, 89])', 'calculate_standard_deviation(numbers = [10, 20, 30, 40, 50, 60])', 'calculate_standard_deviation(numbers = [90, 80, 70, 60, 50, 40])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 10
ground_truth_function: ['calculate_triangle_area(base=15, height=20)', 'calculate_triangle_area(base=25, height=30)', 'calculate_triangle_area(base=35, height=40)']
model_generated_function : 
['calculate_triangle_area(base = 15, height = 20)', 'calculate_triangle_area(base = 25, height = 30)', 'calculate_triangle_area(base = 35, height = 40)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
ground_truth_function: ["convert_currency(amount=5000, from_currency='JPY', to_currency='USD')", "convert_currency(amount=300, from_currency='GBP', to_currency='EUR')", "convert_currency(amount=2000, from_currency='INR', to_currency='AUD')", "convert_currency(amount=100, from_currency='CAD', to_currency='CHF')"]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'JPY', to_currency = 'USD')", "convert_currency(amount = 5000, from_currency = 'JPY', to_currency = 'EUR')", "convert_currency(amount = 5000, from_currency = 'JPY', to_currency = 'AUD')", "convert_currency(amount = 100, from_currency = 'CAD', to_currency = 'CHF')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 12
ground_truth_function: ['estimate_derivative(function=lambda x: 3*x**2 + 2*x - 1, x=4)', 'estimate_derivative(function=lambda x: 5*x**3 - 3*x**2 + 2*x + 1, x=-2)', 'estimate_derivative(function=lambda x: 2*x**4 - 3*x**3 + 2*x**2 - x + 1, x=0)', 'estimate_derivative(function=lambda x: x**5 - 2*x**4 + 3*x**3 - 2*x**2 + x - 1, x=1)']
model_generated_function : 
["estimate_derivative(function = '3x^2 + 2x - 1', x = 4)", "estimate_derivative(function = '5x^3 - 3x^2 + 2x + 1', x = -2)", "estimate_derivative(function = '2x^4 - 3x^3 + 2x^2 - x + 1', x = 0)", "estimate_derivative(function = 'x^5 - 2x^4 + 3x^3 - 2x^2 + x - 1', x = 1)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 13
ground_truth_function: ["find_term_on_urban_dictionary(term='Lit')", "find_term_on_urban_dictionary(term='Savage')", "find_term_on_urban_dictionary(term='FOMO')", "find_term_on_urban_dictionary(term='YOLO')"]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'Lit')", "find_term_on_urban_dictionary(term = 'Savage')", "find_term_on_urban_dictionary(term = 'YOLO')"]
compare reuslt: False
ground_truth_function: ['geometry_area_circle(radius=5)', 'geometry_area_circle(radius=10)', 'geometry_area_circle(radius=15)', 'geometry_area_circle(radius=20)']
model_generated_function : 
['geometry_area_circle(radius = 5)', 'geometry_area_circle(radius = 10)', 'geometry_area_circle(radius = 15)', 'geometry_area_circle(radius = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
ground_truth_function: ["get_active_covid_case_by_country(country='France')", "get_active_covid_case_by_country(country='Italy')", "get_active_covid_case_by_country(country='United States')", "get_active_covid_case_by_country(country='China')"]
model_generated_function : 
["get_active_covid_case_by_country(country = 'France')", "get_active_covid_case_by_country(country = 'Italy')", "get_active_covid_case_by_country(country = 'United States')", "get_active_covid_case_by_country(country = 'China')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ["get_company_name_by_stock_name(stock_name='AAPL')", "get_company_name_by_stock_name(stock_name='GOOGL')", "get_company_name_by_stock_name(stock_name='AMZN')", "get_company_name_by_stock_name(stock_name='MSFT')"]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')", "get_company_name_by_stock_name(stock_name = 'GOOGL')", "get_company_name_by_stock_name(stock_name = 'AMZN')", "get_company_name_by_stock_name(stock_name = 'MSFT')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='192.168.1.1')", "get_coordinate_by_ip_address(ip_address='172.16.254.1')", "get_coordinate_by_ip_address(ip_address='10.0.0.1')", "get_coordinate_by_ip_address(ip_address='192.0.2.1')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')", "get_coordinate_by_ip_address(ip_address = '172.16.254.1')", "get_coordinate_by_ip_address(ip_address = '10.0.0.1')", "get_coordinate_by_ip_address(ip_address = '192.0.2.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
ground_truth_function: ["get_coordinates_from_city(city_name='New York')", "get_coordinates_from_city(city_name='Los Angeles')", "get_coordinates_from_city(city_name='Chicago')", "get_coordinates_from_city(city_name='Houston')"]
model_generated_function : 
["get_coordinates_from_city(city_name = 'New York')", "get_coordinates_from_city(city_name = 'Los Angeles')", "get_coordinates_from_city(city_name = 'Chicago')", "get_coordinates_from_city(city_name = 'Houston')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
ground_truth_function: ["get_covid_death_by_country(country='Brazil')", "get_covid_death_by_country(country='India')", "get_covid_death_by_country(country='Russia')", "get_covid_death_by_country(country='South Africa')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')", "get_covid_death_by_country(country = 'India')", "get_covid_death_by_country(country = 'Russia')", "get_covid_death_by_country(country = 'South Africa')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ['get_distance(pointA=(3, 4)', 'pointB=(7, 9))', 'get_distance(pointA=(1, 2)', 'pointB=(5, 6))', 'get_distance(pointA=(0, 0)', 'pointB=(8, 15))', 'get_distance(pointA=(10, 12)', 'pointB=(20, 25))']
model_generated_function : 
['get_distance(pointA = [3, 4], pointB = [7, 9])', 'get_distance(pointA = [1, 2], pointB = [5, 6])', 'get_distance(pointA = [0, 0], pointB = [8, 15])', 'get_distance(pointA = [10, 12], pointB = [20, 25])']
compare reuslt: False
ground_truth_function: ['get_fibonacci_sequence(n=10)', 'get_fibonacci_sequence(n=20)', 'get_fibonacci_sequence(n=5)', 'get_fibonacci_sequence(n=15)']
model_generated_function : 
['get_fibonacci_sequence(n = 10)', 'get_fibonacci_sequence(n = 20)', 'get_fibonacci_sequence(n = 5)']
compare reuslt: False
ground_truth_function: ["get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')", "get_price_by_amazon_ASIN(ASIN='B07FZ8S74R')", "get_price_by_amazon_ASIN(ASIN='B07B4L1PQ8')", "get_price_by_amazon_ASIN(ASIN='B07RF1XD36')"]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')", "get_price_by_amazon_ASIN(ASIN = 'B07FZ8S74R')", "get_price_by_amazon_ASIN(ASIN = 'B07B4L1PQ8')", "get_price_by_amazon_ASIN(ASIN = 'B07RF1XD36')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
ground_truth_function: ['get_prime_factors(number=456)', 'get_prime_factors(number=789)', 'get_prime_factors(number=321)', 'get_prime_factors(number=654)']
model_generated_function : 
['get_prime_factors(number = 456)', 'get_prime_factors(number = 789)', 'get_prime_factors(number = 321)', 'get_prime_factors(number = 654)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B08L5VG843')", "get_product_name_by_amazon_ASIN(ASIN='B07XJ8C8F5')", "get_product_name_by_amazon_ASIN(ASIN='B07FZ8S74R')", "get_product_name_by_amazon_ASIN(ASIN='B07HJHKL9S')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L5VG843')", "get_product_name_by_amazon_ASIN(ASIN = 'B07XJ8C8F5')", "get_product_name_by_amazon_ASIN(ASIN = 'B07FZ8S74R')", "get_product_name_by_amazon_ASIN(ASIN = 'B07HJHKL9S')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B07HJHKL9S')", "get_rating_by_amazon_ASIN(ASIN='B07FZ8S74R')", "get_rating_by_amazon_ASIN(ASIN='B08L5VG843')", "get_rating_by_amazon_ASIN(ASIN='B07XJ8C8F5')"]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B07HJHKL9S')", "get_rating_by_amazon_ASIN(ASIN = 'B07FZ8S74R')", "get_rating_by_amazon_ASIN(ASIN = 'B08L5VG843')", "get_rating_by_amazon_ASIN(ASIN = 'B07XJ8C8F5')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["get_stock_history(stock_name='AAPL', interval='1d')", "get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits=True)", "get_stock_history(stock_name='AMZN', interval='1mo')", "get_stock_history(stock_name='TSLA', interval='3mo', diffandsplits=False)"]
'NoneType' object has no attribute 'replace'
model_generated_function : None
ground_truth_function: ["get_stock_price_by_stock_name(stock_name='GOOG')", "get_stock_price_by_stock_name(stock_name='NFLX')", "get_stock_price_by_stock_name(stock_name='BABA')"]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'GOOG')", "get_stock_price_by_stock_name(stock_name = 'META')", "get_stock_price_by_stock_name(stock_name = 'NFLX')", "get_stock_price_by_stock_name(stock_name = 'Alibaba Group Holding Ltd. BABA')"]
compare reuslt: False
ground_truth_function: ["get_time_zone_by_coord(long='77.1025', lat='28.7041')", "get_time_zone_by_coord(long='-73.935242', lat='40.730610')", "get_time_zone_by_coord(long='151.2093', lat='33.8688')", "get_time_zone_by_coord(long='139.6917', lat='35.6895')"]
model_generated_function : 
["get_time_zone_by_coord(long = '77.1025', lat = '28.7041')", "get_time_zone_by_coord(long = '-73.935242', lat = '40.730610')", "get_time_zone_by_coord(long = '151.2093', lat = '33.8688')", "get_time_zone_by_coord(long = '139.6917', lat = '35.6895')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 24
ground_truth_function: ['get_weather_data(coordinates=[34.0522, -118.2437])', 'get_weather_data(coordinates=[51.5074, -0.1278])', 'get_weather_data(coordinates=[-33.9249, 18.4241])', 'get_weather_data(coordinates=[48.8566, 2.3522])']
model_generated_function : 
['get_weather_data(coordinates = [34.0522, -118.2437])', 'get_weather_data(coordinates = [51.5074, -0.1278])', 'get_weather_data(coordinates = [-33.9249, 18.4241])', 'get_weather_data(coordinates = [48.8566, 2.3522])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
ground_truth_function: ["get_zipcode_by_ip_address(ip_address='192.168.1.1')", "get_zipcode_by_ip_address(ip_address='172.16.254.1')", "get_zipcode_by_ip_address(ip_address='10.0.0.1')", "get_zipcode_by_ip_address(ip_address='203.0.113.0')"]
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')", "get_zipcode_by_ip_address(ip_address = '172.16.254.1')", "get_zipcode_by_ip_address(ip_address = '10.0.0.1')", "get_zipcode_by_ip_address(ip_address = '203.0.113.0')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
ground_truth_function: ['mat_mul(matA=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], matB=[[10, 11, 12], [13, 14, 15], [16, 17, 18]])', 'mat_mul(matA=[[19, 20], [21, 22]], matB=[[23, 24], [25, 26]])', 'mat_mul(matA=[[27, 28, 29, 30], [31, 32, 33, 34]], matB=[[35, 36, 37, 38], [39, 40, 41, 42]])', 'mat_mul(matA=[[43, 44], [45, 46]], matB=[[47, 48], [49, 50]])']
model_generated_function : 
['mat_mul(matA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], matB = [[10, 11, 12], [13, 14, 15], [16, 17, 18]])', 'mat_mul(matA = [[19, 20], [21, 22]], matB = [[23, 24], [25, 26]])', 'mat_mul(matA = [[27, 28, 29, 30], [31, 32, 33, 34]], matB = [[35, 36, 37, 38], [39, 40, 41, 42]])', 'mat_mul(matA = [[43, 44], [45, 46]], matB = [[47, 48], [49, 50]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 27
ground_truth_function: ['math_factorial(n=5)', 'math_factorial(n=7)', 'math_factorial(n=10)', 'math_factorial(n=12)']
model_generated_function : 
['math_factorial(n = 5)', 'math_factorial(n = 7)', 'math_factorial(n = 10)', 'math_factorial(n = 12)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
ground_truth_function: ['math_gcd(a=45, b=60)', 'math_gcd(a=81, b=27)', 'math_gcd(a=144, b=96)', 'math_gcd(a=100, b=80)']
model_generated_function : 
['math_gcd(a = 45, b = 60)', 'math_gcd(a = 81, b = 27)', 'math_gcd(a = 144, b = 96)', 'math_gcd(a = 100, b = 80)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 29
ground_truth_function: ['math_lcm(a=35, b=45)', 'math_lcm(a=72, b=108)', 'math_lcm(a=120, b=180)', 'math_lcm(a=200, b=300)']
model_generated_function : 
['math_lcm(a = 35, b = 45)', 'math_lcm(a = 72, b = 108)', 'math_lcm(a = 120, b = 180)', 'math_lcm(a = 200, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 30
ground_truth_function: ['mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)', 'mortgage_calculator(loan_amount=500000, interest_rate=0.04, loan_period=20)', 'mortgage_calculator(loan_amount=750000, interest_rate=0.025, loan_period=15)', 'mortgage_calculator(loan_amount=1000000, interest_rate=0.03, loan_period=10)']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)', 'mortgage_calculator(loan_amount = 500000, interest_rate = 4, loan_period = 20)', 'mortgage_calculator(loan_amount = 750000, interest_rate = 2.5, loan_period = 15)', 'mortgage_calculator(loan_amount = 1000000, interest_rate = 3, loan_period = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 31
ground_truth_function: ['quadratic_roots(a=3, b=7, c=2)', 'quadratic_roots(a=5, b=12, c=4)', 'quadratic_roots(a=8, b=16, c=6)', 'quadratic_roots(a=10, b=20, c=8)']
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = 2)', 'quadratic_roots(a = 5, b = 12, c = 4)', 'quadratic_roots(a = 8, b = 16, c = 6)', 'quadratic_roots(a = 10, b = 20, c = 8)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 32
ground_truth_function: ["retrieve_city_based_on_zipcode(zipcode='90210')", "retrieve_city_based_on_zipcode(zipcode='10001')", "retrieve_city_based_on_zipcode(zipcode='60601')", "retrieve_city_based_on_zipcode(zipcode='94102')"]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')", "retrieve_city_based_on_zipcode(zipcode = '10001')", "retrieve_city_based_on_zipcode(zipcode = '60601')", "retrieve_city_based_on_zipcode(zipcode = '94102')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
ground_truth_function: ["retrieve_holiday_by_year(year='2018', country='US')", "retrieve_holiday_by_year(year='2020', country='DE')", "retrieve_holiday_by_year(year='2019', country='ES')", "retrieve_holiday_by_year(year='2021', country='GB')"]
model_generated_function : 
["retrieve_holiday_by_year(year = '2018', country = 'US')", "retrieve_holiday_by_year(year = '2020', country = 'DE')", "retrieve_holiday_by_year(year = '2019', country = 'ES')", "retrieve_holiday_by_year(year = '2021', country = 'GB')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 34
ground_truth_function: ['sort_array(array=[5, 2, 9, 1, 7])', 'sort_array(array=[3, 8, 6, 4], reverse=True)', 'sort_array(array=[10, 20, 30, 40, 50])', 'sort_array(array=[100, 200, 300, 400, 500], reverse=True)']
Internal Server Error
model_generated_function : None
ground_truth_function: ["add_binary_numbers(a='0011', b='1100')", "add_binary_numbers(a='1010', b='0101')", "add_binary_numbers(a='1111', b='0000')", "add_binary_numbers(a='0001', b='1110')"]
model_generated_function : 
["add_binary_numbers(a = '0011', b = '1100')", "add_binary_numbers(a = '1010', b = '0101')", "add_binary_numbers(a = '1111', b = '0000')", "add_binary_numbers(a = '0001', b = '1110')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 35
ground_truth_function: ['linear_regression(x=[1,2,3],y=[4,5,6],point=10)', 'linear_regression(x=[2,4,6],y=[8,10,12],point=15)', 'linear_regression(x=[3,6,9],y=[12,15,18],point=20)', 'linear_regression(x=[4,8,12],y=[16,20,24],point=25)']
model_generated_function : 
['linear_regression(x = [1, 2, 3], y = [4, 5, 6], point = 10)', 'linear_regression(x = [2, 4, 6], y = [8, 10, 12], point = 15)', 'linear_regression(x = [3, 6, 9], y = [12, 15, 18], point = 20)', 'linear_regression(x = [4, 8, 12], y = [16, 20, 24], point = 25)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 36
ground_truth_function: ['maxPoints(points=[[1,1],[2,2],[3,4],[5,5]])', 'maxPoints(points=[[1,2],[3,2],[5,2],[4,2]])', 'maxPoints(points=[[0,0],[1,1],[0,1],[1,0]])', 'maxPoints(points=[[1,1],[3,2],[5,3],[7,4]])']
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 2], [3, 4], [5, 5]])', 'maxPoints(points = [[1, 2], [3, 2], [5, 2], [4, 2]])', 'maxPoints(points = [[0, 0], [1, 1], [0, 1], [1, 0]])', 'maxPoints(points = [[1, 1], [3, 2], [5, 3], [7, 4]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 37
ground_truth_function: ['calculate_investment_value(initial_investment=1000000, annual_contribution=1000, years=3, annual_return=0.1, inflation_rate=[0.01, 0.04, 0.04])', 'calculate_investment_value(initial_investment=500000, annual_contribution=500, years=5, annual_return=0.07, inflation_rate=[0.02, 0.03, 0.02, 0.03, 0.02])', 'calculate_investment_value(initial_investment=250000, annual_contribution=2000, years=7, annual_return=0.05, inflation_rate=[0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01])', 'calculate_investment_value(initial_investment=800000, annual_contribution=1500, years=10, annual_return=0.08, inflation_rate=[0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01, 0.02])']
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4], adjust_for_inflation = True)', 'calculate_investment_value(initial_investment = 500000, annual_contribution = 500, years = 5, annual_return = 7, inflation_rate = [2, 3, 2, 3, 2], adjust_for_inflation = True)', 'calculate_investment_value(initial_investment = 250000, annual_contribution = 2000, years = 7, annual_return = 5, inflation_rate = [1, 2, 1, 2, 1, 2, 1], adjust_for_inflation = True)', 'calculate_investment_value(initial_investment = 800000, annual_contribution = 1500, years = 10, annual_return = 8, inflation_rate = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
model_generated_function_params_pair_count: 5
correct_params_count: 5
model_generated_function_params_pair_count: 5
correct_params_count: 5
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 38
ground_truth_function: ["calculate_nutritional_needs(weight=75, height=180, age=25, gender='male', activity_level=3, goal='gain')", "calculate_nutritional_needs(weight=65, height=165, age=30, gender='female', activity_level=2, goal='maintain')", "calculate_nutritional_needs(weight=85, height=175, age=40, gender='male', activity_level=5, goal='lose')", "calculate_nutritional_needs(weight=70, height=160, age=55, gender='female', activity_level=1, goal='lose')"]
model_generated_function : 
["calculate_nutritional_needs(weight = 75, height = 180, age = 25, gender = 'male', activity_level = 3, goal = 'gain')", "calculate_nutritional_needs(weight = 65, height = 165, age = 30, gender = 'female', activity_level = 2, goal = 'maintain')", "calculate_nutritional_needs(weight = 85, height = 175, age = 40, gender = 'male', activity_level = 5, goal = 'lose')", "calculate_nutritional_needs(weight = 70, height = 160, age = 55, gender = 'female', activity_level = 1, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
model_generated_function_params_pair_count: 6
correct_params_count: 6
model_generated_function_params_pair_count: 6
correct_params_count: 6
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 39
ground_truth_function: ["order_food(item=['burger'], quantity=[10], price=[5])", "order_food(item=['ice cream'], quantity=[7, price=[2])", "order_food(item=['pizza'], quantity=[3], price=[8])", "order_food(item=['donut'], quantity=[12], price=[1])"]
model_generated_function : 
["order_food(item = ['burger', 'ice cream', 'pizza', 'donut'], quantity = [10, 7, 3, 12], price = [5, 2, 8, 1])"]
compare reuslt: False
ground_truth_function: ["order_food(item='dumplings', quantity=101, price=0.1)", "order_food(item='rice bowl', quantity=20, price=10)", "order_food(item='spring rolls', quantity=50, price=0.5)", "order_food(item='noodle soup', quantity=10, price=3)"]
model_generated_function : 
["order_food(item = ['dumplings', 'rice bowls', 'spring rolls', 'noodle soups'], quantity = [101, 20, 50, 10], price = [0.1, 10, 0.5, 3])"]
compare reuslt: False
ground_truth_function: ["get_movie_director(movie_name='Pulp Fiction')", "get_movie_director(movie_name='Reservoir Dogs')", "get_movie_director(movie_name='Kill Bill')", "get_movie_director(movie_name='Django Unchained')"]
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')", "get_movie_director(movie_name = 'Reservoir Dogs')", "get_movie_director(movie_name = 'Kill Bill: Volume 1')", "get_movie_director(movie_name = 'Django Unchained')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 40
ground_truth_function: ["get_movie_rating(movie_name='Pulp Fiction')", "get_movie_rating(movie_name='The Godfather')", "get_movie_rating(movie_name='Schindler's List')", "get_movie_rating(movie_name='The Dark Knight')"]
model_generated_function : 
["get_movie_rating(movie_name = 'Pulp Fiction')", "get_movie_rating(movie_name = 'The Godfather')", 'get_movie_rating(movie_name = "Schindler\'s List")', "get_movie_rating(movie_name = 'The Dark Knight')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 41
ground_truth_function: ['polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])', 'polygon_area(vertices=[[5,5],[6,7],[7,5]])', 'polygon_area(vertices=[[2,1],[4,2],[3,4],[1,3]])', 'polygon_area(vertices=[[-1,0],[2,3],[0,4],[-2,2]])']
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])', 'polygon_area(vertices = [[5, 5], [6, 7], [7, 5]])', 'polygon_area(vertices = [[2, 1], [4, 2], [3, 4], [1, 3]])', 'polygon_area(vertices = [[-1, 0], [2, 3], [0, 4], [-2, 2]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 42
Accuracy: 0.84
-----------------------
test_category: executable_simple
Generating: gorilla_openfunctions_v1_test_executable_simple.json
ground_truth_function: ['calc_binomial_probability(n=20, k=5, p=0.6)']
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.6)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
ground_truth_function: ['calc_binomial_probability(n=30, k=15, p=0.5)']
model_generated_function : 
['calc_binomial_probability(n = 30, k = 15, p = 0.5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 2
ground_truth_function: ['calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
ground_truth_function: ['calculate_cosine_similarity(vectorA=[0.3, 0.8, 0.1, 0.6, 0.2], vectorB=[0.5, 0.7, 0.4, 0.9, 0.3])']
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.3, 0.8, 0.1, 0.6, 0.2], vectorB = [0.5, 0.7, 0.4, 0.9, 0.3])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 4
ground_truth_function: ['calculate_density(mass=50, volume=10)']
model_generated_function : 
['calculate_density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
ground_truth_function: ['calculate_density(mass=120, volume=30)']
model_generated_function : 
['calculate_density(mass = 120, volume = 30)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 6
ground_truth_function: ['calculate_displacement(initial_velocity=15, acceleration=9.8, time=10)']
model_generated_function : 
['calculate_displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
ground_truth_function: ['calculate_displacement(initial_velocity=25, acceleration=15, time=8)']
model_generated_function : 
['calculate_displacement(initial_velocity = 25, acceleration = 15, time = 8)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 8
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=5, voltage=10)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=7.8, voltage=15.2)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 7.8, voltage = 15.2)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 10
ground_truth_function: ['calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=12)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 0, acceleration = 9.8, time = 12)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 11
ground_truth_function: ['calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=7)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 0, acceleration = 9.8, time = 7)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 12
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 13
ground_truth_function: ['calculate_future_value(present_value=8000, interest_rate=0.04, periods=15)']
model_generated_function : 
['calculate_future_value(present_value = 8000, interest_rate = 4, periods = 15)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 14
ground_truth_function: ['calculate_mean(numbers=[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function : 
['calculate_mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ['calculate_mean(numbers=[15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])']
model_generated_function : 
['calculate_mean(numbers = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ['calculate_permutations(n=26, k=5)']
model_generated_function : 
['calculate_permutations(n = 26, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 17
ground_truth_function: ['calculate_permutations(n=30, k=7)']
model_generated_function : 
['calculate_permutations(n = 30, k = 7)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 18
ground_truth_function: ['calculate_standard_deviation(numbers=[1000,2000,3000,4000,5000,7000,9000,15000,20000,30000])']
model_generated_function : 
['calculate_standard_deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ['calculate_standard_deviation(numbers=[30,20,25,12,59,23,64,21,67,12,23,43])']
model_generated_function : 
['calculate_standard_deviation(numbers = [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
ground_truth_function: ['calculate_triangle_area(base=500, height=300)']
model_generated_function : 
['calculate_triangle_area(base = 500, height = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 21
ground_truth_function: ['calculate_triangle_area(base=700, height=450)']
model_generated_function : 
['calculate_triangle_area(base = 700, height = 450)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 22
ground_truth_function: ["convert_currency(amount=5000, from_currency='EUR', to_currency='JPY')"]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["convert_currency(amount=3000, from_currency='USD', to_currency='GBP')"]
model_generated_function : 
["convert_currency(amount = 3000, from_currency = 'USD', to_currency = 'GBP')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 24
ground_truth_function: ['estimate_derivative(function=lambda x: 3*x**2 + 2*x + 1, x=5)']
model_generated_function : 
["estimate_derivative(function = '3t^2 + 2x + 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 25
ground_truth_function: ['estimate_derivative(function=lambda x: 4*x**3 + 3*x**2 + 2*x + 1, x=7)']
model_generated_function : 
["estimate_derivative(function = '4x^3 + 3x^2 + 2x + 1', x = 7)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 26
ground_truth_function: ['find_term_on_urban_dictionary(term="lit")']
model_generated_function : 
["find_term_on_urban_dictionary(term = 'lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
ground_truth_function: ['find_term_on_urban_dictionary(term="flex")']
model_generated_function : 
["find_term_on_urban_dictionary(term = 'flex')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
ground_truth_function: ['geometry_area_circle(radius=15)']
model_generated_function : 
['geometry_area_circle(radius = 15)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 29
ground_truth_function: ['geometry_area_circle(radius=20)']
model_generated_function : 
['geometry_area_circle(radius = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 30
ground_truth_function: ["get_active_covid_case_by_country(country='Brazil')"]
model_generated_function : 
["get_active_covid_case_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 31
ground_truth_function: ["get_active_covid_case_by_country(country='Spain')"]
model_generated_function : 
["get_active_covid_case_by_country(country = 'Spain')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 32
ground_truth_function: ["get_company_name_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
ground_truth_function: ["get_company_name_by_stock_name(stock_name='GOOGL')"]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'GOOGL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 34
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='192.168.1.1')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 35
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='172.16.254.1')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 36
ground_truth_function: ["get_coordinates_from_city(city_name='Paris')"]
model_generated_function : 
["get_coordinates_from_city(city_name = 'Paris')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 37
ground_truth_function: ["get_coordinates_from_city(city_name='Cairo')"]
model_generated_function : 
["get_coordinates_from_city(city_name = 'Cairo')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 38
ground_truth_function: ["get_covid_death_by_country(country='Brazil')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 39
ground_truth_function: ["get_covid_death_by_country(country='India')"]
model_generated_function : 
["get_covid_death_by_country(country = 'India')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 40
ground_truth_function: ['get_distance(pointA=(45.76, 4.85)', 'pointB=(48.85, 2.35))']
model_generated_function : 
["get_distance(pointA = '(45.76, 4.85)', pointB = '(48.85, 2.35)')"]
compare reuslt: False
ground_truth_function: ['get_distance(pointA=(32.71, -117.16)', 'pointB=(34.05, -118.25))']
model_generated_function : 
["get_distance(pointA = '(32.71, -117.16)', pointB = '(34.05, -118.25)')"]
compare reuslt: False
ground_truth_function: ['get_fibonacci_sequence(n=20)']
model_generated_function : 
['get_fibonacci_sequence(n = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 41
ground_truth_function: ['get_fibonacci_sequence(n=50)']
model_generated_function : 
['get_fibonacci_sequence(n = 50)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 42
ground_truth_function: ["get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')"]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 43
ground_truth_function: ["get_price_by_amazon_ASIN(ASIN='B07HJXVHSS')"]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B07HJXVHSS')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 44
ground_truth_function: ['get_prime_factors(number=4567)']
model_generated_function : 
['get_prime_factors(number = 4567)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 45
ground_truth_function: ['get_prime_factors(number=7891)']
model_generated_function : 
['get_prime_factors(number = 7891)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 46
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B08L8KC1J7')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L8KC1J7')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 47
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B07FZ8S74R')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B07FZ8S74R')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 48
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B08BHXG144')"]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B08L5WGQGJ')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 49
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B07FZ8S74R')"]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B07FZ8S74R')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 50
ground_truth_function: ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=True)"]
'NoneType' object has no attribute 'replace'
model_generated_function : None
ground_truth_function: ["get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits=False)"]
model_generated_function : 
["get_stock_history(stock_name = 'MSFT', interval = '1wk', diffandsplits = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 51
ground_truth_function: ["get_stock_price_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 52
ground_truth_function: ["get_stock_price_by_stock_name(stock_name='MSFT')"]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'MSFT')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 53
ground_truth_function: ["get_time_zone_by_coord(long='123.45', lat='-67.89')"]
model_generated_function : 
["get_time_zone_by_coord(long = '123.45', lat = '-67.89')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 54
ground_truth_function: ["get_time_zone_by_coord(long='80.75', lat='35.22')"]
model_generated_function : 
["get_time_zone_by_coord(long = '80.75', lat = '35.22')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 55
ground_truth_function: ['get_weather_data(coordinates=[90.00, 0.00])']
model_generated_function : 
['get_weather_data(coordinates = [90.0, 0.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 56
ground_truth_function: ['get_weather_data(coordinates=[25.00, 13.00])']
model_generated_function : 
['get_weather_data(coordinates = [25.0, 13.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 57
ground_truth_function: ['get_zipcode_by_ip_address(ip_address="192.168.1.1")']
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 58
ground_truth_function: ["get_zipcode_by_ip_address(ip_address='172.16.254.1')"]
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 59
ground_truth_function: ['mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]])']
model_generated_function : 
['mat_mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 60
ground_truth_function: ['mat_mul(matA=[[2, 3], [4, 5]], matB=[[6, 7], [8, 9]])']
model_generated_function : 
['mat_mul(matA = [[2, 3], [4, 5]], matB = [[6, 7], [8, 9]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 61
ground_truth_function: ['math_factorial(n=7)']
model_generated_function : 
['math_factorial(n = 7)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 62
ground_truth_function: ['math_factorial(n=12)']
model_generated_function : 
['math_factorial(n = 12)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 63
ground_truth_function: ['math_gcd(a=450, b=300)']
model_generated_function : 
['math_gcd(a = 450, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 64
ground_truth_function: ['math_gcd(a=360, b=240)']
model_generated_function : 
['math_gcd(a = 360, b = 240)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 65
ground_truth_function: ['math_lcm(a=18, b=24)']
model_generated_function : 
['math_lcm(a = 18, b = 24)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 66
ground_truth_function: ['math_lcm(a=35, b=45)']
model_generated_function : 
['math_lcm(a = 35, b = 45)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 67
ground_truth_function: ['mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 68
ground_truth_function: ['mortgage_calculator(loan_amount=500000, interest_rate=0.045, loan_period=25)']
model_generated_function : 
['mortgage_calculator(loan_amount = 500000, interest_rate = 4.5, loan_period = 25)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 69
ground_truth_function: ['quadratic_roots(a=3, b=7, c=-10)']
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = -10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 70
ground_truth_function: ['quadratic_roots(a=5, b=-8, c=2)']
model_generated_function : 
['quadratic_roots(a = 5, b = -8, c = 2)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 71
ground_truth_function: ["retrieve_city_based_on_zipcode(zipcode='90210')"]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 72
ground_truth_function: ["retrieve_city_based_on_zipcode(zipcode='10001')"]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '10001')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 73
ground_truth_function: ["retrieve_holiday_by_year(year='2010', country='FR')"]
model_generated_function : 
["retrieve_holiday_by_year(year = '2010', country = 'FR')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 74
ground_truth_function: ["retrieve_holiday_by_year(year='2005', country='DE')"]
model_generated_function : 
["retrieve_holiday_by_year(year = '2005', country = 'DE')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 75
ground_truth_function: ['sort_array(array=[34, 2, 56, 7, 9, 12], reverse=True)']
model_generated_function : 
['sort_array(array = [34, 2, 56, 7, 9, 12], reverse = True)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 76
ground_truth_function: ['sort_array(array=[1, 2, 2, 7, 7, 10], reverse=False)']
model_generated_function : 
['sort_array(array = [1, 2, 2, 7, 7, 10])']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 77
ground_truth_function: ["add_binary_numbers(a='0011',b='1100')"]
model_generated_function : 
["add_binary_numbers(a = '0011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 78
ground_truth_function: ["add_binary_numbers(a='10011',b='1100')"]
model_generated_function : 
["add_binary_numbers(a = '10011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 79
ground_truth_function: ['linear_regression(x=[1,2,3],y=[4,5,6],point=10)']
model_generated_function : 
['linear_regression(x = [1, 2, 3], y = [4, 5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 80
ground_truth_function: ['linear_regression(x=[1,2,-3],y=[4,-5,6],point=10)']
model_generated_function : 
['linear_regression(x = [1, 2, -3], y = [4, -5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 81
ground_truth_function: ['maxPoints(points=[[1,1],[2,2],[3,4],[5,5]])']
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 2], [3, 4], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 82
ground_truth_function: ['maxPoints(points=[[1,1],[2,3],[4,6],[5,5]])']
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 3], [4, 6], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 83
ground_truth_function: ['calculate_investment_value(initial_investment=10000,annual_contribution=1000,years=5,annual_return=0.05,inflation_rate=[0.01,0.02,0.03,0.04,0.04])']
model_generated_function : 
['calculate_investment_value(initial_investment = 10000, annual_contribution = 1000, years = 5, annual_return = 5, inflation_rate = [1, 2, 3, 4, 4], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 84
ground_truth_function: ['calculate_investment_value(initial_investment=1000000,annual_contribution=1000,years=3,annual_return=0.05,inflation_rate=[0.01,0.04,0.04])']
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 85
ground_truth_function: ["calculate_nutritional_needs(weight=100,height=170,age=30,gender='male',activity_level=1,goal='loss')"]
model_generated_function : 
["calculate_nutritional_needs(weight = 100, height = 170, age = 30, gender = 'male', activity_level = 1, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 86
ground_truth_function: ["calculate_nutritional_needs(weight=59,height=170,age=80,gender='female',activity_level=4,goal='loss')"]
model_generated_function : 
["calculate_nutritional_needs(weight = 59, height = 170, age = 80, gender = 'female', activity_level = 4, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 87
ground_truth_function: ["book_room(room_type={'type':'deluxe','price':1000},check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"]
model_generated_function : 
["book_room(room_type = {'type': 'deluxe', 'price': 1000}, check_in_date = '08-11-2024', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 88
ground_truth_function: ["book_room(room_type={'type':'king','price':10000},check_in_date='12-11-2023',check_out_date='08-15-2024',customer_id='123')"]
model_generated_function : 
["book_room(room_type = {'type': 'king', 'price': 10000}, check_in_date = '12-11-2023', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 89
ground_truth_function: ["order_food(item=['burger','ice cream'], quantity=[10,7], price=[5,2])"]
model_generated_function : 
["order_food(item = 'burger', quantity = 10, price = 5)", "order_food(item = 'ice cream', quantity = 7, price = 2)"]
compare reuslt: False
ground_truth_function: ["order_food(item=['dumplings','rice bowl'], quantity=[101,20], price=[0.1,10])"]
model_generated_function : 
["order_food(item = 'dumplings', quantity = 101, price = 0.1)", "order_food(item = 'rice bowl', quantity = 20, price = 10)"]
compare reuslt: False
ground_truth_function: ["get_movie_director(movie_name='Avatar')"]
model_generated_function : 
["get_movie_director(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 90
ground_truth_function: ["get_movie_director(movie_name='Pulp Fiction')"]
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 91
ground_truth_function: ["get_movie_rating(movie_name='Avatar')"]
model_generated_function : 
["get_movie_rating(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 92
ground_truth_function: ["get_movie_rating(movie_name='Pulp Fiction')"]
model_generated_function : 
["get_movie_rating(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 93
ground_truth_function: ['polygon_area(vertices=[[1,2],[3,4],[1,3]])']
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 3]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 94
ground_truth_function: ['polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])']
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 95
Accuracy: 0.95
-----------------------
test_category: parallel_function
Generating: gorilla_openfunctions_v1_test_parallel_function.json
ground_truth_function: ['spotify.play(artist="Taylor Swift", duration=20)', 'spotify.play(artist="Maroon 5", duration=15)']
model_generated_function : 
["spotify_play(artist = 'Taylor Swift', duration = 20)", "spotify_play(artist = 'Maroon 5', duration = 15)"]
ground_truth_function: ['calculate_em_force(b_field=5, area=2, d_time=4)', 'calculate_em_force(b_field=5, area=2, d_time=10)']
model_generated_function : 
['calculate_em_force(b_field = 5, area = 2, d_time = 4)', 'calculate_em_force(b_field = 5, area = 2, d_time = 10)']
ground_truth_function: ["calculate_resistance(length=5, area=0.01,resistivity='copper')", "calculate_resistance(length=5, area=0.01, resistivity='aluminum')"]
model_generated_function : 
["calculate_resistance(length = 5, area = 0.01, resistivity = 'copper')", "calculate_resistance(length = 5, area = 0.01, resistivity = 'aluminum')"]
ground_truth_function: ["protein_info.get_sequence_and_3D(protein_name='human HbA1c', model_3d=True)", "protein_info.get_sequence_and_3D(protein_name='normal hemoglobin', model_3d=True)", "protein_info.get_sequence_and_3D(protein_name='rat hemoglobin', model_3d=True)"]
model_generated_function : 
["protein_info_get_sequence_and_3D(protein_name = 'human HbA1c')", "protein_info_get_sequence_and_3D(protein_name = 'normal hemoglobin')", "protein_info_get_sequence_and_3D(protein_name = 'rat hemoglobin', model_3d = True)"]
ground_truth_function: ['calculate_bmi(height=6, weight=80)', 'calculate_bmi(height=5.6, weight=60)']
model_generated_function : 
['calculate_bmi(height = 6, weight = 80)', 'calculate_bmi(height = 5.6, weight = 60)']
ground_truth_function: ["streaming_services.shows_list_and_ratings(streaming_service='Netflix', show_list=['Friends'], sort_by_rating=True)", "streaming_services.shows_list_and_ratings(streaming_service='Hulu', show_list=['The Office', 'Stranger Things'], sort_by_rating=True)"]
model_generated_function : 
["streaming_services_shows_list_and_ratings(streaming_service = 'Netflix', show_list = ['Friends'], sort_by_rating = True)", "streaming_services_shows_list_and_ratings(streaming_service = 'Hulu', show_list = ['The Office', 'Stranger Things'], sort_by_rating = True)"]
ground_truth_function: ["calculate_sales_tax(purchase_amount=30.45, city='Chicago', state='IL')", "calculate_sales_tax(purchase_amount=52.33, city='Sacramento', state='CA')", "calculate_sales_tax(purchase_amount=11.23, city='Portland', state='OR')"]
model_generated_function : 
["calculate_sales_tax(purchase_amount = 30.45, city = 'Chicago', state = 'Illinois')", "calculate_sales_tax(purchase_amount = 52.33, city = 'Sacramento', state = 'California')", "calculate_sales_tax(purchase_amount = 11.23, city = 'Portland', state = 'Oregon')"]
ground_truth_function: ['math.factorial(number=5)', 'math.factorial(number=10)', 'math.factorial(number=15)']
model_generated_function : 
['math_factorial(number = 5)', 'math_factorial(number = 10)', 'math_factorial(number = 15)']
ground_truth_function: ["database_us_census.get_population(area='New York City, NY', type='city')", "database_us_census.get_population(area='Los Angeles, CA', type='city')", "database_us_census.get_population(area='Alaska', type='state')", "database_us_census.get_population(area='USA', type='country')"]
model_generated_function : 
["database_us_census_get_population(area = 'New York City', type = 'city')", "database_us_census_get_population(area = 'Los Angeles', type = 'city')", "database_us_census_get_population(area = 'Alaska', type = 'state')", "database_us_census_get_population(area = 'USA', type = 'country')"]
ground_truth_function: ["find_movie_showing(location='San Diego', movie='Tenet', time='5pm')", "find_movie_showing(location='San Diego', movie='No Time To Die', time='7:30pm')"]
model_generated_function : 
["find_movie_showing(location = 'San Diego, CA', movie = ['Tenet', 'No Time To Die'], time = ['5 pm', '7:30 pm'])"]
ground_truth_function: ['math.pythagoras(a=3, b=4)', 'math.pythagoras(a=5, b=12)']
model_generated_function : 
['math_pythagoras(a = 3, b = 4)', 'math_pythagoras(a = 5, b = 12)']
ground_truth_function: ["ml.predict_house_price(location='New York', size=3000)", "ml.predict_house_price(location='Los Angeles', size=4000)"]
model_generated_function : 
["ml_predict_house_price(location = 'New York', size = 3000)", "ml_predict_house_price(location = 'Los Angeles', size = 4000)"]
ground_truth_function: ["model.DecisionTreeClassifier(criterion='gini', max_depth=5, random_state=1)", "model.DecisionTreeClassifier(criterion='entropy', max_depth=10, random_state=1)"]
model_generated_function : 
["model_DecisionTreeClassifier(criterion = 'gini', max_depth = 5, random_state = 1)", "model_DecisionTreeClassifier(criterion = 'entropy', max_depth = 10, random_state = 1)"]
ground_truth_function: ['confidence_interval.calculate(sample_std_dev=10, sample_size=50, sample_mean=25)', 'confidence_interval.calculate(sample_std_dev=10, sample_size=150, sample_mean=25)']
model_generated_function : 
['confidence_interval_calculate(sample_std_dev = 10, sample_size = 50, sample_mean = 25, confidence_level = 0.95)', 'confidence_interval_calculate(sample_std_dev = 10, sample_size = 150, sample_mean = 25, confidence_level = 0.95)']
ground_truth_function: ['calculate_present_value(payment_per_year=1000, interest_rate=0.05, years=10)', 'calculate_present_value(payment_per_year=1000, interest_rate=0.05, years=20)', 'calculate_present_value(payment_per_year=1000, interest_rate=0.05, years=30)']
model_generated_function : 
['calculate_present_value(payment_per_year = 1000, interest_rate = 0.05, years = 10)', 'calculate_present_value(payment_per_year = 1000, interest_rate = 0.05, years = 20)', 'calculate_present_value(payment_per_year = 1000, interest_rate = 0.05, years = 30)']
ground_truth_function: ["calculate_capital_gains_tax(short_term_gain=15000, long_term_gain=25000, state='CA')", "calculate_capital_gains_tax(short_term_gain=20000, long_term_gain=50000, state='FL')"]
model_generated_function : 
["calculate_capital_gains_tax(short_term_gain = 15000, long_term_gain = 25000, state = 'California')", "calculate_capital_gains_tax(short_term_gain = 20000, long_term_gain = 50000, state = 'Florida')"]
ground_truth_function: ['calculate_return_on_investment(initial_investment=2000, gain_loss=500)', 'calculate_return_on_investment(initial_investment=5000, gain_loss=-1000)']
model_generated_function : 
['calculate_return_on_investment(initial_investment = 2000, gain_loss = 500)', 'calculate_return_on_investment(initial_investment = 5000, gain_loss = -1000)']
ground_truth_function: ["get_stock_data(symbol='AAPL', data_points=['price', 'volume'])", "get_stock_data(symbol='GOOGL', data_points=['price', 'volume'])", "get_stock_data(symbol='MSFT', data_points=['price', 'volume'])"]
model_generated_function : 
["get_stock_data(symbol = 'AAPL', data_points = ['price', 'volume'])", "get_stock_data(symbol = 'GOOG', data_points = ['price', 'volume'])", "get_stock_data(symbol = 'MSFT', data_points = ['price', 'volume'])"]
ground_truth_function: ['financials.calculate_future_value(present_value=1000, annual_interest_rate=0.05, number_of_years=1)', 'financials.calculate_future_value(present_value=1000, annual_interest_rate=0.05, number_of_years=5)', 'financials.calculate_future_value(present_value=1000, annual_interest_rate=0.05, number_of_years=10)']
model_generated_function : 
['financials_calculate_future_value(present_value = 1000, annual_interest_rate = 0.05, number_of_years = 15)', 'financials_calculate_future_value(present_value = 1000, annual_interest_rate = 0.05, number_of_years = 10)']
ground_truth_function: ['calculate_mortgage_payment(loan_amount=400000, interest_rate=0.04, loan_term=15)', 'calculate_mortgage_payment(loan_amount=400000, interest_rate=0.04, loan_term=20)', 'calculate_mortgage_payment(loan_amount=400000, interest_rate=0.04, loan_term=30)']
model_generated_function : 
['calculate_mortgage_payment(loan_amount = 400000, interest_rate = 0.04, loan_term = 15)', 'calculate_mortgage_payment(loan_amount = 400000, interest_rate = 0.04, loan_term = 20)', 'calculate_mortgage_payment(loan_amount = 400000, interest_rate = 0.04, loan_term = 30)']
ground_truth_function: ["loan_eligibility_check(financial_institution='HSBC', loan_amount=500000, annual_income=100000)", "loan_eligibility_check(financial_institution='Wells Fargo', loan_amount=700000, annual_income=120000)"]
model_generated_function : 
["loan_eligibility_check(financial_institution = 'HSBC', loan_amount = 500000, annual_income = 100000)", "loan_eligibility_check(financial_institution = 'Wells Fargo', loan_amount = 700000, annual_income = 120000)"]
ground_truth_function: ['law_crimes.search(crime="money laundering", location="San Francisco", year=2019)', 'law_crimes.search(crime="money laundering", location="Texas", year=2018)']
model_generated_function : 
["law_crimes_search(crime = 'money laundering', location = 'San Francisco', year = 2019)", "law_crimes_search(crime = 'money laundering', location = 'Texas', year = 2018)"]
ground_truth_function: ["court_info.get_case_status(case_number='XY1234', court='Los Angeles County Court', details=['status','trial_date'])", "court_info.get_case_status(case_number='GH5678', court='Orange County Court', details=['status','trial_date'])"]
model_generated_function : 
["court_info_get_case_status(case_number = 'XY1234', court = 'Los Angeles County Court', details = 'trial_date')", "court_info_get_case_status(case_number = 'GH5678', court = 'Orange County Court', details = 'trial_date')"]
ground_truth_function: ['alimony_calculator.ca.calculate(payor_income=10000, recipient_income=3000, duration=10)', 'alimony_calculator.ca.calculate(payor_income=10000, recipient_income=3000, duration=20)']
model_generated_function : 
['alimony_calculator_ca_calculate(payor_income = 10000, recipient_income = 3000, duration = 10)', 'alimony_calculator_ca_calculate(payor_income = 10000, recipient_income = 3000, duration = 20)']
ground_truth_function: ["law_case.get_details(case_number='28473', include_history=true, include_litigants=true)", "law_case.get_details(case_number='64725', include_history=true, include_litigants=true)"]
model_generated_function : 
["law_case_get_details(case_number = '28473', include_history = True, include_litigants = True)", "law_case_get_details(case_number = '64725', include_history = True, include_litigants = True)"]
ground_truth_function: ["lawsuit.lookup(company_name='Dara Inc', year=2019)", "lawsuit.lookup(company_name='Dara Inc', year=2018)"]
model_generated_function : 
["lawsuit_lookup(company_name = 'Dara Inc', year = 2019)", "lawsuit_lookup(company_name = 'Dara Inc', year = 2018)"]
ground_truth_function: ['court_case.find(location="New York District", case_number="67813", case_type="Civil")', 'court_case.find(location="New York District", case_number="71249", case_type="Criminal")']
model_generated_function : 
["court_case_find(location = 'New York District Court', case_number = ['67813', '71249'], case_type = 'Civil')", "court_case_find(location = 'New York District Court', case_number = ['67813', '71249'], case_type = 'Criminal')"]
ground_truth_function: ["nature_reserve.find_nearby(location='Berkeley', amenities=['Picnic Tables', 'Public Restrooms'], proximity=10)", "nature_reserve.find_nearby(location='Tokyo', amenities=['Playgrounds', 'Biking Trails'], proximity=5)"]
model_generated_function : 
["nature_reserve_find_nearby(location = 'Berkeley', amenities = ['Picnic Tables', 'Public Restrooms'], proximity = 10)", "nature_reserve_find_nearby(location = 'Tokyo', amenities = ['Playgrounds', 'Biking Trails'], proximity = 5)"]
ground_truth_function: ["get_current_and_future_temperature(location='Seattle', hours=3)", "get_current_and_future_temperature(location='Los Angeles', hours=3)"]
model_generated_function : 
["get_current_and_future_temperature(location = 'Seattle', hours = 3)", "get_current_and_future_temperature(location = 'Los Angeles', hours = 3)"]
ground_truth_function: ["waste_calculation.calculate(population={'adults': 2, 'children': 2, 'singles': 0}, location='Los Angeles')", "waste_calculation.calculate(population={'adults': 0, 'children': 0, 'singles': 1}, location='New York')"]
model_generated_function : 
["waste_calculation_calculate(population = {'adults': 2, 'children': 2, 'singles': 0}, location = 'Los Angeles')", "waste_calculation_calculate(population = {'adults': 1, 'children': 0, 'singles': 1}, location = 'New York')"]
ground_truth_function: ['book_flight(departure_city="San Francisco", destination_city="Tokyo", date="2022-05-03")', 'book_flight(departure_city="Tokyo", destination_city="Sydney", date="2022-05-18")']
model_generated_function : 
["book_flight(departure_city = 'San Francisco', destination_city = 'Tokyo', date = 'May 3rd 2022')", "book_flight(departure_city = 'Tokyo', destination_city = 'Sydney', date = 'May 18th 2022')"]
ground_truth_function: ["history_fact.fetch(event='Treaty of Paris')", "history_fact.fetch(event='Magna Carta')"]
model_generated_function : 
["history_fact_fetch(event = 'Treaty of Paris', depth = 'detailed')", "history_fact_fetch(event = 'Magna Carta', depth = 'detailed')"]
ground_truth_function: ["us_history.events_by_presidency(president_name='Abraham Lincoln')", "us_history.events_by_presidency(president_name='George Washington')"]
model_generated_function : 
["us_history_events_by_presidency(president_name = 'Abraham Lincoln')", "us_history_events_by_presidency(president_name = 'George Washington')"]
ground_truth_function: ["get_president_and_vp(year=1980, position='president')", "get_president_and_vp(year=2016, position='president')", "get_president_and_vp(year=1975, position='vice president')", "get_president_and_vp(year=2011, position='vice president')"]
model_generated_function : 
["get_president_and_vp(year = 1980, position = 'president')", "get_president_and_vp(year = 2016, position = 'president')", "get_president_and_vp(year = 1975, position = 'vice president')", "get_president_and_vp(year = 2011, position = 'vice president')"]
ground_truth_function: ['religion_history.track(region="Egypt", religion="Christianity", start_year=100, end_year=1500)', 'religion_history.track(region="Turkey", religion="Christianity", start_year=100, end_year=1500)']
model_generated_function : 
["religion_history_track(region = 'Egypt and Turkey', religion = 'Christianity', start_year = 100, end_year = 1500)"]
ground_truth_function: ["ancient_empires.get_religion_info(empire_name='Persian Empire', include_influences=true)", "ancient_empires.get_religion_info(empire_name='Mauryan Empire', include_influences=true)"]
model_generated_function : 
["ancient_empires_get_religion_info(empire_name = 'Persian Empire', include_influences = True)", "ancient_empires_get_religion_info(empire_name = 'Mauryan Empire', include_influences = True)"]
ground_truth_function: ["paint_color_mixture(paint_type='Watercolor', color='Magenta')", "paint_color_mixture(paint_type='Acrylic', color='Navy')"]
model_generated_function : 
["paint_color_mixture(paint_type = 'Watercolor', color = 'magenta')", "paint_color_mixture(paint_type = 'Acrylic', color = 'navy')"]
ground_truth_function: ["color_converter.get_color_info(color_name='navy', conversion_type=['RGB', 'HEX'])", "color_converter.get_color_info(color_name='purple', conversion_type=['RGB', 'HEX'])", "color_converter.get_color_info(color_name='maroon', conversion_type=['RGB', 'HEX'])"]
model_generated_function : 
["color_converter_get_color_info(color_name = 'navy', conversion_type = ['RGB', 'HEX'])", "color_converter_get_color_info(color_name = 'purple', conversion_type = ['RGB', 'HEX'])", "color_converter_get_color_info(color_name = 'maroon', conversion_type = ['RGB', 'HEX'])"]
ground_truth_function: ['calc_distance(start_loc="New York", end_loc="Washington DC", shortest_route=True)', 'calc_distance(start_loc="Los Angeles", end_loc="San Francisco", shortest_route=True)']
model_generated_function : 
["calc_distance(start_loc = 'New York', end_loc = 'Washington DC', shortest_route = True)", "calc_distance(start_loc = 'Los Angeles', end_loc = 'San Francisco', shortest_route = True)"]
ground_truth_function: ["museum_info.get_info(location='Washington D.C.', details=['Opening hours', 'Adult tickets', 'Child tickets'])", "museum_info.get_info(location='Paris', details=['Opening hours', 'Adult tickets', 'Child tickets'])"]
model_generated_function : 
["museum_info_get_info(location = 'Washington D.C.', details = ['Opening hours', 'Adult tickets', 'Child tickets'])", "museum_info_get_info(location = 'Paris', details = ['Opening hours', 'Adult tickets', 'Child tickets'])"]
ground_truth_function: ["museum.exhibition_detail(exhibition_name='Wonder of Nature', museum_name='Louvre', visitor_type=['child', 'adult'])", "museum.exhibition_detail(exhibition_name='Age of Reptiles', museum_name='British Museum', visitor_type=['child', 'adult'])"]
model_generated_function : 
["museum_exhibition_detail(exhibition_name = 'Wonder of Nature', museum_name = 'Louvre', visitor_type = ['child', 'adult'])", "museum_exhibition_detail(exhibition_name = 'Age of Reptiles', museum_name = 'British Museum', visitor_type = ['child', 'adult'])"]
ground_truth_function: ["find_music_instrument_store(location='San Francisco, CA', instruments=['Yamaha Acoustic Guitar', 'Kawai Piano'])", "find_music_instrument_store(location='Chicago, IL', instruments=['Yamaha Acoustic Guitar', 'Kawai Piano'])"]
model_generated_function : 
["find_music_instrument_store(location = 'San Francisco, CA', instruments = ['Yamaha acoustic guitar', 'Kawai piano'])", "find_music_instrument_store(location = 'Chicago, IL', instruments = ['Yamaha acoustic guitar', 'Kawai piano'])"]
ground_truth_function: ["check_instrument_availability(instrument='Yamaha P125', city='Berlin')", "check_instrument_availability(instrument='Yamaha P125', city='Madrid')"]
model_generated_function : 
["check_instrument_availability(instrument = 'Yamaha P125 piano', city = 'Berlin')", "check_instrument_availability(instrument = 'Yamaha P125 piano', city = 'Madrid')"]
ground_truth_function: ["concert_finder(location='San Francisco, California', music_genre='rock', time_period=30)", "concert_finder(location='San Francisco, California', music_genre='jazz', time_period=30)", "concert_finder(location='New York, New York', music_genre='rock', time_period=30)", "concert_finder(location='New York, New York', music_genre='jazz', time_period=30)"]
model_generated_function : 
["concert_finder(location = 'San Francisco, California', music_genre = 'rock', time_period = 30)", "concert_finder(location = 'New York, New York', music_genre = 'jazz', time_period = 30)"]
ground_truth_function: ['concert.find_nearby(location="Berlin", date="next Friday", genre="Classical", amenities="Parking")', 'concert.find_nearby(location="Paris", date="next Friday", genre="Classical", amenities="Parking")']
model_generated_function : 
["concert_find_nearby(location = 'Berlin', date = '2023-04-21', genre = 'Classical', amenities = ['Parking'])", "concert_find_nearby(location = 'Paris', date = '2023-04-21', genre = 'Classical', amenities = ['Parking'])"]
ground_truth_function: ["musicCharts.getMostPlayed(genre='Pop', region='Australia')", "musicCharts.getMostPlayed(genre='Rock', region='Australia')"]
model_generated_function : 
["musicCharts_getMostPlayed(genre = 'Pop', region = 'Australia')", "musicCharts_getMostPlayed(genre = 'Rock', region = 'Australia')"]
ground_truth_function: ["calculate_winning_percentage(team='Lakers', season=2018)", "calculate_winning_percentage(team='Bulls', season=2018)", "calculate_winning_percentage(team='Lakers', season=2020)", "calculate_winning_percentage(team='Bulls', season=2020)"]
model_generated_function : 
["calculate_winning_percentage(team = 'Lakers', season = 2018)", "calculate_winning_percentage(team = 'Bulls', season = 2020)"]
ground_truth_function: ['get_team_ranking(team="Barcelona", league="UEFA Champions League")', 'get_team_ranking(team="Manchester United", league="La Liga")']
model_generated_function : 
["get_team_ranking(team = 'Barcelona', league = 'UEFA Champions League')", "get_team_ranking(team = 'Manchester United', league = 'La Liga')"]
ground_truth_function: ["PokemonGO.get_moves(pokemon='Pikachu')", "PokemonGO.get_moves(pokemon='Bulbasaur', move='Solar Beam')"]
model_generated_function : 
["PokemonGO_get_moves(pokemon = 'Pikachu')", "PokemonGO_get_moves(pokemon = 'Bulbasaur', move = 'Solar Beam')"]
ground_truth_function: ["player_status.check(team='RocketLeague', player_id=3142, season=2017)", "player_status.check(team='RocketLeague', player_id=3142, season=2018)", "player_status.check(team='RocketLeague', player_id=3142, season=2019)"]
model_generated_function : 
["player_status_check(team = 'RocketLeague', player_id = 3142, season = 2017)", "player_status_check(team = 'RocketLeague', player_id = 3142, season = 2018)", "player_status_check(team = 'RocketLeague', player_id = 3142, season = 2019)"]
ground_truth_function: ["game.save_progress(stage=7, mode='easy', level='user')", "game.save_progress(stage=3, mode='hard', level='user')"]
model_generated_function : 
["game_save_progress(stage = 7, mode = 'easy')", "game_save_progress(stage = 3, mode = 'hard')"]
ground_truth_function: ['recipe_search.find(dish="Chicken Noodle Soup")', 'recipe_search.find(dish="Salad", diet="Vegan")']
model_generated_function : 
["recipe_search_find(dish = 'Chicken Noodle Soup')", "recipe_search_find(dish = 'Vegan Salad')"]
ground_truth_function: ["restaurant_finder(location='New York', cuisine='Italian', preferences='Vegetarian')", "restaurant_finder(location='Los Angeles', cuisine='Japanese', preferences='Delivery')"]
model_generated_function : 
["restaurant_finder(location = 'New York, NY', cuisine = 'Italian', preferences = ['Vegetarian'])", "restaurant_finder(location = 'Los Angeles, CA', cuisine = 'Japanese', preferences = ['Delivery'])"]
ground_truth_function: ["get_cooking_recipe(dish_name='Lasagne Bolognese', serving_size=4)", "get_cooking_recipe(dish_name='Caesar Salad', serving_size=2)"]
model_generated_function : 
["get_cooking_recipe(dish_name = 'Lasagne Bolognese', serving_size = 4)", "get_cooking_recipe(dish_name = 'Caesar Salad', serving_size = 2)"]
ground_truth_function: ['whole_foods.order(location="downtown",items=["large pepperoni pizza", "chicken Caesar salad"], size="large")', 'whole_foods.order(location="uptown",items=["large pepperoni pizza", "chicken Caesar salad"], size="large")']
model_generated_function : 
["whole_foods_order(location = 'downtown', items = ['pepperoni pizza', 'chicken Caesar salad'], size = 'large')", "whole_foods_order(location = 'uptown', items = ['pepperoni pizza', 'chicken Caesar salad'], size = 'large')"]
ground_truth_function: ["grocery_store.find_by_criteria(location='New York City', criteria=['24 hours'])", "grocery_store.find_by_criteria(location='San Diego', criteria=['Home Delivery'])"]
model_generated_function : 
["grocery_store_find_by_criteria(location = 'New York City', criteria = ['24 hours'])", "grocery_store_find_by_criteria(location = 'San Diego', criteria = ['Home Delivery'])"]
ground_truth_function: ["hotel_booking.check_availability(hotel_name='Queens Hotel', location='Berlin, Germany', check_in_date='2022-03-10', check_out_date='2022-03-20')", "hotel_booking.check_availability(hotel_name='Royal Hotel', location='Paris, France', check_in_date='2022-04-05', check_out_date='2022-04-15')"]
model_generated_function : 
["hotel_booking_check_availability(hotel_name = 'Queens Hotel', location = 'Berlin, Germany', check_in_date = '2022-03-10', check_out_date = '2022-03-20')", "hotel_booking_check_availability(hotel_name = 'Royal Hotel', location = 'Paris, France', check_in_date = '2022-04-05', check_out_date = '2022-04-15')"]
ground_truth_function: ["hotel_booking.book(hotel_name='Sheraton Hotel', location='New York', check_in='2022-05-01', check_out='2022-05-05', adults=2, children=1)", "hotel_booking.book(hotel_name='Marriott', location='Los Angeles', check_in='2022-06-01', check_out='2022-06-10', adults=1, children=2)"]
model_generated_function : 
["hotel_booking_book(hotel_name = 'Sheraton', location = 'New York', check_in = '2022-05-01', check_out = '2022-05-05', adults = 2, children = 1)", "hotel_booking_book(hotel_name = 'Marriott', location = 'Los Angeles', check_in = '2022-06-01', check_out = '2022-06-10', adults = 1, children = 2)"]
ground_truth_function: ["get_exchange_rate(base_currency='USD', target_currency='AUD')", "get_exchange_rate(base_currency='USD', target_currency='CAD')"]
model_generated_function : 
["get_exchange_rate(base_currency = 'USD', target_currency = 'AUD')", "get_exchange_rate(base_currency = 'USD', target_currency = 'CAD')"]
ground_truth_function: ["get_conversion_cost(amount=15000, from_currency='EUR', to_currency='USD')", "get_conversion_cost(amount=200, from_currency='GBP', to_currency='USD')"]
model_generated_function : 
["get_conversion_cost(amount = 15000, from_currency = 'EUR', to_currency = 'USD')", "get_conversion_cost(amount = 200, from_currency = 'GBP', to_currency = 'USD')"]
ground_truth_function: ['math.factorial(number=5)', 'math.factorial(number=7)', 'math.factorial(number=9)']
model_generated_function : 
['math_factorial(number = 5)', 'math_factorial(number = 7)', 'math_factorial(number = 9)']
ground_truth_function: ['"math.hypot(x=3, y=4)"', '"math.hypot(x=6, y=8)"', '"math.hypot(x=9, y=12, z=15)"']
model_generated_function : 
['math_hypot(x = 3, y = 4)', 'math_hypot(x = 6, y = 8)', 'math_hypot(x = 9, y = 12, z = 15)']
ground_truth_function: ['algebra.quadratic_roots(a=3, b=4, c=2)', 'algebra.quadratic_roots(a=5, b=-7, c=3)']
model_generated_function : 
['algebra_quadratic_roots(a = 3, b = 4, c = 2)', 'algebra_quadratic_roots(a = 5, b = -7, c = 3)']
ground_truth_function: ['"solve_quadratic_equation(a=5, b=6, c=1)"', '"solve_quadratic_equation(a=3, b=2, c=1)"']
model_generated_function : 
['solve_quadratic_equation(a = 5, b = 6, c = 1)', 'solve_quadratic_equation(a = 3, b = 2, c = 1)']
ground_truth_function: ['"solve_quadratic(a=2, b=5, c=3, root_type=\'all\')"', '"solve_quadratic(a=1, b=-3, c=2, root_type=\'real\')"', '"solve_quadratic(a=4, b=-7, c=3, root_type=\'all\')"', '"solve_quadratic(a=1, b=2, c=1, root_type=\'real\')"']
model_generated_function : 
["solve_quadratic(a = 2, b = 5, c = 3, root_type = 'all')", "solve_quadratic(a = 1, b = -3, c = 2, root_type = 'real')", "solve_quadratic(a = 4, b = -7, c = 3, root_type = 'all')", "solve_quadratic(a = 1, b = 2, c = 1, root_type = 'real')"]
ground_truth_function: ["calculate_circumference(radius=5, unit='cm')", "calculate_circumference(radius=10, unit='cm')", "calculate_circumference(radius=15, unit='cm')", "calculate_circumference(radius=20, unit='cm')"]
model_generated_function : 
["calculate_circumference(radius = 5, unit = 'cm')", "calculate_circumference(radius = 10, unit = 'cm')", "calculate_circumference(radius = 15, unit = 'cm')", "calculate_circumference(radius = 20, unit = 'cm')"]
ground_truth_function: ["geometry.area_circle(radius=5, units='meters')", "geometry.area_circle(radius=10, units='meters')", "geometry.area_circle(radius=15, units='meters')"]
model_generated_function : 
['geometry_area_circle(radius = 5)', 'geometry_area_circle(radius = 10)', 'geometry_area_circle(radius = 15)']
ground_truth_function: ['"geometry.calculate_area_circle(radius=5, unit=\'meters\')"', '"geometry.calculate_area_circle(radius=10, unit=\'meters\')"']
model_generated_function : 
["geometry_calculate_area_circle(radius = 5, unit = 'meters')", "geometry_calculate_area_circle(radius = 10, unit = 'meters')"]
ground_truth_function: ["calculate_area(base=12, height=15, unit='m')", "calculate_area(base=18, height=24, unit='m')"]
model_generated_function : 
["calculate_area(base = 12, height = 15, unit = 'm')", "calculate_area(base = 18, height = 24, unit = 'm')"]
ground_truth_function: ['calculate_triangle_area(base=10, height=5)', 'calculate_triangle_area(base=8, height=6)']
model_generated_function : 
['calculate_triangle_area(base = 10, height = 5)', 'calculate_triangle_area(base = 8, height = 6)']
ground_truth_function: ["geometry.circumference(radius=5, units='m')", "geometry.circumference(radius=10, units='m')", "geometry.circumference(radius=15, units='m')", "geometry.circumference(radius=20, units='m')"]
model_generated_function : 
["geometry_circumference(radius = 5, units = 'm')", "geometry_circumference(radius = 10, units = 'm')", "geometry_circumference(radius = 15, units = 'm')", "geometry_circumference(radius = 20, units = 'm')"]
ground_truth_function: ["calculate_derivative(function='3x^3 - 2x^2 + 5x - 7', x_value=4)", "calculate_derivative(function='9x^2 - 4x + 5', x_value=2)"]
model_generated_function : 
["calculate_derivative(function = '3x^3 - 2x^2 + 5x - 7', x_value = 4)", "calculate_derivative(function = 'derivative_of_previous_function', x_value = 2)"]
ground_truth_function: ["integrate(function='x^3', start_x=2, end_x=5, method='trapezoid')", "integrate(function='x^3', start_x=2, end_x=5, method='simpson')", "integrate(function='2x^2+3x-1', start_x=-1, end_x=3, method='trapezoid')", "integrate(function='2x^2+3x-1', start_x=-1, end_x=3, method='simpson')"]
model_generated_function : 
["integrate(function = 'x^3', start_x = 2, end_x = 5, method = 'trapezoid')", "integrate(function = 'x^3', start_x = 2, end_x = 5, method = 'simpson')", "integrate(function = '2x^2+3x-1', start_x = -1, end_x = 3, method = 'trapezoid')", "integrate(function = '2x^2+3x-1', start_x = -1, end_x = 3, method = 'simpson')"]
ground_truth_function: ["calculus.derivative(function='3x^2 + 2x - 1', value=5, function_variable='x')", "calculus.derivative(function='4y^3 - 3y^2 + 2y - 1', value=3, function_variable='y')"]
model_generated_function : 
["calculus_derivative(function = '3x^2 + 2x - 1', value = 5, function_variable = 'x')", "calculus_derivative(function = '4y^3 - 3y^2 + 2y - 1', value = 3, function_variable = 'y')"]
ground_truth_function: ['get_prime_factors(number=4567, formatted=True)', 'get_prime_factors(number=4567, formatted=False)', 'get_prime_factors(number=7890, formatted=True)', 'get_prime_factors(number=7890, formatted=False)']
model_generated_function : 
['get_prime_factors(number = 4567, formatted = True)', 'get_prime_factors(number = 7890, formatted = True)', 'get_prime_factors(number = 4567, formatted = False)', 'get_prime_factors(number = 7890, formatted = False)']
ground_truth_function: ['number_analysis.prime_factors(number=45)', 'number_analysis.prime_factors(number=100)', 'number_analysis.prime_factors(number=150)']
model_generated_function : 
['number_analysis_prime_factors(number = 45)', 'number_analysis_prime_factors(number = 100)', 'number_analysis_prime_factors(number = 150)']
ground_truth_function: ['math.gcd(num1=45, num2=60)', 'math.gcd(num1=81, num2=27)']
model_generated_function : 
['math_gcd(num1 = 45, num2 = 60)', 'math_gcd(num1 = 81, num2 = 27)']
ground_truth_function: ['"math.hcf(number1=45, number2=60)"', '"math.hcf(number1=15, number2=90)"', '"math.hcf(number1=15, number2=120)"', '"math.hcf(number1=36, number2=48)"', '"math.hcf(number1=12, number2=72)"', '"math.hcf(number1=12, number2=96)"']
model_generated_function : 
['math_hcf(number1 = 45, number2 = 60)', 'math_hcf(number1 = 90, number2 = 120)', 'math_hcf(number1 = 36, number2 = 48)', 'math_hcf(number1 = 72, number2 = 96)']
ground_truth_function: ['"number_theory.gcd(number1=45, number2=60)"', '"number_theory.gcd(number1=81, number2=63)"']
model_generated_function : 
['number_theory_gcd(number1 = 45, number2 = 60)', 'number_theory_gcd(number1 = 81, number2 = 63)']
ground_truth_function: ["prime_factorize(number=4567, return_type='dictionary')", "prime_factorize(number=7890, return_type='dictionary')"]
model_generated_function : 
["prime_factorize(number = 4567, return_type = 'dictionary')", "prime_factorize(number = 7890, return_type = 'dictionary')"]
ground_truth_function: ['"math.gcd(num1=36, num2=48)"', '"math.gcd(num1=60, num2=96)"', '"math.gcd(num1=math.gcd(num1=36, num2=48)', 'num2=math.gcd(num1=60, num2=96))"']
model_generated_function : 
['math_gcd(num1 = 36, num2 = 48)', 'math_gcd(num1 = 60, num2 = 96)']
ground_truth_function: ['calculate_final_velocity(height=10, initial_velocity=0, gravity=9.81)', 'calculate_final_velocity(height=20, initial_velocity=0, gravity=9.81)', 'calculate_final_velocity(height=15, initial_velocity=0, gravity=9.81)', 'calculate_final_velocity(height=25, initial_velocity=0, gravity=9.81)']
test_category: executable_parallel_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['calc_binomial_probability(n=10, k=3, p=0.3)', 'calc_binomial_probability(n=15, k=5, p=0.3)', 'calc_binomial_probability(n=20, k=7, p=0.3)']
model_generated_function : 
['calc_binomial_probability(n = 10, k = 3, p = 0.3)', 'calc_binomial_probability(n = 15, k = 5, p = 0.3)', 'calc_binomial_probability(n = 20, k = 7, p = 0.3)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
ground_truth_function: ['"calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.3, 0.6, 0.2, 0.8, 0.1])"', '"calculate_cosine_similarity(vectorA=[0.2, 0.4, 0.6, 0.8, 1.0], vectorB=[1.0, 0.8, 0.6, 0.4, 0.2])"', '"calculate_cosine_similarity(vectorA=[0.1, 0.2, 0.3, 0.4, 0.5], vectorB=[0.5, 0.4, 0.3, 0.2, 0.1])"']
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.3, 0.6, 0.2, 0.8, 0.1])', 'calculate_cosine_similarity(vectorA = [0.2, 0.4, 0.6, 0.8, 1.0], vectorB = [1.0, 0.8, 0.6, 0.4, 0.2])', 'calculate_cosine_similarity(vectorA = [0.1, 0.2, 0.3, 0.4, 0.5], vectorB = [0.5, 0.4, 0.3, 0.2, 0.1])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 2
ground_truth_function: ['"calculate_density(mass=500, volume=100)"', '"calculate_density(mass=200, volume=50)"', '"calculate_density(mass=300, volume=75)"', '"calculate_density(mass=400, volume=80)"']
model_generated_function : 
['calculate_density(mass = 500, volume = 100)', 'calculate_density(mass = 200, volume = 50)', 'calculate_density(mass = 300, volume = 75)', 'calculate_density(mass = 400, volume = 80)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
ground_truth_function: ['calculate_displacement(initial_velocity=20, acceleration=-9.8, time=5)', 'calculate_displacement(initial_velocity=30, acceleration=-9.8, time=5)', 'calculate_displacement(initial_velocity=25, acceleration=-9.8, time=5)']
model_generated_function : 
['calculate_displacement(initial_velocity = 20, acceleration = -9.8, time = 5)', 'calculate_displacement(initial_velocity = 30, acceleration = -9.8, time = 5)', 'calculate_displacement(initial_velocity = 25, acceleration = -9.8, time = 5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 4
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=1.6e-19, voltage=500)', 'calculate_electrostatic_potential_energy(charge=-1.6e-19, voltage=1000)', 'calculate_electrostatic_potential_energy(charge=0, voltage=2000)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 1.6e-19, voltage = 500)', 'calculate_electrostatic_potential_energy(charge = -1.6e-19, voltage = 1000)', 'calculate_electrostatic_potential_energy(charge = 0, voltage = 2000)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
ground_truth_function: ['calculate_final_velocity(initial_velocity=5, acceleration=2, time=10)', 'calculate_final_velocity(initial_velocity=2, acceleration=1, time=15)', 'calculate_final_velocity(initial_velocity=1, acceleration=0.5, time=20)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 5, acceleration = 2, time = 10)', 'calculate_final_velocity(initial_velocity = 2, acceleration = 1, time = 15)', 'calculate_final_velocity(initial_velocity = 1, acceleration = 0.5, time = 20)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=5, periods=10)', 'calculate_future_value(present_value=2000, interest_rate=7, periods=15)', 'calculate_future_value(present_value=1000, interest_rate=10, periods=20)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)', 'calculate_future_value(present_value = 2000, interest_rate = 7, periods = 15)', 'calculate_future_value(present_value = 1000, interest_rate = 10, periods = 20)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
ground_truth_function: ['calculate_mean(numbers=[35, 40, 45, 50, 55])', 'calculate_mean(numbers=[72, 75, 78, 80, 82, 85])', 'calculate_mean(numbers=[1.50, 1.55, 1.60, 1.65, 1.70])']
model_generated_function : 
['calculate_mean(numbers = [35, 40, 45, 50, 55])', 'calculate_mean(numbers = [72, 75, 78, 80, 82, 85])', 'calculate_mean(numbers = [1.5, 1.55, 1.6, 1.65, 1.7])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
ground_truth_function: ['calculate_permutations(n=20, k=5)', 'calculate_permutations(n=12, k=5)', 'calculate_permutations(n=10, k=3)']
model_generated_function : 
['calculate_permutations(n = 20, k = 5)', 'calculate_permutations(n = 12, k = 5)', 'calculate_permutations(n = 10, k = 3)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
ground_truth_function: ['calculate_standard_deviation(numbers=[23, 34, 45, 56, 67, 78, 89])', 'calculate_standard_deviation(numbers=[10, 20, 30, 40, 50, 60])', 'calculate_standard_deviation(numbers=[90, 80, 70, 60, 50, 40])']
model_generated_function : 
['calculate_standard_deviation(numbers = [23, 34, 45, 56, 67, 78, 89])', 'calculate_standard_deviation(numbers = [10, 20, 30, 40, 50, 60])', 'calculate_standard_deviation(numbers = [90, 80, 70, 60, 50, 40])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 10
ground_truth_function: ['calculate_triangle_area(base=15, height=20)', 'calculate_triangle_area(base=25, height=30)', 'calculate_triangle_area(base=35, height=40)']
model_generated_function : 
['calculate_triangle_area(base = 15, height = 20)', 'calculate_triangle_area(base = 25, height = 30)', 'calculate_triangle_area(base = 35, height = 40)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
ground_truth_function: ["convert_currency(amount=5000, from_currency='JPY', to_currency='USD')", "convert_currency(amount=300, from_currency='GBP', to_currency='EUR')", "convert_currency(amount=2000, from_currency='INR', to_currency='AUD')", "convert_currency(amount=100, from_currency='CAD', to_currency='CHF')"]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'JPY', to_currency = 'USD')", "convert_currency(amount = 5000, from_currency = 'JPY', to_currency = 'EUR')", "convert_currency(amount = 5000, from_currency = 'JPY', to_currency = 'AUD')", "convert_currency(amount = 100, from_currency = 'CAD', to_currency = 'CHF')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 12
ground_truth_function: ['estimate_derivative(function=lambda x: 3*x**2 + 2*x - 1, x=4)', 'estimate_derivative(function=lambda x: 5*x**3 - 3*x**2 + 2*x + 1, x=-2)', 'estimate_derivative(function=lambda x: 2*x**4 - 3*x**3 + 2*x**2 - x + 1, x=0)', 'estimate_derivative(function=lambda x: x**5 - 2*x**4 + 3*x**3 - 2*x**2 + x - 1, x=1)']
model_generated_function : 
["estimate_derivative(function = '3x^2 + 2x - 1', x = 4)", "estimate_derivative(function = '5x^3 - 3x^2 + 2x + 1', x = -2)", "estimate_derivative(function = '2x^4 - 3x^3 + 2x^2 - x + 1', x = 0)", "estimate_derivative(function = 'x^5 - 2x^4 + 3x^3 - 2x^2 + x - 1', x = 1)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 13
ground_truth_function: ["find_term_on_urban_dictionary(term='Lit')", "find_term_on_urban_dictionary(term='Savage')", "find_term_on_urban_dictionary(term='FOMO')", "find_term_on_urban_dictionary(term='YOLO')"]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'Lit')", "find_term_on_urban_dictionary(term = 'Savage')", "find_term_on_urban_dictionary(term = 'YOLO')"]
compare reuslt: False
ground_truth_function: ['geometry_area_circle(radius=5)', 'geometry_area_circle(radius=10)', 'geometry_area_circle(radius=15)', 'geometry_area_circle(radius=20)']
model_generated_function : 
['geometry_area_circle(radius = 5)', 'geometry_area_circle(radius = 10)', 'geometry_area_circle(radius = 15)', 'geometry_area_circle(radius = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
ground_truth_function: ["get_active_covid_case_by_country(country='France')", "get_active_covid_case_by_country(country='Italy')", "get_active_covid_case_by_country(country='United States')", "get_active_covid_case_by_country(country='China')"]
model_generated_function : 
["get_active_covid_case_by_country(country = 'France')", "get_active_covid_case_by_country(country = 'Italy')", "get_active_covid_case_by_country(country = 'United States')", "get_active_covid_case_by_country(country = 'China')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ["get_company_name_by_stock_name(stock_name='AAPL')", "get_company_name_by_stock_name(stock_name='GOOGL')", "get_company_name_by_stock_name(stock_name='AMZN')", "get_company_name_by_stock_name(stock_name='MSFT')"]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')", "get_company_name_by_stock_name(stock_name = 'GOOGL')", "get_company_name_by_stock_name(stock_name = 'AMZN')", "get_company_name_by_stock_name(stock_name = 'MSFT')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='192.168.1.1')", "get_coordinate_by_ip_address(ip_address='172.16.254.1')", "get_coordinate_by_ip_address(ip_address='10.0.0.1')", "get_coordinate_by_ip_address(ip_address='192.0.2.1')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')", "get_coordinate_by_ip_address(ip_address = '172.16.254.1')", "get_coordinate_by_ip_address(ip_address = '10.0.0.1')", "get_coordinate_by_ip_address(ip_address = '192.0.2.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
ground_truth_function: ["get_coordinates_from_city(city_name='New York')", "get_coordinates_from_city(city_name='Los Angeles')", "get_coordinates_from_city(city_name='Chicago')", "get_coordinates_from_city(city_name='Houston')"]
model_generated_function : 
["get_coordinates_from_city(city_name = 'New York')", "get_coordinates_from_city(city_name = 'Los Angeles')", "get_coordinates_from_city(city_name = 'Chicago')", "get_coordinates_from_city(city_name = 'Houston')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
ground_truth_function: ["get_covid_death_by_country(country='Brazil')", "get_covid_death_by_country(country='India')", "get_covid_death_by_country(country='Russia')", "get_covid_death_by_country(country='South Africa')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')", "get_covid_death_by_country(country = 'India')", "get_covid_death_by_country(country = 'Russia')", "get_covid_death_by_country(country = 'South Africa')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ['get_distance(pointA=(3, 4)', 'pointB=(7, 9))', 'get_distance(pointA=(1, 2)', 'pointB=(5, 6))', 'get_distance(pointA=(0, 0)', 'pointB=(8, 15))', 'get_distance(pointA=(10, 12)', 'pointB=(20, 25))']
model_generated_function : 
['get_distance(pointA = [3, 4], pointB = [7, 9])', 'get_distance(pointA = [1, 2], pointB = [5, 6])', 'get_distance(pointA = [0, 0], pointB = [8, 15])', 'get_distance(pointA = [10, 12], pointB = [20, 25])']
compare reuslt: False
ground_truth_function: ['get_fibonacci_sequence(n=10)', 'get_fibonacci_sequence(n=20)', 'get_fibonacci_sequence(n=5)', 'get_fibonacci_sequence(n=15)']
model_generated_function : 
['get_fibonacci_sequence(n = 10)', 'get_fibonacci_sequence(n = 20)', 'get_fibonacci_sequence(n = 5)']
compare reuslt: False
ground_truth_function: ["get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')", "get_price_by_amazon_ASIN(ASIN='B07FZ8S74R')", "get_price_by_amazon_ASIN(ASIN='B07B4L1PQ8')", "get_price_by_amazon_ASIN(ASIN='B07RF1XD36')"]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')", "get_price_by_amazon_ASIN(ASIN = 'B07FZ8S74R')", "get_price_by_amazon_ASIN(ASIN = 'B07B4L1PQ8')", "get_price_by_amazon_ASIN(ASIN = 'B07RF1XD36')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
ground_truth_function: ['get_prime_factors(number=456)', 'get_prime_factors(number=789)', 'get_prime_factors(number=321)', 'get_prime_factors(number=654)']
model_generated_function : 
['get_prime_factors(number = 456)', 'get_prime_factors(number = 789)', 'get_prime_factors(number = 321)', 'get_prime_factors(number = 654)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B08L5VG843')", "get_product_name_by_amazon_ASIN(ASIN='B07XJ8C8F5')", "get_product_name_by_amazon_ASIN(ASIN='B07FZ8S74R')", "get_product_name_by_amazon_ASIN(ASIN='B07HJHKL9S')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L5VG843')", "get_product_name_by_amazon_ASIN(ASIN = 'B07XJ8C8F5')", "get_product_name_by_amazon_ASIN(ASIN = 'B07FZ8S74R')", "get_product_name_by_amazon_ASIN(ASIN = 'B07HJHKL9S')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B07HJHKL9S')", "get_rating_by_amazon_ASIN(ASIN='B07FZ8S74R')", "get_rating_by_amazon_ASIN(ASIN='B08L5VG843')", "get_rating_by_amazon_ASIN(ASIN='B07XJ8C8F5')"]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B07HJHKL9S')", "get_rating_by_amazon_ASIN(ASIN = 'B07FZ8S74R')", "get_rating_by_amazon_ASIN(ASIN = 'B08L5VG843')", "get_rating_by_amazon_ASIN(ASIN = 'B07XJ8C8F5')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["get_stock_history(stock_name='AAPL', interval='1d')", "get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits=True)", "get_stock_history(stock_name='AMZN', interval='1mo')", "get_stock_history(stock_name='TSLA', interval='3mo', diffandsplits=False)"]
'NoneType' object has no attribute 'replace'
model_generated_function : None
ground_truth_function: ["get_stock_price_by_stock_name(stock_name='GOOG')", "get_stock_price_by_stock_name(stock_name='NFLX')", "get_stock_price_by_stock_name(stock_name='BABA')"]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'GOOG')", "get_stock_price_by_stock_name(stock_name = 'META')", "get_stock_price_by_stock_name(stock_name = 'NFLX')", "get_stock_price_by_stock_name(stock_name = 'Alibaba Group Holding Ltd. BABA')"]
compare reuslt: False
ground_truth_function: ["get_time_zone_by_coord(long='77.1025', lat='28.7041')", "get_time_zone_by_coord(long='-73.935242', lat='40.730610')", "get_time_zone_by_coord(long='151.2093', lat='33.8688')", "get_time_zone_by_coord(long='139.6917', lat='35.6895')"]
model_generated_function : 
["get_time_zone_by_coord(long = '77.1025', lat = '28.7041')", "get_time_zone_by_coord(long = '-73.935242', lat = '40.730610')", "get_time_zone_by_coord(long = '151.2093', lat = '33.8688')", "get_time_zone_by_coord(long = '139.6917', lat = '35.6895')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 24
ground_truth_function: ['get_weather_data(coordinates=[34.0522, -118.2437])', 'get_weather_data(coordinates=[51.5074, -0.1278])', 'get_weather_data(coordinates=[-33.9249, 18.4241])', 'get_weather_data(coordinates=[48.8566, 2.3522])']
model_generated_function : 
['get_weather_data(coordinates = [34.0522, -118.2437])', 'get_weather_data(coordinates = [51.5074, -0.1278])', 'get_weather_data(coordinates = [-33.9249, 18.4241])', 'get_weather_data(coordinates = [48.8566, 2.3522])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
ground_truth_function: ["get_zipcode_by_ip_address(ip_address='192.168.1.1')", "get_zipcode_by_ip_address(ip_address='172.16.254.1')", "get_zipcode_by_ip_address(ip_address='10.0.0.1')", "get_zipcode_by_ip_address(ip_address='203.0.113.0')"]
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')", "get_zipcode_by_ip_address(ip_address = '172.16.254.1')", "get_zipcode_by_ip_address(ip_address = '10.0.0.1')", "get_zipcode_by_ip_address(ip_address = '203.0.113.0')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
ground_truth_function: ['mat_mul(matA=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], matB=[[10, 11, 12], [13, 14, 15], [16, 17, 18]])', 'mat_mul(matA=[[19, 20], [21, 22]], matB=[[23, 24], [25, 26]])', 'mat_mul(matA=[[27, 28, 29, 30], [31, 32, 33, 34]], matB=[[35, 36, 37, 38], [39, 40, 41, 42]])', 'mat_mul(matA=[[43, 44], [45, 46]], matB=[[47, 48], [49, 50]])']
model_generated_function : 
['mat_mul(matA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], matB = [[10, 11, 12], [13, 14, 15], [16, 17, 18]])', 'mat_mul(matA = [[19, 20], [21, 22]], matB = [[23, 24], [25, 26]])', 'mat_mul(matA = [[27, 28, 29, 30], [31, 32, 33, 34]], matB = [[35, 36, 37, 38], [39, 40, 41, 42]])', 'mat_mul(matA = [[43, 44], [45, 46]], matB = [[47, 48], [49, 50]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 27
ground_truth_function: ['math_factorial(n=5)', 'math_factorial(n=7)', 'math_factorial(n=10)', 'math_factorial(n=12)']
model_generated_function : 
['math_factorial(n = 5)', 'math_factorial(n = 7)', 'math_factorial(n = 10)', 'math_factorial(n = 12)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
ground_truth_function: ['math_gcd(a=45, b=60)', 'math_gcd(a=81, b=27)', 'math_gcd(a=144, b=96)', 'math_gcd(a=100, b=80)']
model_generated_function : 
['math_gcd(a = 45, b = 60)', 'math_gcd(a = 81, b = 27)', 'math_gcd(a = 144, b = 96)', 'math_gcd(a = 100, b = 80)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 29
ground_truth_function: ['math_lcm(a=35, b=45)', 'math_lcm(a=72, b=108)', 'math_lcm(a=120, b=180)', 'math_lcm(a=200, b=300)']
model_generated_function : 
['math_lcm(a = 35, b = 45)', 'math_lcm(a = 72, b = 108)', 'math_lcm(a = 120, b = 180)', 'math_lcm(a = 200, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 30
ground_truth_function: ['mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)', 'mortgage_calculator(loan_amount=500000, interest_rate=0.04, loan_period=20)', 'mortgage_calculator(loan_amount=750000, interest_rate=0.025, loan_period=15)', 'mortgage_calculator(loan_amount=1000000, interest_rate=0.03, loan_period=10)']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)', 'mortgage_calculator(loan_amount = 500000, interest_rate = 4, loan_period = 20)', 'mortgage_calculator(loan_amount = 750000, interest_rate = 2.5, loan_period = 15)', 'mortgage_calculator(loan_amount = 1000000, interest_rate = 3, loan_period = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 31
ground_truth_function: ['quadratic_roots(a=3, b=7, c=2)', 'quadratic_roots(a=5, b=12, c=4)', 'quadratic_roots(a=8, b=16, c=6)', 'quadratic_roots(a=10, b=20, c=8)']
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = 2)', 'quadratic_roots(a = 5, b = 12, c = 4)', 'quadratic_roots(a = 8, b = 16, c = 6)', 'quadratic_roots(a = 10, b = 20, c = 8)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 32
ground_truth_function: ["retrieve_city_based_on_zipcode(zipcode='90210')", "retrieve_city_based_on_zipcode(zipcode='10001')", "retrieve_city_based_on_zipcode(zipcode='60601')", "retrieve_city_based_on_zipcode(zipcode='94102')"]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')", "retrieve_city_based_on_zipcode(zipcode = '10001')", "retrieve_city_based_on_zipcode(zipcode = '60601')", "retrieve_city_based_on_zipcode(zipcode = '94102')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
ground_truth_function: ["retrieve_holiday_by_year(year='2018', country='US')", "retrieve_holiday_by_year(year='2020', country='DE')", "retrieve_holiday_by_year(year='2019', country='ES')", "retrieve_holiday_by_year(year='2021', country='GB')"]
model_generated_function : 
["retrieve_holiday_by_year(year = '2018', country = 'US')", "retrieve_holiday_by_year(year = '2020', country = 'DE')", "retrieve_holiday_by_year(year = '2019', country = 'ES')", "retrieve_holiday_by_year(year = '2021', country = 'GB')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 34
ground_truth_function: ['sort_array(array=[5, 2, 9, 1, 7])', 'sort_array(array=[3, 8, 6, 4], reverse=True)', 'sort_array(array=[10, 20, 30, 40, 50])', 'sort_array(array=[100, 200, 300, 400, 500], reverse=True)']
Internal Server Error
model_generated_function : None
ground_truth_function: ["add_binary_numbers(a='0011', b='1100')", "add_binary_numbers(a='1010', b='0101')", "add_binary_numbers(a='1111', b='0000')", "add_binary_numbers(a='0001', b='1110')"]
model_generated_function : 
["add_binary_numbers(a = '0011', b = '1100')", "add_binary_numbers(a = '1010', b = '0101')", "add_binary_numbers(a = '1111', b = '0000')", "add_binary_numbers(a = '0001', b = '1110')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 35
ground_truth_function: ['linear_regression(x=[1,2,3],y=[4,5,6],point=10)', 'linear_regression(x=[2,4,6],y=[8,10,12],point=15)', 'linear_regression(x=[3,6,9],y=[12,15,18],point=20)', 'linear_regression(x=[4,8,12],y=[16,20,24],point=25)']
model_generated_function : 
['linear_regression(x = [1, 2, 3], y = [4, 5, 6], point = 10)', 'linear_regression(x = [2, 4, 6], y = [8, 10, 12], point = 15)', 'linear_regression(x = [3, 6, 9], y = [12, 15, 18], point = 20)', 'linear_regression(x = [4, 8, 12], y = [16, 20, 24], point = 25)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 36
ground_truth_function: ['maxPoints(points=[[1,1],[2,2],[3,4],[5,5]])', 'maxPoints(points=[[1,2],[3,2],[5,2],[4,2]])', 'maxPoints(points=[[0,0],[1,1],[0,1],[1,0]])', 'maxPoints(points=[[1,1],[3,2],[5,3],[7,4]])']
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 2], [3, 4], [5, 5]])', 'maxPoints(points = [[1, 2], [3, 2], [5, 2], [4, 2]])', 'maxPoints(points = [[0, 0], [1, 1], [0, 1], [1, 0]])', 'maxPoints(points = [[1, 1], [3, 2], [5, 3], [7, 4]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 37
ground_truth_function: ['calculate_investment_value(initial_investment=1000000, annual_contribution=1000, years=3, annual_return=0.1, inflation_rate=[0.01, 0.04, 0.04])', 'calculate_investment_value(initial_investment=500000, annual_contribution=500, years=5, annual_return=0.07, inflation_rate=[0.02, 0.03, 0.02, 0.03, 0.02])', 'calculate_investment_value(initial_investment=250000, annual_contribution=2000, years=7, annual_return=0.05, inflation_rate=[0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01])', 'calculate_investment_value(initial_investment=800000, annual_contribution=1500, years=10, annual_return=0.08, inflation_rate=[0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01, 0.02])']
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4], adjust_for_inflation = True)', 'calculate_investment_value(initial_investment = 500000, annual_contribution = 500, years = 5, annual_return = 7, inflation_rate = [2, 3, 2, 3, 2], adjust_for_inflation = True)', 'calculate_investment_value(initial_investment = 250000, annual_contribution = 2000, years = 7, annual_return = 5, inflation_rate = [1, 2, 1, 2, 1, 2, 1], adjust_for_inflation = True)', 'calculate_investment_value(initial_investment = 800000, annual_contribution = 1500, years = 10, annual_return = 8, inflation_rate = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
model_generated_function_params_pair_count: 5
correct_params_count: 5
model_generated_function_params_pair_count: 5
correct_params_count: 5
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 38
ground_truth_function: ["calculate_nutritional_needs(weight=75, height=180, age=25, gender='male', activity_level=3, goal='gain')", "calculate_nutritional_needs(weight=65, height=165, age=30, gender='female', activity_level=2, goal='maintain')", "calculate_nutritional_needs(weight=85, height=175, age=40, gender='male', activity_level=5, goal='lose')", "calculate_nutritional_needs(weight=70, height=160, age=55, gender='female', activity_level=1, goal='lose')"]
model_generated_function : 
["calculate_nutritional_needs(weight = 75, height = 180, age = 25, gender = 'male', activity_level = 3, goal = 'gain')", "calculate_nutritional_needs(weight = 65, height = 165, age = 30, gender = 'female', activity_level = 2, goal = 'maintain')", "calculate_nutritional_needs(weight = 85, height = 175, age = 40, gender = 'male', activity_level = 5, goal = 'lose')", "calculate_nutritional_needs(weight = 70, height = 160, age = 55, gender = 'female', activity_level = 1, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
model_generated_function_params_pair_count: 6
correct_params_count: 6
model_generated_function_params_pair_count: 6
correct_params_count: 6
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 39
ground_truth_function: ["order_food(item=['burger'], quantity=[10], price=[5])", "order_food(item=['ice cream'], quantity=[7, price=[2])", "order_food(item=['pizza'], quantity=[3], price=[8])", "order_food(item=['donut'], quantity=[12], price=[1])"]
model_generated_function : 
["order_food(item = ['burger', 'ice cream', 'pizza', 'donut'], quantity = [10, 7, 3, 12], price = [5, 2, 8, 1])"]
compare reuslt: False
ground_truth_function: ["order_food(item='dumplings', quantity=101, price=0.1)", "order_food(item='rice bowl', quantity=20, price=10)", "order_food(item='spring rolls', quantity=50, price=0.5)", "order_food(item='noodle soup', quantity=10, price=3)"]
model_generated_function : 
["order_food(item = ['dumplings', 'rice bowls', 'spring rolls', 'noodle soups'], quantity = [101, 20, 50, 10], price = [0.1, 10, 0.5, 3])"]
compare reuslt: False
ground_truth_function: ["get_movie_director(movie_name='Pulp Fiction')", "get_movie_director(movie_name='Reservoir Dogs')", "get_movie_director(movie_name='Kill Bill')", "get_movie_director(movie_name='Django Unchained')"]
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')", "get_movie_director(movie_name = 'Reservoir Dogs')", "get_movie_director(movie_name = 'Kill Bill: Volume 1')", "get_movie_director(movie_name = 'Django Unchained')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 40
ground_truth_function: ["get_movie_rating(movie_name='Pulp Fiction')", "get_movie_rating(movie_name='The Godfather')", "get_movie_rating(movie_name='Schindler's List')", "get_movie_rating(movie_name='The Dark Knight')"]
model_generated_function : 
["get_movie_rating(movie_name = 'Pulp Fiction')", "get_movie_rating(movie_name = 'The Godfather')", 'get_movie_rating(movie_name = "Schindler\'s List")', "get_movie_rating(movie_name = 'The Dark Knight')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 41
ground_truth_function: ['polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])', 'polygon_area(vertices=[[5,5],[6,7],[7,5]])', 'polygon_area(vertices=[[2,1],[4,2],[3,4],[1,3]])', 'polygon_area(vertices=[[-1,0],[2,3],[0,4],[-2,2]])']
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])', 'polygon_area(vertices = [[5, 5], [6, 7], [7, 5]])', 'polygon_area(vertices = [[2, 1], [4, 2], [3, 4], [1, 3]])', 'polygon_area(vertices = [[-1, 0], [2, 3], [0, 4], [-2, 2]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 42
Accuracy: 0.84
-----------------------
test_category: executable_multiple_function
Generating: gorilla_openfunctions_v1_test_executable_multiple_function.json
ground_truth_function: ['calc_binomial_probability(n=20, k=5, p=1/6)']
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.16666666666666666)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 1
ground_truth_function: ['calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 2
ground_truth_function: ['calculate_density(mass=50, volume=10)']
model_generated_function : 
['calculate_density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
ground_truth_function: ['calculate_displacement(initial_velocity=15, acceleration=9.8, time=10)']
model_generated_function : 
['calculate_displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 4
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=5, voltage=10)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
ground_truth_function: ['calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=12)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 0, acceleration = 9.8, time = 12)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
ground_truth_function: ['calculate_mean(numbers=[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function : 
['calculate_mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
ground_truth_function: ['calculate_permutations(n=26, k=5)']
model_generated_function : 
['calculate_permutations(n = 26, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
ground_truth_function: ['calculate_standard_deviation(numbers=[1000,2000,3000,4000,5000,7000,9000,15000,20000,30000])']
model_generated_function : 
['calculate_standard_deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 10
ground_truth_function: ['calculate_triangle_area(base=500, height=300)']
model_generated_function : 
['calculate_triangle_area(base = 500, height = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
ground_truth_function: ["convert_currency(amount=5000, from_currency='EUR', to_currency='JPY')"]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 12
ground_truth_function: ['estimate_derivative(function=lambda x: 3*x**2 + 2*x + 1, x=5)']
model_generated_function : 
["estimate_derivative(function = '3t^2 + 2x + 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 13
ground_truth_function: ['find_term_on_urban_dictionary(term="lit")']
model_generated_function : 
["find_term_on_urban_dictionary(term = 'lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
ground_truth_function: ['geometry_area_circle(radius=15)']
model_generated_function : 
['geometry_area_circle(radius = 15)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ["get_active_covid_case_by_country(country='Brazil')"]
model_generated_function : 
["get_active_covid_case_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ["get_company_name_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='192.168.1.1')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
ground_truth_function: ["get_coordinates_from_city(city_name='Paris')"]
model_generated_function : 
["get_coordinates_from_city(city_name = 'Paris')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ["get_covid_death_by_country(country='Brazil')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
ground_truth_function: ['get_distance(pointA=(45.76, 4.85)', 'pointB=(48.85, 2.35))']
model_generated_function : 
["get_distance(pointA = '(45.76, 4.85)', pointB = '(48.85, 2.35)')"]
compare reuslt: False
ground_truth_function: ['get_fibonacci_sequence(n=20)']
model_generated_function : 
['get_fibonacci_sequence(n = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
ground_truth_function: ["get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')"]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
ground_truth_function: ['get_prime_factors(number=4567)']
model_generated_function : 
['get_prime_factors(number = 4567)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B08L8KC1J7')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L8KC1J7')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 24
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B08L5WGQGJ')"]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B08L5WGQGJ')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
ground_truth_function: ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=True)"]
'NoneType' object has no attribute 'replace'
model_generated_function : None
ground_truth_function: ["get_stock_price_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
ground_truth_function: ["get_time_zone_by_coord(long='123.45', lat='-67.89')"]
model_generated_function : 
["get_time_zone_by_coord(long = '123.45', lat = '-67.89')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 27
ground_truth_function: ['get_weather_data(coordinates=[90.00, 0.00])']
model_generated_function : 
['get_weather_data(coordinates = [90.0, 0.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
ground_truth_function: ['get_zipcode_by_ip_address(ip_address="192.168.1.1")']
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 29
ground_truth_function: ['mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]])']
model_generated_function : 
['mat_mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 30
ground_truth_function: ['math_factorial(n=7)']
model_generated_function : 
['math_factorial(n = 7)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 31
ground_truth_function: ['math_gcd(a=450, b=300)']
model_generated_function : 
['math_gcd(a = 450, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 32
ground_truth_function: ['math_lcm(a=18, b=24)']
model_generated_function : 
['math_lcm(a = 18, b = 24)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 33
ground_truth_function: ['mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 34
ground_truth_function: ['quadratic_roots(a=3, b=7, c=-10)']
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = -10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 35
ground_truth_function: ["retrieve_city_based_on_zipcode(zipcode='90210')"]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 36
ground_truth_function: ["retrieve_holiday_by_year(year='2010', country='FR')"]
model_generated_function : 
["retrieve_holiday_by_year(year = '2010', country = 'FR')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 37
ground_truth_function: ['sort_array(array=[34, 2, 56, 7, 9, 12], reverse=True)']
model_generated_function : 
['sort_array(array = [34, 2, 56, 7, 9, 12], reverse = True)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 38
ground_truth_function: ["add_binary_numbers(a='10011',b='1100')"]
model_generated_function : 
["add_binary_numbers(a = '10011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 39
ground_truth_function: ['linear_regression(x=[1,2,-3],y=[4,-5,6],point=10)']
model_generated_function : 
['linear_regression(x = [1, 2, -3], y = [4, -5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 40
ground_truth_function: ['calculate_investment_value(initial_investment=10000, annual_contribution=1000, years=5, annual_return=0.05, inflation_rate=[0.01,0.02,0.03,0.04,0.04])']
model_generated_function : 
['calculate_investment_value(initial_investment = 10000, annual_contribution = 1000, years = 5, annual_return = 5, inflation_rate = [1, 2, 3, 4, 4], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 41
ground_truth_function: ['calculate_investment_value(initial_investment=1000000, annual_contribution=1000, years=3, annual_return=0.10, inflation_rate=[0.01, 0.04, 0.04])']
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4])']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 42
ground_truth_function: ["calculate_nutritional_needs(weight=59,height=170,age=80,gender='female',activity_level=4,goal='lose')"]
model_generated_function : 
["calculate_nutritional_needs(weight = 59, height = 170, age = 80, gender = 'female', activity_level = 4, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 43
ground_truth_function: ["book_room(room_type={'type':'deluxe','price':1000},check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"]
model_generated_function : 
["book_room(room_type = {'type': 'deluxe', 'price': 1000}, check_in_date = '08-11-2024', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 44
ground_truth_function: ["order_food(item=['dumplings','rice bowl'], quantity=[101,20], price=[0.1,10])"]
model_generated_function : 
["order_food(item = ['dumplings', 'rice bowl'], quantity = [101, 20], price = [0.1, 10])"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 45
ground_truth_function: ["get_movie_director(movie_name='Pulp Fiction')"]
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 46
ground_truth_function: ["get_movie_rating(movie_name='Avatar')"]
model_generated_function : 
["get_movie_rating(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 47
ground_truth_function: ['polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])']
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 48
Accuracy: 0.96
-----------------------
test_category: executable_parallel_multiple_function
Generating: gorilla_openfunctions_v1_test_executable_parallel_multiple_function.json
ground_truth_function: ['get_weather_data(coordinates=[45.4215, -75.6972])', 'calc_binomial_probability(n=10, k=5, p=0.5)']
model_generated_function : 
['get_weather_data(coordinates = [45.4215, -75.6972])', 'calc_binomial_probability(n = 10, k = 5, p = 0.5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 1
ground_truth_function: ['calculate_cosine_similarity(vectorA=[1, 2, 3], vectorB=[4, 5, 6])', "get_stock_price_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
['calculate_cosine_similarity(vectorA = [1, 2, 3], vectorB = [4, 5, 6])', "get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 2
ground_truth_function: ['calculate_density(mass=50, volume=10)', 'calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)', "get_stock_price_by_stock_name(stock_name='AAPL')", "get_rating_by_amazon_ASIN(ASIN='B08N5WRWNW')"]
model_generated_function : 
['calculate_density(mass = 50, volume = 10)', 'calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)', "get_stock_price_by_stock_name(stock_name = 'Apple Inc.')", "get_rating_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 3
ground_truth_function: ['"retrieve_holiday_by_year(year=\'2020\', country=\'ES\')"', '"calculate_displacement(initial_velocity=10, acceleration=2, time=5)"']
model_generated_function : 
["retrieve_holiday_by_year(year = '2020', country = 'ES')", 'calculate_displacement(initial_velocity = 10, acceleration = 2, time = 5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 4
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=5, voltage=10)', "get_zipcode_by_ip_address(ip_address='192.168.1.1')"]
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)', "get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 5
ground_truth_function: ['calculate_final_velocity(initial_velocity=10, acceleration=2, time=5)', 'calculate_final_velocity(initial_velocity=15, acceleration=1.5, time=7)', 'calculate_cosine_similarity(vectorA=[10, 2, 5], vectorB=[15, 1.5, 7])', 'mortgage_calculator(loan_amount=200000, interest_rate=0.05, loan_period=30)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 10, acceleration = 2, time = 5)', 'calculate_final_velocity(initial_velocity = 15, acceleration = 1.5, time = 7)', 'calculate_cosine_similarity(vectorA = [10, 2, 5], vectorB = [15, 1.5, 7])', 'mortgage_calculator(loan_amount = 200000, interest_rate = 5, loan_period = 30)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)', 'get_fibonacci_sequence(n=15)', 'sort_array(array=[45, 23, 67, 89, 12, 34, 56, 78], reverse=True)']
Internal Server Error
model_generated_function : None
ground_truth_function: ['calculate_mean(numbers=[5, 10, 15, 20, 25])', "get_time_zone_by_coord(long='120.97388', lat='14.6042')"]
model_generated_function : 
['calculate_mean(numbers = [5, 10, 15, 20, 25])', "get_time_zone_by_coord(long = '120.97388', lat = '14.6042')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 7
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)', "get_company_name_by_stock_name(stock_name='AAPL')", 'calculate_permutations(n=7, k=3)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)', "get_company_name_by_stock_name(stock_name = 'AAPL')", 'calculate_permutations(n = 7, k = 3)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
ground_truth_function: ['get_fibonacci_sequence(n=10)', 'calculate_standard_deviation(numbers=get_fibonacci_sequence(n=10))']
model_generated_function : 
['get_fibonacci_sequence(n = 10)', "calculate_standard_deviation(numbers = 'get_fibonacci_sequence(n=10)')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 9
ground_truth_function: ["get_company_name_by_stock_name(stock_name='AAPL')", 'math_lcm(a=12, b=18)', 'calculate_triangle_area(base=10, height=15)']
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')", 'math_lcm(a = 12, b = 18)', 'calculate_triangle_area(base = 10, height = 15)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 10
ground_truth_function: ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=False)", "convert_currency(amount=500*500, from_currency='USD', to_currency='EUR')"]
model_generated_function : 
["convert_currency(amount = 500, from_currency = 'USD', to_currency = 'EUR')"]
compare reuslt: False
ground_truth_function: ['"math_gcd(a=36, b=48)"', '"estimate_derivative(function=lambda x:x**2, x=5)"']
model_generated_function : 
['math_gcd(a = 36, b = 48)', "estimate_derivative(function = 'f(x) = x^2', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
ground_truth_function: ["find_term_on_urban_dictionary(term='Bitcoin')", "convert_currency(amount=1000, from_currency='CNY', to_currency='USD')", "convert_currency(amount=1000, from_currency='CNY', to_currency='EUR')", 'get_distance(pointA=(3,5)', 'pointB=(7,9))']
model_generated_function : 
["find_term_on_urban_dictionary(term = 'Bitcoin')", "convert_currency(amount = 1000, from_currency = 'CNY', to_currency = 'USD')", "convert_currency(amount = 1000, from_currency = 'CNY', to_currency = 'EUR')", "get_distance(pointA = '(3,5)', pointB = '(7,9)')"]
compare reuslt: False
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=5, voltage=10)', 'geometry_area_circle(radius=7)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)', 'geometry_area_circle(radius = 7)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 12
ground_truth_function: ["get_covid_death_by_country(country='Italy')", "get_covid_death_by_country(country='Spain')", "get_active_covid_case_by_country(country='Italy')", "get_active_covid_case_by_country(country='Spain')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Italy')", "get_active_covid_case_by_country(country = 'Italy')", "get_covid_death_by_country(country = 'Spain')", "get_active_covid_case_by_country(country = 'Spain')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 13
ground_truth_function: ['math_gcd(a=1200, b=21406)', "get_stock_price_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
['math_gcd(a = 1200, b = 21406)', "get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 14
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='192.168.1.1')", "get_covid_death_by_country(country='Italy')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')", "get_covid_death_by_country(country = 'Italy')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ['calculate_mean([1,3,4,6,8])', "get_coordinates_from_city(city_name='Cupertino')"]
model_generated_function : 
['calculate_mean(numbers = [1, 3, 4, 6, 8])', "get_coordinates_from_city(city_name = 'Cupertino')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B08N5WRWNW')", 'calculate_electrostatic_potential_energy(charge=5, voltage=10)', "retrieve_holiday_by_year(year='2022', country='US')", "get_covid_death_by_country(country='Italy')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08N5WRWNW')", 'calculate_electrostatic_potential_energy(charge = 5, voltage = 10)', "retrieve_holiday_by_year(year = '2022', country = 'US')", "get_covid_death_by_country(country = 'Italy')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 17
ground_truth_function: ['get_fibonacci_sequence(n=10)', 'math_gcd(a=5, b=8)', 'get_distance(pointA=(3, 4)', 'pointB=(8, 10))']
'NoneType' object has no attribute 'replace'
model_generated_function : None
ground_truth_function: ['get_fibonacci_sequence(n=10)', "get_stock_price_by_stock_name(stock_name='MSFT')"]
model_generated_function : 
['get_fibonacci_sequence(n = 10)', "get_stock_price_by_stock_name(stock_name = 'Microsoft')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
ground_truth_function: ["get_covid_death_by_country(country='Brazil')", "get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')", "find_term_on_urban_dictionary(term='Savage')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')", "get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')", "find_term_on_urban_dictionary(term = 'Savage')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ['calculate_standard_deviation(numbers=[23,436,1231,123])', 'mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)', "get_coordinates_from_city(city_name='San Francisco')"]
model_generated_function : 
['calculate_standard_deviation(numbers = [23, 436, 1231, 123])', 'mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)', "get_coordinates_from_city(city_name = 'San Francisco')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 20
ground_truth_function: ['"get_product_name_by_amazon_ASIN(ASIN=\'B08JG8DQ7C\')"', '"calculate_permutations(n=10, k=4)"', '"math_gcd(a=36, b=48)"', '"mortgage_calculator(loan_amount=200000, interest_rate=0.05, loan_period=30)"']
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08JG8DQ7C')", 'calculate_permutations(n = 10, k = 4)', 'math_gcd(a = 36, b = 48)', 'mortgage_calculator(loan_amount = 200000, interest_rate = 5, loan_period = 30)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 21
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B08N5WRWNW')", "get_rating_by_amazon_ASIN(ASIN='B07XJ8C8F5')", 'geometry_area_circle(radius=50)', 'geometry_area_circle(radius=75)']
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B08N5WRWNW')", "get_rating_by_amazon_ASIN(ASIN = 'B07XJ8C8F5')", "get_distance(pointA = 'B08N5WRWNW', pointB = 'B07XJ8C8F5')", 'geometry_area_circle(radius = 50)', 'geometry_area_circle(radius = 75)']
compare reuslt: False
ground_truth_function: ['estimate_derivative(function= lambda x:x**2, x=5)', 'geometry_area_circle(radius=10)', "get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=False)", "get_active_covid_case_by_country(country='United States')"]
model_generated_function : 
["estimate_derivative(function = 'x^2', x = 5)", 'geometry_area_circle(radius = 10)', "get_stock_history(stock_name = 'Apple', interval = '1mo', diffandsplits = False)", "get_active_covid_case_by_country(country = 'United States')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
ground_truth_function: ['"mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)"', '"get_stock_price_by_stock_name(stock_name=\'AAPL\')"', '"calculate_standard_deviation(numbers=[45, 67, 34, 89, 23, 56, 78, 90, 32, 67])"']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)', "get_stock_price_by_stock_name(stock_name = 'Apple Inc')", 'calculate_standard_deviation(numbers = [45, 67, 34, 89, 23, 56, 78, 90, 32, 67])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["get_time_zone_by_coord(long='120.97388', lat='23.973875')", 'geometry_area_circle(radius=15)', "get_stock_price_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
["get_time_zone_by_coord(long = '120.97388', lat = '23.973875')", 'geometry_area_circle(radius = 15)', "get_stock_price_by_stock_name(stock_name = 'Apple Inc.')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 24
ground_truth_function: ['calc_binomial_probability(n=10, k=5, p=0.5)', "get_covid_death_by_country(country='Italy')", 'get_weather_data(coordinates=[40.7128, -74.0060])']
model_generated_function : 
['calc_binomial_probability(n = 10, k = 5, p = 0.5)', "get_covid_death_by_country(country = 'Italy')", 'get_weather_data(coordinates = [40.7128, -74.006])']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
ground_truth_function: ["get_zipcode_by_ip_address(ip_address='192.168.1.1')", "retrieve_city_based_on_zipcode(zipcode='08540')", 'calculate_displacement(initial_velocity=20, acceleration=2, time=10)']
model_generated_function : 
['calculate_displacement(initial_velocity = 20, acceleration = 2, time = 10)', "retrieve_city_based_on_zipcode(zipcode = '08540')"]
compare reuslt: False
ground_truth_function: ['mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]])', 'calculate_mean(numbers=[1,2,3,4])']
model_generated_function : 
['mat_mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])', 'calculate_mean(numbers = [1, 2, 3, 4])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 26
ground_truth_function: ['"convert_currency(amount=1000, from_currency=\'USD\', to_currency=\'EUR\')"', '"math_factorial(n=1000)"']
model_generated_function : 
["convert_currency(amount = 1000, from_currency = 'USD', to_currency = 'EUR')", 'math_factorial(n = 1000)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
ground_truth_function: ['calculate_density(mass=300, volume=50)', 'get_fibonacci_sequence(n=5)', 'math_gcd(a=300, b=50)']
model_generated_function : 
['calculate_density(mass = 300, volume = 50)', 'get_fibonacci_sequence(n = 5)', 'math_gcd(a = 300, b = 50)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 28
ground_truth_function: ['mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)', 'math_lcm(a=15, b=25)', 'math_factorial(n=7)', 'estimate_derivative(function= lambda x : 3*x**2 + 2*x - 1, x=5)']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)', 'math_lcm(a = 15, b = 25)', 'math_factorial(n = 7)', "estimate_derivative(function = '3x^2 + 2x - 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 29
ground_truth_function: ['quadratic_roots(a=2, b=-3, c=5)', 'estimate_derivative(function= lambda x: 2*x**2 - 3 * x + 5 , x=4)']
model_generated_function : 
['quadratic_roots(a = 2, b = -3, c = 5)', "estimate_derivative(function = 'quadratic_roots(a=2, b=-3, c=5)', x = 4)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 30
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)', "get_price_by_amazon_ASIN(ASIN='B08K3PZP2H')", "retrieve_city_based_on_zipcode(zipcode='10001')", 'estimate_derivative(function=lambda x: 3*x**2 + 2*x - 1, x=2)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)', "get_price_by_amazon_ASIN(ASIN = 'B08K3PZP2H')", "retrieve_city_based_on_zipcode(zipcode = '10001')", "estimate_derivative(function = '3x^2 + 2x - 1', x = 2)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 31
ground_truth_function: ['get_time_zone_by_coord(long="12.4924", lat="41.8902")', 'retrieve_holiday_by_year(year="2022", country=\'UK\')']
model_generated_function : 
["get_time_zone_by_coord(long = '12.4924', lat = '41.8902')", "retrieve_holiday_by_year(year = '2022', country = 'UK')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 32
ground_truth_function: ["find_term_on_urban_dictionary(term='Hello World')", "get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits='True')", 'calculate_density(mass=10, volume=2)', 'sort_array(array=[5, 2, 9, 1, 7, 4, 6, 3, 8], reverse=True)']
Internal Server Error
model_generated_function : None
ground_truth_function: ['get_weather_data(coordinates=[45.4215, -75.6972])', 'calc_binomial_probability(n=5, k=3, p=0.5)']
model_generated_function : 
['get_weather_data(coordinates = [45.4215, -75.6972])', 'calc_binomial_probability(n = 5, k = 3, p = 0.5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
Accuracy: 0.82
-----------------------
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 48.8584, 'lon': 2.2945, 'c': 1})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945, 'c': 1})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 1
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.7128, 'lon': -74.0060})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.7128, 'lon': -74.006})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 2
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.712776, 'lon': -74.005974, 'c': 1})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.712776, 'lon': -74.005974, 'c': 1})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 3
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.712776, 'lon': -74.005974})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.712776, 'lon': -74.005974})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 4
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.7128, 'lon': -74.0060, 'c': 1})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.7128, 'lon': -74.006, 'c': 1})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 5
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 48.8584, 'lon': 2.2945})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 6
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=10, params={'country': 'Uganda'}, stream=False)"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout = 10, stream = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 7
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=25, params={'country': 'France'})"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params = {'country': 'France'}, timeout = 25)"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 8
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params={'country': 'Japan'})"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params = {'country': 'Japan'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 9
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=10, params={'country': 'UK'}, stream=False)"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout = 10, stream = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 10
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params={'country': 'Iran'})"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params = {'country': 'Iran'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 11
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params={'country': 'India'})"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params = {'country': 'India'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 12
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=5, params={'country': 'China'})"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout = 5)"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 13
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f4ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Meta'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Meta'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 24
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 25
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 26
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Apple'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Apple'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 27
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 28
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 29
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'fields': 'query,status,country', 'lang': 'fr'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'query,status,country', 'lang': 'fr'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 30
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'lang': 'fr'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query', 'lang': 'fr'})"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 31
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'fields': 'country,city,timezone', 'lang': 'fr'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'country,city,timezone', 'lang': 'fr'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 32
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'fields': 'city,country,isp', 'lang': 'es'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'city,country,isp', 'lang': 'es'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 33
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'fields': 'query,status,country', 'lang': 'de'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'query,status,country', 'lang': 'de'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 34
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'fields': 'query,country', 'lang': 'es'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'query,country', 'lang': 'es'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 35
ground_truth_function: ["requests.get(url='https://geocode.maps.co/search', params={'q': '5331 Rexford Court, Montgomery AL 36116', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'q': '5331 Rexford Court, Montgomery AL 36116', 'format': 'geojson', 'api_key': '65fe68824e7f3760331092odq60ce8c'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 36
ground_truth_function: ["requests.get(url='https://geocode.maps.co/search', params={'q': '886 Cannery Row, Monterey, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'q': '886 Cannery Row, Monterey, CA', 'format': 'json', 'api_key': '65fe68824e7f3760331092odq60ce8c'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 37
ground_truth_function: ["requests.get(url='https://geocode.maps.co/search', params={'q': '1600 Amphitheatre Parkway, Mountain View, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'q': '1600 Amphitheatre Parkway, Mountain View, CA', 'format': 'json', 'api_key': '65fe68824e7f3760331092odq60ce8c'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 38
ground_truth_function: ["requests.get(url='https://geocode.maps.co/search', params={'q': '450 Jane Stanford Way Stanford, CA 94305–2004, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'q': '450 Jane Stanford Way Stanford, CA 94305–2004', 'format': 'json', 'api_key': '65fe68824e7f3760331092odq60ce8c'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 39
ground_truth_function: ["requests.get(url='https://geocode.maps.co/reverse', params={'lat': 37.4224764, 'lon': -122.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 37.4224764, 'lon': -122.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 40
ground_truth_function: ["requests.get(url='https://geocode.maps.co/reverse', params={'lat': 63.65687, 'lon': 117.05229, 'api_key': '65fe68824e7f3760331092odq60ce8c'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 63.65687, 'lon': 117.05229, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 41
ground_truth_function: ["requests.get(url='https://geocode.maps.co/search', params={'q': 'Soda Hall, Berkeley, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'q': 'Soda Hall, Berkeley, CA', 'format': 'geojson'}, api_key = '65fe68824e7f3760331092odq60ce8c')"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 42
ground_truth_function: ["requests.get(url='https://geocode.maps.co/reverse', params={'lat': 39.4224764, 'lon': -112.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 39.4224764, 'lon': -112.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 43
ground_truth_function: ["requests.get(url='https://geocode.maps.co/reverse', params={'lat': 40.748817, 'lon': -73.985428, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 40.748817, 'lon': -73.985428, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 44
ground_truth_function: ["requests.get(url='https://geocode.maps.co/reverse', params={'lat': 48.8584, 'lon': 2.2945, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 48.8584, 'lon': 2.2945, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 45
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'timezone': 'auto'})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.6895', 'longitude': '139.6917', 'hourly': 'temperature_2m_max,temperature_2m_min,wind_speed_10m_max,precipitation', 'temperature_unit': 'fahrenheit', 'timezone': 'GMT', 'forecast_days': 7})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 46
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '35.68', 'longitude': '-121.34', 'forecast_days': 10, 'daily': ['temperature_2m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'precipitation_unit': 'inch'})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.68', 'longitude': '-121.34', 'daily': 'temperature_2m_max,precipitation_sum', 'temperature_unit': 'fahrenheit', 'precipitation_unit': 'inch', 'forecast_days': 10})"]
model_generated_function_params_pair_count: 7
correct_params_count: 7
compare reuslt: Ture, current matched count: 47
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'wind_speed_10m_max', 'precipitation_probability_mean'], 'temperature_unit': 'celsius', 'wind_speed_unit': 'kmh', 'precipitation_unit': 'mm'})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.6895N', 'longitude': '139.6917E', 'hourly': 'temperature_2m,wind_speed_10m_max,precipitation_probability_mean', 'daily': 'temperature_2m_max,wind_speed_10m_max,precipitation_sum', 'temperature_unit': 'celsius', 'wind_speed_unit': 'kmh', 'precipitation_unit': 'mm', 'forecast_days': 7})"]
model_generated_function_params_pair_count: 7
correct_params_count: 7
compare reuslt: Ture, current matched count: 48
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '47.8095', 'longitude': '13.0550', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'timezone': 'Europe/Vienna', 'forecast_days': 7})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '47.8095', 'longitude': '13.0550', 'daily': 'temperature_2m_max,temperature_2m_min,wind_speed_10m_max,precipitation_sum', 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'timezone': 'Europe/Vienna', 'forecast_days': 7})"]
model_generated_function_params_pair_count: 8
correct_params_count: 8
compare reuslt: Ture, current matched count: 49
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '39.113014', 'longitude': '-105.358887', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'mm', 'timezone': 'auto', 'forecast_days': 10})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '39.113014', 'longitude': '-105.358887', 'hourly': 'temperature_2m,wind_speed_10m', 'daily': 'temperature_2m_max,temperature_2m_min,precipitation_sum,weather_code', 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'timezone': 'America/Denver', 'forecast_days': 10})"]
model_generated_function_params_pair_count: 9
correct_params_count: 9
compare reuslt: Ture, current matched count: 50
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '37.8651', 'longitude': '-119.5383', 'hourly': ['temperature', 'windspeed', 'precipitation'], 'forecast_days': 10, 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'inch', 'timezone': 'auto'})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '37.8651', 'longitude': '-119.5383', 'hourly': 'temperature_2m,wind_speed_10m,precipitation', 'forecast_days': 10, 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'inch', 'timezone': 'auto'})"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 51
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '46.0207,46.4836', 'longitude': '7.7491,9.8355', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'inch', 'timezone': 'auto', 'start_date': '2023-04-15', 'end_date': '2023-04-21'})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '46.0207,46.4836', 'longitude': '7.7491,9.8355', 'daily': 'temperature_2m_max,temperature_2m_min,precipitation_sum,precipitation_probability_max,precipitation_probability_min,precipitation_probability_mean,weather_code,sunrise,sunset,sunshine_duration,wind_speed_10m_max,wind_gusts_10m_max,wind_direction_10m_dominant', 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'inch', 'timezone': 'auto', 'start_date': '2023-04-15', 'end_date': '2023-04-21'})"]
model_generated_function_params_pair_count: 10
correct_params_count: 10
compare reuslt: Ture, current matched count: 52
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '46.2028', 'longitude': '-121.4905', 'elevation': '3743', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum'], 'forecast_days': 10})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '46.2028', 'longitude': '-121.4905', 'elevation': '3743', 'daily': 'temperature_2m_max,temperature_2m_min,precipitation_sum', 'timezone': 'GMT', 'forecast_days': 10})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 53
ground_truth_function: ["requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'yeet'})"]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'yeet'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 54
ground_truth_function: ["requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'artwash'})"]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'artwash'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 55
ground_truth_function: ["requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'lit'})"]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'lit'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 56
ground_truth_function: ["requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'bet'})"]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'bet'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 57
ground_truth_function: ["requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'swole'})"]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'swole'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 58
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'Barbie', 'y': '2023', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Barbie', 'y': '2023', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 59
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'The Social Network', 'y': '2010', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'The Social Network', 'y': '2010', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 60
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'The Social Network', 'plot': 'full', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'The Social Network', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 61
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'Inception', 'y': '2010', 'plot': 'full', 'r': 'json','apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Inception', 'y': '2010', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 62
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'Gorilla', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Gorilla', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 63
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'Oppenheimer', 'y': '2023', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Oppenheimer', 'y': '2023', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 64
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'Oppenheimer', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Oppenheimer', 'y': '2023', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 65
ground_truth_function: ["requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 66
ground_truth_function: ["requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 67
ground_truth_function: ["requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/FR')"]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/FR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 68
ground_truth_function: ["requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/JP')"]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/JP')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 69
ground_truth_function: ["requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 70
Accuracy: 1.0
-----------------------
test_category: executable
Generating: gorilla_openfunctions_v1_test_executable_simple.json
ground_truth_function: ['calc_binomial_probability(n=20, k=5, p=0.6)']
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.6)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
ground_truth_function: ['calc_binomial_probability(n=30, k=15, p=0.5)']
model_generated_function : 
['calc_binomial_probability(n = 30, k = 15, p = 0.5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 2
ground_truth_function: ['calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
ground_truth_function: ['calculate_cosine_similarity(vectorA=[0.3, 0.8, 0.1, 0.6, 0.2], vectorB=[0.5, 0.7, 0.4, 0.9, 0.3])']
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.3, 0.8, 0.1, 0.6, 0.2], vectorB = [0.5, 0.7, 0.4, 0.9, 0.3])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 4
ground_truth_function: ['calculate_density(mass=50, volume=10)']
model_generated_function : 
['calculate_density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
ground_truth_function: ['calculate_density(mass=120, volume=30)']
model_generated_function : 
['calculate_density(mass = 120, volume = 30)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 6
ground_truth_function: ['calculate_displacement(initial_velocity=15, acceleration=9.8, time=10)']
model_generated_function : 
['calculate_displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
ground_truth_function: ['calculate_displacement(initial_velocity=25, acceleration=15, time=8)']
model_generated_function : 
['calculate_displacement(initial_velocity = 25, acceleration = 15, time = 8)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 8
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=5, voltage=10)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=7.8, voltage=15.2)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 7.8, voltage = 15.2)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 10
ground_truth_function: ['calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=12)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 0, acceleration = 9.8, time = 12)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 11
ground_truth_function: ['calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=7)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 0, acceleration = 9.8, time = 7)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 12
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 13
ground_truth_function: ['calculate_future_value(present_value=8000, interest_rate=0.04, periods=15)']
model_generated_function : 
['calculate_future_value(present_value = 8000, interest_rate = 4, periods = 15)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 14
ground_truth_function: ['calculate_mean(numbers=[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function : 
['calculate_mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ['calculate_mean(numbers=[15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])']
model_generated_function : 
['calculate_mean(numbers = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ['calculate_permutations(n=26, k=5)']
model_generated_function : 
['calculate_permutations(n = 26, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 17
ground_truth_function: ['calculate_permutations(n=30, k=7)']
model_generated_function : 
['calculate_permutations(n = 30, k = 7)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 18
ground_truth_function: ['calculate_standard_deviation(numbers=[1000,2000,3000,4000,5000,7000,9000,15000,20000,30000])']
model_generated_function : 
['calculate_standard_deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ['calculate_standard_deviation(numbers=[30,20,25,12,59,23,64,21,67,12,23,43])']
model_generated_function : 
['calculate_standard_deviation(numbers = [30, 20, 25, 12, 59, 23, 64, 21, 67, 12, 23, 43])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
ground_truth_function: ['calculate_triangle_area(base=500, height=300)']
model_generated_function : 
['calculate_triangle_area(base = 500, height = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 21
ground_truth_function: ['calculate_triangle_area(base=700, height=450)']
model_generated_function : 
['calculate_triangle_area(base = 700, height = 450)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 22
ground_truth_function: ["convert_currency(amount=5000, from_currency='EUR', to_currency='JPY')"]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["convert_currency(amount=3000, from_currency='USD', to_currency='GBP')"]
model_generated_function : 
["convert_currency(amount = 3000, from_currency = 'USD', to_currency = 'GBP')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 24
ground_truth_function: ['estimate_derivative(function=lambda x: 3*x**2 + 2*x + 1, x=5)']
model_generated_function : 
["estimate_derivative(function = '3t^2 + 2x + 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 25
ground_truth_function: ['estimate_derivative(function=lambda x: 4*x**3 + 3*x**2 + 2*x + 1, x=7)']
model_generated_function : 
["estimate_derivative(function = '4x^3 + 3x^2 + 2x + 1', x = 7)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 26
ground_truth_function: ['find_term_on_urban_dictionary(term="lit")']
model_generated_function : 
["find_term_on_urban_dictionary(term = 'lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
ground_truth_function: ['find_term_on_urban_dictionary(term="flex")']
model_generated_function : 
["find_term_on_urban_dictionary(term = 'flex')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
ground_truth_function: ['geometry_area_circle(radius=15)']
model_generated_function : 
['geometry_area_circle(radius = 15)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 29
ground_truth_function: ['geometry_area_circle(radius=20)']
model_generated_function : 
['geometry_area_circle(radius = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 30
ground_truth_function: ["get_active_covid_case_by_country(country='Brazil')"]
model_generated_function : 
["get_active_covid_case_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 31
ground_truth_function: ["get_active_covid_case_by_country(country='Spain')"]
model_generated_function : 
["get_active_covid_case_by_country(country = 'Spain')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 32
ground_truth_function: ["get_company_name_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
ground_truth_function: ["get_company_name_by_stock_name(stock_name='GOOGL')"]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'GOOGL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 34
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='192.168.1.1')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 35
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='172.16.254.1')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 36
ground_truth_function: ["get_coordinates_from_city(city_name='Paris')"]
model_generated_function : 
["get_coordinates_from_city(city_name = 'Paris')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 37
ground_truth_function: ["get_coordinates_from_city(city_name='Cairo')"]
model_generated_function : 
["get_coordinates_from_city(city_name = 'Cairo')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 38
ground_truth_function: ["get_covid_death_by_country(country='Brazil')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 39
ground_truth_function: ["get_covid_death_by_country(country='India')"]
model_generated_function : 
["get_covid_death_by_country(country = 'India')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 40
ground_truth_function: ['get_distance(pointA=(45.76, 4.85)', 'pointB=(48.85, 2.35))']
model_generated_function : 
["get_distance(pointA = '(45.76, 4.85)', pointB = '(48.85, 2.35)')"]
compare reuslt: False
ground_truth_function: ['get_distance(pointA=(32.71, -117.16)', 'pointB=(34.05, -118.25))']
model_generated_function : 
["get_distance(pointA = '(32.71, -117.16)', pointB = '(34.05, -118.25)')"]
compare reuslt: False
ground_truth_function: ['get_fibonacci_sequence(n=20)']
model_generated_function : 
['get_fibonacci_sequence(n = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 41
ground_truth_function: ['get_fibonacci_sequence(n=50)']
model_generated_function : 
['get_fibonacci_sequence(n = 50)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 42
ground_truth_function: ["get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')"]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 43
ground_truth_function: ["get_price_by_amazon_ASIN(ASIN='B07HJXVHSS')"]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B07HJXVHSS')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 44
ground_truth_function: ['get_prime_factors(number=4567)']
model_generated_function : 
['get_prime_factors(number = 4567)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 45
ground_truth_function: ['get_prime_factors(number=7891)']
model_generated_function : 
['get_prime_factors(number = 7891)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 46
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B08L8KC1J7')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L8KC1J7')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 47
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B07FZ8S74R')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B07FZ8S74R')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 48
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B08BHXG144')"]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B08L5WGQGJ')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 49
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B07FZ8S74R')"]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B07FZ8S74R')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 50
ground_truth_function: ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=True)"]
'NoneType' object has no attribute 'replace'
model_generated_function : None
ground_truth_function: ["get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits=False)"]
model_generated_function : 
["get_stock_history(stock_name = 'MSFT', interval = '1wk', diffandsplits = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 51
ground_truth_function: ["get_stock_price_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 52
ground_truth_function: ["get_stock_price_by_stock_name(stock_name='MSFT')"]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'MSFT')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 53
ground_truth_function: ["get_time_zone_by_coord(long='123.45', lat='-67.89')"]
model_generated_function : 
["get_time_zone_by_coord(long = '123.45', lat = '-67.89')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 54
ground_truth_function: ["get_time_zone_by_coord(long='80.75', lat='35.22')"]
model_generated_function : 
["get_time_zone_by_coord(long = '80.75', lat = '35.22')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 55
ground_truth_function: ['get_weather_data(coordinates=[90.00, 0.00])']
model_generated_function : 
['get_weather_data(coordinates = [90.0, 0.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 56
ground_truth_function: ['get_weather_data(coordinates=[25.00, 13.00])']
model_generated_function : 
['get_weather_data(coordinates = [25.0, 13.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 57
ground_truth_function: ['get_zipcode_by_ip_address(ip_address="192.168.1.1")']
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 58
ground_truth_function: ["get_zipcode_by_ip_address(ip_address='172.16.254.1')"]
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '172.16.254.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 59
ground_truth_function: ['mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]])']
model_generated_function : 
['mat_mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 60
ground_truth_function: ['mat_mul(matA=[[2, 3], [4, 5]], matB=[[6, 7], [8, 9]])']
model_generated_function : 
['mat_mul(matA = [[2, 3], [4, 5]], matB = [[6, 7], [8, 9]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 61
ground_truth_function: ['math_factorial(n=7)']
model_generated_function : 
['math_factorial(n = 7)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 62
ground_truth_function: ['math_factorial(n=12)']
model_generated_function : 
['math_factorial(n = 12)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 63
ground_truth_function: ['math_gcd(a=450, b=300)']
model_generated_function : 
['math_gcd(a = 450, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 64
ground_truth_function: ['math_gcd(a=360, b=240)']
model_generated_function : 
['math_gcd(a = 360, b = 240)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 65
ground_truth_function: ['math_lcm(a=18, b=24)']
model_generated_function : 
['math_lcm(a = 18, b = 24)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 66
ground_truth_function: ['math_lcm(a=35, b=45)']
model_generated_function : 
['math_lcm(a = 35, b = 45)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 67
ground_truth_function: ['mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 68
ground_truth_function: ['mortgage_calculator(loan_amount=500000, interest_rate=0.045, loan_period=25)']
model_generated_function : 
['mortgage_calculator(loan_amount = 500000, interest_rate = 4.5, loan_period = 25)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 69
ground_truth_function: ['quadratic_roots(a=3, b=7, c=-10)']
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = -10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 70
ground_truth_function: ['quadratic_roots(a=5, b=-8, c=2)']
model_generated_function : 
['quadratic_roots(a = 5, b = -8, c = 2)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 71
ground_truth_function: ["retrieve_city_based_on_zipcode(zipcode='90210')"]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 72
ground_truth_function: ["retrieve_city_based_on_zipcode(zipcode='10001')"]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '10001')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 73
ground_truth_function: ["retrieve_holiday_by_year(year='2010', country='FR')"]
model_generated_function : 
["retrieve_holiday_by_year(year = '2010', country = 'FR')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 74
ground_truth_function: ["retrieve_holiday_by_year(year='2005', country='DE')"]
model_generated_function : 
["retrieve_holiday_by_year(year = '2005', country = 'DE')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 75
ground_truth_function: ['sort_array(array=[34, 2, 56, 7, 9, 12], reverse=True)']
model_generated_function : 
['sort_array(array = [34, 2, 56, 7, 9, 12], reverse = True)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 76
ground_truth_function: ['sort_array(array=[1, 2, 2, 7, 7, 10], reverse=False)']
model_generated_function : 
['sort_array(array = [1, 2, 2, 7, 7, 10])']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 77
ground_truth_function: ["add_binary_numbers(a='0011',b='1100')"]
model_generated_function : 
["add_binary_numbers(a = '0011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 78
ground_truth_function: ["add_binary_numbers(a='10011',b='1100')"]
model_generated_function : 
["add_binary_numbers(a = '10011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 79
ground_truth_function: ['linear_regression(x=[1,2,3],y=[4,5,6],point=10)']
model_generated_function : 
['linear_regression(x = [1, 2, 3], y = [4, 5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 80
ground_truth_function: ['linear_regression(x=[1,2,-3],y=[4,-5,6],point=10)']
model_generated_function : 
['linear_regression(x = [1, 2, -3], y = [4, -5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 81
ground_truth_function: ['maxPoints(points=[[1,1],[2,2],[3,4],[5,5]])']
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 2], [3, 4], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 82
ground_truth_function: ['maxPoints(points=[[1,1],[2,3],[4,6],[5,5]])']
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 3], [4, 6], [5, 5]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 83
ground_truth_function: ['calculate_investment_value(initial_investment=10000,annual_contribution=1000,years=5,annual_return=0.05,inflation_rate=[0.01,0.02,0.03,0.04,0.04])']
model_generated_function : 
['calculate_investment_value(initial_investment = 10000, annual_contribution = 1000, years = 5, annual_return = 5, inflation_rate = [1, 2, 3, 4, 4], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 84
ground_truth_function: ['calculate_investment_value(initial_investment=1000000,annual_contribution=1000,years=3,annual_return=0.05,inflation_rate=[0.01,0.04,0.04])']
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 85
ground_truth_function: ["calculate_nutritional_needs(weight=100,height=170,age=30,gender='male',activity_level=1,goal='loss')"]
model_generated_function : 
["calculate_nutritional_needs(weight = 100, height = 170, age = 30, gender = 'male', activity_level = 1, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 86
ground_truth_function: ["calculate_nutritional_needs(weight=59,height=170,age=80,gender='female',activity_level=4,goal='loss')"]
model_generated_function : 
["calculate_nutritional_needs(weight = 59, height = 170, age = 80, gender = 'female', activity_level = 4, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 87
ground_truth_function: ["book_room(room_type={'type':'deluxe','price':1000},check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"]
model_generated_function : 
["book_room(room_type = {'type': 'deluxe', 'price': 1000}, check_in_date = '08-11-2024', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 88
ground_truth_function: ["book_room(room_type={'type':'king','price':10000},check_in_date='12-11-2023',check_out_date='08-15-2024',customer_id='123')"]
model_generated_function : 
["book_room(room_type = {'type': 'king', 'price': 10000}, check_in_date = '12-11-2023', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 89
ground_truth_function: ["order_food(item=['burger','ice cream'], quantity=[10,7], price=[5,2])"]
model_generated_function : 
["order_food(item = 'burger', quantity = 10, price = 5)", "order_food(item = 'ice cream', quantity = 7, price = 2)"]
compare reuslt: False
ground_truth_function: ["order_food(item=['dumplings','rice bowl'], quantity=[101,20], price=[0.1,10])"]
model_generated_function : 
["order_food(item = 'dumplings', quantity = 101, price = 0.1)", "order_food(item = 'rice bowl', quantity = 20, price = 10)"]
compare reuslt: False
ground_truth_function: ["get_movie_director(movie_name='Avatar')"]
model_generated_function : 
["get_movie_director(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 90
ground_truth_function: ["get_movie_director(movie_name='Pulp Fiction')"]
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 91
ground_truth_function: ["get_movie_rating(movie_name='Avatar')"]
model_generated_function : 
["get_movie_rating(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 92
ground_truth_function: ["get_movie_rating(movie_name='Pulp Fiction')"]
model_generated_function : 
["get_movie_rating(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 93
ground_truth_function: ['polygon_area(vertices=[[1,2],[3,4],[1,3]])']
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 3]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 94
ground_truth_function: ['polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])']
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 95
Accuracy: 0.95
-----------------------
Generating: gorilla_openfunctions_v1_test_executable_parallel_function.json
ground_truth_function: ['calc_binomial_probability(n=10, k=3, p=0.3)', 'calc_binomial_probability(n=15, k=5, p=0.3)', 'calc_binomial_probability(n=20, k=7, p=0.3)']
model_generated_function : 
['calc_binomial_probability(n = 10, k = 3, p = 0.3)', 'calc_binomial_probability(n = 15, k = 5, p = 0.3)', 'calc_binomial_probability(n = 20, k = 7, p = 0.3)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 1
ground_truth_function: ['"calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.3, 0.6, 0.2, 0.8, 0.1])"', '"calculate_cosine_similarity(vectorA=[0.2, 0.4, 0.6, 0.8, 1.0], vectorB=[1.0, 0.8, 0.6, 0.4, 0.2])"', '"calculate_cosine_similarity(vectorA=[0.1, 0.2, 0.3, 0.4, 0.5], vectorB=[0.5, 0.4, 0.3, 0.2, 0.1])"']
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.3, 0.6, 0.2, 0.8, 0.1])', 'calculate_cosine_similarity(vectorA = [0.2, 0.4, 0.6, 0.8, 1.0], vectorB = [1.0, 0.8, 0.6, 0.4, 0.2])', 'calculate_cosine_similarity(vectorA = [0.1, 0.2, 0.3, 0.4, 0.5], vectorB = [0.5, 0.4, 0.3, 0.2, 0.1])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 2
ground_truth_function: ['"calculate_density(mass=500, volume=100)"', '"calculate_density(mass=200, volume=50)"', '"calculate_density(mass=300, volume=75)"', '"calculate_density(mass=400, volume=80)"']
model_generated_function : 
['calculate_density(mass = 500, volume = 100)', 'calculate_density(mass = 200, volume = 50)', 'calculate_density(mass = 300, volume = 75)', 'calculate_density(mass = 400, volume = 80)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
ground_truth_function: ['calculate_displacement(initial_velocity=20, acceleration=-9.8, time=5)', 'calculate_displacement(initial_velocity=30, acceleration=-9.8, time=5)', 'calculate_displacement(initial_velocity=25, acceleration=-9.8, time=5)']
model_generated_function : 
['calculate_displacement(initial_velocity = 20, acceleration = -9.8, time = 5)', 'calculate_displacement(initial_velocity = 30, acceleration = -9.8, time = 5)', 'calculate_displacement(initial_velocity = 25, acceleration = -9.8, time = 5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 4
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=1.6e-19, voltage=500)', 'calculate_electrostatic_potential_energy(charge=-1.6e-19, voltage=1000)', 'calculate_electrostatic_potential_energy(charge=0, voltage=2000)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 1.6e-19, voltage = 500)', 'calculate_electrostatic_potential_energy(charge = -1.6e-19, voltage = 1000)', 'calculate_electrostatic_potential_energy(charge = 0, voltage = 2000)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
ground_truth_function: ['calculate_final_velocity(initial_velocity=5, acceleration=2, time=10)', 'calculate_final_velocity(initial_velocity=2, acceleration=1, time=15)', 'calculate_final_velocity(initial_velocity=1, acceleration=0.5, time=20)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 5, acceleration = 2, time = 10)', 'calculate_final_velocity(initial_velocity = 2, acceleration = 1, time = 15)', 'calculate_final_velocity(initial_velocity = 1, acceleration = 0.5, time = 20)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=5, periods=10)', 'calculate_future_value(present_value=2000, interest_rate=7, periods=15)', 'calculate_future_value(present_value=1000, interest_rate=10, periods=20)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)', 'calculate_future_value(present_value = 2000, interest_rate = 7, periods = 15)', 'calculate_future_value(present_value = 1000, interest_rate = 10, periods = 20)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
ground_truth_function: ['calculate_mean(numbers=[35, 40, 45, 50, 55])', 'calculate_mean(numbers=[72, 75, 78, 80, 82, 85])', 'calculate_mean(numbers=[1.50, 1.55, 1.60, 1.65, 1.70])']
model_generated_function : 
['calculate_mean(numbers = [35, 40, 45, 50, 55])', 'calculate_mean(numbers = [72, 75, 78, 80, 82, 85])', 'calculate_mean(numbers = [1.5, 1.55, 1.6, 1.65, 1.7])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
ground_truth_function: ['calculate_permutations(n=20, k=5)', 'calculate_permutations(n=12, k=5)', 'calculate_permutations(n=10, k=3)']
model_generated_function : 
['calculate_permutations(n = 20, k = 5)', 'calculate_permutations(n = 12, k = 5)', 'calculate_permutations(n = 10, k = 3)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
ground_truth_function: ['calculate_standard_deviation(numbers=[23, 34, 45, 56, 67, 78, 89])', 'calculate_standard_deviation(numbers=[10, 20, 30, 40, 50, 60])', 'calculate_standard_deviation(numbers=[90, 80, 70, 60, 50, 40])']
model_generated_function : 
['calculate_standard_deviation(numbers = [23, 34, 45, 56, 67, 78, 89])', 'calculate_standard_deviation(numbers = [10, 20, 30, 40, 50, 60])', 'calculate_standard_deviation(numbers = [90, 80, 70, 60, 50, 40])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 10
ground_truth_function: ['calculate_triangle_area(base=15, height=20)', 'calculate_triangle_area(base=25, height=30)', 'calculate_triangle_area(base=35, height=40)']
model_generated_function : 
['calculate_triangle_area(base = 15, height = 20)', 'calculate_triangle_area(base = 25, height = 30)', 'calculate_triangle_area(base = 35, height = 40)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
ground_truth_function: ["convert_currency(amount=5000, from_currency='JPY', to_currency='USD')", "convert_currency(amount=300, from_currency='GBP', to_currency='EUR')", "convert_currency(amount=2000, from_currency='INR', to_currency='AUD')", "convert_currency(amount=100, from_currency='CAD', to_currency='CHF')"]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'JPY', to_currency = 'USD')", "convert_currency(amount = 5000, from_currency = 'JPY', to_currency = 'EUR')", "convert_currency(amount = 5000, from_currency = 'JPY', to_currency = 'AUD')", "convert_currency(amount = 100, from_currency = 'CAD', to_currency = 'CHF')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 12
ground_truth_function: ['estimate_derivative(function=lambda x: 3*x**2 + 2*x - 1, x=4)', 'estimate_derivative(function=lambda x: 5*x**3 - 3*x**2 + 2*x + 1, x=-2)', 'estimate_derivative(function=lambda x: 2*x**4 - 3*x**3 + 2*x**2 - x + 1, x=0)', 'estimate_derivative(function=lambda x: x**5 - 2*x**4 + 3*x**3 - 2*x**2 + x - 1, x=1)']
model_generated_function : 
["estimate_derivative(function = '3x^2 + 2x - 1', x = 4)", "estimate_derivative(function = '5x^3 - 3x^2 + 2x + 1', x = -2)", "estimate_derivative(function = '2x^4 - 3x^3 + 2x^2 - x + 1', x = 0)", "estimate_derivative(function = 'x^5 - 2x^4 + 3x^3 - 2x^2 + x - 1', x = 1)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 13
ground_truth_function: ["find_term_on_urban_dictionary(term='Lit')", "find_term_on_urban_dictionary(term='Savage')", "find_term_on_urban_dictionary(term='FOMO')", "find_term_on_urban_dictionary(term='YOLO')"]
model_generated_function : 
["find_term_on_urban_dictionary(term = 'Lit')", "find_term_on_urban_dictionary(term = 'Savage')", "find_term_on_urban_dictionary(term = 'YOLO')"]
compare reuslt: False
ground_truth_function: ['geometry_area_circle(radius=5)', 'geometry_area_circle(radius=10)', 'geometry_area_circle(radius=15)', 'geometry_area_circle(radius=20)']
model_generated_function : 
['geometry_area_circle(radius = 5)', 'geometry_area_circle(radius = 10)', 'geometry_area_circle(radius = 15)', 'geometry_area_circle(radius = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
ground_truth_function: ["get_active_covid_case_by_country(country='France')", "get_active_covid_case_by_country(country='Italy')", "get_active_covid_case_by_country(country='United States')", "get_active_covid_case_by_country(country='China')"]
model_generated_function : 
["get_active_covid_case_by_country(country = 'France')", "get_active_covid_case_by_country(country = 'Italy')", "get_active_covid_case_by_country(country = 'United States')", "get_active_covid_case_by_country(country = 'China')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ["get_company_name_by_stock_name(stock_name='AAPL')", "get_company_name_by_stock_name(stock_name='GOOGL')", "get_company_name_by_stock_name(stock_name='AMZN')", "get_company_name_by_stock_name(stock_name='MSFT')"]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')", "get_company_name_by_stock_name(stock_name = 'GOOGL')", "get_company_name_by_stock_name(stock_name = 'AMZN')", "get_company_name_by_stock_name(stock_name = 'MSFT')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='192.168.1.1')", "get_coordinate_by_ip_address(ip_address='172.16.254.1')", "get_coordinate_by_ip_address(ip_address='10.0.0.1')", "get_coordinate_by_ip_address(ip_address='192.0.2.1')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')", "get_coordinate_by_ip_address(ip_address = '172.16.254.1')", "get_coordinate_by_ip_address(ip_address = '10.0.0.1')", "get_coordinate_by_ip_address(ip_address = '192.0.2.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
ground_truth_function: ["get_coordinates_from_city(city_name='New York')", "get_coordinates_from_city(city_name='Los Angeles')", "get_coordinates_from_city(city_name='Chicago')", "get_coordinates_from_city(city_name='Houston')"]
model_generated_function : 
["get_coordinates_from_city(city_name = 'New York')", "get_coordinates_from_city(city_name = 'Los Angeles')", "get_coordinates_from_city(city_name = 'Chicago')", "get_coordinates_from_city(city_name = 'Houston')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
ground_truth_function: ["get_covid_death_by_country(country='Brazil')", "get_covid_death_by_country(country='India')", "get_covid_death_by_country(country='Russia')", "get_covid_death_by_country(country='South Africa')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')", "get_covid_death_by_country(country = 'India')", "get_covid_death_by_country(country = 'Russia')", "get_covid_death_by_country(country = 'South Africa')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ['get_distance(pointA=(3, 4)', 'pointB=(7, 9))', 'get_distance(pointA=(1, 2)', 'pointB=(5, 6))', 'get_distance(pointA=(0, 0)', 'pointB=(8, 15))', 'get_distance(pointA=(10, 12)', 'pointB=(20, 25))']
model_generated_function : 
['get_distance(pointA = [3, 4], pointB = [7, 9])', 'get_distance(pointA = [1, 2], pointB = [5, 6])', 'get_distance(pointA = [0, 0], pointB = [8, 15])', 'get_distance(pointA = [10, 12], pointB = [20, 25])']
compare reuslt: False
ground_truth_function: ['get_fibonacci_sequence(n=10)', 'get_fibonacci_sequence(n=20)', 'get_fibonacci_sequence(n=5)', 'get_fibonacci_sequence(n=15)']
model_generated_function : 
['get_fibonacci_sequence(n = 10)', 'get_fibonacci_sequence(n = 20)', 'get_fibonacci_sequence(n = 5)']
compare reuslt: False
ground_truth_function: ["get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')", "get_price_by_amazon_ASIN(ASIN='B07FZ8S74R')", "get_price_by_amazon_ASIN(ASIN='B07B4L1PQ8')", "get_price_by_amazon_ASIN(ASIN='B07RF1XD36')"]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')", "get_price_by_amazon_ASIN(ASIN = 'B07FZ8S74R')", "get_price_by_amazon_ASIN(ASIN = 'B07B4L1PQ8')", "get_price_by_amazon_ASIN(ASIN = 'B07RF1XD36')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
ground_truth_function: ['get_prime_factors(number=456)', 'get_prime_factors(number=789)', 'get_prime_factors(number=321)', 'get_prime_factors(number=654)']
model_generated_function : 
['get_prime_factors(number = 456)', 'get_prime_factors(number = 789)', 'get_prime_factors(number = 321)', 'get_prime_factors(number = 654)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B08L5VG843')", "get_product_name_by_amazon_ASIN(ASIN='B07XJ8C8F5')", "get_product_name_by_amazon_ASIN(ASIN='B07FZ8S74R')", "get_product_name_by_amazon_ASIN(ASIN='B07HJHKL9S')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L5VG843')", "get_product_name_by_amazon_ASIN(ASIN = 'B07XJ8C8F5')", "get_product_name_by_amazon_ASIN(ASIN = 'B07FZ8S74R')", "get_product_name_by_amazon_ASIN(ASIN = 'B07HJHKL9S')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B07HJHKL9S')", "get_rating_by_amazon_ASIN(ASIN='B07FZ8S74R')", "get_rating_by_amazon_ASIN(ASIN='B08L5VG843')", "get_rating_by_amazon_ASIN(ASIN='B07XJ8C8F5')"]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B07HJHKL9S')", "get_rating_by_amazon_ASIN(ASIN = 'B07FZ8S74R')", "get_rating_by_amazon_ASIN(ASIN = 'B08L5VG843')", "get_rating_by_amazon_ASIN(ASIN = 'B07XJ8C8F5')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["get_stock_history(stock_name='AAPL', interval='1d')", "get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits=True)", "get_stock_history(stock_name='AMZN', interval='1mo')", "get_stock_history(stock_name='TSLA', interval='3mo', diffandsplits=False)"]
'NoneType' object has no attribute 'replace'
model_generated_function : None
ground_truth_function: ["get_stock_price_by_stock_name(stock_name='GOOG')", "get_stock_price_by_stock_name(stock_name='NFLX')", "get_stock_price_by_stock_name(stock_name='BABA')"]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'GOOG')", "get_stock_price_by_stock_name(stock_name = 'META')", "get_stock_price_by_stock_name(stock_name = 'NFLX')", "get_stock_price_by_stock_name(stock_name = 'Alibaba Group Holding Ltd. BABA')"]
compare reuslt: False
ground_truth_function: ["get_time_zone_by_coord(long='77.1025', lat='28.7041')", "get_time_zone_by_coord(long='-73.935242', lat='40.730610')", "get_time_zone_by_coord(long='151.2093', lat='33.8688')", "get_time_zone_by_coord(long='139.6917', lat='35.6895')"]
model_generated_function : 
["get_time_zone_by_coord(long = '77.1025', lat = '28.7041')", "get_time_zone_by_coord(long = '-73.935242', lat = '40.730610')", "get_time_zone_by_coord(long = '151.2093', lat = '33.8688')", "get_time_zone_by_coord(long = '139.6917', lat = '35.6895')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 24
ground_truth_function: ['get_weather_data(coordinates=[34.0522, -118.2437])', 'get_weather_data(coordinates=[51.5074, -0.1278])', 'get_weather_data(coordinates=[-33.9249, 18.4241])', 'get_weather_data(coordinates=[48.8566, 2.3522])']
model_generated_function : 
['get_weather_data(coordinates = [34.0522, -118.2437])', 'get_weather_data(coordinates = [51.5074, -0.1278])', 'get_weather_data(coordinates = [-33.9249, 18.4241])', 'get_weather_data(coordinates = [48.8566, 2.3522])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
ground_truth_function: ["get_zipcode_by_ip_address(ip_address='192.168.1.1')", "get_zipcode_by_ip_address(ip_address='172.16.254.1')", "get_zipcode_by_ip_address(ip_address='10.0.0.1')", "get_zipcode_by_ip_address(ip_address='203.0.113.0')"]
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')", "get_zipcode_by_ip_address(ip_address = '172.16.254.1')", "get_zipcode_by_ip_address(ip_address = '10.0.0.1')", "get_zipcode_by_ip_address(ip_address = '203.0.113.0')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
ground_truth_function: ['mat_mul(matA=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], matB=[[10, 11, 12], [13, 14, 15], [16, 17, 18]])', 'mat_mul(matA=[[19, 20], [21, 22]], matB=[[23, 24], [25, 26]])', 'mat_mul(matA=[[27, 28, 29, 30], [31, 32, 33, 34]], matB=[[35, 36, 37, 38], [39, 40, 41, 42]])', 'mat_mul(matA=[[43, 44], [45, 46]], matB=[[47, 48], [49, 50]])']
model_generated_function : 
['mat_mul(matA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], matB = [[10, 11, 12], [13, 14, 15], [16, 17, 18]])', 'mat_mul(matA = [[19, 20], [21, 22]], matB = [[23, 24], [25, 26]])', 'mat_mul(matA = [[27, 28, 29, 30], [31, 32, 33, 34]], matB = [[35, 36, 37, 38], [39, 40, 41, 42]])', 'mat_mul(matA = [[43, 44], [45, 46]], matB = [[47, 48], [49, 50]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 27
ground_truth_function: ['math_factorial(n=5)', 'math_factorial(n=7)', 'math_factorial(n=10)', 'math_factorial(n=12)']
model_generated_function : 
['math_factorial(n = 5)', 'math_factorial(n = 7)', 'math_factorial(n = 10)', 'math_factorial(n = 12)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
ground_truth_function: ['math_gcd(a=45, b=60)', 'math_gcd(a=81, b=27)', 'math_gcd(a=144, b=96)', 'math_gcd(a=100, b=80)']
model_generated_function : 
['math_gcd(a = 45, b = 60)', 'math_gcd(a = 81, b = 27)', 'math_gcd(a = 144, b = 96)', 'math_gcd(a = 100, b = 80)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 29
ground_truth_function: ['math_lcm(a=35, b=45)', 'math_lcm(a=72, b=108)', 'math_lcm(a=120, b=180)', 'math_lcm(a=200, b=300)']
model_generated_function : 
['math_lcm(a = 35, b = 45)', 'math_lcm(a = 72, b = 108)', 'math_lcm(a = 120, b = 180)', 'math_lcm(a = 200, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 30
ground_truth_function: ['mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)', 'mortgage_calculator(loan_amount=500000, interest_rate=0.04, loan_period=20)', 'mortgage_calculator(loan_amount=750000, interest_rate=0.025, loan_period=15)', 'mortgage_calculator(loan_amount=1000000, interest_rate=0.03, loan_period=10)']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)', 'mortgage_calculator(loan_amount = 500000, interest_rate = 4, loan_period = 20)', 'mortgage_calculator(loan_amount = 750000, interest_rate = 2.5, loan_period = 15)', 'mortgage_calculator(loan_amount = 1000000, interest_rate = 3, loan_period = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 31
ground_truth_function: ['quadratic_roots(a=3, b=7, c=2)', 'quadratic_roots(a=5, b=12, c=4)', 'quadratic_roots(a=8, b=16, c=6)', 'quadratic_roots(a=10, b=20, c=8)']
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = 2)', 'quadratic_roots(a = 5, b = 12, c = 4)', 'quadratic_roots(a = 8, b = 16, c = 6)', 'quadratic_roots(a = 10, b = 20, c = 8)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 32
ground_truth_function: ["retrieve_city_based_on_zipcode(zipcode='90210')", "retrieve_city_based_on_zipcode(zipcode='10001')", "retrieve_city_based_on_zipcode(zipcode='60601')", "retrieve_city_based_on_zipcode(zipcode='94102')"]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')", "retrieve_city_based_on_zipcode(zipcode = '10001')", "retrieve_city_based_on_zipcode(zipcode = '60601')", "retrieve_city_based_on_zipcode(zipcode = '94102')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
ground_truth_function: ["retrieve_holiday_by_year(year='2018', country='US')", "retrieve_holiday_by_year(year='2020', country='DE')", "retrieve_holiday_by_year(year='2019', country='ES')", "retrieve_holiday_by_year(year='2021', country='GB')"]
model_generated_function : 
["retrieve_holiday_by_year(year = '2018', country = 'US')", "retrieve_holiday_by_year(year = '2020', country = 'DE')", "retrieve_holiday_by_year(year = '2019', country = 'ES')", "retrieve_holiday_by_year(year = '2021', country = 'GB')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 34
ground_truth_function: ['sort_array(array=[5, 2, 9, 1, 7])', 'sort_array(array=[3, 8, 6, 4], reverse=True)', 'sort_array(array=[10, 20, 30, 40, 50])', 'sort_array(array=[100, 200, 300, 400, 500], reverse=True)']
Internal Server Error
model_generated_function : None
ground_truth_function: ["add_binary_numbers(a='0011', b='1100')", "add_binary_numbers(a='1010', b='0101')", "add_binary_numbers(a='1111', b='0000')", "add_binary_numbers(a='0001', b='1110')"]
model_generated_function : 
["add_binary_numbers(a = '0011', b = '1100')", "add_binary_numbers(a = '1010', b = '0101')", "add_binary_numbers(a = '1111', b = '0000')", "add_binary_numbers(a = '0001', b = '1110')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 35
ground_truth_function: ['linear_regression(x=[1,2,3],y=[4,5,6],point=10)', 'linear_regression(x=[2,4,6],y=[8,10,12],point=15)', 'linear_regression(x=[3,6,9],y=[12,15,18],point=20)', 'linear_regression(x=[4,8,12],y=[16,20,24],point=25)']
model_generated_function : 
['linear_regression(x = [1, 2, 3], y = [4, 5, 6], point = 10)', 'linear_regression(x = [2, 4, 6], y = [8, 10, 12], point = 15)', 'linear_regression(x = [3, 6, 9], y = [12, 15, 18], point = 20)', 'linear_regression(x = [4, 8, 12], y = [16, 20, 24], point = 25)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 36
ground_truth_function: ['maxPoints(points=[[1,1],[2,2],[3,4],[5,5]])', 'maxPoints(points=[[1,2],[3,2],[5,2],[4,2]])', 'maxPoints(points=[[0,0],[1,1],[0,1],[1,0]])', 'maxPoints(points=[[1,1],[3,2],[5,3],[7,4]])']
model_generated_function : 
['maxPoints(points = [[1, 1], [2, 2], [3, 4], [5, 5]])', 'maxPoints(points = [[1, 2], [3, 2], [5, 2], [4, 2]])', 'maxPoints(points = [[0, 0], [1, 1], [0, 1], [1, 0]])', 'maxPoints(points = [[1, 1], [3, 2], [5, 3], [7, 4]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 37
ground_truth_function: ['calculate_investment_value(initial_investment=1000000, annual_contribution=1000, years=3, annual_return=0.1, inflation_rate=[0.01, 0.04, 0.04])', 'calculate_investment_value(initial_investment=500000, annual_contribution=500, years=5, annual_return=0.07, inflation_rate=[0.02, 0.03, 0.02, 0.03, 0.02])', 'calculate_investment_value(initial_investment=250000, annual_contribution=2000, years=7, annual_return=0.05, inflation_rate=[0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01])', 'calculate_investment_value(initial_investment=800000, annual_contribution=1500, years=10, annual_return=0.08, inflation_rate=[0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01, 0.02])']
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4], adjust_for_inflation = True)', 'calculate_investment_value(initial_investment = 500000, annual_contribution = 500, years = 5, annual_return = 7, inflation_rate = [2, 3, 2, 3, 2], adjust_for_inflation = True)', 'calculate_investment_value(initial_investment = 250000, annual_contribution = 2000, years = 7, annual_return = 5, inflation_rate = [1, 2, 1, 2, 1, 2, 1], adjust_for_inflation = True)', 'calculate_investment_value(initial_investment = 800000, annual_contribution = 1500, years = 10, annual_return = 8, inflation_rate = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
model_generated_function_params_pair_count: 5
correct_params_count: 5
model_generated_function_params_pair_count: 5
correct_params_count: 5
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 38
ground_truth_function: ["calculate_nutritional_needs(weight=75, height=180, age=25, gender='male', activity_level=3, goal='gain')", "calculate_nutritional_needs(weight=65, height=165, age=30, gender='female', activity_level=2, goal='maintain')", "calculate_nutritional_needs(weight=85, height=175, age=40, gender='male', activity_level=5, goal='lose')", "calculate_nutritional_needs(weight=70, height=160, age=55, gender='female', activity_level=1, goal='lose')"]
model_generated_function : 
["calculate_nutritional_needs(weight = 75, height = 180, age = 25, gender = 'male', activity_level = 3, goal = 'gain')", "calculate_nutritional_needs(weight = 65, height = 165, age = 30, gender = 'female', activity_level = 2, goal = 'maintain')", "calculate_nutritional_needs(weight = 85, height = 175, age = 40, gender = 'male', activity_level = 5, goal = 'lose')", "calculate_nutritional_needs(weight = 70, height = 160, age = 55, gender = 'female', activity_level = 1, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
model_generated_function_params_pair_count: 6
correct_params_count: 6
model_generated_function_params_pair_count: 6
correct_params_count: 6
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 39
ground_truth_function: ["order_food(item=['burger'], quantity=[10], price=[5])", "order_food(item=['ice cream'], quantity=[7, price=[2])", "order_food(item=['pizza'], quantity=[3], price=[8])", "order_food(item=['donut'], quantity=[12], price=[1])"]
model_generated_function : 
["order_food(item = ['burger', 'ice cream', 'pizza', 'donut'], quantity = [10, 7, 3, 12], price = [5, 2, 8, 1])"]
compare reuslt: False
ground_truth_function: ["order_food(item='dumplings', quantity=101, price=0.1)", "order_food(item='rice bowl', quantity=20, price=10)", "order_food(item='spring rolls', quantity=50, price=0.5)", "order_food(item='noodle soup', quantity=10, price=3)"]
model_generated_function : 
["order_food(item = ['dumplings', 'rice bowls', 'spring rolls', 'noodle soups'], quantity = [101, 20, 50, 10], price = [0.1, 10, 0.5, 3])"]
compare reuslt: False
ground_truth_function: ["get_movie_director(movie_name='Pulp Fiction')", "get_movie_director(movie_name='Reservoir Dogs')", "get_movie_director(movie_name='Kill Bill')", "get_movie_director(movie_name='Django Unchained')"]
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')", "get_movie_director(movie_name = 'Reservoir Dogs')", "get_movie_director(movie_name = 'Kill Bill: Volume 1')", "get_movie_director(movie_name = 'Django Unchained')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 40
ground_truth_function: ["get_movie_rating(movie_name='Pulp Fiction')", "get_movie_rating(movie_name='The Godfather')", "get_movie_rating(movie_name='Schindler's List')", "get_movie_rating(movie_name='The Dark Knight')"]
model_generated_function : 
["get_movie_rating(movie_name = 'Pulp Fiction')", "get_movie_rating(movie_name = 'The Godfather')", 'get_movie_rating(movie_name = "Schindler\'s List")', "get_movie_rating(movie_name = 'The Dark Knight')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 41
ground_truth_function: ['polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])', 'polygon_area(vertices=[[5,5],[6,7],[7,5]])', 'polygon_area(vertices=[[2,1],[4,2],[3,4],[1,3]])', 'polygon_area(vertices=[[-1,0],[2,3],[0,4],[-2,2]])']
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])', 'polygon_area(vertices = [[5, 5], [6, 7], [7, 5]])', 'polygon_area(vertices = [[2, 1], [4, 2], [3, 4], [1, 3]])', 'polygon_area(vertices = [[-1, 0], [2, 3], [0, 4], [-2, 2]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 42
Accuracy: 0.84
-----------------------
Generating: gorilla_openfunctions_v1_test_executable_multiple_function.json
ground_truth_function: ['calc_binomial_probability(n=20, k=5, p=1/6)']
model_generated_function : 
['calc_binomial_probability(n = 20, k = 5, p = 0.16666666666666666)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 1
ground_truth_function: ['calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function : 
['calculate_cosine_similarity(vectorA = [0.5, 0.7, 0.2, 0.9, 0.1], vectorB = [0.4, 0.6, 0.3, 0.8, 0.2])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 2
ground_truth_function: ['calculate_density(mass=50, volume=10)']
model_generated_function : 
['calculate_density(mass = 50, volume = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 3
ground_truth_function: ['calculate_displacement(initial_velocity=15, acceleration=9.8, time=10)']
model_generated_function : 
['calculate_displacement(initial_velocity = 15, acceleration = 9.8, time = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 4
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=5, voltage=10)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 5
ground_truth_function: ['calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=12)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 0, acceleration = 9.8, time = 12)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 7
ground_truth_function: ['calculate_mean(numbers=[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function : 
['calculate_mean(numbers = [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
ground_truth_function: ['calculate_permutations(n=26, k=5)']
model_generated_function : 
['calculate_permutations(n = 26, k = 5)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 9
ground_truth_function: ['calculate_standard_deviation(numbers=[1000,2000,3000,4000,5000,7000,9000,15000,20000,30000])']
model_generated_function : 
['calculate_standard_deviation(numbers = [1000, 2000, 3000, 4000, 5000, 7000, 9000, 15000, 20000, 30000])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 10
ground_truth_function: ['calculate_triangle_area(base=500, height=300)']
model_generated_function : 
['calculate_triangle_area(base = 500, height = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
ground_truth_function: ["convert_currency(amount=5000, from_currency='EUR', to_currency='JPY')"]
model_generated_function : 
["convert_currency(amount = 5000, from_currency = 'EUR', to_currency = 'JPY')"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 12
ground_truth_function: ['estimate_derivative(function=lambda x: 3*x**2 + 2*x + 1, x=5)']
model_generated_function : 
["estimate_derivative(function = '3t^2 + 2x + 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 13
ground_truth_function: ['find_term_on_urban_dictionary(term="lit")']
model_generated_function : 
["find_term_on_urban_dictionary(term = 'lit')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
ground_truth_function: ['geometry_area_circle(radius=15)']
model_generated_function : 
['geometry_area_circle(radius = 15)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ["get_active_covid_case_by_country(country='Brazil')"]
model_generated_function : 
["get_active_covid_case_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ["get_company_name_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='192.168.1.1')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
ground_truth_function: ["get_coordinates_from_city(city_name='Paris')"]
model_generated_function : 
["get_coordinates_from_city(city_name = 'Paris')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ["get_covid_death_by_country(country='Brazil')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
ground_truth_function: ['get_distance(pointA=(45.76, 4.85)', 'pointB=(48.85, 2.35))']
model_generated_function : 
["get_distance(pointA = '(45.76, 4.85)', pointB = '(48.85, 2.35)')"]
compare reuslt: False
ground_truth_function: ['get_fibonacci_sequence(n=20)']
model_generated_function : 
['get_fibonacci_sequence(n = 20)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
ground_truth_function: ["get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')"]
model_generated_function : 
["get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
ground_truth_function: ['get_prime_factors(number=4567)']
model_generated_function : 
['get_prime_factors(number = 4567)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B08L8KC1J7')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08L8KC1J7')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 24
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B08L5WGQGJ')"]
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B08L5WGQGJ')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
ground_truth_function: ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=True)"]
'NoneType' object has no attribute 'replace'
model_generated_function : None
ground_truth_function: ["get_stock_price_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
["get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 26
ground_truth_function: ["get_time_zone_by_coord(long='123.45', lat='-67.89')"]
model_generated_function : 
["get_time_zone_by_coord(long = '123.45', lat = '-67.89')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 27
ground_truth_function: ['get_weather_data(coordinates=[90.00, 0.00])']
model_generated_function : 
['get_weather_data(coordinates = [90.0, 0.0])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 28
ground_truth_function: ['get_zipcode_by_ip_address(ip_address="192.168.1.1")']
model_generated_function : 
["get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 29
ground_truth_function: ['mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]])']
model_generated_function : 
['mat_mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 30
ground_truth_function: ['math_factorial(n=7)']
model_generated_function : 
['math_factorial(n = 7)']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 31
ground_truth_function: ['math_gcd(a=450, b=300)']
model_generated_function : 
['math_gcd(a = 450, b = 300)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 32
ground_truth_function: ['math_lcm(a=18, b=24)']
model_generated_function : 
['math_lcm(a = 18, b = 24)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 33
ground_truth_function: ['mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 34
ground_truth_function: ['quadratic_roots(a=3, b=7, c=-10)']
model_generated_function : 
['quadratic_roots(a = 3, b = 7, c = -10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 35
ground_truth_function: ["retrieve_city_based_on_zipcode(zipcode='90210')"]
model_generated_function : 
["retrieve_city_based_on_zipcode(zipcode = '90210')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 36
ground_truth_function: ["retrieve_holiday_by_year(year='2010', country='FR')"]
model_generated_function : 
["retrieve_holiday_by_year(year = '2010', country = 'FR')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 37
ground_truth_function: ['sort_array(array=[34, 2, 56, 7, 9, 12], reverse=True)']
model_generated_function : 
['sort_array(array = [34, 2, 56, 7, 9, 12], reverse = True)']
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 38
ground_truth_function: ["add_binary_numbers(a='10011',b='1100')"]
model_generated_function : 
["add_binary_numbers(a = '10011', b = '1100')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 39
ground_truth_function: ['linear_regression(x=[1,2,-3],y=[4,-5,6],point=10)']
model_generated_function : 
['linear_regression(x = [1, 2, -3], y = [4, -5, 6], point = 10)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 40
ground_truth_function: ['calculate_investment_value(initial_investment=10000, annual_contribution=1000, years=5, annual_return=0.05, inflation_rate=[0.01,0.02,0.03,0.04,0.04])']
model_generated_function : 
['calculate_investment_value(initial_investment = 10000, annual_contribution = 1000, years = 5, annual_return = 5, inflation_rate = [1, 2, 3, 4, 4], adjust_for_inflation = True)']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 41
ground_truth_function: ['calculate_investment_value(initial_investment=1000000, annual_contribution=1000, years=3, annual_return=0.10, inflation_rate=[0.01, 0.04, 0.04])']
model_generated_function : 
['calculate_investment_value(initial_investment = 1000000, annual_contribution = 1000, years = 3, annual_return = 10, inflation_rate = [1, 4, 4])']
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 42
ground_truth_function: ["calculate_nutritional_needs(weight=59,height=170,age=80,gender='female',activity_level=4,goal='lose')"]
model_generated_function : 
["calculate_nutritional_needs(weight = 59, height = 170, age = 80, gender = 'female', activity_level = 4, goal = 'lose')"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 43
ground_truth_function: ["book_room(room_type={'type':'deluxe','price':1000},check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"]
model_generated_function : 
["book_room(room_type = {'type': 'deluxe', 'price': 1000}, check_in_date = '08-11-2024', check_out_date = '08-15-2024', customer_id = '123')"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 44
ground_truth_function: ["order_food(item=['dumplings','rice bowl'], quantity=[101,20], price=[0.1,10])"]
model_generated_function : 
["order_food(item = ['dumplings', 'rice bowl'], quantity = [101, 20], price = [0.1, 10])"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 45
ground_truth_function: ["get_movie_director(movie_name='Pulp Fiction')"]
model_generated_function : 
["get_movie_director(movie_name = 'Pulp Fiction')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 46
ground_truth_function: ["get_movie_rating(movie_name='Avatar')"]
model_generated_function : 
["get_movie_rating(movie_name = 'Avatar')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 47
ground_truth_function: ['polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])']
model_generated_function : 
['polygon_area(vertices = [[1, 2], [3, 4], [1, 4], [3, 7]])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 48
Accuracy: 0.96
-----------------------
Generating: gorilla_openfunctions_v1_test_executable_parallel_multiple_function.json
ground_truth_function: ['get_weather_data(coordinates=[45.4215, -75.6972])', 'calc_binomial_probability(n=10, k=5, p=0.5)']
model_generated_function : 
['get_weather_data(coordinates = [45.4215, -75.6972])', 'calc_binomial_probability(n = 10, k = 5, p = 0.5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 1
ground_truth_function: ['calculate_cosine_similarity(vectorA=[1, 2, 3], vectorB=[4, 5, 6])', "get_stock_price_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
['calculate_cosine_similarity(vectorA = [1, 2, 3], vectorB = [4, 5, 6])', "get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 2
ground_truth_function: ['calculate_density(mass=50, volume=10)', 'calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)', "get_stock_price_by_stock_name(stock_name='AAPL')", "get_rating_by_amazon_ASIN(ASIN='B08N5WRWNW')"]
model_generated_function : 
['calculate_density(mass = 50, volume = 10)', 'calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)', "get_stock_price_by_stock_name(stock_name = 'Apple Inc.')", "get_rating_by_amazon_ASIN(ASIN = 'B08N5WRWNW')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 3
ground_truth_function: ['"retrieve_holiday_by_year(year=\'2020\', country=\'ES\')"', '"calculate_displacement(initial_velocity=10, acceleration=2, time=5)"']
model_generated_function : 
["retrieve_holiday_by_year(year = '2020', country = 'ES')", 'calculate_displacement(initial_velocity = 10, acceleration = 2, time = 5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 4
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=5, voltage=10)', "get_zipcode_by_ip_address(ip_address='192.168.1.1')"]
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)', "get_zipcode_by_ip_address(ip_address = '192.168.1.1')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 5
ground_truth_function: ['calculate_final_velocity(initial_velocity=10, acceleration=2, time=5)', 'calculate_final_velocity(initial_velocity=15, acceleration=1.5, time=7)', 'calculate_cosine_similarity(vectorA=[10, 2, 5], vectorB=[15, 1.5, 7])', 'mortgage_calculator(loan_amount=200000, interest_rate=0.05, loan_period=30)']
model_generated_function : 
['calculate_final_velocity(initial_velocity = 10, acceleration = 2, time = 5)', 'calculate_final_velocity(initial_velocity = 15, acceleration = 1.5, time = 7)', 'calculate_cosine_similarity(vectorA = [10, 2, 5], vectorB = [15, 1.5, 7])', 'mortgage_calculator(loan_amount = 200000, interest_rate = 5, loan_period = 30)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 6
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)', 'get_fibonacci_sequence(n=15)', 'sort_array(array=[45, 23, 67, 89, 12, 34, 56, 78], reverse=True)']
Internal Server Error
model_generated_function : None
ground_truth_function: ['calculate_mean(numbers=[5, 10, 15, 20, 25])', "get_time_zone_by_coord(long='120.97388', lat='14.6042')"]
model_generated_function : 
['calculate_mean(numbers = [5, 10, 15, 20, 25])', "get_time_zone_by_coord(long = '120.97388', lat = '14.6042')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 7
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)', "get_company_name_by_stock_name(stock_name='AAPL')", 'calculate_permutations(n=7, k=3)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)', "get_company_name_by_stock_name(stock_name = 'AAPL')", 'calculate_permutations(n = 7, k = 3)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 8
ground_truth_function: ['get_fibonacci_sequence(n=10)', 'calculate_standard_deviation(numbers=get_fibonacci_sequence(n=10))']
model_generated_function : 
['get_fibonacci_sequence(n = 10)', "calculate_standard_deviation(numbers = 'get_fibonacci_sequence(n=10)')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 9
ground_truth_function: ["get_company_name_by_stock_name(stock_name='AAPL')", 'math_lcm(a=12, b=18)', 'calculate_triangle_area(base=10, height=15)']
model_generated_function : 
["get_company_name_by_stock_name(stock_name = 'AAPL')", 'math_lcm(a = 12, b = 18)', 'calculate_triangle_area(base = 10, height = 15)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 10
ground_truth_function: ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=False)", "convert_currency(amount=500*500, from_currency='USD', to_currency='EUR')"]
model_generated_function : 
["convert_currency(amount = 500, from_currency = 'USD', to_currency = 'EUR')"]
compare reuslt: False
ground_truth_function: ['"math_gcd(a=36, b=48)"', '"estimate_derivative(function=lambda x:x**2, x=5)"']
model_generated_function : 
['math_gcd(a = 36, b = 48)', "estimate_derivative(function = 'f(x) = x^2', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 11
ground_truth_function: ["find_term_on_urban_dictionary(term='Bitcoin')", "convert_currency(amount=1000, from_currency='CNY', to_currency='USD')", "convert_currency(amount=1000, from_currency='CNY', to_currency='EUR')", 'get_distance(pointA=(3,5)', 'pointB=(7,9))']
model_generated_function : 
["find_term_on_urban_dictionary(term = 'Bitcoin')", "convert_currency(amount = 1000, from_currency = 'CNY', to_currency = 'USD')", "convert_currency(amount = 1000, from_currency = 'CNY', to_currency = 'EUR')", "get_distance(pointA = '(3,5)', pointB = '(7,9)')"]
compare reuslt: False
ground_truth_function: ['calculate_electrostatic_potential_energy(charge=5, voltage=10)', 'geometry_area_circle(radius=7)']
model_generated_function : 
['calculate_electrostatic_potential_energy(charge = 5, voltage = 10)', 'geometry_area_circle(radius = 7)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 12
ground_truth_function: ["get_covid_death_by_country(country='Italy')", "get_covid_death_by_country(country='Spain')", "get_active_covid_case_by_country(country='Italy')", "get_active_covid_case_by_country(country='Spain')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Italy')", "get_active_covid_case_by_country(country = 'Italy')", "get_covid_death_by_country(country = 'Spain')", "get_active_covid_case_by_country(country = 'Spain')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 13
ground_truth_function: ['math_gcd(a=1200, b=21406)', "get_stock_price_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
['math_gcd(a = 1200, b = 21406)', "get_stock_price_by_stock_name(stock_name = 'AAPL')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 14
ground_truth_function: ["get_coordinate_by_ip_address(ip_address='192.168.1.1')", "get_covid_death_by_country(country='Italy')"]
model_generated_function : 
["get_coordinate_by_ip_address(ip_address = '192.168.1.1')", "get_covid_death_by_country(country = 'Italy')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ['calculate_mean([1,3,4,6,8])', "get_coordinates_from_city(city_name='Cupertino')"]
model_generated_function : 
['calculate_mean(numbers = [1, 3, 4, 6, 8])', "get_coordinates_from_city(city_name = 'Cupertino')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ["get_product_name_by_amazon_ASIN(ASIN='B08N5WRWNW')", 'calculate_electrostatic_potential_energy(charge=5, voltage=10)', "retrieve_holiday_by_year(year='2022', country='US')", "get_covid_death_by_country(country='Italy')"]
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08N5WRWNW')", 'calculate_electrostatic_potential_energy(charge = 5, voltage = 10)', "retrieve_holiday_by_year(year = '2022', country = 'US')", "get_covid_death_by_country(country = 'Italy')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 17
ground_truth_function: ['get_fibonacci_sequence(n=10)', 'math_gcd(a=5, b=8)', 'get_distance(pointA=(3, 4)', 'pointB=(8, 10))']
'NoneType' object has no attribute 'replace'
model_generated_function : None
ground_truth_function: ['get_fibonacci_sequence(n=10)', "get_stock_price_by_stock_name(stock_name='MSFT')"]
model_generated_function : 
['get_fibonacci_sequence(n = 10)', "get_stock_price_by_stock_name(stock_name = 'Microsoft')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
ground_truth_function: ["get_covid_death_by_country(country='Brazil')", "get_price_by_amazon_ASIN(ASIN='B08N5WRWNW')", "find_term_on_urban_dictionary(term='Savage')"]
model_generated_function : 
["get_covid_death_by_country(country = 'Brazil')", "get_price_by_amazon_ASIN(ASIN = 'B08N5WRWNW')", "find_term_on_urban_dictionary(term = 'Savage')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ['calculate_standard_deviation(numbers=[23,436,1231,123])', 'mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)', "get_coordinates_from_city(city_name='San Francisco')"]
model_generated_function : 
['calculate_standard_deviation(numbers = [23, 436, 1231, 123])', 'mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)', "get_coordinates_from_city(city_name = 'San Francisco')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 20
ground_truth_function: ['"get_product_name_by_amazon_ASIN(ASIN=\'B08JG8DQ7C\')"', '"calculate_permutations(n=10, k=4)"', '"math_gcd(a=36, b=48)"', '"mortgage_calculator(loan_amount=200000, interest_rate=0.05, loan_period=30)"']
model_generated_function : 
["get_product_name_by_amazon_ASIN(ASIN = 'B08JG8DQ7C')", 'calculate_permutations(n = 10, k = 4)', 'math_gcd(a = 36, b = 48)', 'mortgage_calculator(loan_amount = 200000, interest_rate = 5, loan_period = 30)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 21
ground_truth_function: ["get_rating_by_amazon_ASIN(ASIN='B08N5WRWNW')", "get_rating_by_amazon_ASIN(ASIN='B07XJ8C8F5')", 'geometry_area_circle(radius=50)', 'geometry_area_circle(radius=75)']
model_generated_function : 
["get_rating_by_amazon_ASIN(ASIN = 'B08N5WRWNW')", "get_rating_by_amazon_ASIN(ASIN = 'B07XJ8C8F5')", "get_distance(pointA = 'B08N5WRWNW', pointB = 'B07XJ8C8F5')", 'geometry_area_circle(radius = 50)', 'geometry_area_circle(radius = 75)']
compare reuslt: False
ground_truth_function: ['estimate_derivative(function= lambda x:x**2, x=5)', 'geometry_area_circle(radius=10)', "get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits=False)", "get_active_covid_case_by_country(country='United States')"]
model_generated_function : 
["estimate_derivative(function = 'x^2', x = 5)", 'geometry_area_circle(radius = 10)', "get_stock_history(stock_name = 'Apple', interval = '1mo', diffandsplits = False)", "get_active_covid_case_by_country(country = 'United States')"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
ground_truth_function: ['"mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)"', '"get_stock_price_by_stock_name(stock_name=\'AAPL\')"', '"calculate_standard_deviation(numbers=[45, 67, 34, 89, 23, 56, 78, 90, 32, 67])"']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)', "get_stock_price_by_stock_name(stock_name = 'Apple Inc')", 'calculate_standard_deviation(numbers = [45, 67, 34, 89, 23, 56, 78, 90, 32, 67])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["get_time_zone_by_coord(long='120.97388', lat='23.973875')", 'geometry_area_circle(radius=15)', "get_stock_price_by_stock_name(stock_name='AAPL')"]
model_generated_function : 
["get_time_zone_by_coord(long = '120.97388', lat = '23.973875')", 'geometry_area_circle(radius = 15)', "get_stock_price_by_stock_name(stock_name = 'Apple Inc.')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 24
ground_truth_function: ['calc_binomial_probability(n=10, k=5, p=0.5)', "get_covid_death_by_country(country='Italy')", 'get_weather_data(coordinates=[40.7128, -74.0060])']
model_generated_function : 
['calc_binomial_probability(n = 10, k = 5, p = 0.5)', "get_covid_death_by_country(country = 'Italy')", 'get_weather_data(coordinates = [40.7128, -74.006])']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 25
ground_truth_function: ["get_zipcode_by_ip_address(ip_address='192.168.1.1')", "retrieve_city_based_on_zipcode(zipcode='08540')", 'calculate_displacement(initial_velocity=20, acceleration=2, time=10)']
model_generated_function : 
['calculate_displacement(initial_velocity = 20, acceleration = 2, time = 10)', "retrieve_city_based_on_zipcode(zipcode = '08540')"]
compare reuslt: False
ground_truth_function: ['mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]])', 'calculate_mean(numbers=[1,2,3,4])']
model_generated_function : 
['mat_mul(matA = [[1, 2], [3, 4]], matB = [[5, 6], [7, 8]])', 'calculate_mean(numbers = [1, 2, 3, 4])']
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 26
ground_truth_function: ['"convert_currency(amount=1000, from_currency=\'USD\', to_currency=\'EUR\')"', '"math_factorial(n=1000)"']
model_generated_function : 
["convert_currency(amount = 1000, from_currency = 'USD', to_currency = 'EUR')", 'math_factorial(n = 1000)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 27
ground_truth_function: ['calculate_density(mass=300, volume=50)', 'get_fibonacci_sequence(n=5)', 'math_gcd(a=300, b=50)']
model_generated_function : 
['calculate_density(mass = 300, volume = 50)', 'get_fibonacci_sequence(n = 5)', 'math_gcd(a = 300, b = 50)']
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 28
ground_truth_function: ['mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)', 'math_lcm(a=15, b=25)', 'math_factorial(n=7)', 'estimate_derivative(function= lambda x : 3*x**2 + 2*x - 1, x=5)']
model_generated_function : 
['mortgage_calculator(loan_amount = 350000, interest_rate = 3.5, loan_period = 30)', 'math_lcm(a = 15, b = 25)', 'math_factorial(n = 7)', "estimate_derivative(function = '3x^2 + 2x - 1', x = 5)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 29
ground_truth_function: ['quadratic_roots(a=2, b=-3, c=5)', 'estimate_derivative(function= lambda x: 2*x**2 - 3 * x + 5 , x=4)']
model_generated_function : 
['quadratic_roots(a = 2, b = -3, c = 5)', "estimate_derivative(function = 'quadratic_roots(a=2, b=-3, c=5)', x = 4)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 30
ground_truth_function: ['calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)', "get_price_by_amazon_ASIN(ASIN='B08K3PZP2H')", "retrieve_city_based_on_zipcode(zipcode='10001')", 'estimate_derivative(function=lambda x: 3*x**2 + 2*x - 1, x=2)']
model_generated_function : 
['calculate_future_value(present_value = 5000, interest_rate = 5, periods = 10)', "get_price_by_amazon_ASIN(ASIN = 'B08K3PZP2H')", "retrieve_city_based_on_zipcode(zipcode = '10001')", "estimate_derivative(function = '3x^2 + 2x - 1', x = 2)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 31
ground_truth_function: ['get_time_zone_by_coord(long="12.4924", lat="41.8902")', 'retrieve_holiday_by_year(year="2022", country=\'UK\')']
model_generated_function : 
["get_time_zone_by_coord(long = '12.4924', lat = '41.8902')", "retrieve_holiday_by_year(year = '2022', country = 'UK')"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 32
ground_truth_function: ["find_term_on_urban_dictionary(term='Hello World')", "get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits='True')", 'calculate_density(mass=10, volume=2)', 'sort_array(array=[5, 2, 9, 1, 7, 4, 6, 3, 8], reverse=True)']
Internal Server Error
model_generated_function : None
ground_truth_function: ['get_weather_data(coordinates=[45.4215, -75.6972])', 'calc_binomial_probability(n=5, k=3, p=0.5)']
model_generated_function : 
['get_weather_data(coordinates = [45.4215, -75.6972])', 'calc_binomial_probability(n = 5, k = 3, p = 0.5)']
model_generated_function_params_pair_count: 3
correct_params_count: 3
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 33
Accuracy: 0.82
-----------------------
**********************************

--------- scores ---------
{'executable_simple': '0.95', 'executable_parallel_function': '0.84', 'executable_multiple_function': '0.96', 'executable_parallel_multiple_function': '0.82'}
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 48.8584, 'lon': 2.2945, 'c': 1})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945, 'c': 1})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 1
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.7128, 'lon': -74.0060})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.7128, 'lon': -74.006})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 2
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.712776, 'lon': -74.005974, 'c': 1})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.712776, 'lon': -74.005974, 'c': 1})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 3
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.712776, 'lon': -74.005974})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.712776, 'lon': -74.005974})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 4
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.7128, 'lon': -74.0060, 'c': 1})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 40.7128, 'lon': -74.006, 'c': 1})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 5
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 48.8584, 'lon': 2.2945})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 6
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=10, params={'country': 'Uganda'}, stream=False)"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout = 10, stream = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 7
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=25, params={'country': 'France'})"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params = {'country': 'France'}, timeout = 25)"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 8
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params={'country': 'Japan'})"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params = {'country': 'Japan'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 9
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=10, params={'country': 'UK'}, stream=False)"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout = 10, stream = False)"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 10
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params={'country': 'Iran'})"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params = {'country': 'Iran'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 11
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params={'country': 'India'})"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, params = {'country': 'India'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 12
ground_truth_function: ["requests.get(url='https://covid-193.p.rapidapi.com/statistics', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout=5, params={'country': 'China'})"]
model_generated_function : 
["requests.get(url = 'https://covid-193.p.rapidapi.com/statistics', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'covid-193.p.rapidapi.com'}, timeout = 5)"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 13
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 14
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f4ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 15
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/USD')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 16
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 17
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 18
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 19
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 20
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 21
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 22
ground_truth_function: ["requests.get(url='https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function : 
["requests.get(url = 'https://v6.exchangerate-api.com/v6/4d4f464ee553f8065dbd95cb/latest/EUR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 23
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Meta'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Meta'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 24
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 25
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 26
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Apple'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Apple'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 27
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 28
ground_truth_function: ["requests.get(url='https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params={'search': 'Tesla'})"]
model_generated_function : 
["requests.get(url = 'https://yahoo-finance15.p.rapidapi.com/api/v1/markets/search', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'}, params = {'search': 'Tesla'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 29
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'fields': 'query,status,country', 'lang': 'fr'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'query,status,country', 'lang': 'fr'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 30
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'lang': 'fr'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query', 'lang': 'fr'})"]
model_generated_function_params_pair_count: 2
correct_params_count: 2
compare reuslt: Ture, current matched count: 31
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'fields': 'country,city,timezone', 'lang': 'fr'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'country,city,timezone', 'lang': 'fr'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 32
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'fields': 'city,country,isp', 'lang': 'es'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'city,country,isp', 'lang': 'es'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 33
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'fields': 'query,status,country', 'lang': 'de'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'query,status,country', 'lang': 'de'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 34
ground_truth_function: ["requests.get(url='http://ip-api.com/json', params={'fields': 'query,country', 'lang': 'es'})"]
model_generated_function : 
["requests.get(url = 'http://ip-api.com/json', params = {'fields': 'query,country', 'lang': 'es'})"]
model_generated_function_params_pair_count: 3
correct_params_count: 3
compare reuslt: Ture, current matched count: 35
ground_truth_function: ["requests.get(url='https://geocode.maps.co/search', params={'q': '5331 Rexford Court, Montgomery AL 36116', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'q': '5331 Rexford Court, Montgomery AL 36116', 'format': 'geojson', 'api_key': '65fe68824e7f3760331092odq60ce8c'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 36
ground_truth_function: ["requests.get(url='https://geocode.maps.co/search', params={'q': '886 Cannery Row, Monterey, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'q': '886 Cannery Row, Monterey, CA', 'format': 'json', 'api_key': '65fe68824e7f3760331092odq60ce8c'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 37
ground_truth_function: ["requests.get(url='https://geocode.maps.co/search', params={'q': '1600 Amphitheatre Parkway, Mountain View, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'q': '1600 Amphitheatre Parkway, Mountain View, CA', 'format': 'json', 'api_key': '65fe68824e7f3760331092odq60ce8c'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 38
ground_truth_function: ["requests.get(url='https://geocode.maps.co/search', params={'q': '450 Jane Stanford Way Stanford, CA 94305–2004, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'q': '450 Jane Stanford Way Stanford, CA 94305–2004', 'format': 'json', 'api_key': '65fe68824e7f3760331092odq60ce8c'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 39
ground_truth_function: ["requests.get(url='https://geocode.maps.co/reverse', params={'lat': 37.4224764, 'lon': -122.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 37.4224764, 'lon': -122.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 40
ground_truth_function: ["requests.get(url='https://geocode.maps.co/reverse', params={'lat': 63.65687, 'lon': 117.05229, 'api_key': '65fe68824e7f3760331092odq60ce8c'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 63.65687, 'lon': 117.05229, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 41
ground_truth_function: ["requests.get(url='https://geocode.maps.co/search', params={'q': 'Soda Hall, Berkeley, CA', 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/search', params = {'q': 'Soda Hall, Berkeley, CA', 'format': 'geojson'}, api_key = '65fe68824e7f3760331092odq60ce8c')"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 42
ground_truth_function: ["requests.get(url='https://geocode.maps.co/reverse', params={'lat': 39.4224764, 'lon': -112.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 39.4224764, 'lon': -112.0842499, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 43
ground_truth_function: ["requests.get(url='https://geocode.maps.co/reverse', params={'lat': 40.748817, 'lon': -73.985428, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 40.748817, 'lon': -73.985428, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'geojson'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 44
ground_truth_function: ["requests.get(url='https://geocode.maps.co/reverse', params={'lat': 48.8584, 'lon': 2.2945, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function : 
["requests.get(url = 'https://geocode.maps.co/reverse', params = {'lat': 48.8584, 'lon': 2.2945, 'api_key': '65fe68824e7f3760331092odq60ce8c', 'format': 'json'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 45
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'timezone': 'auto'})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.6895', 'longitude': '139.6917', 'hourly': 'temperature_2m_max,temperature_2m_min,wind_speed_10m_max,precipitation', 'temperature_unit': 'fahrenheit', 'timezone': 'GMT', 'forecast_days': 7})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 46
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '35.68', 'longitude': '-121.34', 'forecast_days': 10, 'daily': ['temperature_2m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'precipitation_unit': 'inch'})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.68', 'longitude': '-121.34', 'daily': 'temperature_2m_max,precipitation_sum', 'temperature_unit': 'fahrenheit', 'precipitation_unit': 'inch', 'forecast_days': 10})"]
model_generated_function_params_pair_count: 7
correct_params_count: 7
compare reuslt: Ture, current matched count: 47
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '35.6895', 'longitude': '139.6917', 'daily': ['temperature_2m_max', 'wind_speed_10m_max', 'precipitation_probability_mean'], 'temperature_unit': 'celsius', 'wind_speed_unit': 'kmh', 'precipitation_unit': 'mm'})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '35.6895N', 'longitude': '139.6917E', 'hourly': 'temperature_2m,wind_speed_10m_max,precipitation_probability_mean', 'daily': 'temperature_2m_max,wind_speed_10m_max,precipitation_sum', 'temperature_unit': 'celsius', 'wind_speed_unit': 'kmh', 'precipitation_unit': 'mm', 'forecast_days': 7})"]
model_generated_function_params_pair_count: 7
correct_params_count: 7
compare reuslt: Ture, current matched count: 48
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '47.8095', 'longitude': '13.0550', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'timezone': 'Europe/Vienna', 'forecast_days': 7})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '47.8095', 'longitude': '13.0550', 'daily': 'temperature_2m_max,temperature_2m_min,wind_speed_10m_max,precipitation_sum', 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'timezone': 'Europe/Vienna', 'forecast_days': 7})"]
model_generated_function_params_pair_count: 8
correct_params_count: 8
compare reuslt: Ture, current matched count: 49
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '39.113014', 'longitude': '-105.358887', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'mm', 'timezone': 'auto', 'forecast_days': 10})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '39.113014', 'longitude': '-105.358887', 'hourly': 'temperature_2m,wind_speed_10m', 'daily': 'temperature_2m_max,temperature_2m_min,precipitation_sum,weather_code', 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'timezone': 'America/Denver', 'forecast_days': 10})"]
model_generated_function_params_pair_count: 9
correct_params_count: 9
compare reuslt: Ture, current matched count: 50
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '37.8651', 'longitude': '-119.5383', 'hourly': ['temperature', 'windspeed', 'precipitation'], 'forecast_days': 10, 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'inch', 'timezone': 'auto'})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '37.8651', 'longitude': '-119.5383', 'hourly': 'temperature_2m,wind_speed_10m,precipitation', 'forecast_days': 10, 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'inch', 'timezone': 'auto'})"]
the function call params list cannot parse into dict.
the function call params list cannot parse into dict.
compare reuslt: Ture, current matched count: 51
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '46.0207,46.4836', 'longitude': '7.7491,9.8355', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'windspeed_10m_max', 'precipitation_sum'], 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'inch', 'timezone': 'auto', 'start_date': '2023-04-15', 'end_date': '2023-04-21'})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '46.0207,46.4836', 'longitude': '7.7491,9.8355', 'daily': 'temperature_2m_max,temperature_2m_min,precipitation_sum,precipitation_probability_max,precipitation_probability_min,precipitation_probability_mean,weather_code,sunrise,sunset,sunshine_duration,wind_speed_10m_max,wind_gusts_10m_max,wind_direction_10m_dominant', 'temperature_unit': 'fahrenheit', 'wind_speed_unit': 'mph', 'precipitation_unit': 'inch', 'timezone': 'auto', 'start_date': '2023-04-15', 'end_date': '2023-04-21'})"]
model_generated_function_params_pair_count: 10
correct_params_count: 10
compare reuslt: Ture, current matched count: 52
ground_truth_function: ["requests.get(url='https://api.open-meteo.com/v1/forecast', params={'latitude': '46.2028', 'longitude': '-121.4905', 'elevation': '3743', 'daily': ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum'], 'forecast_days': 10})"]
model_generated_function : 
["requests.get(url = 'https://api.open-meteo.com/v1/forecast', params = {'latitude': '46.2028', 'longitude': '-121.4905', 'elevation': '3743', 'daily': 'temperature_2m_max,temperature_2m_min,precipitation_sum', 'timezone': 'GMT', 'forecast_days': 10})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 53
ground_truth_function: ["requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'yeet'})"]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'yeet'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 54
ground_truth_function: ["requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'artwash'})"]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'artwash'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 55
ground_truth_function: ["requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'lit'})"]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'lit'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 56
ground_truth_function: ["requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'bet'})"]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'bet'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 57
ground_truth_function: ["requests.get(url='https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params={'term': 'swole'})"]
model_generated_function : 
["requests.get(url = 'https://mashape-community-urban-dictionary.p.rapidapi.com/define', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'mashape-community-urban-dictionary.p.rapidapi.com'}, params = {'term': 'swole'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 58
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'Barbie', 'y': '2023', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Barbie', 'y': '2023', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 59
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'The Social Network', 'y': '2010', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'The Social Network', 'y': '2010', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 60
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'The Social Network', 'plot': 'full', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'The Social Network', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 4
correct_params_count: 4
compare reuslt: Ture, current matched count: 61
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'Inception', 'y': '2010', 'plot': 'full', 'r': 'json','apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Inception', 'y': '2010', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 62
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'Gorilla', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Gorilla', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 63
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'Oppenheimer', 'y': '2023', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Oppenheimer', 'y': '2023', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 64
ground_truth_function: ["requests.get(url='http://www.omdbapi.com/', params={'t': 'Oppenheimer', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function : 
["requests.get(url = 'http://www.omdbapi.com/', params = {'t': 'Oppenheimer', 'y': '2023', 'plot': 'full', 'r': 'json', 'apikey': '8b5a9d56'})"]
model_generated_function_params_pair_count: 5
correct_params_count: 5
compare reuslt: Ture, current matched count: 65
ground_truth_function: ["requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 66
ground_truth_function: ["requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 67
ground_truth_function: ["requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/FR')"]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/FR')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 68
ground_truth_function: ["requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/JP')"]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/JP')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 69
ground_truth_function: ["requests.get(url='https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function : 
["requests.get(url = 'https://date.nager.at/api/v3/LongWeekend/2023/CA')"]
model_generated_function_params_pair_count: 1
correct_params_count: 1
compare reuslt: Ture, current matched count: 70
Accuracy: 1.0
-----------------------
**********************************

--------- scores ---------
{'rest': '1.0'}
test_category: rest
Generating: gorilla_openfunctions_v1_test_rest.json
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 48.8584, 'lon': 2.2945, 'c': 1})"]
model_generated_function : 
["requests.get(url = 'https://timezone-by-location.p.rapidapi.com/timezone', headers = {'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params = {'lat': 48.8584, 'lon': 2.2945, 'c': 1})"]
model_generated_function_params_pair_count: 6
correct_params_count: 6
compare reuslt: Ture, current matched count: 1
ground_truth_function: ["requests.get(url='https://timezone-by-location.p.rapidapi.com/timezone', headers={'X-RapidAPI-Key': '8a33a40231msh257adb8a2cc9440p10ae7cjsnf46f8c5eda1c', 'X-RapidAPI-Host': 'timezone-by-location.p.rapidapi.com'}, params={'lat': 40.7128, 'lon': -74.0060})"]
